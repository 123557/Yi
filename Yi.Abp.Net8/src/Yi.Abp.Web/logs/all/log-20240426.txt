2024-04-26 09:30:45.475 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-26 09:30:45.491 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-26 09:30:50.162 +08:00 [INF] Loaded ABP modules:
2024-04-26 09:30:50.162 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-26 09:30:50.162 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-26 09:30:50.162 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-26 09:30:50.162 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-26 09:30:50.162 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-26 09:30:50.162 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-26 09:30:50.162 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-26 09:30:50.162 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-26 09:30:50.162 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-26 09:30:50.162 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-26 09:30:50.162 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-26 09:30:50.162 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-26 09:30:50.162 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-26 09:30:50.162 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-26 09:30:50.162 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-26 09:30:50.162 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-26 09:30:50.162 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-26 09:30:50.162 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-26 09:30:50.162 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-26 09:30:50.162 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-26 09:30:50.162 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-26 09:30:50.162 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-26 09:30:50.162 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-26 09:30:50.162 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-26 09:30:50.162 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-26 09:30:50.162 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-26 09:30:50.162 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-26 09:30:50.162 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-26 09:30:50.162 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-26 09:30:50.162 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-26 09:30:50.162 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-26 09:30:50.162 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-26 09:30:50.162 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-26 09:30:50.162 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-26 09:30:50.162 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-26 09:30:50.162 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-26 09:30:50.162 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-26 09:30:50.162 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-26 09:30:50.162 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-26 09:30:50.162 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-26 09:30:50.162 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-26 09:30:50.162 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-26 09:30:50.162 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-26 09:30:50.162 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-26 09:30:50.162 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-26 09:30:50.162 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-26 09:30:50.162 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-26 09:30:50.163 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-26 09:30:50.163 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-26 09:30:50.163 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-26 09:30:50.163 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-26 09:30:50.163 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-26 09:30:50.163 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-26 09:30:50.163 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-04-26 09:30:50.163 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-04-26 09:30:50.163 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-04-26 09:30:50.163 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-04-26 09:30:50.163 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-04-26 09:30:50.163 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-26 09:30:50.163 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-26 09:30:50.163 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-26 09:30:50.163 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-26 09:30:50.163 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-26 09:30:50.163 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-26 09:30:50.163 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-26 09:30:50.163 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-26 09:30:50.163 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-26 09:30:50.163 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-26 09:30:50.163 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-26 09:30:50.163 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-26 09:30:50.163 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-26 09:30:50.168 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-26 09:30:50.173 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-26 09:30:50.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:50.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:50.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 09:30:50.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:50.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 09:30:50.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:50.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:50.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 09:30:50.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-26 09:30:50.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-26 09:30:50.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-26 09:30:50.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-26 09:30:50.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-26 09:30:50.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-26 09:30:50.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-26 09:30:50.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-26 09:30:50.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-26 09:30:50.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-26 09:30:50.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:50.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 09:30:51.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 09:30:51.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-26 09:30:51.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-26 09:30:51.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-26 09:30:51.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-26 09:30:51.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-26 09:30:51.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-26 09:30:51.022 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-26 09:30:51.022 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 09:30:51.033 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 09:30:51.048 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-26 09:30:51.048 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:30:51.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-26 09:30:51.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-26 09:30:51.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:30:51.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:30:51.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-26 09:30:51.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-26 09:30:51.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-26 09:30:51.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-26 09:30:51.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-26 09:30:51.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-26 09:30:51.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-26 09:30:51.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-26 09:30:51.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.056 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 09:30:51.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 09:30:51.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-26 09:30:51.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:30:51.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-26 09:30:51.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-26 09:30:51.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-26 09:30:51.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-26 09:30:51.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-26 09:30:51.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-26 09:30:51.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-26 09:30:51.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-26 09:30:51.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-26 09:30:51.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 09:30:51.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.093 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 09:30:51.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-26 09:30:51.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:30:51.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-26 09:30:51.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-26 09:30:51.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-26 09:30:51.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-26 09:30:51.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-26 09:30:51.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.102 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 09:30:51.104 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 09:30:51.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-26 09:30:51.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-26 09:30:51.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-26 09:30:51.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.124 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 09:30:51.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 09:30:51.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-26 09:30:51.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-26 09:30:51.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-26 09:30:51.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-26 09:30:51.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-26 09:30:51.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-26 09:30:51.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:30:51.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 09:30:51.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 09:30:51.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-26 09:30:51.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:30:51.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-26 09:30:51.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-26 09:30:51.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:30:51.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:30:51.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-26 09:30:51.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-26 09:30:51.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-26 09:30:51.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-26 09:30:51.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-26 09:30:51.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-26 09:30:51.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-26 09:30:51.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-26 09:30:51.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-26 09:30:51.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-26 09:30:51.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-26 09:30:51.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-26 09:30:51.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 09:30:51.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.208 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 09:30:51.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-26 09:30:51.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-26 09:30:51.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-26 09:30:51.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 09:30:51.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.224 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 09:30:51.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-26 09:30:51.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:30:51.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-26 09:30:51.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-26 09:30:51.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:30:51.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:30:51.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-26 09:30:51.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-26 09:30:51.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-26 09:30:51.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-26 09:30:51.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-26 09:30:51.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-26 09:30:51.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 09:30:51.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.250 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 09:30:51.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-26 09:30:51.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-26 09:30:51.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-26 09:30:51.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-26 09:30:51.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 09:30:51.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.273 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 09:30:51.281 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-26 09:30:51.281 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:30:51.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-26 09:30:51.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-26 09:30:51.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:30:51.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:30:51.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-26 09:30:51.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-26 09:30:51.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-26 09:30:51.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-26 09:30:51.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-26 09:30:51.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-26 09:30:51.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-26 09:30:51.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 09:30:51.290 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 09:30:51.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-26 09:30:51.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-26 09:30:51.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 09:30:51.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.325 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 09:30:51.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-26 09:30:51.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:30:51.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-26 09:30:51.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-26 09:30:51.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-26 09:30:51.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-26 09:30:51.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-26 09:30:51.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-26 09:30:51.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-26 09:30:51.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-26 09:30:51.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-26 09:30:51.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-26 09:30:51.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-26 09:30:51.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-26 09:30:51.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-26 09:30:51.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-26 09:30:51.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-26 09:30:51.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-26 09:30:51.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-26 09:30:51.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:30:51.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:30:51.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-26 09:30:51.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-26 09:30:51.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-26 09:30:51.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:30:51.334 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.334 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 09:30:51.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 09:30:51.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-26 09:30:51.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-26 09:30:51.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-26 09:30:51.357 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-26 09:30:51.357 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 09:30:51.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 09:30:51.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-26 09:30:51.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-26 09:30:51.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-26 09:30:51.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-26 09:30:51.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.383 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 09:30:51.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 09:30:51.403 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-26 09:30:51.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 09:30:51.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 09:30:51.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:30:51.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:30:51.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 09:30:51.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 09:30:51.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:30:51.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:30:51.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.469 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 09:30:51.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 09:30:51.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:30:51.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:30:51.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 09:30:51.499 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 09:30:51.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:30:51.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 09:30:51.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 09:30:51.535 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-26 09:30:51.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-26 09:30:51.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-26 09:30:51.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 09:30:51.543 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.548 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 09:30:51.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-26 09:30:51.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 09:30:51.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 09:30:51.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-26 09:30:51.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-26 09:30:51.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-26 09:30:51.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-26 09:30:51.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-26 09:30:51.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 09:30:51.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.616 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 09:30:51.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-26 09:30:51.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-26 09:30:51.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 09:30:51.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:30:51.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 09:30:51.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-26 09:30:51.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-26 09:30:51.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-26 09:30:51.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-26 09:30:51.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:30:51.659 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 09:30:51.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:30:51.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:30:51.902 +08:00 [DBG] =========Yi-SQL耗时13.2828毫秒=====
2024-04-26 09:30:51.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:30:51.920 +08:00 [DBG] =========Yi-SQL耗时1.483毫秒=====
2024-04-26 09:30:51.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:30:51.924 +08:00 [DBG] =========Yi-SQL耗时1.1334毫秒=====
2024-04-26 09:30:51.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:30:51.932 +08:00 [DBG] =========Yi-SQL耗时3.0312毫秒=====
2024-04-26 09:30:51.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:30:51.938 +08:00 [DBG] =========Yi-SQL耗时1.9175毫秒=====
2024-04-26 09:30:51.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:30:51.944 +08:00 [DBG] =========Yi-SQL耗时1.7382毫秒=====
2024-04-26 09:30:51.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:30:51.953 +08:00 [DBG] =========Yi-SQL耗时2.1763毫秒=====
2024-04-26 09:30:51.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-26 09:30:51.958 +08:00 [DBG] =========Yi-SQL耗时1.5361毫秒=====
2024-04-26 09:30:51.971 +08:00 [DBG] 耗时-1801ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-26 09:30:51.973 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 09:30:52.087 +08:00 [DBG] 耗时-112ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-26 09:30:52.090 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-26 09:30:52.109 +08:00 [DBG] 耗时-18ms,已加载模块-Volo.Abp.AspNetCore
2024-04-26 09:30:52.116 +08:00 [DBG] 耗时-6ms,已加载模块-Volo.Abp.Quartz
2024-04-26 09:30:52.141 +08:00 [DBG] 耗时-25ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 09:30:52.144 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-26 09:30:52.571 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-26 09:30:52.695 +08:00 [DBG] 耗时-550ms,已加载模块-Yi.Abp.Web
2024-04-26 09:30:52.696 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2520ms】==========
2024-04-26 09:30:52.804 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-26 09:30:52.804 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-26 09:30:52.804 +08:00 [INF] Hosting environment: Development
2024-04-26 09:30:52.804 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-26 09:31:22.237 +08:00 [INF] CORS policy execution successful.
2024-04-26 09:31:22.262 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 09:31:22.280 +08:00 [INF] Route matched with {action = "DoIt", controller = "Email", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DoItAsync() on controller Yi.Abp.Application.Services.EmailService (Yi.Abp.Application).
2024-04-26 09:31:22.330 +08:00 [ERR] The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.
System.FormatException: The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.
   at System.Convert.FromBase64CharPtr(Char* inputPtr, Int32 inputLength)
   at System.Convert.FromBase64String(String s)
   at Volo.Abp.Security.Encryption.StringEncryptionService.Decrypt(String cipherText, String passPhrase, Byte[] salt)
   at Volo.Abp.Settings.SettingEncryptionService.Decrypt(SettingDefinition settingDefinition, String encryptedValue)
2024-04-26 09:31:22.501 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 09:31:22.501 +08:00 [ERR] Setting value for 'Abp.Mailing.Smtp.Password' is null or empty!
Volo.Abp.AbpException: Setting value for 'Abp.Mailing.Smtp.Password' is null or empty!
   at Volo.Abp.Emailing.EmailSenderConfiguration.GetNotEmptySettingValueAsync(String name)
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.BuildClientAsync()
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.SendEmailAsync(MailMessage mail)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(MailMessage mail, Boolean normalize)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(String to, String subject, String body, Boolean isBodyHtml, AdditionalEmailSendingArgs additionalEmailSendingArgs)
   at Yi.Abp.Application.Services.EmailService.DoItAsync() in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Application\Services\EmailService.cs:line 20
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 09:31:22.507 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 09:31:22.564 +08:00 [INF] Executed action Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application) in 281.7869ms
2024-04-26 09:31:22.564 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 09:31:36.381 +08:00 [INF] CORS policy execution successful.
2024-04-26 09:31:36.382 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 09:31:36.383 +08:00 [INF] Route matched with {action = "DoIt", controller = "Email", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DoItAsync() on controller Yi.Abp.Application.Services.EmailService (Yi.Abp.Application).
2024-04-26 09:31:40.829 +08:00 [ERR] The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.
System.FormatException: The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.
   at System.Convert.FromBase64CharPtr(Char* inputPtr, Int32 inputLength)
   at System.Convert.FromBase64String(String s)
   at Volo.Abp.Security.Encryption.StringEncryptionService.Decrypt(String cipherText, String passPhrase, Byte[] salt)
   at Volo.Abp.Settings.SettingEncryptionService.Decrypt(SettingDefinition settingDefinition, String encryptedValue)
2024-04-26 09:31:40.900 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 09:31:40.900 +08:00 [ERR] Setting value for 'Abp.Mailing.Smtp.Password' is null or empty!
Volo.Abp.AbpException: Setting value for 'Abp.Mailing.Smtp.Password' is null or empty!
   at Volo.Abp.Emailing.EmailSenderConfiguration.GetNotEmptySettingValueAsync(String name)
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.BuildClientAsync()
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.SendEmailAsync(MailMessage mail)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(MailMessage mail, Boolean normalize)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(String to, String subject, String body, Boolean isBodyHtml, AdditionalEmailSendingArgs additionalEmailSendingArgs)
   at Yi.Abp.Application.Services.EmailService.DoItAsync() in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Application\Services\EmailService.cs:line 20
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 09:31:40.901 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 09:31:46.992 +08:00 [INF] Executed action Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application) in 10609.4829ms
2024-04-26 09:31:46.992 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 09:36:13.793 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-26 09:36:13.808 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-26 09:36:20.006 +08:00 [INF] Loaded ABP modules:
2024-04-26 09:36:20.007 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-26 09:36:20.007 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-26 09:36:20.007 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-26 09:36:20.007 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-26 09:36:20.007 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-26 09:36:20.007 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-26 09:36:20.007 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-26 09:36:20.007 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-26 09:36:20.007 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-26 09:36:20.007 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-26 09:36:20.007 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-26 09:36:20.007 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-26 09:36:20.007 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-26 09:36:20.007 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-04-26 09:36:20.007 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-26 09:36:20.007 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-26 09:36:20.007 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-26 09:36:20.007 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-26 09:36:20.014 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-26 09:36:20.020 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-26 09:36:20.756 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:20.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 09:36:20.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 09:36:20.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:20.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 09:36:20.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-26 09:36:20.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-26 09:36:20.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-26 09:36:20.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-26 09:36:20.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-26 09:36:20.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-26 09:36:20.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-26 09:36:20.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-26 09:36:20.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-26 09:36:20.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-26 09:36:20.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 09:36:20.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:20.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 09:36:20.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-26 09:36:20.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-26 09:36:20.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-26 09:36:20.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-26 09:36:20.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-26 09:36:20.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-26 09:36:20.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-26 09:36:20.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 09:36:20.883 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:20.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 09:36:20.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-26 09:36:20.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:36:20.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-26 09:36:20.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-26 09:36:20.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:36:20.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:36:20.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-26 09:36:20.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-26 09:36:20.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-26 09:36:20.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-26 09:36:20.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-26 09:36:20.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-26 09:36:20.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-26 09:36:20.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-26 09:36:20.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 09:36:20.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:20.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.921 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 09:36:20.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-26 09:36:20.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:36:20.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-26 09:36:20.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-26 09:36:20.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-26 09:36:20.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-26 09:36:20.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-26 09:36:20.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-26 09:36:20.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-26 09:36:20.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-26 09:36:20.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-26 09:36:20.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.931 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 09:36:20.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:20.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 09:36:20.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-26 09:36:20.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:36:20.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-26 09:36:20.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-26 09:36:20.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-26 09:36:20.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-26 09:36:20.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-26 09:36:20.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 09:36:20.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:20.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 09:36:20.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-26 09:36:20.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-26 09:36:20.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-26 09:36:20.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 09:36:20.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:20.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:20.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 09:36:20.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-26 09:36:20.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-26 09:36:20.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-26 09:36:20.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-26 09:36:20.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-26 09:36:20.997 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-26 09:36:20.997 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:20.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:36:21.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 09:36:21.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 09:36:21.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-26 09:36:21.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:36:21.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-26 09:36:21.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-26 09:36:21.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:36:21.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:36:21.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-26 09:36:21.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-26 09:36:21.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-26 09:36:21.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-26 09:36:21.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-26 09:36:21.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-26 09:36:21.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-26 09:36:21.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-26 09:36:21.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-26 09:36:21.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-26 09:36:21.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-26 09:36:21.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-26 09:36:21.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.043 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.043 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 09:36:21.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 09:36:21.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-26 09:36:21.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-26 09:36:21.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-26 09:36:21.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.071 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 09:36:21.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 09:36:21.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-26 09:36:21.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:36:21.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-26 09:36:21.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-26 09:36:21.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:36:21.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:36:21.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-26 09:36:21.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-26 09:36:21.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-26 09:36:21.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-26 09:36:21.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-26 09:36:21.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-26 09:36:21.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 09:36:21.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.104 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.104 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 09:36:21.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-26 09:36:21.114 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-26 09:36:21.114 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-26 09:36:21.114 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-26 09:36:21.114 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 09:36:21.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 09:36:21.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-26 09:36:21.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:36:21.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-26 09:36:21.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-26 09:36:21.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:36:21.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:36:21.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-26 09:36:21.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-26 09:36:21.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-26 09:36:21.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-26 09:36:21.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-26 09:36:21.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-26 09:36:21.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-26 09:36:21.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 09:36:21.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 09:36:21.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-26 09:36:21.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-26 09:36:21.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 09:36:21.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 09:36:21.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-26 09:36:21.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:36:21.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-26 09:36:21.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-26 09:36:21.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-26 09:36:21.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-26 09:36:21.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-26 09:36:21.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-26 09:36:21.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-26 09:36:21.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-26 09:36:21.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-26 09:36:21.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-26 09:36:21.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-26 09:36:21.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-26 09:36:21.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-26 09:36:21.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-26 09:36:21.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-26 09:36:21.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-26 09:36:21.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-26 09:36:21.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:36:21.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:36:21.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-26 09:36:21.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-26 09:36:21.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-26 09:36:21.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:36:21.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 09:36:21.204 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 09:36:21.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-26 09:36:21.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-26 09:36:21.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-26 09:36:21.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-26 09:36:21.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 09:36:21.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 09:36:21.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-26 09:36:21.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-26 09:36:21.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-26 09:36:21.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-26 09:36:21.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 09:36:21.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 09:36:21.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-26 09:36:21.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 09:36:21.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 09:36:21.281 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:36:21.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:36:21.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.289 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 09:36:21.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.304 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 09:36:21.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:36:21.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:36:21.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 09:36:21.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.322 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 09:36:21.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:36:21.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:36:21.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 09:36:21.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 09:36:21.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:36:21.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 09:36:21.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.367 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.374 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 09:36:21.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-26 09:36:21.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-26 09:36:21.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-26 09:36:21.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.383 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 09:36:21.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 09:36:21.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-26 09:36:21.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 09:36:21.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 09:36:21.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-26 09:36:21.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-26 09:36:21.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-26 09:36:21.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-26 09:36:21.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-26 09:36:21.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 09:36:21.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 09:36:21.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-26 09:36:21.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-26 09:36:21.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 09:36:21.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:36:21.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 09:36:21.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-26 09:36:21.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-26 09:36:21.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-26 09:36:21.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-26 09:36:21.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:36:21.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 09:36:21.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:36:21.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:36:21.578 +08:00 [DBG] =========Yi-SQL耗时9.3356毫秒=====
2024-04-26 09:36:21.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:36:21.593 +08:00 [DBG] =========Yi-SQL耗时1.0636毫秒=====
2024-04-26 09:36:21.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:36:21.598 +08:00 [DBG] =========Yi-SQL耗时1.2352毫秒=====
2024-04-26 09:36:21.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:36:21.605 +08:00 [DBG] =========Yi-SQL耗时2.3656毫秒=====
2024-04-26 09:36:21.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:36:21.609 +08:00 [DBG] =========Yi-SQL耗时1.1135毫秒=====
2024-04-26 09:36:21.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:36:21.613 +08:00 [DBG] =========Yi-SQL耗时1.0474毫秒=====
2024-04-26 09:36:21.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:36:21.620 +08:00 [DBG] =========Yi-SQL耗时1.7678毫秒=====
2024-04-26 09:36:21.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-26 09:36:21.624 +08:00 [DBG] =========Yi-SQL耗时0.8973毫秒=====
2024-04-26 09:36:21.638 +08:00 [DBG] 耗时-1623ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-26 09:36:21.640 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 09:36:21.700 +08:00 [DBG] 耗时-58ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-26 09:36:21.703 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-26 09:36:21.718 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-04-26 09:36:21.723 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-26 09:36:21.744 +08:00 [DBG] 耗时-21ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 09:36:21.747 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-26 09:36:22.034 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-26 09:36:22.112 +08:00 [DBG] 耗时-364ms,已加载模块-Yi.Abp.Web
2024-04-26 09:36:22.113 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2091ms】==========
2024-04-26 09:36:22.202 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-26 09:36:22.202 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-26 09:36:22.202 +08:00 [INF] Hosting environment: Development
2024-04-26 09:36:22.202 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-26 09:39:10.928 +08:00 [INF] CORS policy execution successful.
2024-04-26 09:39:10.956 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 09:39:10.973 +08:00 [INF] Route matched with {action = "DoIt", controller = "Email", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DoItAsync() on controller Yi.Abp.Application.Services.EmailService (Yi.Abp.Application).
2024-04-26 09:42:40.536 +08:00 [ERR] The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.
System.FormatException: The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.
   at System.Convert.FromBase64CharPtr(Char* inputPtr, Int32 inputLength)
   at System.Convert.FromBase64String(String s)
   at Volo.Abp.Security.Encryption.StringEncryptionService.Decrypt(String cipherText, String passPhrase, Byte[] salt)
   at Volo.Abp.Settings.SettingEncryptionService.Decrypt(SettingDefinition settingDefinition, String encryptedValue)
2024-04-26 09:42:40.806 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 09:42:40.806 +08:00 [ERR] Setting value for 'Abp.Mailing.Smtp.Password' is null or empty!
Volo.Abp.AbpException: Setting value for 'Abp.Mailing.Smtp.Password' is null or empty!
   at Volo.Abp.Emailing.EmailSenderConfiguration.GetNotEmptySettingValueAsync(String name)
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.BuildClientAsync()
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.SendEmailAsync(MailMessage mail)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(MailMessage mail, Boolean normalize)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(String to, String subject, String body, Boolean isBodyHtml, AdditionalEmailSendingArgs additionalEmailSendingArgs)
   at Yi.Abp.Application.Services.EmailService.DoItAsync() in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Application\Services\EmailService.cs:line 20
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 09:42:40.821 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 09:42:46.183 +08:00 [INF] Executed action Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application) in 215206.465ms
2024-04-26 09:42:46.183 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 09:54:10.204 +08:00 [INF] CORS policy execution successful.
2024-04-26 09:54:25.424 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 09:54:25.433 +08:00 [INF] Route matched with {action = "DoIt", controller = "Email", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DoItAsync() on controller Yi.Abp.Application.Services.EmailService (Yi.Abp.Application).
2024-04-26 09:54:25.487 +08:00 [ERR] The input data is not a complete block.
System.Security.Cryptography.CryptographicException: The input data is not a complete block.
   at System.Security.Cryptography.UniversalCryptoDecryptor.UncheckedTransformFinalBlock(ReadOnlySpan`1 inputBuffer, Span`1 outputBuffer)
   at System.Security.Cryptography.UniversalCryptoDecryptor.UncheckedTransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)
   at System.Security.Cryptography.UniversalCryptoTransform.TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)
   at System.Security.Cryptography.CryptoStream.ReadAsyncCore(Memory`1 buffer, CancellationToken cancellationToken, Boolean useAsync)
   at System.Security.Cryptography.CryptoStream.Read(Byte[] buffer, Int32 offset, Int32 count)
   at Volo.Abp.Security.Encryption.StringEncryptionService.Decrypt(String cipherText, String passPhrase, Byte[] salt)
   at Volo.Abp.Settings.SettingEncryptionService.Decrypt(SettingDefinition settingDefinition, String encryptedValue)
2024-04-26 09:54:25.573 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 09:54:25.573 +08:00 [ERR] Setting value for 'Abp.Mailing.Smtp.Password' is null or empty!
Volo.Abp.AbpException: Setting value for 'Abp.Mailing.Smtp.Password' is null or empty!
   at Volo.Abp.Emailing.EmailSenderConfiguration.GetNotEmptySettingValueAsync(String name)
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.BuildClientAsync()
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.SendEmailAsync(MailMessage mail)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(MailMessage mail, Boolean normalize)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(String to, String subject, String body, Boolean isBodyHtml, AdditionalEmailSendingArgs additionalEmailSendingArgs)
   at Yi.Abp.Application.Services.EmailService.DoItAsync() in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Application\Services\EmailService.cs:line 20
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 09:54:25.576 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 09:54:25.583 +08:00 [INF] Executed action Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application) in 149.3166ms
2024-04-26 09:54:25.583 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 09:54:46.122 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-26 09:54:46.143 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-26 09:54:50.848 +08:00 [INF] Loaded ABP modules:
2024-04-26 09:54:50.848 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-26 09:54:50.848 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-26 09:54:50.848 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-26 09:54:50.848 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-26 09:54:50.848 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-26 09:54:50.848 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-26 09:54:50.848 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-26 09:54:50.848 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-26 09:54:50.848 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-26 09:54:50.848 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-26 09:54:50.848 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-26 09:54:50.848 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-26 09:54:50.848 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-26 09:54:50.848 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-26 09:54:50.848 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-26 09:54:50.848 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-26 09:54:50.848 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-26 09:54:50.848 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-26 09:54:50.848 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-26 09:54:50.848 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-26 09:54:50.848 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-26 09:54:50.848 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-26 09:54:50.848 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-26 09:54:50.848 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-26 09:54:50.848 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-26 09:54:50.848 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-26 09:54:50.848 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-26 09:54:50.848 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-26 09:54:50.848 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-26 09:54:50.848 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-26 09:54:50.848 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-26 09:54:50.848 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-26 09:54:50.848 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-26 09:54:50.848 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-26 09:54:50.848 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-26 09:54:50.848 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-26 09:54:50.848 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-26 09:54:50.848 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-26 09:54:50.848 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-26 09:54:50.848 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-26 09:54:50.848 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-26 09:54:50.848 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-26 09:54:50.848 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-26 09:54:50.848 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-26 09:54:50.848 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-26 09:54:50.848 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-26 09:54:50.848 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-26 09:54:50.848 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-26 09:54:50.848 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-26 09:54:50.848 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-26 09:54:50.848 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-26 09:54:50.849 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-26 09:54:50.849 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-26 09:54:50.849 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-26 09:54:50.849 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-26 09:54:50.849 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-26 09:54:50.849 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-26 09:54:50.849 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-26 09:54:50.849 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-26 09:54:50.849 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-26 09:54:50.849 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-26 09:54:50.849 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-26 09:54:50.849 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-26 09:54:50.849 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-26 09:54:50.849 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-04-26 09:54:50.849 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-04-26 09:54:50.849 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-04-26 09:54:50.849 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-04-26 09:54:50.849 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-04-26 09:54:50.849 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-26 09:54:50.849 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-26 09:54:50.849 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-26 09:54:50.849 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-26 09:54:50.849 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-26 09:54:50.849 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-26 09:54:50.849 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-26 09:54:50.849 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-26 09:54:50.849 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-26 09:54:50.849 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-26 09:54:50.849 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-26 09:54:50.849 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-26 09:54:50.849 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-26 09:54:50.857 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-26 09:54:50.862 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-26 09:54:51.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:51.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 09:54:51.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 09:54:51.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:51.766 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 09:54:51.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-26 09:54:51.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-26 09:54:51.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-26 09:54:51.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-26 09:54:51.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-26 09:54:51.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-26 09:54:51.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-26 09:54:51.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-26 09:54:51.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-26 09:54:51.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-26 09:54:51.782 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.790 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 09:54:51.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:51.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 09:54:51.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-26 09:54:51.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-26 09:54:51.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-26 09:54:51.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-26 09:54:51.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-26 09:54:51.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-26 09:54:51.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-26 09:54:51.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 09:54:51.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:51.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 09:54:51.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-26 09:54:51.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:54:51.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-26 09:54:51.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-26 09:54:51.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:54:51.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:54:51.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-26 09:54:51.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-26 09:54:51.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-26 09:54:51.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-26 09:54:51.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-26 09:54:51.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-26 09:54:51.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-26 09:54:51.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-26 09:54:51.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 09:54:51.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:51.855 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 09:54:51.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-26 09:54:51.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:54:51.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-26 09:54:51.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-26 09:54:51.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-26 09:54:51.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-26 09:54:51.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-26 09:54:51.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-26 09:54:51.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-26 09:54:51.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-26 09:54:51.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-26 09:54:51.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 09:54:51.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:51.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 09:54:51.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-26 09:54:51.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:54:51.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-26 09:54:51.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-26 09:54:51.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-26 09:54:51.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-26 09:54:51.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-26 09:54:51.893 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.893 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 09:54:51.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:51.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.914 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 09:54:51.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-26 09:54:51.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-26 09:54:51.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-26 09:54:51.917 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 09:54:51.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:51.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 09:54:51.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-26 09:54:51.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-26 09:54:51.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-26 09:54:51.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-26 09:54:51.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-26 09:54:51.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-26 09:54:51.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:54:51.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 09:54:51.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:51.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:51.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 09:54:51.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-26 09:54:51.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:54:51.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-26 09:54:51.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-26 09:54:51.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:54:51.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:54:51.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-26 09:54:51.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-26 09:54:51.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-26 09:54:51.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-26 09:54:51.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-26 09:54:51.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-26 09:54:51.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-26 09:54:51.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-26 09:54:51.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-26 09:54:51.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-26 09:54:51.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-26 09:54:51.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-26 09:54:51.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:51.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 09:54:52.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.016 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 09:54:52.027 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-26 09:54:52.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-26 09:54:52.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-26 09:54:52.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 09:54:52.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.056 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.057 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 09:54:52.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-26 09:54:52.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:54:52.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-26 09:54:52.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-26 09:54:52.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:54:52.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:54:52.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-26 09:54:52.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-26 09:54:52.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-26 09:54:52.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-26 09:54:52.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-26 09:54:52.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-26 09:54:52.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 09:54:52.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 09:54:52.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-26 09:54:52.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-26 09:54:52.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-26 09:54:52.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-26 09:54:52.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 09:54:52.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.104 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.109 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 09:54:52.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-26 09:54:52.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:54:52.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-26 09:54:52.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-26 09:54:52.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:54:52.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:54:52.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-26 09:54:52.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-26 09:54:52.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-26 09:54:52.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-26 09:54:52.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-26 09:54:52.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-26 09:54:52.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-26 09:54:52.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 09:54:52.125 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 09:54:52.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-26 09:54:52.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-26 09:54:52.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 09:54:52.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 09:54:52.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-26 09:54:52.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-26 09:54:52.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-26 09:54:52.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-26 09:54:52.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-26 09:54:52.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-26 09:54:52.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-26 09:54:52.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-26 09:54:52.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-26 09:54:52.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-26 09:54:52.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-26 09:54:52.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-26 09:54:52.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-26 09:54:52.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-26 09:54:52.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-26 09:54:52.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-26 09:54:52.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-26 09:54:52.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-26 09:54:52.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-26 09:54:52.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 09:54:52.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 09:54:52.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-26 09:54:52.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-26 09:54:52.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-26 09:54:52.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:54:52.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 09:54:52.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 09:54:52.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-26 09:54:52.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-26 09:54:52.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-26 09:54:52.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-26 09:54:52.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 09:54:52.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 09:54:52.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-26 09:54:52.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-26 09:54:52.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-26 09:54:52.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-26 09:54:52.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 09:54:52.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 09:54:52.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-26 09:54:52.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.249 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 09:54:52.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 09:54:52.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:54:52.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:54:52.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 09:54:52.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.286 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 09:54:52.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:54:52.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:54:52.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 09:54:52.307 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 09:54:52.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:54:52.323 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:54:52.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 09:54:52.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 09:54:52.348 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 09:54:52.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 09:54:52.357 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.363 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 09:54:52.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-26 09:54:52.374 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-26 09:54:52.374 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-26 09:54:52.374 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 09:54:52.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 09:54:52.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-26 09:54:52.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.402 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.403 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 09:54:52.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 09:54:52.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-26 09:54:52.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-26 09:54:52.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-26 09:54:52.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-26 09:54:52.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-26 09:54:52.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 09:54:52.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 09:54:52.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-26 09:54:52.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-26 09:54:52.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 09:54:52.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 09:54:52.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 09:54:52.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-26 09:54:52.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-26 09:54:52.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-26 09:54:52.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-26 09:54:52.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 09:54:52.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 09:54:52.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 09:54:52.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:54:52.644 +08:00 [DBG] =========Yi-SQL耗时14.9896毫秒=====
2024-04-26 09:54:52.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:54:52.661 +08:00 [DBG] =========Yi-SQL耗时1.431毫秒=====
2024-04-26 09:54:52.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:54:52.665 +08:00 [DBG] =========Yi-SQL耗时1.022毫秒=====
2024-04-26 09:54:52.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:54:52.673 +08:00 [DBG] =========Yi-SQL耗时2.6461毫秒=====
2024-04-26 09:54:52.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:54:52.677 +08:00 [DBG] =========Yi-SQL耗时1.1141毫秒=====
2024-04-26 09:54:52.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:54:52.681 +08:00 [DBG] =========Yi-SQL耗时1.4937毫秒=====
2024-04-26 09:54:52.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 09:54:52.687 +08:00 [DBG] =========Yi-SQL耗时1.2049毫秒=====
2024-04-26 09:54:52.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-26 09:54:52.692 +08:00 [DBG] =========Yi-SQL耗时1.7297毫秒=====
2024-04-26 09:54:52.701 +08:00 [DBG] 耗时-1843ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-26 09:54:52.910 +08:00 [DBG] 耗时-206ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-26 09:54:52.914 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-26 09:54:52.930 +08:00 [DBG] 耗时-16ms,已加载模块-Volo.Abp.AspNetCore
2024-04-26 09:54:52.936 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-26 09:54:52.958 +08:00 [DBG] 耗时-21ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 09:54:52.962 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-26 09:54:53.247 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-26 09:54:53.316 +08:00 [DBG] 耗时-354ms,已加载模块-Yi.Abp.Web
2024-04-26 09:54:53.317 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2452ms】==========
2024-04-26 09:54:53.417 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-26 09:54:53.417 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-26 09:54:53.417 +08:00 [INF] Hosting environment: Development
2024-04-26 09:54:53.417 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-26 09:55:13.812 +08:00 [INF] CORS policy execution successful.
2024-04-26 09:55:13.839 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 09:55:13.857 +08:00 [INF] Route matched with {action = "DoIt", controller = "Email", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DoItAsync() on controller Yi.Abp.Application.Services.EmailService (Yi.Abp.Application).
2024-04-26 09:55:13.918 +08:00 [ERR] The input data is not a complete block.
System.Security.Cryptography.CryptographicException: The input data is not a complete block.
   at System.Security.Cryptography.UniversalCryptoDecryptor.UncheckedTransformFinalBlock(ReadOnlySpan`1 inputBuffer, Span`1 outputBuffer)
   at System.Security.Cryptography.UniversalCryptoDecryptor.UncheckedTransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)
   at System.Security.Cryptography.UniversalCryptoTransform.TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)
   at System.Security.Cryptography.CryptoStream.ReadAsyncCore(Memory`1 buffer, CancellationToken cancellationToken, Boolean useAsync)
   at System.Security.Cryptography.CryptoStream.Read(Byte[] buffer, Int32 offset, Int32 count)
   at Volo.Abp.Security.Encryption.StringEncryptionService.Decrypt(String cipherText, String passPhrase, Byte[] salt)
   at Volo.Abp.Settings.SettingEncryptionService.Decrypt(SettingDefinition settingDefinition, String encryptedValue)
2024-04-26 09:55:14.040 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 09:55:14.040 +08:00 [ERR] Setting value for 'Abp.Mailing.Smtp.Password' is null or empty!
Volo.Abp.AbpException: Setting value for 'Abp.Mailing.Smtp.Password' is null or empty!
   at Volo.Abp.Emailing.EmailSenderConfiguration.GetNotEmptySettingValueAsync(String name)
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.BuildClientAsync()
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.SendEmailAsync(MailMessage mail)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(MailMessage mail, Boolean normalize)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(String to, String subject, String body, Boolean isBodyHtml, AdditionalEmailSendingArgs additionalEmailSendingArgs)
   at Yi.Abp.Application.Services.EmailService.DoItAsync() in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Application\Services\EmailService.cs:line 20
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 09:55:14.047 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 09:55:14.113 +08:00 [INF] Executed action Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application) in 253.4931ms
2024-04-26 09:55:14.114 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 10:19:00.455 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-26 10:19:00.473 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-26 10:19:05.513 +08:00 [INF] Loaded ABP modules:
2024-04-26 10:19:05.514 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-26 10:19:05.514 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-26 10:19:05.514 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-26 10:19:05.514 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-26 10:19:05.514 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-26 10:19:05.514 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-26 10:19:05.514 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-26 10:19:05.514 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-26 10:19:05.514 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-26 10:19:05.514 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-26 10:19:05.514 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-26 10:19:05.514 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-26 10:19:05.514 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-26 10:19:05.514 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-04-26 10:19:05.514 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-26 10:19:05.514 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-26 10:19:05.514 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-26 10:19:05.514 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-26 10:19:05.519 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-26 10:19:05.524 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-26 10:19:06.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 10:19:06.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 10:19:06.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 10:19:06.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-26 10:19:06.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-26 10:19:06.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-26 10:19:06.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-26 10:19:06.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-26 10:19:06.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-26 10:19:06.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-26 10:19:06.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-26 10:19:06.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-26 10:19:06.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-26 10:19:06.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 10:19:06.496 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 10:19:06.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-26 10:19:06.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-26 10:19:06.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-26 10:19:06.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-26 10:19:06.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-26 10:19:06.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-26 10:19:06.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-26 10:19:06.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 10:19:06.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 10:19:06.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-26 10:19:06.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:19:06.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-26 10:19:06.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-26 10:19:06.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 10:19:06.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 10:19:06.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-26 10:19:06.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-26 10:19:06.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-26 10:19:06.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-26 10:19:06.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-26 10:19:06.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-26 10:19:06.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-26 10:19:06.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-26 10:19:06.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 10:19:06.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 10:19:06.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-26 10:19:06.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:19:06.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-26 10:19:06.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-26 10:19:06.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-26 10:19:06.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-26 10:19:06.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-26 10:19:06.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-26 10:19:06.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-26 10:19:06.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-26 10:19:06.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-26 10:19:06.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 10:19:06.572 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 10:19:06.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-26 10:19:06.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:19:06.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-26 10:19:06.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-26 10:19:06.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-26 10:19:06.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-26 10:19:06.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-26 10:19:06.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 10:19:06.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 10:19:06.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-26 10:19:06.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-26 10:19:06.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-26 10:19:06.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.618 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 10:19:06.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 10:19:06.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-26 10:19:06.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-26 10:19:06.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-26 10:19:06.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-26 10:19:06.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-26 10:19:06.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-26 10:19:06.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:19:06.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 10:19:06.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.661 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 10:19:06.669 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-26 10:19:06.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:19:06.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-26 10:19:06.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-26 10:19:06.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 10:19:06.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 10:19:06.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-26 10:19:06.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-26 10:19:06.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-26 10:19:06.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-26 10:19:06.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-26 10:19:06.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-26 10:19:06.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-26 10:19:06.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-26 10:19:06.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-26 10:19:06.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-26 10:19:06.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-26 10:19:06.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-26 10:19:06.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 10:19:06.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 10:19:06.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-26 10:19:06.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-26 10:19:06.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-26 10:19:06.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 10:19:06.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.713 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.713 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 10:19:06.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-26 10:19:06.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:19:06.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-26 10:19:06.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-26 10:19:06.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 10:19:06.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 10:19:06.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-26 10:19:06.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-26 10:19:06.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-26 10:19:06.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-26 10:19:06.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-26 10:19:06.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-26 10:19:06.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 10:19:06.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.738 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 10:19:06.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-26 10:19:06.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-26 10:19:06.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-26 10:19:06.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-26 10:19:06.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 10:19:06.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.766 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 10:19:06.768 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-26 10:19:06.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:19:06.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-26 10:19:06.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-26 10:19:06.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 10:19:06.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 10:19:06.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-26 10:19:06.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-26 10:19:06.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-26 10:19:06.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-26 10:19:06.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-26 10:19:06.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-26 10:19:06.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-26 10:19:06.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 10:19:06.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.792 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 10:19:06.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-26 10:19:06.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-26 10:19:06.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 10:19:06.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 10:19:06.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-26 10:19:06.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:19:06.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-26 10:19:06.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-26 10:19:06.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-26 10:19:06.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-26 10:19:06.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-26 10:19:06.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-26 10:19:06.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-26 10:19:06.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-26 10:19:06.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-26 10:19:06.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-26 10:19:06.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-26 10:19:06.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-26 10:19:06.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-26 10:19:06.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-26 10:19:06.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-26 10:19:06.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-26 10:19:06.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-26 10:19:06.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 10:19:06.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 10:19:06.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-26 10:19:06.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-26 10:19:06.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-26 10:19:06.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:19:06.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 10:19:06.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.839 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.845 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 10:19:06.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-26 10:19:06.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-26 10:19:06.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-26 10:19:06.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-26 10:19:06.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.855 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 10:19:06.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.867 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 10:19:06.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-26 10:19:06.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-26 10:19:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-26 10:19:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-26 10:19:06.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 10:19:06.883 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 10:19:06.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-26 10:19:06.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 10:19:06.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 10:19:06.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:19:06.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:19:06.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 10:19:06.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 10:19:06.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:19:06.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:19:06.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 10:19:06.965 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 10:19:06.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:19:06.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:19:06.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 10:19:06.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:06.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:06.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:06.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 10:19:07.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:19:07.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 10:19:07.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:07.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 10:19:07.027 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-26 10:19:07.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-26 10:19:07.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-26 10:19:07.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 10:19:07.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:07.042 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 10:19:07.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-26 10:19:07.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.057 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.057 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 10:19:07.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:07.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 10:19:07.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-26 10:19:07.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-26 10:19:07.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-26 10:19:07.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-26 10:19:07.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-26 10:19:07.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 10:19:07.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:07.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.096 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 10:19:07.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-26 10:19:07.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-26 10:19:07.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.104 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 10:19:07.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:19:07.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 10:19:07.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-26 10:19:07.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-26 10:19:07.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-26 10:19:07.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-26 10:19:07.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:19:07.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 10:19:07.129 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:19:07.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:19:07.230 +08:00 [DBG] =========Yi-SQL耗时10.1667毫秒=====
2024-04-26 10:19:07.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:19:07.246 +08:00 [DBG] =========Yi-SQL耗时2.2791毫秒=====
2024-04-26 10:19:07.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:19:07.252 +08:00 [DBG] =========Yi-SQL耗时1.5231毫秒=====
2024-04-26 10:19:07.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:19:07.260 +08:00 [DBG] =========Yi-SQL耗时2.2916毫秒=====
2024-04-26 10:19:07.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:19:07.264 +08:00 [DBG] =========Yi-SQL耗时1.1445毫秒=====
2024-04-26 10:19:07.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:19:07.268 +08:00 [DBG] =========Yi-SQL耗时1.256毫秒=====
2024-04-26 10:19:07.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:19:07.275 +08:00 [DBG] =========Yi-SQL耗时1.4792毫秒=====
2024-04-26 10:19:07.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-26 10:19:07.280 +08:00 [DBG] =========Yi-SQL耗时1.0376毫秒=====
2024-04-26 10:19:07.291 +08:00 [DBG] 耗时-1770ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-26 10:19:07.294 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 10:19:07.366 +08:00 [DBG] 耗时-71ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-26 10:19:07.371 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.EventBus
2024-04-26 10:19:07.391 +08:00 [DBG] 耗时-20ms,已加载模块-Volo.Abp.AspNetCore
2024-04-26 10:19:07.398 +08:00 [DBG] 耗时-6ms,已加载模块-Volo.Abp.Quartz
2024-04-26 10:19:07.426 +08:00 [DBG] 耗时-27ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 10:19:07.429 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-26 10:19:07.806 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-26 10:19:07.917 +08:00 [DBG] 耗时-487ms,已加载模块-Yi.Abp.Web
2024-04-26 10:19:07.919 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2390ms】==========
2024-04-26 10:19:08.032 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-26 10:19:08.033 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-26 10:19:08.033 +08:00 [INF] Hosting environment: Development
2024-04-26 10:19:08.033 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-26 10:22:10.247 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:22:10.315 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 10:22:10.349 +08:00 [INF] Route matched with {action = "DoIt", controller = "Email", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DoItAsync() on controller Yi.Abp.Application.Services.EmailService (Yi.Abp.Application).
2024-04-26 10:22:10.428 +08:00 [WRN] We don't recommend that you use the SmtpClient class for new development because SmtpClient doesn't support many modern protocols. Use MailKit(https://docs.abp.io/en/abp/latest/MailKit) or other libraries instead.For more information, see https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md
2024-04-26 10:22:12.610 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 10:22:12.610 +08:00 [ERR] Failure sending mail.
System.Net.Mail.SmtpException: Failure sending mail.
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at System.Net.Sockets.TcpClient.EndConnect(IAsyncResult asyncResult)
   at System.Net.Mail.SmtpConnection.ConnectAndHandshakeAsyncResult.InitializeConnectionCallback(IAsyncResult result)
--- End of stack trace from previous location ---
   at System.Net.Mail.SmtpClient.ConnectCallback(IAsyncResult result)
   --- End of inner exception stack trace ---
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.SendEmailAsync(MailMessage mail)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(MailMessage mail, Boolean normalize)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(String to, String subject, String body, Boolean isBodyHtml, AdditionalEmailSendingArgs additionalEmailSendingArgs)
   at Yi.Abp.Application.Services.EmailService.DoItAsync() in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Application\Services\EmailService.cs:line 20
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 10:22:12.630 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 10:22:12.702 +08:00 [INF] Executed action Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application) in 2350.8171ms
2024-04-26 10:22:12.702 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 10:22:25.291 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:22:25.294 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 10:22:25.294 +08:00 [INF] Route matched with {action = "DoIt", controller = "Email", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DoItAsync() on controller Yi.Abp.Application.Services.EmailService (Yi.Abp.Application).
2024-04-26 10:22:30.991 +08:00 [WRN] We don't recommend that you use the SmtpClient class for new development because SmtpClient doesn't support many modern protocols. Use MailKit(https://docs.abp.io/en/abp/latest/MailKit) or other libraries instead.For more information, see https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md
2024-04-26 10:22:33.107 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 10:22:33.108 +08:00 [ERR] Failure sending mail.
System.Net.Mail.SmtpException: Failure sending mail.
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at System.Net.Sockets.TcpClient.EndConnect(IAsyncResult asyncResult)
   at System.Net.Mail.SmtpConnection.ConnectAndHandshakeAsyncResult.InitializeConnectionCallback(IAsyncResult result)
--- End of stack trace from previous location ---
   at System.Net.Mail.SmtpClient.ConnectCallback(IAsyncResult result)
   --- End of inner exception stack trace ---
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.SendEmailAsync(MailMessage mail)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(MailMessage mail, Boolean normalize)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(String to, String subject, String body, Boolean isBodyHtml, AdditionalEmailSendingArgs additionalEmailSendingArgs)
   at Yi.Abp.Application.Services.EmailService.DoItAsync() in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Application\Services\EmailService.cs:line 20
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 10:22:33.108 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 10:22:42.571 +08:00 [INF] Executed action Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application) in 17276.6895ms
2024-04-26 10:22:42.571 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 10:22:56.894 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:22:56.896 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 10:22:56.896 +08:00 [INF] Route matched with {action = "DoIt", controller = "Email", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DoItAsync() on controller Yi.Abp.Application.Services.EmailService (Yi.Abp.Application).
2024-04-26 10:24:11.627 +08:00 [WRN] We don't recommend that you use the SmtpClient class for new development because SmtpClient doesn't support many modern protocols. Use MailKit(https://docs.abp.io/en/abp/latest/MailKit) or other libraries instead.For more information, see https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md
2024-04-26 10:24:13.696 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 10:24:13.696 +08:00 [ERR] Failure sending mail.
System.Net.Mail.SmtpException: Failure sending mail.
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at System.Net.Sockets.TcpClient.EndConnect(IAsyncResult asyncResult)
   at System.Net.Mail.SmtpConnection.ConnectAndHandshakeAsyncResult.InitializeConnectionCallback(IAsyncResult result)
--- End of stack trace from previous location ---
   at System.Net.Mail.SmtpClient.ConnectCallback(IAsyncResult result)
   --- End of inner exception stack trace ---
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.SendEmailAsync(MailMessage mail)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(MailMessage mail, Boolean normalize)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(String to, String subject, String body, Boolean isBodyHtml, AdditionalEmailSendingArgs additionalEmailSendingArgs)
   at Yi.Abp.Application.Services.EmailService.DoItAsync() in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Application\Services\EmailService.cs:line 20
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 10:24:13.696 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 10:24:22.469 +08:00 [INF] Executed action Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application) in 85571.7434ms
2024-04-26 10:24:22.469 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 10:32:05.915 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-26 10:32:05.937 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-26 10:32:11.052 +08:00 [INF] Loaded ABP modules:
2024-04-26 10:32:11.053 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-26 10:32:11.053 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-26 10:32:11.053 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-26 10:32:11.053 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-26 10:32:11.053 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-26 10:32:11.053 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-26 10:32:11.053 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-26 10:32:11.053 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-26 10:32:11.053 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-26 10:32:11.053 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-26 10:32:11.053 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-26 10:32:11.053 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-26 10:32:11.053 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-26 10:32:11.053 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-04-26 10:32:11.053 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-26 10:32:11.053 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-26 10:32:11.053 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-26 10:32:11.053 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-26 10:32:11.059 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-26 10:32:11.063 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-26 10:32:11.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:11.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 10:32:11.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 10:32:11.845 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:11.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 10:32:11.868 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-26 10:32:11.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-26 10:32:11.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-26 10:32:11.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-26 10:32:11.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-26 10:32:11.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-26 10:32:11.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-26 10:32:11.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-26 10:32:11.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-26 10:32:11.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-26 10:32:11.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 10:32:11.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:11.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 10:32:11.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-26 10:32:11.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-26 10:32:11.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-26 10:32:11.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-26 10:32:11.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-26 10:32:11.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-26 10:32:11.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-26 10:32:11.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 10:32:11.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:11.914 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.920 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 10:32:11.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-26 10:32:11.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:32:11.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-26 10:32:11.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-26 10:32:11.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 10:32:11.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 10:32:11.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-26 10:32:11.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-26 10:32:11.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-26 10:32:11.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-26 10:32:11.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-26 10:32:11.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-26 10:32:11.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-26 10:32:11.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-26 10:32:11.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.930 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 10:32:11.932 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:11.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 10:32:11.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-26 10:32:11.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:32:11.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-26 10:32:11.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-26 10:32:11.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-26 10:32:11.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-26 10:32:11.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-26 10:32:11.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-26 10:32:11.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-26 10:32:11.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-26 10:32:11.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-26 10:32:11.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 10:32:11.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:11.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.967 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 10:32:11.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-26 10:32:11.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:32:11.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-26 10:32:11.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-26 10:32:11.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-26 10:32:11.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-26 10:32:11.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-26 10:32:11.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 10:32:11.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:11.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:11.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 10:32:11.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-26 10:32:11.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-26 10:32:11.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-26 10:32:11.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:11.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 10:32:12.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 10:32:12.016 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-26 10:32:12.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-26 10:32:12.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-26 10:32:12.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-26 10:32:12.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-26 10:32:12.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-26 10:32:12.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:32:12.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 10:32:12.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 10:32:12.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-26 10:32:12.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:32:12.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-26 10:32:12.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-26 10:32:12.051 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 10:32:12.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 10:32:12.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-26 10:32:12.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-26 10:32:12.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-26 10:32:12.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-26 10:32:12.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-26 10:32:12.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-26 10:32:12.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-26 10:32:12.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-26 10:32:12.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-26 10:32:12.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-26 10:32:12.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-26 10:32:12.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-26 10:32:12.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.063 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 10:32:12.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 10:32:12.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-26 10:32:12.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-26 10:32:12.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-26 10:32:12.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 10:32:12.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.102 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 10:32:12.105 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-26 10:32:12.105 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:32:12.105 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-26 10:32:12.106 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-26 10:32:12.106 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 10:32:12.106 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 10:32:12.106 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-26 10:32:12.106 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-26 10:32:12.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-26 10:32:12.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-26 10:32:12.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-26 10:32:12.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-26 10:32:12.108 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 10:32:12.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.129 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 10:32:12.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-26 10:32:12.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-26 10:32:12.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-26 10:32:12.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-26 10:32:12.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 10:32:12.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 10:32:12.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-26 10:32:12.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:32:12.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-26 10:32:12.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-26 10:32:12.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 10:32:12.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 10:32:12.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-26 10:32:12.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-26 10:32:12.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-26 10:32:12.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-26 10:32:12.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-26 10:32:12.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-26 10:32:12.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-26 10:32:12.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 10:32:12.164 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 10:32:12.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-26 10:32:12.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-26 10:32:12.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 10:32:12.183 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 10:32:12.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-26 10:32:12.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-26 10:32:12.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-26 10:32:12.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-26 10:32:12.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-26 10:32:12.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-26 10:32:12.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-26 10:32:12.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-26 10:32:12.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-26 10:32:12.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-26 10:32:12.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-26 10:32:12.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-26 10:32:12.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-26 10:32:12.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-26 10:32:12.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-26 10:32:12.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-26 10:32:12.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-26 10:32:12.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-26 10:32:12.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-26 10:32:12.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 10:32:12.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 10:32:12.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-26 10:32:12.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-26 10:32:12.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-26 10:32:12.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:32:12.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 10:32:12.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 10:32:12.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-26 10:32:12.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-26 10:32:12.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-26 10:32:12.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-26 10:32:12.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 10:32:12.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 10:32:12.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-26 10:32:12.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-26 10:32:12.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-26 10:32:12.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-26 10:32:12.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.249 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 10:32:12.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 10:32:12.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-26 10:32:12.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.271 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 10:32:12.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 10:32:12.287 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:32:12.289 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:32:12.290 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 10:32:12.297 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 10:32:12.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:32:12.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:32:12.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 10:32:12.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 10:32:12.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:32:12.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:32:12.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 10:32:12.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 10:32:12.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 10:32:12.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 10:32:12.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 10:32:12.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-26 10:32:12.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-26 10:32:12.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-26 10:32:12.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 10:32:12.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 10:32:12.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-26 10:32:12.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 10:32:12.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 10:32:12.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-26 10:32:12.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-26 10:32:12.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-26 10:32:12.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-26 10:32:12.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-26 10:32:12.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 10:32:12.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 10:32:12.463 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-26 10:32:12.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-26 10:32:12.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.471 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 10:32:12.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 10:32:12.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 10:32:12.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-26 10:32:12.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-26 10:32:12.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-26 10:32:12.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-26 10:32:12.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 10:32:12.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 10:32:12.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 10:32:12.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:32:12.593 +08:00 [DBG] =========Yi-SQL耗时9.1658毫秒=====
2024-04-26 10:32:12.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:32:12.609 +08:00 [DBG] =========Yi-SQL耗时1.3262毫秒=====
2024-04-26 10:32:12.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:32:12.612 +08:00 [DBG] =========Yi-SQL耗时0.8937毫秒=====
2024-04-26 10:32:12.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:32:12.620 +08:00 [DBG] =========Yi-SQL耗时3.0642毫秒=====
2024-04-26 10:32:12.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:32:12.624 +08:00 [DBG] =========Yi-SQL耗时1.1088毫秒=====
2024-04-26 10:32:12.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:32:12.628 +08:00 [DBG] =========Yi-SQL耗时0.8886毫秒=====
2024-04-26 10:32:12.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:32:12.634 +08:00 [DBG] =========Yi-SQL耗时1.3449毫秒=====
2024-04-26 10:32:12.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-26 10:32:12.657 +08:00 [DBG] =========Yi-SQL耗时0.954毫秒=====
2024-04-26 10:32:12.666 +08:00 [DBG] 耗时-1606ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-26 10:32:12.729 +08:00 [DBG] 耗时-60ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-26 10:32:12.732 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-26 10:32:12.748 +08:00 [DBG] 耗时-16ms,已加载模块-Volo.Abp.AspNetCore
2024-04-26 10:32:12.753 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-26 10:32:12.774 +08:00 [DBG] 耗时-20ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 10:32:12.778 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-26 10:32:13.032 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-26 10:32:13.095 +08:00 [DBG] 耗时-317ms,已加载模块-Yi.Abp.Web
2024-04-26 10:32:13.096 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2030ms】==========
2024-04-26 10:32:13.181 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-26 10:32:13.182 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-26 10:32:13.182 +08:00 [INF] Hosting environment: Development
2024-04-26 10:32:13.182 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-26 10:32:36.502 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:32:36.528 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 10:32:36.546 +08:00 [INF] Route matched with {action = "DoIt", controller = "Email", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DoItAsync() on controller Yi.Abp.Application.Services.EmailService (Yi.Abp.Application).
2024-04-26 10:32:39.801 +08:00 [WRN] We don't recommend that you use the SmtpClient class for new development because SmtpClient doesn't support many modern protocols. Use MailKit(https://docs.abp.io/en/abp/latest/MailKit) or other libraries instead.For more information, see https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md
2024-04-26 10:32:42.362 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 10:32:42.363 +08:00 [ERR] Failure sending mail.
System.Net.Mail.SmtpException: Failure sending mail.
 ---> System.Net.Sockets.SocketException (10061): 由于目标计算机积极拒绝，无法连接。
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)
--- End of stack trace from previous location ---
   at System.Threading.Tasks.TaskToAsyncResult.End(IAsyncResult asyncResult)
   at System.Net.Sockets.TcpClient.EndConnect(IAsyncResult asyncResult)
   at System.Net.Mail.SmtpConnection.ConnectAndHandshakeAsyncResult.InitializeConnectionCallback(IAsyncResult result)
--- End of stack trace from previous location ---
   at System.Net.Mail.SmtpClient.ConnectCallback(IAsyncResult result)
   --- End of inner exception stack trace ---
   at Volo.Abp.Emailing.Smtp.SmtpEmailSender.SendEmailAsync(MailMessage mail)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(MailMessage mail, Boolean normalize)
   at Volo.Abp.Emailing.EmailSenderBase.SendAsync(String to, String subject, String body, Boolean isBodyHtml, AdditionalEmailSendingArgs additionalEmailSendingArgs)
   at Yi.Abp.Application.Services.EmailService.DoItAsync() in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Application\Services\EmailService.cs:line 20
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 10:32:42.379 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 10:32:42.435 +08:00 [INF] Executed action Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application) in 5887.1167ms
2024-04-26 10:32:42.436 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.EmailService.DoItAsync (Yi.Abp.Application)'
2024-04-26 10:51:58.656 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:11.892 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-26 10:52:11.892 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:12.000 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-26 10:52:12.004 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-26 10:52:12.004 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-26 10:52:12.004 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:12.006 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 10:52:12.055 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 10:52:12.070 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:12.071 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-26 10:52:12.072 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-26 10:52:12.073 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 10:52:12.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:12.458 +08:00 [DBG] =========Yi-SQL耗时205.1006毫秒=====
2024-04-26 10:52:12.483 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-26 10:52:12.483 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 10:52:12.501 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 496.2207ms
2024-04-26 10:52:12.501 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:12.502 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 497.9444ms
2024-04-26 10:52:12.502 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-26 10:52:13.998 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:14.001 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:14.017 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:14.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'006238' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:52:14.208 +08:00 [DBG] =========Yi-SQL耗时17.7662毫秒=====
2024-04-26 10:52:14.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:14.264 +08:00 [DBG] =========Yi-SQL耗时2.7133毫秒=====
2024-04-26 10:52:14.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-26 10:52:14.293 +08:00 [DBG] =========Yi-SQL耗时2.9748毫秒=====
2024-04-26 10:52:14.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 10:52:14.308 +08:00 [DBG] =========Yi-SQL耗时2.8841毫秒=====
2024-04-26 10:52:14.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-26 10:52:14.318 +08:00 [DBG] =========Yi-SQL耗时3.4628毫秒=====
2024-04-26 10:52:14.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('7e4f4c22-9927-da88-9330-3a11cdb2f701','6799560e-c779-66bf-d6aa-3a11ce1e28dd','da046a5f-e94d-adec-43c8-3a11d32f463e','35bbc251-5003-8302-93dd-3a11d33132d3')     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 10:52:14.325 +08:00 [DBG] =========Yi-SQL耗时5.2578毫秒=====
2024-04-26 10:52:14.498 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-26 10:52:14.500 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 482.0672ms
2024-04-26 10:52:14.500 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:14.510 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:14.525 +08:00 [INF] 用户【14034830-d11c-db5d-ea3e-3a11a05c01b1:006238】登入系统
2024-04-26 10:52:14.544 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 10:52:14.545 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 10:52:14.551 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:14.551 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:14.553 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:14.553 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 10:52:14.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'1c692479-468a-cc76-724e-3a122a7e2d4d',CAST('2024-04-26 10:52:14.552' AS DATETIME),N'006238',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'006238登录系统',N'14034830-d11c-db5d-ea3e-3a11a05c01b1') ;
===============================

2024-04-26 10:52:14.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-04-26 10:52:14.582 +08:00 [DBG] =========Yi-SQL耗时11.6369毫秒=====
2024-04-26 10:52:14.609 +08:00 [INF] 2024/4/26 10:52:14：006238,_8Q_eIe_tPF1nF6EJiOM4g连接服务端success，当前已连接1个
2024-04-26 10:52:14.640 +08:00 [DBG] =========Yi-SQL耗时64.6133毫秒=====
2024-04-26 10:52:14.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-26 10:52:14.642 +08:00 [DBG] =========Yi-SQL耗时0.3568毫秒=====
2024-04-26 10:52:14.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 ) AND ( 1 = 1 )    AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 10:52:14.643 +08:00 [DBG] =========Yi-SQL耗时0.7373毫秒=====
2024-04-26 10:52:14.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-26 10:52:14.644 +08:00 [DBG] =========Yi-SQL耗时0.5408毫秒=====
2024-04-26 10:52:14.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('7e4f4c22-9927-da88-9330-3a11cdb2f701','6799560e-c779-66bf-d6aa-3a11ce1e28dd','da046a5f-e94d-adec-43c8-3a11d32f463e','35bbc251-5003-8302-93dd-3a11d33132d3')     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 10:52:14.647 +08:00 [DBG] =========Yi-SQL耗时1.3842毫秒=====
2024-04-26 10:52:14.688 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 10:52:14.701 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 147.9578ms
2024-04-26 10:52:14.701 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:14.709 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:14.711 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:14.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-04-26 10:52:14.716 +08:00 [DBG] =========Yi-SQL耗时0.7378毫秒=====
2024-04-26 10:52:14.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-26 10:52:14.719 +08:00 [DBG] =========Yi-SQL耗时0.7502毫秒=====
2024-04-26 10:52:14.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 ) AND ( 1 = 1 )    AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 10:52:14.720 +08:00 [DBG] =========Yi-SQL耗时0.464毫秒=====
2024-04-26 10:52:14.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-26 10:52:14.722 +08:00 [DBG] =========Yi-SQL耗时0.7039毫秒=====
2024-04-26 10:52:14.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('7e4f4c22-9927-da88-9330-3a11cdb2f701','6799560e-c779-66bf-d6aa-3a11ce1e28dd','da046a5f-e94d-adec-43c8-3a11d32f463e','35bbc251-5003-8302-93dd-3a11d33132d3')     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 10:52:14.723 +08:00 [DBG] =========Yi-SQL耗时0.5053毫秒=====
2024-04-26 10:52:14.750 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 10:52:14.753 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 41.9525ms
2024-04-26 10:52:14.753 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:35.991 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:35.992 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:35.992 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:35.992 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:35.993 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:35.994 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 10:52:35.999 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:35.999 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:35.999 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:35.999 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:35.999 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:36.006 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 10:52:36.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:36.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:36.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:36.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:36.024 +08:00 [DBG] =========Yi-SQL耗时8.8289毫秒=====
2024-04-26 10:52:36.054 +08:00 [DBG] =========Yi-SQL耗时11.8347毫秒=====
2024-04-26 10:52:36.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:36.098 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 10:52:36.101 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 101.736ms
2024-04-26 10:52:36.101 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:36.122 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 10:52:36.130 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 130.5316ms
2024-04-26 10:52:36.130 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:36.149 +08:00 [DBG] =========Yi-SQL耗时133.5385毫秒=====
2024-04-26 10:52:36.149 +08:00 [DBG] =========Yi-SQL耗时132.3444毫秒=====
2024-04-26 10:52:36.151 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 10:52:36.151 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 10:52:36.151 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 152.1002ms
2024-04-26 10:52:36.151 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 152.0787ms
2024-04-26 10:52:36.151 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:36.151 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:36.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:36.175 +08:00 [DBG] =========Yi-SQL耗时9.0007毫秒=====
2024-04-26 10:52:36.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 10:52:36.186 +08:00 [DBG] =========Yi-SQL耗时1.367毫秒=====
2024-04-26 10:52:36.209 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 10:52:36.217 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 210.7335ms
2024-04-26 10:52:36.217 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 10:52:36.249 +08:00 [DBG] =========Yi-SQL耗时193.9863毫秒=====
2024-04-26 10:52:36.252 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 10:52:36.252 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 253.0566ms
2024-04-26 10:52:36.252 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:43.541 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:43.542 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:43.545 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:43.549 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-04-26 10:52:43.550 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 4.6276ms
2024-04-26 10:52:43.550 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:43.556 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:43.556 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-26 10:52:43.557 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-26 10:52:43.557 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 10:52:43.557 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 10:52:43.593 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:43.594 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-26 10:52:43.594 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-26 10:52:43.596 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 10:52:43.671 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 10:52:43.676 +08:00 [INF] 用户006238离开了，当前已连接1个
2024-04-26 10:52:43.681 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 10:52:43.681 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 10:52:43.819 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:43.820 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-26 10:52:43.820 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-26 10:52:43.820 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 10:52:43.820 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 10:52:43.845 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:43.847 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-26 10:52:43.847 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-26 10:52:43.850 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 10:52:43.874 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:43.874 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-26 10:52:43.876 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:43.876 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-26 10:52:43.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:43.884 +08:00 [DBG] =========Yi-SQL耗时4.507毫秒=====
2024-04-26 10:52:43.886 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 10:52:43.887 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 11.119ms
2024-04-26 10:52:43.887 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-26 10:52:43.888 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-26 10:52:43.889 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 12.7441ms
2024-04-26 10:52:43.889 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:45.749 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:45.750 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:45.750 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:45.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 10:52:45.756 +08:00 [DBG] =========Yi-SQL耗时1.9622毫秒=====
2024-04-26 10:52:45.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:45.759 +08:00 [DBG] =========Yi-SQL耗时0.6045毫秒=====
2024-04-26 10:52:45.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 10:52:45.760 +08:00 [DBG] =========Yi-SQL耗时0.5354毫秒=====
2024-04-26 10:52:45.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 10:52:45.762 +08:00 [DBG] =========Yi-SQL耗时1.0426毫秒=====
2024-04-26 10:52:45.800 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-26 10:52:45.800 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 49.9842ms
2024-04-26 10:52:45.800 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:45.801 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-04-26 10:52:45.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'0c4e3b07-b83a-12be-a98c-3a122a7ea769',CAST('2024-04-26 10:52:45.802' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-26 10:52:45.804 +08:00 [DBG] =========Yi-SQL耗时1.3077毫秒=====
2024-04-26 10:52:45.806 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:45.807 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 10:52:45.807 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 10:52:45.812 +08:00 [INF] CORS policy execution successful.
2024-04-26 10:52:45.812 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:45.812 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:45.813 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 10:52:45.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:45.816 +08:00 [DBG] =========Yi-SQL耗时1.0001毫秒=====
2024-04-26 10:52:45.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 10:52:45.818 +08:00 [DBG] =========Yi-SQL耗时0.4884毫秒=====
2024-04-26 10:52:45.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 10:52:45.820 +08:00 [DBG] =========Yi-SQL耗时1.0366毫秒=====
2024-04-26 10:52:45.822 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 10:52:45.823 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 11.2383ms
2024-04-26 10:52:45.823 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:45.832 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:45.833 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:45.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:45.837 +08:00 [DBG] =========Yi-SQL耗时2.1791毫秒=====
2024-04-26 10:52:45.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 10:52:45.838 +08:00 [DBG] =========Yi-SQL耗时0.5813毫秒=====
2024-04-26 10:52:45.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 10:52:45.839 +08:00 [DBG] =========Yi-SQL耗时0.3159毫秒=====
2024-04-26 10:52:45.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 10:52:45.842 +08:00 [DBG] =========Yi-SQL耗时0.5996毫秒=====
2024-04-26 10:52:45.847 +08:00 [INF] 2024/4/26 10:52:45：cc,eU3ICgFBKTsHOo2YqcEkZQ连接服务端success，当前已连接1个
2024-04-26 10:52:45.852 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 10:52:45.852 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 19.2202ms
2024-04-26 10:52:45.852 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:45.929 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 10:52:45.932 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 10:52:45.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 10:52:45.944 +08:00 [DBG] =========Yi-SQL耗时3.2301毫秒=====
2024-04-26 10:52:45.966 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 10:52:45.972 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 39.5666ms
2024-04-26 10:52:45.972 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:01:33.956 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-04-26 11:01:33.973 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 11:01:33.974 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 11:01:34.392 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:01:34.418 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 11:01:34.420 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:01:34.422 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 11:01:34.425 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:01:34.429 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:01:34.431 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 11:01:34.510 +08:00 [INF] 2024/4/26 11:01:34：cc,OVsbkGD0j1wfM30XTIUVWw连接服务端success，当前已连接0个
2024-04-26 11:01:34.566 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 11:01:34.575 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 147.5946ms
2024-04-26 11:01:34.575 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:01:34.585 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:01:34.585 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:01:34.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:01:34.923 +08:00 [DBG] =========Yi-SQL耗时239.5048毫秒=====
2024-04-26 11:01:34.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 11:01:34.933 +08:00 [DBG] =========Yi-SQL耗时3.4104毫秒=====
2024-04-26 11:01:34.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 11:01:34.939 +08:00 [DBG] =========Yi-SQL耗时1.9459毫秒=====
2024-04-26 11:01:34.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:01:34.945 +08:00 [DBG] =========Yi-SQL耗时3.3457毫秒=====
2024-04-26 11:01:34.949 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:01:34.951 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 365.2101ms
2024-04-26 11:01:34.951 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:01:35.018 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:01:35.019 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 11:01:35.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 11:01:35.033 +08:00 [DBG] =========Yi-SQL耗时4.115毫秒=====
2024-04-26 11:01:35.042 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:01:35.045 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 25.7521ms
2024-04-26 11:01:35.045 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:04:02.495 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 11:04:02.504 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 11:04:03.292 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:04:03.297 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 11:04:03.297 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:04:03.298 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:04:03.299 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 11:04:03.313 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 11:04:03.316 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 17.4408ms
2024-04-26 11:04:03.316 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:04:03.353 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:04:03.354 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:04:03.355 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:04:03.361 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 11:04:03.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:04:03.368 +08:00 [DBG] =========Yi-SQL耗时6.5713毫秒=====
2024-04-26 11:04:03.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 11:04:03.375 +08:00 [DBG] =========Yi-SQL耗时1.9419毫秒=====
2024-04-26 11:04:03.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 11:04:03.378 +08:00 [DBG] =========Yi-SQL耗时1.1819毫秒=====
2024-04-26 11:04:03.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:04:03.382 +08:00 [DBG] =========Yi-SQL耗时1.8537毫秒=====
2024-04-26 11:04:03.385 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:04:03.391 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 35.65ms
2024-04-26 11:04:03.391 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:04:03.559 +08:00 [INF] 2024/4/26 11:04:03：cc,5dfUA-DfENmme0GUj35ndQ连接服务端success，当前已连接0个
2024-04-26 11:04:03.566 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:04:03.567 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 11:04:03.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 11:04:03.582 +08:00 [DBG] =========Yi-SQL耗时11.0947毫秒=====
2024-04-26 11:04:03.586 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:04:03.588 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 21.0081ms
2024-04-26 11:04:03.588 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:24.112 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 11:11:24.114 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 11:11:24.935 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:11:25.049 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 11:11:25.051 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 11:11:25.122 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:11:25.134 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 11:11:25.142 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:25.167 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:11:25.221 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 11:11:25.234 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 66.1066ms
2024-04-26 11:11:25.234 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:25.254 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:25.255 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:11:25.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:11:25.319 +08:00 [INF] 2024/4/26 11:11:25：cc,dAbb73NKnS1Xdsg2XbmORA连接服务端success，当前已连接0个
2024-04-26 11:11:25.529 +08:00 [DBG] =========Yi-SQL耗时253.3707毫秒=====
2024-04-26 11:11:25.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 11:11:25.535 +08:00 [DBG] =========Yi-SQL耗时2.4924毫秒=====
2024-04-26 11:11:25.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 11:11:25.539 +08:00 [DBG] =========Yi-SQL耗时2.2643毫秒=====
2024-04-26 11:11:25.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:11:25.544 +08:00 [DBG] =========Yi-SQL耗时3.2396毫秒=====
2024-04-26 11:11:25.548 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:11:25.549 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 293.5909ms
2024-04-26 11:11:25.549 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:25.635 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:25.636 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 11:11:25.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 11:11:25.644 +08:00 [DBG] =========Yi-SQL耗时3.6544毫秒=====
2024-04-26 11:11:25.647 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:11:25.649 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 12.1812ms
2024-04-26 11:11:25.649 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:45.834 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 11:11:45.836 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 11:11:46.575 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:11:46.587 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 11:11:46.590 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 11:11:46.617 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:46.618 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:11:46.628 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 11:11:46.645 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 26.854ms
2024-04-26 11:11:46.645 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:46.646 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:11:46.672 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 11:11:46.682 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:46.683 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:11:46.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:11:46.696 +08:00 [DBG] =========Yi-SQL耗时5.6426毫秒=====
2024-04-26 11:11:46.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 11:11:46.701 +08:00 [DBG] =========Yi-SQL耗时2.1541毫秒=====
2024-04-26 11:11:46.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 11:11:46.708 +08:00 [DBG] =========Yi-SQL耗时1.724毫秒=====
2024-04-26 11:11:46.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:11:46.724 +08:00 [DBG] =========Yi-SQL耗时12.2068毫秒=====
2024-04-26 11:11:46.727 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:11:46.732 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 48.3094ms
2024-04-26 11:11:46.732 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:46.819 +08:00 [INF] 2024/4/26 11:11:46：cc,5Cx_5iVOvovjX1f58rHIGA连接服务端success，当前已连接0个
2024-04-26 11:11:46.891 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:11:46.891 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 11:11:46.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 11:11:46.895 +08:00 [DBG] =========Yi-SQL耗时1.1555毫秒=====
2024-04-26 11:11:46.897 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:11:46.898 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.0942ms
2024-04-26 11:11:46.898 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:13:25.787 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 11:13:25.791 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 11:13:26.533 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:13:26.537 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 11:13:26.538 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 11:13:26.559 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:13:26.561 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:13:26.566 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 11:13:26.569 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.9389ms
2024-04-26 11:13:26.569 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:13:26.595 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:13:26.601 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 11:13:26.601 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:13:26.602 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:13:26.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:13:26.612 +08:00 [DBG] =========Yi-SQL耗时1.5788毫秒=====
2024-04-26 11:13:26.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 11:13:26.661 +08:00 [DBG] =========Yi-SQL耗时5.0509毫秒=====
2024-04-26 11:13:26.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 11:13:26.664 +08:00 [DBG] =========Yi-SQL耗时0.8846毫秒=====
2024-04-26 11:13:26.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:13:26.670 +08:00 [DBG] =========Yi-SQL耗时2.0514毫秒=====
2024-04-26 11:13:26.672 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:13:26.675 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 73.2912ms
2024-04-26 11:13:26.676 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:13:26.737 +08:00 [INF] 2024/4/26 11:13:26：cc,Gu5o99O4tvFTFI4mvVuunw连接服务端success，当前已连接0个
2024-04-26 11:13:26.827 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:13:26.827 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 11:13:26.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 11:13:26.830 +08:00 [DBG] =========Yi-SQL耗时0.813毫秒=====
2024-04-26 11:13:26.832 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:13:26.833 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.6392ms
2024-04-26 11:13:26.833 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:03.379 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 11:14:03.384 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 11:14:04.116 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:14:04.132 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:04.132 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:14:04.136 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 11:14:04.137 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 11:14:04.138 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 11:14:04.138 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.4508ms
2024-04-26 11:14:04.138 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:04.160 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:04.160 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:14:04.164 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:14:04.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:14:04.168 +08:00 [DBG] =========Yi-SQL耗时2.9955毫秒=====
2024-04-26 11:14:04.172 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 11:14:04.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 11:14:04.179 +08:00 [DBG] =========Yi-SQL耗时1.3535毫秒=====
2024-04-26 11:14:04.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 11:14:04.192 +08:00 [DBG] =========Yi-SQL耗时1.0193毫秒=====
2024-04-26 11:14:04.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:14:04.234 +08:00 [DBG] =========Yi-SQL耗时38.0477毫秒=====
2024-04-26 11:14:04.236 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:14:04.238 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 77.2221ms
2024-04-26 11:14:04.238 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:04.350 +08:00 [INF] 2024/4/26 11:14:04：cc,Ezck-cW5KBLx-A8ATY4AQw连接服务端success，当前已连接0个
2024-04-26 11:14:04.404 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:04.404 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 11:14:04.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 11:14:04.411 +08:00 [DBG] =========Yi-SQL耗时2.0168毫秒=====
2024-04-26 11:14:04.416 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:14:04.416 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 12.1984ms
2024-04-26 11:14:04.416 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:27.787 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 11:14:27.794 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 11:14:28.473 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:14:28.479 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 11:14:28.480 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 11:14:28.486 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:28.487 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:14:28.495 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 11:14:28.496 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.9811ms
2024-04-26 11:14:28.496 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:28.511 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:14:28.514 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:28.514 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:14:28.515 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 11:14:28.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:14:28.539 +08:00 [DBG] =========Yi-SQL耗时11.2766毫秒=====
2024-04-26 11:14:28.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 11:14:28.544 +08:00 [DBG] =========Yi-SQL耗时2.0167毫秒=====
2024-04-26 11:14:28.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 11:14:28.548 +08:00 [DBG] =========Yi-SQL耗时0.9992毫秒=====
2024-04-26 11:14:28.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:14:28.553 +08:00 [DBG] =========Yi-SQL耗时3.0679毫秒=====
2024-04-26 11:14:28.563 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:14:28.567 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 52.8218ms
2024-04-26 11:14:28.567 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:28.664 +08:00 [INF] 2024/4/26 11:14:28：cc,zj1g0DKmBvrcYrp9_mtJ6Q连接服务端success，当前已连接0个
2024-04-26 11:14:28.757 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:14:28.757 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 11:14:28.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 11:14:28.764 +08:00 [DBG] =========Yi-SQL耗时1.4578毫秒=====
2024-04-26 11:14:28.769 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:14:28.770 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 12.7558ms
2024-04-26 11:14:28.770 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:04.490 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 11:20:04.523 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 11:20:05.376 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:20:05.499 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 11:20:05.531 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 11:20:05.553 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:05.586 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:20:05.589 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 11:20:05.596 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:20:05.767 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 11:20:05.786 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 189.4207ms
2024-04-26 11:20:05.786 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:05.856 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:05.856 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:20:05.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:20:05.947 +08:00 [INF] 2024/4/26 11:20:05：cc,ZnESO_Rj7MJBAAo3LlsbJA连接服务端success，当前已连接0个
2024-04-26 11:20:06.081 +08:00 [DBG] =========Yi-SQL耗时175.2178毫秒=====
2024-04-26 11:20:06.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 11:20:06.091 +08:00 [DBG] =========Yi-SQL耗时2.4925毫秒=====
2024-04-26 11:20:06.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 11:20:06.098 +08:00 [DBG] =========Yi-SQL耗时1.624毫秒=====
2024-04-26 11:20:06.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:20:06.105 +08:00 [DBG] =========Yi-SQL耗时4.7394毫秒=====
2024-04-26 11:20:06.107 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:20:06.109 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 252.1479ms
2024-04-26 11:20:06.109 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:06.240 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:06.240 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 11:20:06.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 11:20:06.270 +08:00 [DBG] =========Yi-SQL耗时5.1766毫秒=====
2024-04-26 11:20:06.288 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:20:06.293 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 52.8445ms
2024-04-26 11:20:06.293 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:07.986 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:07.986 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:07.986 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 11:20:07.987 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 11:20:07.987 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:07.987 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 11:20:07.994 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:07.994 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 11:20:07.996 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:20:07.996 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:07.998 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 11:20:07.998 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:20:08.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:20:08.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:20:08.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:20:08.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:20:08.073 +08:00 [DBG] =========Yi-SQL耗时10.5392毫秒=====
2024-04-26 11:20:08.085 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:20:08.086 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 91.9602ms
2024-04-26 11:20:08.086 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:08.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:20:08.099 +08:00 [DBG] =========Yi-SQL耗时4.1581毫秒=====
2024-04-26 11:20:08.103 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:20:08.104 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 117.4164ms
2024-04-26 11:20:08.104 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:08.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:20:08.129 +08:00 [DBG] =========Yi-SQL耗时8.3965毫秒=====
2024-04-26 11:20:08.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:20:08.134 +08:00 [DBG] =========Yi-SQL耗时0.892毫秒=====
2024-04-26 11:20:08.140 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:20:08.140 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 142.1102ms
2024-04-26 11:20:08.140 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:20:08.179 +08:00 [DBG] =========Yi-SQL耗时116.0789毫秒=====
2024-04-26 11:20:08.184 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:20:08.185 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 187.3895ms
2024-04-26 11:20:08.185 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:08.186 +08:00 [DBG] =========Yi-SQL耗时122.8411毫秒=====
2024-04-26 11:20:08.189 +08:00 [DBG] =========Yi-SQL耗时126.0232毫秒=====
2024-04-26 11:20:08.190 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:20:08.191 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 204.4517ms
2024-04-26 11:20:08.191 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:20:08.193 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:20:08.193 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 205.9896ms
2024-04-26 11:20:08.193 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:21:05.428 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:21:09.747 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:21:20.542 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:21:20.582 +08:00 [INF] Connection id "0HN35J4ACPJ17", Request id "0HN35J4ACPJ17:00000001": the application completed without reading the entire request body.
2024-04-26 11:26:42.516 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:26:42.519 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:26:42.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:26:42.606 +08:00 [DBG] =========Yi-SQL耗时67.1711毫秒=====
2024-04-26 11:26:42.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:26:42.611 +08:00 [DBG] =========Yi-SQL耗时0.6768毫秒=====
2024-04-26 11:26:42.616 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:26:42.619 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 99.5653ms
2024-04-26 11:26:42.619 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:37:15.654 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:37:15.667 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:37:15.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:37:15.957 +08:00 [DBG] =========Yi-SQL耗时130.9577毫秒=====
2024-04-26 11:37:15.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:37:15.975 +08:00 [DBG] =========Yi-SQL耗时7.7013毫秒=====
2024-04-26 11:37:16.014 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:37:16.021 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 353.7623ms
2024-04-26 11:37:16.021 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:44:26.138 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 11:44:26.142 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 11:44:26.891 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:44:26.901 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 11:44:26.921 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 11:44:26.952 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:26.957 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:44:26.977 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:44:26.998 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 11:44:27.085 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 11:44:27.098 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 140.378ms
2024-04-26 11:44:27.098 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.120 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.121 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 11:44:27.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:44:27.172 +08:00 [INF] 2024/4/26 11:44:27：cc,qJTdAc-Pw4Ylat-C8D8CqA连接服务端success，当前已连接0个
2024-04-26 11:44:27.357 +08:00 [DBG] =========Yi-SQL耗时218.672毫秒=====
2024-04-26 11:44:27.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 11:44:27.405 +08:00 [DBG] =========Yi-SQL耗时10.7349毫秒=====
2024-04-26 11:44:27.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 11:44:27.428 +08:00 [DBG] =========Yi-SQL耗时8.4912毫秒=====
2024-04-26 11:44:27.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:44:27.468 +08:00 [DBG] =========Yi-SQL耗时35.5668毫秒=====
2024-04-26 11:44:27.472 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:44:27.476 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 354.9872ms
2024-04-26 11:44:27.476 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.608 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.610 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 11:44:27.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 11:44:27.619 +08:00 [DBG] =========Yi-SQL耗时4.3293毫秒=====
2024-04-26 11:44:27.632 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:44:27.638 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 27.8855ms
2024-04-26 11:44:27.638 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.770 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.770 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.771 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 11:44:27.772 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 11:44:27.782 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.782 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 11:44:27.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:44:27.785 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:44:27.785 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.785 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 11:44:27.785 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 11:44:27.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:44:27.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:44:27.790 +08:00 [DBG] =========Yi-SQL耗时5.4247毫秒=====
2024-04-26 11:44:27.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:44:27.797 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:44:27.838 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:44:27.842 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:44:27.843 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 72.3384ms
2024-04-26 11:44:27.843 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.844 +08:00 [DBG] =========Yi-SQL耗时52.8877毫秒=====
2024-04-26 11:44:27.845 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:44:27.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:44:27.856 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 70.0476ms
2024-04-26 11:44:27.856 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.912 +08:00 [DBG] =========Yi-SQL耗时65.3471毫秒=====
2024-04-26 11:44:27.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:44:27.914 +08:00 [DBG] =========Yi-SQL耗时0.9943毫秒=====
2024-04-26 11:44:27.919 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:44:27.920 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 81.5407ms
2024-04-26 11:44:27.920 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:44:27.928 +08:00 [DBG] =========Yi-SQL耗时143.6544毫秒=====
2024-04-26 11:44:27.936 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:44:27.936 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 164.4527ms
2024-04-26 11:44:27.937 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.977 +08:00 [DBG] =========Yi-SQL耗时192.0159毫秒=====
2024-04-26 11:44:27.980 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:44:27.981 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 198.8685ms
2024-04-26 11:44:27.981 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:44:27.993 +08:00 [DBG] =========Yi-SQL耗时204.5254毫秒=====
2024-04-26 11:44:27.995 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:44:27.996 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 210.9803ms
2024-04-26 11:44:27.996 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 11:47:18.837 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:47:18.841 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:47:18.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:47:18.883 +08:00 [DBG] =========Yi-SQL耗时2.2173毫秒=====
2024-04-26 11:47:18.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:47:18.926 +08:00 [DBG] =========Yi-SQL耗时2.0892毫秒=====
2024-04-26 11:47:18.937 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:47:18.944 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 101.7768ms
2024-04-26 11:47:18.944 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:47:23.754 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:47:23.755 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:47:23.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:47:23.767 +08:00 [DBG] =========Yi-SQL耗时4.2435毫秒=====
2024-04-26 11:47:23.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:47:23.772 +08:00 [DBG] =========Yi-SQL耗时4.052毫秒=====
2024-04-26 11:47:23.774 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:47:23.774 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 18.9065ms
2024-04-26 11:47:23.774 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:47:46.731 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:47:46.733 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-26 11:47:46.766 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:47:46.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name")
     VALUES
           (N'214455e9-f225-71ff-8935-3a122ab10665',0,N'1',N'1',N'1',N'1',N'1',N'1',N'1',null,CAST('2024-04-26 11:47:46.901' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151',null) ;
===============================

2024-04-26 11:47:46.974 +08:00 [DBG] =========Yi-SQL耗时19.5792毫秒=====
2024-04-26 11:47:46.996 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 11:47:47.002 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 236.7431ms
2024-04-26 11:47:47.002 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-26 11:47:47.031 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:47:47.087 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:47:47.088 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:47:47.090 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.Post (Yi.Abp.Application)'
2024-04-26 11:47:47.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:47:47.168 +08:00 [DBG] =========Yi-SQL耗时50.1672毫秒=====
2024-04-26 11:47:47.179 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection, System.Nullable`1[System.Guid]) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 11:47:47.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:47:47.185 +08:00 [DBG] =========Yi-SQL耗时1.9205毫秒=====
2024-04-26 11:47:47.197 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:47:47.198 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 109.8213ms
2024-04-26 11:47:47.198 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:47:47.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "filelist"  
           ("id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp")
     VALUES
           (N'eb5ab0d2-8b61-05ab-ff9e-3a122ab107dc',10.3291015625,N'新建 Microsoft Excel 工作表 (2).xlsx',N'wwwroot/File\eb5ab0d2-8b61-05ab-ff9e-3a122ab107dc.xlsx',N'214455e9-f225-71ff-8935-3a122ab10665',CAST('2024-04-26 11:47:47.406' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,N'da2e043ba19647cfaa346bebb8c7f047') ;
===============================

2024-04-26 11:47:47.425 +08:00 [DBG] =========Yi-SQL耗时14.18毫秒=====
2024-04-26 11:47:47.434 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:47:47.438 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.Post (Yi.Abp.Application) in 258.2259ms
2024-04-26 11:47:47.438 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.Post (Yi.Abp.Application)'
2024-04-26 11:48:26.624 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 11:48:26.626 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 11:48:26.632 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:48:26.632 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 11:48:26.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'214455e9-f225-71ff-8935-3a122ab10665' ) 
===============================

2024-04-26 11:48:26.660 +08:00 [DBG] =========Yi-SQL耗时7.8735毫秒=====
2024-04-26 11:48:26.672 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:48:26.672 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 40.307ms
2024-04-26 11:48:26.672 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 11:48:26.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'214455e9-f225-71ff-8935-3a122ab10665'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:48:26.819 +08:00 [DBG] =========Yi-SQL耗时2.7534毫秒=====
2024-04-26 11:48:26.825 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 11:48:26.825 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 193.6806ms
2024-04-26 11:48:26.825 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 11:48:26.836 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-26 11:48:26.837 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 11:48:26.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"   WHERE ( "id" = N'eb5ab0d2-8b61-05ab-ff9e-3a122ab107dc' )   LIMIT 1 offset 0
===============================

2024-04-26 11:48:26.845 +08:00 [DBG] =========Yi-SQL耗时3.2558毫秒=====
2024-04-26 11:48:26.881 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:48:26.912 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application) in 74.8429ms
2024-04-26 11:48:26.912 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-26 11:54:19.681 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:54:19.683 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:54:19.802 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:54:20.036 +08:00 [DBG] =========Yi-SQL耗时241.1945毫秒=====
2024-04-26 11:54:20.043 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:54:20.047 +08:00 [DBG] =========Yi-SQL耗时3.7226毫秒=====
2024-04-26 11:54:20.054 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:54:20.057 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 373.9589ms
2024-04-26 11:54:20.057 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:54:53.726 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:54:53.732 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-26 11:54:53.733 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:54:53.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name")
     VALUES
           (N'4ab363a2-038e-a427-7fa5-3a122ab789c1',0,N'2',N'1',N'2',N'2',N'2',N'2',N'2',null,CAST('2024-04-26 11:54:53.758' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151',null) ;
===============================

2024-04-26 11:54:53.788 +08:00 [DBG] =========Yi-SQL耗时11.1311毫秒=====
2024-04-26 11:54:53.794 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 11:54:53.795 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 62.1203ms
2024-04-26 11:54:53.795 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-26 11:54:53.825 +08:00 [INF] CORS policy execution successful.
2024-04-26 11:54:53.826 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.Post (Yi.Abp.Application)'
2024-04-26 11:54:53.826 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection, System.Nullable`1[System.Guid]) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 11:54:53.827 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:54:53.827 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:54:53.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:54:53.830 +08:00 [DBG] =========Yi-SQL耗时0.9266毫秒=====
2024-04-26 11:54:53.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:54:53.858 +08:00 [DBG] =========Yi-SQL耗时1.0616毫秒=====
2024-04-26 11:54:53.863 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:54:53.863 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 36.4246ms
2024-04-26 11:54:53.863 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:54:53.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "filelist"  
           ("id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp")
     VALUES
           (N'e304f9ee-d65c-cd74-0ccd-3a122ab78a29',20.7109375,N'新建 Microsoft Excel 工作表.xlsx',N'wwwroot/File\e304f9ee-d65c-cd74-0ccd-3a122ab78a29.xlsx',N'4ab363a2-038e-a427-7fa5-3a122ab789c1',CAST('2024-04-26 11:54:53.891' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,N'efcb105254ce4c1ba0b3fddc1d3d7935') ;
===============================

2024-04-26 11:54:53.899 +08:00 [DBG] =========Yi-SQL耗时5.6132毫秒=====
2024-04-26 11:54:53.900 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:54:53.901 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.Post (Yi.Abp.Application) in 74.3393ms
2024-04-26 11:54:53.901 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.Post (Yi.Abp.Application)'
2024-04-26 11:54:56.727 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 11:54:56.727 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 11:54:56.727 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:54:56.727 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 11:54:56.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'4ab363a2-038e-a427-7fa5-3a122ab789c1' ) 
===============================

2024-04-26 11:54:56.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'4ab363a2-038e-a427-7fa5-3a122ab789c1'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:54:56.736 +08:00 [DBG] =========Yi-SQL耗时4.8977毫秒=====
2024-04-26 11:54:56.737 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:54:56.738 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 10.1128ms
2024-04-26 11:54:56.738 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 11:54:56.799 +08:00 [DBG] =========Yi-SQL耗时63.2746毫秒=====
2024-04-26 11:54:56.815 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 11:54:56.815 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 88.0725ms
2024-04-26 11:54:56.816 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 11:54:56.827 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-26 11:54:56.827 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 11:54:56.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"   WHERE ( "id" = N'e304f9ee-d65c-cd74-0ccd-3a122ab78a29' )   LIMIT 1 offset 0
===============================

2024-04-26 11:54:56.832 +08:00 [DBG] =========Yi-SQL耗时1.5378毫秒=====
2024-04-26 11:54:56.835 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 11:54:56.837 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application) in 9.8574ms
2024-04-26 11:54:56.837 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-26 11:55:48.504 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:55:48.505 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:55:48.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:55:48.509 +08:00 [DBG] =========Yi-SQL耗时1.2586毫秒=====
2024-04-26 11:55:48.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:55:48.514 +08:00 [DBG] =========Yi-SQL耗时0.5911毫秒=====
2024-04-26 11:55:48.516 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:55:48.516 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.788ms
2024-04-26 11:55:48.516 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:57:19.992 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:57:19.994 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:57:20.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:57:20.010 +08:00 [DBG] =========Yi-SQL耗时3.9988毫秒=====
2024-04-26 11:57:20.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:57:20.017 +08:00 [DBG] =========Yi-SQL耗时1.3445毫秒=====
2024-04-26 11:57:20.029 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:57:20.030 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 36.5885ms
2024-04-26 11:57:20.030 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:58:13.294 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:58:13.294 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:58:13.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:58:13.310 +08:00 [DBG] =========Yi-SQL耗时0.9023毫秒=====
2024-04-26 11:58:13.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:58:13.345 +08:00 [DBG] =========Yi-SQL耗时1.478毫秒=====
2024-04-26 11:58:13.356 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:58:13.358 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 63.1917ms
2024-04-26 11:58:13.358 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:58:23.964 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:58:23.964 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:58:23.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:58:23.969 +08:00 [DBG] =========Yi-SQL耗时0.5566毫秒=====
2024-04-26 11:58:23.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:58:23.972 +08:00 [DBG] =========Yi-SQL耗时0.7071毫秒=====
2024-04-26 11:58:23.974 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:58:23.975 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.9762ms
2024-04-26 11:58:23.975 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:58:37.000 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:58:37.000 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:58:37.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:58:37.008 +08:00 [DBG] =========Yi-SQL耗时1.1861毫秒=====
2024-04-26 11:58:37.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:58:37.012 +08:00 [DBG] =========Yi-SQL耗时1.1097毫秒=====
2024-04-26 11:58:37.021 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:58:37.022 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 21.5243ms
2024-04-26 11:58:37.022 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:58:48.272 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 11:58:48.272 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 11:58:48.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 11:58:48.278 +08:00 [DBG] =========Yi-SQL耗时1.2076毫秒=====
2024-04-26 11:58:48.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 11:58:48.282 +08:00 [DBG] =========Yi-SQL耗时1.2864毫秒=====
2024-04-26 11:58:48.285 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 11:58:48.286 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 13.2291ms
2024-04-26 11:58:48.286 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:08:02.720 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:08:02.727 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:08:02.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:08:03.101 +08:00 [DBG] =========Yi-SQL耗时167.3006毫秒=====
2024-04-26 12:08:03.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:08:03.111 +08:00 [DBG] =========Yi-SQL耗时3.5823毫秒=====
2024-04-26 12:08:03.165 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:08:03.167 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 439.4152ms
2024-04-26 12:08:03.167 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:08:11.393 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:08:11.393 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:08:11.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:08:11.396 +08:00 [DBG] =========Yi-SQL耗时0.6386毫秒=====
2024-04-26 12:08:11.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:08:11.400 +08:00 [DBG] =========Yi-SQL耗时0.6169毫秒=====
2024-04-26 12:08:11.403 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:08:11.403 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.3634ms
2024-04-26 12:08:11.403 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:08:30.861 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:08:30.861 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:08:30.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:08:30.864 +08:00 [DBG] =========Yi-SQL耗时0.6203毫秒=====
2024-04-26 12:08:30.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:08:30.867 +08:00 [DBG] =========Yi-SQL耗时0.5229毫秒=====
2024-04-26 12:08:30.869 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:08:30.869 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.0831ms
2024-04-26 12:08:30.869 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:09:46.164 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:09:46.165 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:09:46.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:09:46.169 +08:00 [DBG] =========Yi-SQL耗时1.2818毫秒=====
2024-04-26 12:09:46.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:09:46.174 +08:00 [DBG] =========Yi-SQL耗时1.0656毫秒=====
2024-04-26 12:09:46.182 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:09:46.182 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 17.1579ms
2024-04-26 12:09:46.182 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:09:54.738 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 12:09:54.743 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 12:09:55.488 +08:00 [INF] CORS policy execution successful.
2024-04-26 12:09:55.495 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 12:09:55.515 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 12:09:55.586 +08:00 [INF] CORS policy execution successful.
2024-04-26 12:09:55.587 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 12:09:55.592 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:55.595 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 12:09:55.630 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 12:09:55.636 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 41.6097ms
2024-04-26 12:09:55.636 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:55.647 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:55.647 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 12:09:55.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:09:55.694 +08:00 [DBG] =========Yi-SQL耗时20.5773毫秒=====
2024-04-26 12:09:55.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 12:09:55.719 +08:00 [DBG] =========Yi-SQL耗时4.7852毫秒=====
2024-04-26 12:09:55.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 12:09:55.734 +08:00 [DBG] =========Yi-SQL耗时5.1896毫秒=====
2024-04-26 12:09:55.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:09:55.758 +08:00 [DBG] =========Yi-SQL耗时11.8399毫秒=====
2024-04-26 12:09:55.770 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:09:55.772 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 124.9595ms
2024-04-26 12:09:55.772 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:55.799 +08:00 [INF] 2024/4/26 12:09:55：cc,1D1ZtdssiVqcW3UCXXkrlw连接服务端success，当前已连接0个
2024-04-26 12:09:55.902 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:55.903 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 12:09:55.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 12:09:55.915 +08:00 [DBG] =========Yi-SQL耗时3.696毫秒=====
2024-04-26 12:09:55.925 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 12:09:55.929 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 25.3663ms
2024-04-26 12:09:55.929 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.135 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.138 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:09:56.138 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:09:56.138 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:09:56.140 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.140 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.140 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:09:56.140 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:09:56.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:09:56.165 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.165 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.167 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:09:56.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:09:56.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:09:56.168 +08:00 [DBG] =========Yi-SQL耗时17.5239毫秒=====
2024-04-26 12:09:56.167 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:09:56.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:09:56.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:09:56.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:09:56.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:09:56.185 +08:00 [DBG] =========Yi-SQL耗时15.3482毫秒=====
2024-04-26 12:09:56.204 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:09:56.216 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 75.947ms
2024-04-26 12:09:56.229 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.382 +08:00 [DBG] =========Yi-SQL耗时215.4579毫秒=====
2024-04-26 12:09:56.387 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:09:56.388 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 248.0385ms
2024-04-26 12:09:56.388 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.462 +08:00 [DBG] =========Yi-SQL耗时286.6309毫秒=====
2024-04-26 12:09:56.464 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:09:56.464 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 296.4378ms
2024-04-26 12:09:56.464 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.507 +08:00 [DBG] =========Yi-SQL耗时339.8549毫秒=====
2024-04-26 12:09:56.510 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:09:56.511 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 373.4879ms
2024-04-26 12:09:56.511 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.566 +08:00 [DBG] =========Yi-SQL耗时394.6728毫秒=====
2024-04-26 12:09:56.572 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:09:56.573 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 434.7818ms
2024-04-26 12:09:56.573 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:09:56.584 +08:00 [DBG] =========Yi-SQL耗时409.5971毫秒=====
2024-04-26 12:09:56.588 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:09:56.589 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 420.4142ms
2024-04-26 12:09:56.589 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:09:56.781 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:09:56.782 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:09:56.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:09:56.791 +08:00 [DBG] =========Yi-SQL耗时1.023毫秒=====
2024-04-26 12:09:56.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:09:56.808 +08:00 [DBG] =========Yi-SQL耗时2.0212毫秒=====
2024-04-26 12:09:56.819 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:09:56.819 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 37.0948ms
2024-04-26 12:09:56.819 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:10:21.424 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:10:21.424 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:10:21.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:10:21.429 +08:00 [DBG] =========Yi-SQL耗时2.0654毫秒=====
2024-04-26 12:10:21.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:10:21.431 +08:00 [DBG] =========Yi-SQL耗时0.9678毫秒=====
2024-04-26 12:10:21.434 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:10:21.434 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.1811ms
2024-04-26 12:10:21.434 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:10:24.817 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 12:10:24.818 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 12:10:25.536 +08:00 [INF] CORS policy execution successful.
2024-04-26 12:10:25.542 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 12:10:25.561 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 12:10:25.565 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.566 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 12:10:25.569 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 12:10:25.569 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.7404ms
2024-04-26 12:10:25.569 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.587 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.587 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 12:10:25.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:10:25.591 +08:00 [DBG] =========Yi-SQL耗时2.8038毫秒=====
2024-04-26 12:10:25.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 12:10:25.594 +08:00 [DBG] =========Yi-SQL耗时1.4523毫秒=====
2024-04-26 12:10:25.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 12:10:25.595 +08:00 [DBG] =========Yi-SQL耗时0.7804毫秒=====
2024-04-26 12:10:25.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:10:25.597 +08:00 [DBG] =========Yi-SQL耗时1.1824毫秒=====
2024-04-26 12:10:25.597 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:10:25.598 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 11.3778ms
2024-04-26 12:10:25.598 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.635 +08:00 [INF] CORS policy execution successful.
2024-04-26 12:10:25.637 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 12:10:25.923 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.923 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 12:10:25.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 12:10:25.927 +08:00 [DBG] =========Yi-SQL耗时2.2803毫秒=====
2024-04-26 12:10:25.929 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 12:10:25.930 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.5043ms
2024-04-26 12:10:25.930 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.948 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.949 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.949 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:10:25.949 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:10:25.950 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:10:25.950 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:10:25.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:10:25.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:10:25.953 +08:00 [DBG] =========Yi-SQL耗时2.227毫秒=====
2024-04-26 12:10:25.958 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.958 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:10:25.960 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.960 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:10:25.961 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:10:25.961 +08:00 [DBG] =========Yi-SQL耗时11.2314毫秒=====
2024-04-26 12:10:25.962 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:10:25.962 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:10:25.962 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.2156ms
2024-04-26 12:10:25.962 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:10:25.963 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:10:25.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:10:25.963 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.8065ms
2024-04-26 12:10:25.963 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:10:25.967 +08:00 [DBG] =========Yi-SQL耗时3.964毫秒=====
2024-04-26 12:10:25.968 +08:00 [DBG] =========Yi-SQL耗时1.7478毫秒=====
2024-04-26 12:10:25.970 +08:00 [DBG] =========Yi-SQL耗时17.7896毫秒=====
2024-04-26 12:10:25.970 +08:00 [DBG] =========Yi-SQL耗时7.7599毫秒=====
2024-04-26 12:10:25.971 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:10:25.971 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.8637ms
2024-04-26 12:10:25.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:10:25.971 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.971 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:10:25.972 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:10:25.972 +08:00 [DBG] =========Yi-SQL耗时0.6128毫秒=====
2024-04-26 12:10:25.972 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 22.0892ms
2024-04-26 12:10:25.972 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.973 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.305ms
2024-04-26 12:10:25.973 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:10:25.977 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:10:25.977 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.2907ms
2024-04-26 12:10:25.977 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:10:26.033 +08:00 [INF] 2024/4/26 12:10:26：cc,AHg1247DSUcSNBS-ixqVrA连接服务端success，当前已连接0个
2024-04-26 12:11:11.604 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:11:11.604 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:11:11.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:11:11.612 +08:00 [DBG] =========Yi-SQL耗时5.3813毫秒=====
2024-04-26 12:11:11.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:11:11.618 +08:00 [DBG] =========Yi-SQL耗时0.6595毫秒=====
2024-04-26 12:11:11.621 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:11:11.622 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 17.1845ms
2024-04-26 12:11:11.622 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:11:34.991 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:11:34.992 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:11:34.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:11:34.997 +08:00 [DBG] =========Yi-SQL耗时2.5457毫秒=====
2024-04-26 12:11:35.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:11:35.001 +08:00 [DBG] =========Yi-SQL耗时0.6766毫秒=====
2024-04-26 12:11:35.003 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:11:35.003 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.2794ms
2024-04-26 12:11:35.003 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:11:52.006 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:11:52.007 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:11:52.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:11:52.012 +08:00 [DBG] =========Yi-SQL耗时0.9457毫秒=====
2024-04-26 12:11:52.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:11:52.014 +08:00 [DBG] =========Yi-SQL耗时0.632毫秒=====
2024-04-26 12:11:52.016 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:11:52.016 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.7457ms
2024-04-26 12:11:52.016 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:12:39.663 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:12:39.663 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:12:39.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:12:39.668 +08:00 [DBG] =========Yi-SQL耗时1.4033毫秒=====
2024-04-26 12:12:39.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:12:39.672 +08:00 [DBG] =========Yi-SQL耗时0.744毫秒=====
2024-04-26 12:12:39.675 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:12:39.675 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 12.4901ms
2024-04-26 12:12:39.676 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:13:48.370 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:13:48.370 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:13:48.370 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:13:48.370 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:13:48.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'7babef20-bfad-44b0-4d33-3a11dd983965' ) 
===============================

2024-04-26 12:13:48.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'7babef20-bfad-44b0-4d33-3a11dd983965'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:13:48.442 +08:00 [DBG] =========Yi-SQL耗时64.1953毫秒=====
2024-04-26 12:13:48.444 +08:00 [DBG] =========Yi-SQL耗时70.3867毫秒=====
2024-04-26 12:13:48.446 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 12:13:48.446 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 75.9492ms
2024-04-26 12:13:48.446 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:13:48.446 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:13:48.447 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 77.0147ms
2024-04-26 12:13:48.447 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:13:50.610 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:13:50.610 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:13:50.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'fcd97b59-86bd-6321-f76e-3a11ddcb093e' ) 
===============================

2024-04-26 12:13:50.612 +08:00 [DBG] =========Yi-SQL耗时1.1125毫秒=====
2024-04-26 12:13:50.614 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:13:50.614 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 3.5454ms
2024-04-26 12:13:50.614 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:13:50.615 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:13:50.616 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:13:50.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'fcd97b59-86bd-6321-f76e-3a11ddcb093e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:13:50.624 +08:00 [DBG] =========Yi-SQL耗时1.6185毫秒=====
2024-04-26 12:13:50.626 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 12:13:50.627 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 10.85ms
2024-04-26 12:13:50.627 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:13:57.332 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:13:57.332 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:13:57.332 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:13:57.332 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:13:57.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'0247d467-c9c3-88cc-1941-3a11ddc4fa1c' ) 
===============================

2024-04-26 12:13:57.334 +08:00 [DBG] =========Yi-SQL耗时0.6345毫秒=====
2024-04-26 12:13:57.335 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:13:57.335 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 3.1164ms
2024-04-26 12:13:57.336 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:13:57.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'0247d467-c9c3-88cc-1941-3a11ddc4fa1c'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:13:57.338 +08:00 [DBG] =========Yi-SQL耗时0.7462毫秒=====
2024-04-26 12:13:57.341 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 12:13:57.341 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 8.8717ms
2024-04-26 12:13:57.341 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:13:59.369 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:13:59.369 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:13:59.369 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:13:59.369 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:13:59.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'e82aed0b-ba73-baaa-f943-3a11ddc92015' ) 
===============================

2024-04-26 12:13:59.371 +08:00 [DBG] =========Yi-SQL耗时0.639毫秒=====
2024-04-26 12:13:59.372 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:13:59.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'e82aed0b-ba73-baaa-f943-3a11ddc92015'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:13:59.373 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 3.8608ms
2024-04-26 12:13:59.373 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:13:59.373 +08:00 [DBG] =========Yi-SQL耗时0.579毫秒=====
2024-04-26 12:13:59.376 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 12:13:59.376 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 7.5956ms
2024-04-26 12:13:59.376 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:14:00.875 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:14:00.875 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:14:00.875 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:14:00.875 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:14:00.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'e24bcb66-e800-5459-2b95-3a11ddca41d0' ) 
===============================

2024-04-26 12:14:00.877 +08:00 [DBG] =========Yi-SQL耗时0.5892毫秒=====
2024-04-26 12:14:00.878 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:14:00.878 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 3.0608ms
2024-04-26 12:14:00.878 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:14:00.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'e24bcb66-e800-5459-2b95-3a11ddca41d0'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:14:00.881 +08:00 [DBG] =========Yi-SQL耗时1.1232毫秒=====
2024-04-26 12:14:00.885 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 12:14:00.885 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 10.0781ms
2024-04-26 12:14:00.885 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:14:02.675 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:14:02.675 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:14:02.675 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:14:02.676 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:14:02.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'fcd97b59-86bd-6321-f76e-3a11ddcb093e' ) 
===============================

2024-04-26 12:14:02.677 +08:00 [DBG] =========Yi-SQL耗时0.7169毫秒=====
2024-04-26 12:14:02.678 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:14:02.678 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 3.352ms
2024-04-26 12:14:02.678 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:14:02.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'fcd97b59-86bd-6321-f76e-3a11ddcb093e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:14:02.682 +08:00 [DBG] =========Yi-SQL耗时1.3378毫秒=====
2024-04-26 12:14:02.685 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 12:14:02.686 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 10.0213ms
2024-04-26 12:14:02.686 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:14:04.957 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:14:04.957 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:14:04.957 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:14:04.957 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:14:04.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'214455e9-f225-71ff-8935-3a122ab10665' ) 
===============================

2024-04-26 12:14:04.958 +08:00 [DBG] =========Yi-SQL耗时0.7988毫秒=====
2024-04-26 12:14:04.960 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:14:04.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'214455e9-f225-71ff-8935-3a122ab10665'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:14:04.960 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 3.5065ms
2024-04-26 12:14:04.961 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:14:04.961 +08:00 [DBG] =========Yi-SQL耗时1.0872毫秒=====
2024-04-26 12:14:04.965 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 12:14:04.965 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 7.9341ms
2024-04-26 12:14:04.965 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:14:04.971 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-26 12:14:04.971 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:14:04.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"   WHERE ( "id" = N'eb5ab0d2-8b61-05ab-ff9e-3a122ab107dc' )   LIMIT 1 offset 0
===============================

2024-04-26 12:14:04.973 +08:00 [DBG] =========Yi-SQL耗时0.7762毫秒=====
2024-04-26 12:14:04.976 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 12:14:04.979 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application) in 8.249ms
2024-04-26 12:14:04.979 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-26 12:14:34.504 +08:00 [INF] CORS policy execution successful.
2024-04-26 12:14:34.506 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-26 12:14:34.506 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:14:34.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name")
     VALUES
           (N'896c8c78-a65c-254e-a314-3a122ac98e16',0,N'7',N'1',N'7',N'7',N'7',N'7',N'7',null,CAST('2024-04-26 12:14:34.517' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151',null) ;
===============================

2024-04-26 12:14:34.535 +08:00 [DBG] =========Yi-SQL耗时8.6956毫秒=====
2024-04-26 12:14:34.537 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 12:14:34.537 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 31.4883ms
2024-04-26 12:14:34.537 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-26 12:14:34.558 +08:00 [INF] CORS policy execution successful.
2024-04-26 12:14:34.565 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:14:34.565 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.Post (Yi.Abp.Application)'
2024-04-26 12:14:34.565 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection, System.Nullable`1[System.Guid]) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:14:34.565 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:14:34.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:14:34.569 +08:00 [DBG] =========Yi-SQL耗时1.5305毫秒=====
2024-04-26 12:14:34.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:14:34.577 +08:00 [DBG] =========Yi-SQL耗时3.5608毫秒=====
2024-04-26 12:14:34.584 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:14:34.585 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 20.1976ms
2024-04-26 12:14:34.586 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:14:34.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "filelist"  
           ("id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp")
     VALUES
           (N'a7b1c89f-b488-6a0a-0712-3a122ac98e50',14.890625,N'01e95186-f3c7-2a02-c4a2-3a11dd15e855.png',N'wwwroot/Image\a7b1c89f-b488-6a0a-0712-3a122ac98e50.png',N'896c8c78-a65c-254e-a314-3a122ac98e16',CAST('2024-04-26 12:14:34.590' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,N'32c75772968e420ea7fb9b1a15b6d3e7') ;
===============================

2024-04-26 12:14:34.600 +08:00 [DBG] =========Yi-SQL耗时2.1431毫秒=====
2024-04-26 12:14:34.600 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:14:34.600 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.Post (Yi.Abp.Application) in 34.9794ms
2024-04-26 12:14:34.600 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.Post (Yi.Abp.Application)'
2024-04-26 12:14:36.324 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:14:36.324 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:14:36.325 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:14:36.325 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:14:36.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'896c8c78-a65c-254e-a314-3a122ac98e16'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:14:36.326 +08:00 [DBG] =========Yi-SQL耗时0.6513毫秒=====
2024-04-26 12:14:36.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'896c8c78-a65c-254e-a314-3a122ac98e16' ) 
===============================

2024-04-26 12:14:36.327 +08:00 [DBG] =========Yi-SQL耗时0.7284毫秒=====
2024-04-26 12:14:36.329 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 12:14:36.329 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:14:36.330 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 6.0213ms
2024-04-26 12:14:36.330 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:14:36.330 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 5.0092ms
2024-04-26 12:14:36.330 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:14:36.343 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-26 12:14:36.343 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:14:36.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"   WHERE ( "id" = N'a7b1c89f-b488-6a0a-0712-3a122ac98e50' )   LIMIT 1 offset 0
===============================

2024-04-26 12:14:36.344 +08:00 [DBG] =========Yi-SQL耗时0.5874毫秒=====
2024-04-26 12:14:36.346 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 12:14:36.346 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application) in 3.2207ms
2024-04-26 12:14:36.346 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-26 12:14:48.574 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:14:48.574 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:14:48.574 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-26 12:14:48.574 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:14:48.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'896c8c78-a65c-254e-a314-3a122ac98e16' ) 
===============================

2024-04-26 12:14:48.576 +08:00 [DBG] =========Yi-SQL耗时0.9423毫秒=====
2024-04-26 12:14:48.577 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:14:48.577 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 3.6321ms
2024-04-26 12:14:48.578 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-26 12:14:48.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"  WHERE "id" = N'896c8c78-a65c-254e-a314-3a122ac98e16'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:14:48.579 +08:00 [DBG] =========Yi-SQL耗时0.9382毫秒=====
2024-04-26 12:14:48.582 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-26 12:14:48.582 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 8.279ms
2024-04-26 12:14:48.582 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-26 12:15:49.167 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 12:15:49.172 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 12:15:49.846 +08:00 [INF] CORS policy execution successful.
2024-04-26 12:15:49.848 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 12:15:49.848 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 12:15:49.873 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:49.874 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 12:15:49.876 +08:00 [INF] CORS policy execution successful.
2024-04-26 12:15:49.877 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 12:15:49.878 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.8885ms
2024-04-26 12:15:49.878 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:49.879 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 12:15:49.892 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:49.892 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 12:15:49.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:15:49.908 +08:00 [DBG] =========Yi-SQL耗时3.5349毫秒=====
2024-04-26 12:15:49.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 12:15:49.913 +08:00 [DBG] =========Yi-SQL耗时3.7475毫秒=====
2024-04-26 12:15:49.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 12:15:49.916 +08:00 [DBG] =========Yi-SQL耗时2.0905毫秒=====
2024-04-26 12:15:49.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:15:49.920 +08:00 [DBG] =========Yi-SQL耗时2.7993毫秒=====
2024-04-26 12:15:49.921 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:15:49.921 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 28.8435ms
2024-04-26 12:15:49.921 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:49.926 +08:00 [INF] 2024/4/26 12:15:49：cc,yIvBmcAd0IJmtqobva4PYw连接服务端success，当前已连接0个
2024-04-26 12:15:50.104 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:50.105 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 12:15:50.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 12:15:50.108 +08:00 [DBG] =========Yi-SQL耗时1.7602毫秒=====
2024-04-26 12:15:50.111 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 12:15:50.111 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.5927ms
2024-04-26 12:15:50.111 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.225 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.226 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:15:52.227 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.227 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.227 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:15:52.227 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:15:52.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:15:52.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:15:52.234 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:15:52.236 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 12:15:52.237 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:15:52.239 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:15:52.240 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.240 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 12:15:52.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:15:52.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:15:52.240 +08:00 [DBG] =========Yi-SQL耗时12.5215毫秒=====
2024-04-26 12:15:52.241 +08:00 [DBG] =========Yi-SQL耗时7.2233毫秒=====
2024-04-26 12:15:52.241 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:15:52.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 12:15:52.242 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 14.6294ms
2024-04-26 12:15:52.242 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.248 +08:00 [DBG] =========Yi-SQL耗时6.3807毫秒=====
2024-04-26 12:15:52.252 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:15:52.252 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.415ms
2024-04-26 12:15:52.252 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.254 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:15:52.254 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 26.8269ms
2024-04-26 12:15:52.254 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.362 +08:00 [DBG] =========Yi-SQL耗时123.6316毫秒=====
2024-04-26 12:15:52.367 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:15:52.368 +08:00 [DBG] =========Yi-SQL耗时127.6221毫秒=====
2024-04-26 12:15:52.368 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 141.9237ms
2024-04-26 12:15:52.368 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.369 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:15:52.370 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 130.9225ms
2024-04-26 12:15:52.370 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 12:15:52.385 +08:00 [DBG] =========Yi-SQL耗时144.3119毫秒=====
2024-04-26 12:15:52.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 12:15:52.386 +08:00 [DBG] =========Yi-SQL耗时0.5505毫秒=====
2024-04-26 12:15:52.387 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 12:15:52.388 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 151.7019ms
2024-04-26 12:15:52.388 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 12:15:59.906 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 12:15:59.907 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:28:55.315 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-26 14:28:55.331 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-26 14:29:03.967 +08:00 [INF] Loaded ABP modules:
2024-04-26 14:29:03.967 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-26 14:29:03.967 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-26 14:29:03.967 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-26 14:29:03.967 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-26 14:29:03.967 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-26 14:29:03.967 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-26 14:29:03.967 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-26 14:29:03.967 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-26 14:29:03.967 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-26 14:29:03.967 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-26 14:29:03.967 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-26 14:29:03.967 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-26 14:29:03.967 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-26 14:29:03.967 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-26 14:29:03.967 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-26 14:29:03.967 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-26 14:29:03.967 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-26 14:29:03.967 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-26 14:29:03.967 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-26 14:29:03.967 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-26 14:29:03.967 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-26 14:29:03.967 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-26 14:29:03.967 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-26 14:29:03.967 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-26 14:29:03.967 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-26 14:29:03.967 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-26 14:29:03.967 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-26 14:29:03.967 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-26 14:29:03.967 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-26 14:29:03.967 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-26 14:29:03.967 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-26 14:29:03.967 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-26 14:29:03.967 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-26 14:29:03.967 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-26 14:29:03.967 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-26 14:29:03.967 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-26 14:29:03.967 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-26 14:29:03.967 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-26 14:29:03.967 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-26 14:29:03.968 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-26 14:29:03.968 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-26 14:29:03.968 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-26 14:29:03.968 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-26 14:29:03.968 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-26 14:29:03.968 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-26 14:29:03.968 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-26 14:29:03.968 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-26 14:29:03.968 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-26 14:29:03.968 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-26 14:29:03.968 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-26 14:29:03.968 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-26 14:29:03.968 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-26 14:29:03.968 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-26 14:29:03.968 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-26 14:29:03.968 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-26 14:29:03.968 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-26 14:29:03.968 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-04-26 14:29:03.968 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-04-26 14:29:03.968 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-04-26 14:29:03.968 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-26 14:29:03.968 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-26 14:29:03.968 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-26 14:29:03.968 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-26 14:29:03.968 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-26 14:29:03.968 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-26 14:29:03.968 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-26 14:29:03.968 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-26 14:29:03.968 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-26 14:29:03.968 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-26 14:29:03.973 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-26 14:29:03.979 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-26 14:29:04.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:04.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:04.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 14:29:04.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:04.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 14:29:04.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:04.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:04.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 14:29:04.931 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-26 14:29:04.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-26 14:29:04.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-26 14:29:04.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-26 14:29:04.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-26 14:29:04.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-26 14:29:04.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-26 14:29:04.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-26 14:29:04.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-26 14:29:04.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-26 14:29:04.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:04.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 14:29:04.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:04.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:04.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 14:29:04.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-26 14:29:04.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-26 14:29:04.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-26 14:29:04.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-26 14:29:04.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-26 14:29:04.965 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-26 14:29:04.965 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-26 14:29:04.965 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:04.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 14:29:04.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:04.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:04.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 14:29:04.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-26 14:29:04.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-26 14:29:04.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-26 14:29:04.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-26 14:29:04.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 14:29:04.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 14:29:04.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-26 14:29:04.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-26 14:29:04.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-26 14:29:04.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-26 14:29:04.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-26 14:29:04.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-26 14:29:04.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-26 14:29:04.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-26 14:29:04.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:04.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:04.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 14:29:04.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 14:29:05.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-26 14:29:05.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-26 14:29:05.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-26 14:29:05.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-26 14:29:05.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-26 14:29:05.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-26 14:29:05.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-26 14:29:05.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-26 14:29:05.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-26 14:29:05.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-26 14:29:05.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-26 14:29:05.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 14:29:05.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 14:29:05.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-26 14:29:05.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-26 14:29:05.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-26 14:29:05.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-26 14:29:05.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-26 14:29:05.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-26 14:29:05.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-26 14:29:05.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 14:29:05.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 14:29:05.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-26 14:29:05.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-26 14:29:05.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-26 14:29:05.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.067 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 14:29:05.069 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 14:29:05.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-26 14:29:05.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-26 14:29:05.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-26 14:29:05.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-26 14:29:05.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-26 14:29:05.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-26 14:29:05.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 14:29:05.093 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 14:29:05.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 14:29:05.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-26 14:29:05.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-26 14:29:05.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-26 14:29:05.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-26 14:29:05.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 14:29:05.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 14:29:05.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-26 14:29:05.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-26 14:29:05.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-26 14:29:05.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-26 14:29:05.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-26 14:29:05.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-26 14:29:05.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-26 14:29:05.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-26 14:29:05.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-26 14:29:05.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-26 14:29:05.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-26 14:29:05.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-26 14:29:05.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.129 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 14:29:05.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 14:29:05.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-26 14:29:05.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-26 14:29:05.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-26 14:29:05.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 14:29:05.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.160 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 14:29:05.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-26 14:29:05.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-26 14:29:05.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-26 14:29:05.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-26 14:29:05.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 14:29:05.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 14:29:05.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-26 14:29:05.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-26 14:29:05.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-26 14:29:05.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-26 14:29:05.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-26 14:29:05.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-26 14:29:05.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 14:29:05.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.183 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 14:29:05.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-26 14:29:05.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-26 14:29:05.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-26 14:29:05.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-26 14:29:05.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 14:29:05.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 14:29:05.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-26 14:29:05.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-26 14:29:05.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-26 14:29:05.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-26 14:29:05.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 14:29:05.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 14:29:05.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-26 14:29:05.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-26 14:29:05.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-26 14:29:05.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-26 14:29:05.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-26 14:29:05.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-26 14:29:05.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-26 14:29:05.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 14:29:05.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 14:29:05.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-26 14:29:05.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-26 14:29:05.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 14:29:05.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 14:29:05.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-26 14:29:05.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-26 14:29:05.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-26 14:29:05.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-26 14:29:05.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-26 14:29:05.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-26 14:29:05.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-26 14:29:05.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-26 14:29:05.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-26 14:29:05.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-26 14:29:05.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-26 14:29:05.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-26 14:29:05.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-26 14:29:05.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-26 14:29:05.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-26 14:29:05.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-26 14:29:05.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-26 14:29:05.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-26 14:29:05.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-26 14:29:05.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 14:29:05.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 14:29:05.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-26 14:29:05.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-26 14:29:05.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-26 14:29:05.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 14:29:05.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.275 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 14:29:05.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.289 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 14:29:05.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-26 14:29:05.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-26 14:29:05.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-26 14:29:05.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-26 14:29:05.292 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.297 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 14:29:05.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 14:29:05.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-26 14:29:05.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-26 14:29:05.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-26 14:29:05.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-26 14:29:05.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 14:29:05.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 14:29:05.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-26 14:29:05.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 14:29:05.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 14:29:05.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 14:29:05.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 14:29:05.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 14:29:05.363 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 14:29:05.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 14:29:05.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 14:29:05.383 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 14:29:05.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 14:29:05.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 14:29:05.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 14:29:05.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 14:29:05.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 14:29:05.429 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.429 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 14:29:05.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 14:29:05.438 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 14:29:05.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-26 14:29:05.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-26 14:29:05.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-26 14:29:05.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 14:29:05.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.467 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 14:29:05.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-26 14:29:05.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 14:29:05.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.496 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 14:29:05.498 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-26 14:29:05.499 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-26 14:29:05.499 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-26 14:29:05.499 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-26 14:29:05.499 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-26 14:29:05.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 14:29:05.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 14:29:05.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-26 14:29:05.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-26 14:29:05.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 14:29:05.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 14:29:05.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 14:29:05.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-26 14:29:05.543 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-26 14:29:05.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-26 14:29:05.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-26 14:29:05.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 14:29:05.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 14:29:05.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 14:29:05.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 14:29:05.654 +08:00 [DBG] =========Yi-SQL耗时8.9655毫秒=====
2024-04-26 14:29:05.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 14:29:05.669 +08:00 [DBG] =========Yi-SQL耗时1.3955毫秒=====
2024-04-26 14:29:05.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 14:29:05.674 +08:00 [DBG] =========Yi-SQL耗时1.3855毫秒=====
2024-04-26 14:29:05.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 14:29:05.681 +08:00 [DBG] =========Yi-SQL耗时3.0738毫秒=====
2024-04-26 14:29:05.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 14:29:05.685 +08:00 [DBG] =========Yi-SQL耗时1.3858毫秒=====
2024-04-26 14:29:05.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 14:29:05.689 +08:00 [DBG] =========Yi-SQL耗时1.0703毫秒=====
2024-04-26 14:29:05.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 14:29:05.696 +08:00 [DBG] =========Yi-SQL耗时1.7165毫秒=====
2024-04-26 14:29:05.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-26 14:29:05.701 +08:00 [DBG] =========Yi-SQL耗时1.7831毫秒=====
2024-04-26 14:29:05.709 +08:00 [DBG] 耗时-1735ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-26 14:29:05.775 +08:00 [DBG] 耗时-63ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-26 14:29:05.779 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-26 14:29:05.841 +08:00 [DBG] 耗时-61ms,已加载模块-Volo.Abp.AspNetCore
2024-04-26 14:29:05.846 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-26 14:29:05.867 +08:00 [DBG] 耗时-20ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 14:29:05.872 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-26 14:29:06.157 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-26 14:29:06.221 +08:00 [DBG] 耗时-349ms,已加载模块-Yi.Abp.Web
2024-04-26 14:29:06.222 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2240ms】==========
2024-04-26 14:29:06.327 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-26 14:29:06.327 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-26 14:29:06.327 +08:00 [INF] Hosting environment: Development
2024-04-26 14:29:06.327 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-26 14:29:08.379 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:29:08.394 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:29:08.523 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-26 14:29:08.569 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 172.2302ms
2024-04-26 14:29:08.569 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:29:32.884 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:29:32.887 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:29:32.895 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:29:32.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 14:29:32.953 +08:00 [DBG] =========Yi-SQL耗时3.3127毫秒=====
2024-04-26 14:29:33.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:29:33.017 +08:00 [DBG] =========Yi-SQL耗时1.7713毫秒=====
2024-04-26 14:29:33.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:29:33.041 +08:00 [DBG] =========Yi-SQL耗时3.7258毫秒=====
2024-04-26 14:29:33.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:29:33.052 +08:00 [DBG] =========Yi-SQL耗时0.8226毫秒=====
2024-04-26 14:29:33.201 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-26 14:29:33.209 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 313.5412ms
2024-04-26 14:29:33.209 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:29:33.223 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:29:33.232 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-04-26 14:29:33.257 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:29:33.260 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:29:33.261 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:29:33.263 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:29:33.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:29:33.275 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:29:33.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'6ab323e6-8222-5b24-837c-3a122b4521bd',CAST('2024-04-26 14:29:33.255' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-26 14:29:33.276 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:29:33.288 +08:00 [DBG] =========Yi-SQL耗时12.5895毫秒=====
2024-04-26 14:29:33.346 +08:00 [INF] 2024/4/26 14:29:33：cc,IYrunum6qYWz-U4JpyLohg连接服务端success，当前已连接0个
2024-04-26 14:29:33.359 +08:00 [DBG] =========Yi-SQL耗时85.1427毫秒=====
2024-04-26 14:29:33.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:29:33.361 +08:00 [DBG] =========Yi-SQL耗时0.3446毫秒=====
2024-04-26 14:29:33.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:29:33.362 +08:00 [DBG] =========Yi-SQL耗时0.627毫秒=====
2024-04-26 14:29:33.393 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:29:33.406 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 142.7438ms
2024-04-26 14:29:33.406 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:29:33.415 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:29:33.418 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:29:33.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:29:33.425 +08:00 [DBG] =========Yi-SQL耗时1.1732毫秒=====
2024-04-26 14:29:33.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:29:33.428 +08:00 [DBG] =========Yi-SQL耗时0.7282毫秒=====
2024-04-26 14:29:33.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:29:33.429 +08:00 [DBG] =========Yi-SQL耗时0.3018毫秒=====
2024-04-26 14:29:33.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:29:33.433 +08:00 [DBG] =========Yi-SQL耗时1.3833毫秒=====
2024-04-26 14:29:33.461 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:29:33.464 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 45.1062ms
2024-04-26 14:29:33.464 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:29:33.642 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:29:33.645 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:29:33.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:29:33.657 +08:00 [DBG] =========Yi-SQL耗时3.1995毫秒=====
2024-04-26 14:29:33.666 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:29:33.669 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 23.7645ms
2024-04-26 14:29:33.669 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:35.172 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:35.181 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:35.184 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:35.184 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:35.187 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:35.220 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:35.221 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:35.221 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:35.251 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:35.252 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:35.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:35.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:35.261 +08:00 [DBG] =========Yi-SQL耗时1.8286毫秒=====
2024-04-26 14:30:35.262 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:30:35.264 +08:00 [DBG] =========Yi-SQL耗时5.6347毫秒=====
2024-04-26 14:30:35.272 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:30:35.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:35.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:35.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:35.284 +08:00 [DBG] =========Yi-SQL耗时10.9036毫秒=====
2024-04-26 14:30:35.285 +08:00 [DBG] =========Yi-SQL耗时11.5634毫秒=====
2024-04-26 14:30:35.296 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:35.296 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:35.298 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:35.300 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 78.956ms
2024-04-26 14:30:35.300 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 48.34ms
2024-04-26 14:30:35.300 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:35.300 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:35.304 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 83.7192ms
2024-04-26 14:30:35.304 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:35.318 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:35.325 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 137.0811ms
2024-04-26 14:30:35.325 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:35.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:35.372 +08:00 [DBG] =========Yi-SQL耗时4.3767毫秒=====
2024-04-26 14:30:35.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:30:35.393 +08:00 [DBG] =========Yi-SQL耗时1.6439毫秒=====
2024-04-26 14:30:35.426 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:35.447 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 174.3466ms
2024-04-26 14:30:35.447 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:30:35.490 +08:00 [DBG] =========Yi-SQL耗时216.336毫秒=====
2024-04-26 14:30:35.492 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:35.492 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 310.8253ms
2024-04-26 14:30:35.492 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:44.183 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:44.183 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:44.183 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:44.183 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:44.184 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:44.184 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:44.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:44.189 +08:00 [DBG] =========Yi-SQL耗时2.8452毫秒=====
2024-04-26 14:30:44.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:44.193 +08:00 [DBG] =========Yi-SQL耗时1.2563毫秒=====
2024-04-26 14:30:44.194 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:44.194 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:44.195 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:44.195 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:44.196 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 11.8505ms
2024-04-26 14:30:44.196 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:44.196 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 11.8586ms
2024-04-26 14:30:44.196 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:44.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-26 14:30:44.259 +08:00 [DBG] =========Yi-SQL耗时3.5101毫秒=====
2024-04-26 14:30:44.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-26 14:30:44.262 +08:00 [DBG] =========Yi-SQL耗时1.1916毫秒=====
2024-04-26 14:30:44.277 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:44.280 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 85.8136ms
2024-04-26 14:30:44.280 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:44.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-26 14:30:44.316 +08:00 [DBG] =========Yi-SQL耗时3.8707毫秒=====
2024-04-26 14:30:44.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-26 14:30:44.331 +08:00 [DBG] =========Yi-SQL耗时2.574毫秒=====
2024-04-26 14:30:44.334 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:44.343 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 148.6062ms
2024-04-26 14:30:44.343 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.084 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:30:53.097 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:30:53.409 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:30:53.413 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:30:53.414 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:30:53.421 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.422 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:53.448 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:30:53.452 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:30:53.467 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:30:53.467 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 45.5731ms
2024-04-26 14:30:53.467 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.479 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.479 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:53.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:53.482 +08:00 [DBG] =========Yi-SQL耗时0.8626毫秒=====
2024-04-26 14:30:53.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:30:53.485 +08:00 [DBG] =========Yi-SQL耗时0.5291毫秒=====
2024-04-26 14:30:53.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:30:53.487 +08:00 [DBG] =========Yi-SQL耗时1.8365毫秒=====
2024-04-26 14:30:53.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:53.491 +08:00 [DBG] =========Yi-SQL耗时1.6971毫秒=====
2024-04-26 14:30:53.493 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:53.494 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 14.276ms
2024-04-26 14:30:53.494 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.496 +08:00 [INF] 2024/4/26 14:30:53：cc,wpJ_4kAJuXC9Cp1gaT26_w连接服务端success，当前已连接0个
2024-04-26 14:30:53.694 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.694 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:53.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:30:53.700 +08:00 [DBG] =========Yi-SQL耗时2.8631毫秒=====
2024-04-26 14:30:53.712 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:30:53.715 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 20.3505ms
2024-04-26 14:30:53.715 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.870 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.870 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.870 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.870 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:53.870 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:53.870 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:53.870 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.870 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-26 14:30:53.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:53.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:30:53.875 +08:00 [DBG] =========Yi-SQL耗时3.9372毫秒=====
2024-04-26 14:30:53.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-26 14:30:53.875 +08:00 [DBG] =========Yi-SQL耗时4.2955毫秒=====
2024-04-26 14:30:53.911 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:53.911 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 41.4348ms
2024-04-26 14:30:53.911 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-26 14:30:53.943 +08:00 [DBG] =========Yi-SQL耗时67.4854毫秒=====
2024-04-26 14:30:53.943 +08:00 [DBG] =========Yi-SQL耗时29.2047毫秒=====
2024-04-26 14:30:53.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-26 14:30:53.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-26 14:30:53.947 +08:00 [DBG] =========Yi-SQL耗时2.6673毫秒=====
2024-04-26 14:30:53.948 +08:00 [DBG] =========Yi-SQL耗时2.7153毫秒=====
2024-04-26 14:30:53.948 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:53.949 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 78.9424ms
2024-04-26 14:30:53.949 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.951 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:53.956 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 85.8291ms
2024-04-26 14:30:53.956 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:30:53.959 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:30:53.960 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 89.7113ms
2024-04-26 14:30:53.960 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 14:31:30.050 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:31:30.058 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:31:30.348 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:31:30.350 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:31:30.351 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:31:30.360 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:31:30.360 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:31:30.368 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:31:30.375 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 13.8649ms
2024-04-26 14:31:30.376 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:31:30.396 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:31:30.398 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:31:30.405 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:31:30.406 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:31:30.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:31:30.408 +08:00 [DBG] =========Yi-SQL耗时0.9181毫秒=====
2024-04-26 14:31:30.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:31:30.413 +08:00 [DBG] =========Yi-SQL耗时2.4101毫秒=====
2024-04-26 14:31:30.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:31:30.415 +08:00 [DBG] =========Yi-SQL耗时0.7014毫秒=====
2024-04-26 14:31:30.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:31:30.416 +08:00 [DBG] =========Yi-SQL耗时0.8255毫秒=====
2024-04-26 14:31:30.416 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:31:30.417 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 11.0965ms
2024-04-26 14:31:30.417 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:31:30.476 +08:00 [INF] 2024/4/26 14:31:30：cc,UyZDgtPaRXxEN3nDQ4HmEQ连接服务端success，当前已连接0个
2024-04-26 14:31:30.600 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:31:30.600 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:31:30.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:31:30.628 +08:00 [DBG] =========Yi-SQL耗时25.1949毫秒=====
2024-04-26 14:31:30.641 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:31:30.642 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 41.6035ms
2024-04-26 14:31:30.642 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:35:21.779 +08:00 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2024-04-26 14:35:21.782 +08:00 [INF] AuthenticationScheme: Bearer was challenged.
2024-04-26 14:37:26.648 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:26.648 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:26.648 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:26.684 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:26.715 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:26.717 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:37:26.718 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:37:26.756 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:37:26.756 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:37:26.761 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:37:26.762 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:26.762 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:37:26.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:37:26.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:37:26.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:37:26.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:37:26.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:37:26.913 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:37:26.925 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 168.7399ms
2024-04-26 14:37:26.925 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:26.946 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:37:26.947 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:37:26.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:37:27.109 +08:00 [DBG] =========Yi-SQL耗时196.5563毫秒=====
2024-04-26 14:37:27.109 +08:00 [DBG] =========Yi-SQL耗时141.0433毫秒=====
2024-04-26 14:37:27.109 +08:00 [DBG] =========Yi-SQL耗时197.511毫秒=====
2024-04-26 14:37:27.109 +08:00 [DBG] =========Yi-SQL耗时195.777毫秒=====
2024-04-26 14:37:27.109 +08:00 [DBG] =========Yi-SQL耗时196.6301毫秒=====
2024-04-26 14:37:27.109 +08:00 [DBG] =========Yi-SQL耗时196.2879毫秒=====
2024-04-26 14:37:27.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:37:27.111 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:37:27.111 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:37:27.112 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:37:27.112 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 303.5921ms
2024-04-26 14:37:27.112 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 394.1755ms
2024-04-26 14:37:27.112 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:27.112 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:27.112 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 394.1967ms
2024-04-26 14:37:27.112 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:27.112 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:37:27.113 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 351.275ms
2024-04-26 14:37:27.113 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:27.113 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:37:27.113 +08:00 [DBG] =========Yi-SQL耗时2.2864毫秒=====
2024-04-26 14:37:27.115 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 359.3434ms
2024-04-26 14:37:27.115 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:37:27.124 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:37:27.125 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 177.4289ms
2024-04-26 14:37:27.125 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:38:10.690 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:10.690 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:38:10.690 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:38:10.690 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:38:10.693 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:38:10.694 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.6638ms
2024-04-26 14:38:10.694 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:10.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:38:10.698 +08:00 [DBG] =========Yi-SQL耗时1.8831毫秒=====
2024-04-26 14:38:10.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:38:10.702 +08:00 [DBG] =========Yi-SQL耗时1.5321毫秒=====
2024-04-26 14:38:10.705 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:38:10.705 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.0355ms
2024-04-26 14:38:10.705 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:38:14.245 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:38:14.246 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:38:15.018 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:38:15.027 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:38:15.031 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:38:15.040 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.041 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:38:15.044 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:38:15.045 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.7641ms
2024-04-26 14:38:15.045 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.050 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:38:15.054 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:38:15.073 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.074 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:38:15.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:38:15.094 +08:00 [DBG] =========Yi-SQL耗时11.8097毫秒=====
2024-04-26 14:38:15.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:38:15.104 +08:00 [DBG] =========Yi-SQL耗时6.2291毫秒=====
2024-04-26 14:38:15.109 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:38:15.113 +08:00 [DBG] =========Yi-SQL耗时4.2931毫秒=====
2024-04-26 14:38:15.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:38:15.120 +08:00 [DBG] =========Yi-SQL耗时3.9649毫秒=====
2024-04-26 14:38:15.121 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:38:15.122 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 47.8472ms
2024-04-26 14:38:15.122 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.175 +08:00 [INF] 2024/4/26 14:38:15：cc,hXQMcQUqc4rIfxQbIxULtQ连接服务端success，当前已连接0个
2024-04-26 14:38:15.258 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.260 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:38:15.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:38:15.267 +08:00 [DBG] =========Yi-SQL耗时3.5168毫秒=====
2024-04-26 14:38:15.274 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:38:15.279 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 19.3156ms
2024-04-26 14:38:15.279 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.464 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.464 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:38:15.465 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.465 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:38:15.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:38:15.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:38:15.467 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.473 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:38:15.473 +08:00 [DBG] =========Yi-SQL耗时6.8216毫秒=====
2024-04-26 14:38:15.514 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.514 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:38:15.515 +08:00 [DBG] =========Yi-SQL耗时48.7535毫秒=====
2024-04-26 14:38:15.515 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:38:15.516 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 50.9431ms
2024-04-26 14:38:15.516 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:38:15.517 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:38:15.521 +08:00 [DBG] =========Yi-SQL耗时5.045毫秒=====
2024-04-26 14:38:15.527 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:38:15.522 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 48.4797ms
2024-04-26 14:38:15.528 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.3171ms
2024-04-26 14:38:15.528 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.528 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.529 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.529 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:38:15.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:38:15.537 +08:00 [DBG] =========Yi-SQL耗时3.9121毫秒=====
2024-04-26 14:38:15.538 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:38:15.538 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 73.4866ms
2024-04-26 14:38:15.538 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.538 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.540 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:38:15.540 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:38:15.540 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.5867ms
2024-04-26 14:38:15.540 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:38:15.549 +08:00 [DBG] =========Yi-SQL耗时5.5822毫秒=====
2024-04-26 14:38:15.550 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:38:15.550 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.4872ms
2024-04-26 14:38:15.550 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:38:15.557 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:38:15.557 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:38:15.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:38:15.565 +08:00 [DBG] =========Yi-SQL耗时2.0134毫秒=====
2024-04-26 14:38:15.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:38:15.574 +08:00 [DBG] =========Yi-SQL耗时5.5419毫秒=====
2024-04-26 14:38:15.584 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:38:15.585 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 27.3573ms
2024-04-26 14:38:15.585 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:39:17.522 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:39:17.523 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:17.523 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:39:17.523 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:17.526 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:39:17.526 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.1021ms
2024-04-26 14:39:17.526 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:17.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:17.529 +08:00 [DBG] =========Yi-SQL耗时1.0754毫秒=====
2024-04-26 14:39:17.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:39:17.532 +08:00 [DBG] =========Yi-SQL耗时1.2287毫秒=====
2024-04-26 14:39:17.535 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:17.536 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 12.6439ms
2024-04-26 14:39:17.536 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:39:20.904 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:39:20.910 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:39:21.632 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:39:21.637 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:39:21.637 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:39:21.645 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:21.646 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:21.649 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:39:21.650 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.3963ms
2024-04-26 14:39:21.650 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:21.660 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:39:21.662 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:39:21.676 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:21.676 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:21.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:21.700 +08:00 [DBG] =========Yi-SQL耗时19.5565毫秒=====
2024-04-26 14:39:21.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:39:21.706 +08:00 [DBG] =========Yi-SQL耗时3.7963毫秒=====
2024-04-26 14:39:21.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:39:21.710 +08:00 [DBG] =========Yi-SQL耗时2.4857毫秒=====
2024-04-26 14:39:21.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:21.714 +08:00 [DBG] =========Yi-SQL耗时2.6816毫秒=====
2024-04-26 14:39:21.716 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:21.717 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 40.7527ms
2024-04-26 14:39:21.717 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:21.743 +08:00 [INF] 2024/4/26 14:39:21：cc,fTrKx-dSIDIP2TkwoySosQ连接服务端success，当前已连接0个
2024-04-26 14:39:21.936 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:21.936 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:21.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:39:21.949 +08:00 [DBG] =========Yi-SQL耗时9.9814毫秒=====
2024-04-26 14:39:21.952 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:39:21.952 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 16.18ms
2024-04-26 14:39:21.952 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.225 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.225 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:22.227 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:39:22.228 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.2696ms
2024-04-26 14:39:22.228 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.231 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.231 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.232 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:22.232 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:22.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:22.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:22.242 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.242 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:22.246 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:39:22.246 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:39:22.247 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.247 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:22.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:22.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:22.253 +08:00 [DBG] =========Yi-SQL耗时4.4182毫秒=====
2024-04-26 14:39:22.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:22.259 +08:00 [DBG] =========Yi-SQL耗时6.5672毫秒=====
2024-04-26 14:39:22.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:39:22.268 +08:00 [DBG] =========Yi-SQL耗时15.7835毫秒=====
2024-04-26 14:39:22.269 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:22.269 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 27.1328ms
2024-04-26 14:39:22.269 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:22.269 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.269 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 21.9132ms
2024-04-26 14:39:22.269 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.270 +08:00 [DBG] =========Yi-SQL耗时10.6865毫秒=====
2024-04-26 14:39:22.272 +08:00 [DBG] =========Yi-SQL耗时38.6367毫秒=====
2024-04-26 14:39:22.273 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.273 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:22.273 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:22.274 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 42.167ms
2024-04-26 14:39:22.274 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:22.274 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.274 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 27.5378ms
2024-04-26 14:39:22.274 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:39:22.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:22.306 +08:00 [DBG] =========Yi-SQL耗时72.8479毫秒=====
2024-04-26 14:39:22.307 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:22.307 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 75.3988ms
2024-04-26 14:39:22.307 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:22.338 +08:00 [DBG] =========Yi-SQL耗时49.3267毫秒=====
2024-04-26 14:39:22.348 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:22.350 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 77.2452ms
2024-04-26 14:39:22.350 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:54.499 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:54.499 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:39:54.499 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:39:54.499 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:54.501 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:39:54.501 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.7562ms
2024-04-26 14:39:54.501 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:54.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:54.503 +08:00 [DBG] =========Yi-SQL耗时1.0783毫秒=====
2024-04-26 14:39:54.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:39:54.507 +08:00 [DBG] =========Yi-SQL耗时1.1196毫秒=====
2024-04-26 14:39:54.510 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:54.510 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.5518ms
2024-04-26 14:39:54.510 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:39:57.267 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:39:57.268 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:39:58.017 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:39:58.022 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.023 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:58.025 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:39:58.025 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.5881ms
2024-04-26 14:39:58.026 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.054 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:39:58.059 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:39:58.082 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.083 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:58.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:58.087 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:39:58.093 +08:00 [DBG] =========Yi-SQL耗时6.5632毫秒=====
2024-04-26 14:39:58.095 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:39:58.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:39:58.101 +08:00 [DBG] =========Yi-SQL耗时2.8162毫秒=====
2024-04-26 14:39:58.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:39:58.107 +08:00 [DBG] =========Yi-SQL耗时4.2376毫秒=====
2024-04-26 14:39:58.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:58.112 +08:00 [DBG] =========Yi-SQL耗时2.5428毫秒=====
2024-04-26 14:39:58.113 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:58.114 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 31.2665ms
2024-04-26 14:39:58.114 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.172 +08:00 [INF] 2024/4/26 14:39:58：cc,9YkxfNcXDmFggDjz96ZLQw连接服务端success，当前已连接0个
2024-04-26 14:39:58.275 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.276 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:58.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:39:58.279 +08:00 [DBG] =========Yi-SQL耗时0.9148毫秒=====
2024-04-26 14:39:58.281 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:39:58.281 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.1868ms
2024-04-26 14:39:58.281 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.480 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.480 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:58.485 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:39:58.485 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.485 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:58.485 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.486 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:58.486 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.488 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:58.489 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.6467ms
2024-04-26 14:39:58.489 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.489 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.489 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:58.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:58.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:58.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:58.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:58.490 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.491 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:39:58.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:58.494 +08:00 [DBG] =========Yi-SQL耗时3.917毫秒=====
2024-04-26 14:39:58.496 +08:00 [DBG] =========Yi-SQL耗时2.1927毫秒=====
2024-04-26 14:39:58.500 +08:00 [DBG] =========Yi-SQL耗时9.9787毫秒=====
2024-04-26 14:39:58.503 +08:00 [DBG] =========Yi-SQL耗时12.2023毫秒=====
2024-04-26 14:39:58.503 +08:00 [DBG] =========Yi-SQL耗时12.4979毫秒=====
2024-04-26 14:39:58.504 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:58.505 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 19.3483ms
2024-04-26 14:39:58.505 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.506 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:39:58.506 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:58.506 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:39:58.506 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 16.9388ms
2024-04-26 14:39:58.506 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.506 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:58.507 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:58.507 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 21.3523ms
2024-04-26 14:39:58.507 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.508 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 17.0702ms
2024-04-26 14:39:58.508 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.509 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:58.509 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 20.2039ms
2024-04-26 14:39:58.509 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:39:58.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:39:58.530 +08:00 [DBG] =========Yi-SQL耗时20.3736毫秒=====
2024-04-26 14:39:58.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:39:58.533 +08:00 [DBG] =========Yi-SQL耗时2.4388毫秒=====
2024-04-26 14:39:58.553 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:39:58.554 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 47.6526ms
2024-04-26 14:39:58.554 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:40:10.001 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:40:10.001 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:10.001 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:40:10.001 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:40:10.002 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:40:10.003 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.3454ms
2024-04-26 14:40:10.003 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:10.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:40:10.004 +08:00 [DBG] =========Yi-SQL耗时0.8876毫秒=====
2024-04-26 14:40:10.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:40:10.008 +08:00 [DBG] =========Yi-SQL耗时0.864毫秒=====
2024-04-26 14:40:10.009 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:40:10.010 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.3577ms
2024-04-26 14:40:10.010 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:40:14.471 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:40:14.471 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:40:15.203 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:40:15.208 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:40:15.209 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:40:15.264 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:40:15.265 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:40:15.266 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.266 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:40:15.273 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:40:15.274 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.9292ms
2024-04-26 14:40:15.274 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.300 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.301 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:40:15.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:40:15.306 +08:00 [DBG] =========Yi-SQL耗时3.2955毫秒=====
2024-04-26 14:40:15.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:40:15.314 +08:00 [DBG] =========Yi-SQL耗时1.2481毫秒=====
2024-04-26 14:40:15.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:40:15.317 +08:00 [DBG] =========Yi-SQL耗时1.0896毫秒=====
2024-04-26 14:40:15.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:40:15.322 +08:00 [DBG] =========Yi-SQL耗时3.6837毫秒=====
2024-04-26 14:40:15.325 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:40:15.325 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 24.7415ms
2024-04-26 14:40:15.326 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.358 +08:00 [INF] 2024/4/26 14:40:15：cc,cEKSnVmcTzqBEyEgRykd9A连接服务端success，当前已连接0个
2024-04-26 14:40:15.579 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.579 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:40:15.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:40:15.584 +08:00 [DBG] =========Yi-SQL耗时2.0986毫秒=====
2024-04-26 14:40:15.587 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:40:15.587 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.6541ms
2024-04-26 14:40:15.587 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.765 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.765 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:40:15.773 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:40:15.773 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.896ms
2024-04-26 14:40:15.773 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.773 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.773 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.774 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:40:15.774 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:40:15.774 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.774 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:40:15.773 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.775 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:40:15.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:40:15.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:40:15.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:40:15.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:40:15.777 +08:00 [DBG] =========Yi-SQL耗时1.9278毫秒=====
2024-04-26 14:40:15.778 +08:00 [DBG] =========Yi-SQL耗时2.9387毫秒=====
2024-04-26 14:40:15.786 +08:00 [DBG] =========Yi-SQL耗时10.0482毫秒=====
2024-04-26 14:40:15.791 +08:00 [DBG] =========Yi-SQL耗时15.1948毫秒=====
2024-04-26 14:40:15.812 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:40:15.813 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:40:15.813 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:40:15.813 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:40:15.813 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 38.2106ms
2024-04-26 14:40:15.813 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 39.0614ms
2024-04-26 14:40:15.813 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.813 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.816 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:40:15.818 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:40:15.818 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 44.1857ms
2024-04-26 14:40:15.818 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.818 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:40:15.819 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:40:15.819 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 43.3322ms
2024-04-26 14:40:15.819 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:40:15.830 +08:00 [DBG] =========Yi-SQL耗时6.7073毫秒=====
2024-04-26 14:40:15.831 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:40:15.831 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.1451ms
2024-04-26 14:40:15.831 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:40:15.854 +08:00 [DBG] =========Yi-SQL耗时35.9704毫秒=====
2024-04-26 14:40:15.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:40:15.868 +08:00 [DBG] =========Yi-SQL耗时5.4334毫秒=====
2024-04-26 14:40:15.873 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:40:15.874 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 60.653ms
2024-04-26 14:40:15.874 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:42:57.436 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:42:57.436 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:42:57.438 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:42:57.438 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.7555ms
2024-04-26 14:42:57.438 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:01.991 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:43:02.000 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:43:02.760 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:43:02.762 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:43:02.763 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:43:02.804 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:43:02.807 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:43:02.815 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:02.816 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:02.821 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:43:02.822 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.9016ms
2024-04-26 14:43:02.822 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:02.846 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:02.847 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:02.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:02.864 +08:00 [INF] 2024/4/26 14:43:02：cc,D3cwKnzaa023o_W5VP32WA连接服务端success，当前已连接0个
2024-04-26 14:43:03.136 +08:00 [DBG] =========Yi-SQL耗时279.3359毫秒=====
2024-04-26 14:43:03.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:43:03.138 +08:00 [DBG] =========Yi-SQL耗时0.978毫秒=====
2024-04-26 14:43:03.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:43:03.149 +08:00 [DBG] =========Yi-SQL耗时9.2284毫秒=====
2024-04-26 14:43:03.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:03.155 +08:00 [DBG] =========Yi-SQL耗时3.8227毫秒=====
2024-04-26 14:43:03.157 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:03.158 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 311.2788ms
2024-04-26 14:43:03.158 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:03.379 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:03.379 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:03.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:43:03.392 +08:00 [DBG] =========Yi-SQL耗时5.8828毫秒=====
2024-04-26 14:43:03.394 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:43:03.394 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 14.6477ms
2024-04-26 14:43:03.394 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:03.406 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:03.406 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:03.408 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:43:03.409 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.144ms
2024-04-26 14:43:03.409 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.064 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.064 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.067 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:25.067 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:25.068 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.068 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.068 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:25.069 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:25.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:25.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:25.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:25.072 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:43:25.079 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 12.01ms
2024-04-26 14:43:25.080 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.082 +08:00 [DBG] =========Yi-SQL耗时11.4763毫秒=====
2024-04-26 14:43:25.082 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.082 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:25.083 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:25.083 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.5048ms
2024-04-26 14:43:25.083 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.083 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.085 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:25.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:25.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:25.095 +08:00 [DBG] =========Yi-SQL耗时9.5047毫秒=====
2024-04-26 14:43:25.100 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:25.100 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 17.4213ms
2024-04-26 14:43:25.100 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.101 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:43:25.101 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:43:25.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:25.113 +08:00 [DBG] =========Yi-SQL耗时8.9763毫秒=====
2024-04-26 14:43:25.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:43:25.117 +08:00 [DBG] =========Yi-SQL耗时1.1955毫秒=====
2024-04-26 14:43:25.124 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:25.125 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 23.8144ms
2024-04-26 14:43:25.125 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:43:25.179 +08:00 [DBG] =========Yi-SQL耗时108.6293毫秒=====
2024-04-26 14:43:25.181 +08:00 [DBG] =========Yi-SQL耗时109.9752毫秒=====
2024-04-26 14:43:25.183 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:25.183 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 116.4927ms
2024-04-26 14:43:25.183 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.184 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:25.185 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 116.4841ms
2024-04-26 14:43:25.185 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:25.191 +08:00 [DBG] =========Yi-SQL耗时99.4234毫秒=====
2024-04-26 14:43:25.193 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:25.193 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 107.9592ms
2024-04-26 14:43:25.193 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:26.395 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:43:26.396 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:43:27.118 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:43:27.124 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:43:27.125 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:43:27.150 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.151 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:27.153 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:43:27.154 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.9283ms
2024-04-26 14:43:27.154 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.164 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:43:27.166 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:43:27.181 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.181 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:27.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:27.190 +08:00 [DBG] =========Yi-SQL耗时2.2108毫秒=====
2024-04-26 14:43:27.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:43:27.192 +08:00 [DBG] =========Yi-SQL耗时1.5665毫秒=====
2024-04-26 14:43:27.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:43:27.195 +08:00 [DBG] =========Yi-SQL耗时0.9057毫秒=====
2024-04-26 14:43:27.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:27.196 +08:00 [DBG] =========Yi-SQL耗时1.0976毫秒=====
2024-04-26 14:43:27.197 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:27.198 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 16.7488ms
2024-04-26 14:43:27.199 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.228 +08:00 [INF] 2024/4/26 14:43:27：cc,5mq3pMa3j0Tm4w3iNi7Xsg连接服务端success，当前已连接0个
2024-04-26 14:43:27.439 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.440 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:27.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:43:27.446 +08:00 [DBG] =========Yi-SQL耗时1.7389毫秒=====
2024-04-26 14:43:27.449 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:43:27.449 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 9.101ms
2024-04-26 14:43:27.449 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.635 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.636 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:27.636 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.636 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.636 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:27.636 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:27.638 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:43:27.638 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.1393ms
2024-04-26 14:43:27.638 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:27.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:27.641 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.641 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.641 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:27.642 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:27.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:27.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:27.651 +08:00 [DBG] =========Yi-SQL耗时9.6065毫秒=====
2024-04-26 14:43:27.654 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:43:27.655 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:43:27.656 +08:00 [DBG] =========Yi-SQL耗时5.9101毫秒=====
2024-04-26 14:43:27.657 +08:00 [DBG] =========Yi-SQL耗时6.4685毫秒=====
2024-04-26 14:43:27.665 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:27.665 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 29.277ms
2024-04-26 14:43:27.665 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.665 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.665 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:27.665 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:27.665 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:27.665 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 23.3594ms
2024-04-26 14:43:27.665 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:27.671 +08:00 [DBG] =========Yi-SQL耗时31.9352毫秒=====
2024-04-26 14:43:27.665 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 24.0124ms
2024-04-26 14:43:27.686 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:27.695 +08:00 [DBG] =========Yi-SQL耗时28.2463毫秒=====
2024-04-26 14:43:27.696 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:27.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:43:27.696 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 59.612ms
2024-04-26 14:43:27.696 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.702 +08:00 [DBG] =========Yi-SQL耗时6.0281毫秒=====
2024-04-26 14:43:27.711 +08:00 [DBG] =========Yi-SQL耗时23.1389毫秒=====
2024-04-26 14:43:27.718 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:27.718 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 52.6846ms
2024-04-26 14:43:27.718 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:27.719 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:27.719 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 63.7663ms
2024-04-26 14:43:27.719 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:43:47.250 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:43:47.251 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:43:47.253 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:47.253 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:47.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:47.255 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:43:47.255 +08:00 [DBG] =========Yi-SQL耗时1.6873毫秒=====
2024-04-26 14:43:47.256 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.2625ms
2024-04-26 14:43:47.256 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:47.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:43:47.261 +08:00 [DBG] =========Yi-SQL耗时2.8108毫秒=====
2024-04-26 14:43:47.264 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:47.264 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 13.4498ms
2024-04-26 14:43:47.264 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:43:48.506 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:43:48.506 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:43:49.195 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:43:49.197 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:43:49.197 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:43:49.206 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.207 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:49.213 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:43:49.218 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 10.9483ms
2024-04-26 14:43:49.218 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.231 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:43:49.234 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:43:49.263 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.264 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:49.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:49.269 +08:00 [DBG] =========Yi-SQL耗时1.4731毫秒=====
2024-04-26 14:43:49.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:43:49.276 +08:00 [DBG] =========Yi-SQL耗时4.7979毫秒=====
2024-04-26 14:43:49.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:43:49.280 +08:00 [DBG] =========Yi-SQL耗时2.3549毫秒=====
2024-04-26 14:43:49.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:49.284 +08:00 [DBG] =========Yi-SQL耗时2.0136毫秒=====
2024-04-26 14:43:49.284 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:49.287 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 23.5889ms
2024-04-26 14:43:49.289 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.342 +08:00 [INF] 2024/4/26 14:43:49：cc,SaZDMcUnRWN3uXW__ZNwmw连接服务端success，当前已连接0个
2024-04-26 14:43:49.496 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.496 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:49.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:43:49.508 +08:00 [DBG] =========Yi-SQL耗时9.3613毫秒=====
2024-04-26 14:43:49.512 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:43:49.513 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 16.1636ms
2024-04-26 14:43:49.513 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.685 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.686 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:49.686 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.686 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:49.688 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:43:49.688 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.2763ms
2024-04-26 14:43:49.688 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:49.690 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.690 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:49.692 +08:00 [DBG] =========Yi-SQL耗时2.0672毫秒=====
2024-04-26 14:43:49.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:49.695 +08:00 [DBG] =========Yi-SQL耗时1.8552毫秒=====
2024-04-26 14:43:49.698 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.700 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:49.700 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.445ms
2024-04-26 14:43:49.700 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.701 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:49.702 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:49.702 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.702 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:49.702 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.702 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:43:49.703 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 16.7282ms
2024-04-26 14:43:49.703 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:49.707 +08:00 [DBG] =========Yi-SQL耗时2.5346毫秒=====
2024-04-26 14:43:49.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:49.709 +08:00 [DBG] =========Yi-SQL耗时1.3656毫秒=====
2024-04-26 14:43:49.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:49.710 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:49.710 +08:00 [DBG] =========Yi-SQL耗时2.7974毫秒=====
2024-04-26 14:43:49.711 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.3239ms
2024-04-26 14:43:49.711 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.712 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:49.712 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:49.713 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.3519ms
2024-04-26 14:43:49.713 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.713 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 11.4888ms
2024-04-26 14:43:49.806 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:43:49.811 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:43:49.812 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:43:49.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:43:49.829 +08:00 [DBG] =========Yi-SQL耗时13.738毫秒=====
2024-04-26 14:43:49.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:43:49.837 +08:00 [DBG] =========Yi-SQL耗时1.3344毫秒=====
2024-04-26 14:43:49.849 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:43:49.849 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 37.5365ms
2024-04-26 14:43:49.849 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:00.869 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:00.869 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:00.869 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:45:00.869 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:00.870 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:45:00.871 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.5833ms
2024-04-26 14:45:00.871 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:00.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:00.873 +08:00 [DBG] =========Yi-SQL耗时1.0016毫秒=====
2024-04-26 14:45:00.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:45:00.877 +08:00 [DBG] =========Yi-SQL耗时1.8852毫秒=====
2024-04-26 14:45:00.883 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:00.883 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 13.7873ms
2024-04-26 14:45:00.883 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:06.219 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:45:06.220 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:45:06.938 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:45:06.942 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:06.946 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:06.949 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:45:06.950 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:45:06.958 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:45:06.958 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 11.5514ms
2024-04-26 14:45:06.958 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:06.983 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:45:06.987 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:45:07.010 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.011 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:07.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:07.016 +08:00 [DBG] =========Yi-SQL耗时2.247毫秒=====
2024-04-26 14:45:07.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:45:07.019 +08:00 [DBG] =========Yi-SQL耗时1.6656毫秒=====
2024-04-26 14:45:07.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:45:07.021 +08:00 [DBG] =========Yi-SQL耗时0.7416毫秒=====
2024-04-26 14:45:07.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:07.023 +08:00 [DBG] =========Yi-SQL耗时1.4886毫秒=====
2024-04-26 14:45:07.025 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:07.025 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 14.0172ms
2024-04-26 14:45:07.025 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.045 +08:00 [INF] 2024/4/26 14:45:07：cc,41Fa4I0gLYwhBsxoRRLV1g连接服务端success，当前已连接0个
2024-04-26 14:45:07.241 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.242 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:07.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:45:07.248 +08:00 [DBG] =========Yi-SQL耗时4.3635毫秒=====
2024-04-26 14:45:07.251 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:45:07.251 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 9.5659ms
2024-04-26 14:45:07.251 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.517 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.517 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:07.518 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.518 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:07.521 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:45:07.521 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.455ms
2024-04-26 14:45:07.521 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.524 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.524 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.524 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:07.524 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:07.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:07.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:07.527 +08:00 [DBG] =========Yi-SQL耗时2.8188毫秒=====
2024-04-26 14:45:07.530 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.530 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.530 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:07.530 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:07.530 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:07.531 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.6769ms
2024-04-26 14:45:07.531 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.535 +08:00 [DBG] =========Yi-SQL耗时8.9137毫秒=====
2024-04-26 14:45:07.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:07.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:07.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:07.536 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:07.536 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.2491ms
2024-04-26 14:45:07.536 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.541 +08:00 [DBG] =========Yi-SQL耗时5.243毫秒=====
2024-04-26 14:45:07.543 +08:00 [DBG] =========Yi-SQL耗时6.9734毫秒=====
2024-04-26 14:45:07.543 +08:00 [DBG] =========Yi-SQL耗时7.0072毫秒=====
2024-04-26 14:45:07.547 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:07.547 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:07.547 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 17.0797ms
2024-04-26 14:45:07.547 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 17.1736ms
2024-04-26 14:45:07.548 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.548 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.554 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:07.554 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:45:07.554 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:07.554 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 30.2522ms
2024-04-26 14:45:07.554 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:07.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:07.576 +08:00 [DBG] =========Yi-SQL耗时19.138毫秒=====
2024-04-26 14:45:07.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:45:07.580 +08:00 [DBG] =========Yi-SQL耗时3.0864毫秒=====
2024-04-26 14:45:07.586 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:07.586 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 31.8311ms
2024-04-26 14:45:07.586 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:14.027 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:14.027 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:14.027 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:45:14.027 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:14.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:14.031 +08:00 [DBG] =========Yi-SQL耗时1.0149毫秒=====
2024-04-26 14:45:14.031 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:45:14.032 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.2294ms
2024-04-26 14:45:14.032 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:14.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:45:14.035 +08:00 [DBG] =========Yi-SQL耗时0.8037毫秒=====
2024-04-26 14:45:14.037 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:14.037 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.4527ms
2024-04-26 14:45:14.037 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:15.552 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:45:15.553 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:45:16.239 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:45:16.241 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:45:16.241 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:45:16.269 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.270 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:16.272 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:45:16.273 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.2287ms
2024-04-26 14:45:16.273 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.290 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:45:16.292 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:45:16.303 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.303 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:16.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:16.315 +08:00 [DBG] =========Yi-SQL耗时10.242毫秒=====
2024-04-26 14:45:16.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:45:16.319 +08:00 [DBG] =========Yi-SQL耗时0.9934毫秒=====
2024-04-26 14:45:16.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:45:16.321 +08:00 [DBG] =========Yi-SQL耗时1.5756毫秒=====
2024-04-26 14:45:16.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:16.324 +08:00 [DBG] =========Yi-SQL耗时2.1292毫秒=====
2024-04-26 14:45:16.325 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:16.326 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 23.2896ms
2024-04-26 14:45:16.327 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.352 +08:00 [INF] 2024/4/26 14:45:16：cc,baRIYIqDXgpYsXiHCSWOvw连接服务端success，当前已连接0个
2024-04-26 14:45:16.507 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.507 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:16.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:45:16.512 +08:00 [DBG] =========Yi-SQL耗时3.3399毫秒=====
2024-04-26 14:45:16.513 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:45:16.514 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.6352ms
2024-04-26 14:45:16.514 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.741 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.742 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:16.744 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.744 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:45:16.746 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.9469ms
2024-04-26 14:45:16.746 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:16.746 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.748 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.748 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:16.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:16.758 +08:00 [DBG] =========Yi-SQL耗时9.6362毫秒=====
2024-04-26 14:45:16.760 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.761 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:16.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:16.764 +08:00 [DBG] =========Yi-SQL耗时14.7795毫秒=====
2024-04-26 14:45:16.765 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.765 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:16.765 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:16.765 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 16.9395ms
2024-04-26 14:45:16.765 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:16.770 +08:00 [DBG] =========Yi-SQL耗时3.3731毫秒=====
2024-04-26 14:45:16.771 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:16.771 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:16.771 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.089ms
2024-04-26 14:45:16.771 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.771 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:45:16.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:16.773 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.776 +08:00 [DBG] =========Yi-SQL耗时2.853毫秒=====
2024-04-26 14:45:16.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:16.790 +08:00 [DBG] =========Yi-SQL耗时2.9362毫秒=====
2024-04-26 14:45:16.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:45:16.794 +08:00 [DBG] =========Yi-SQL耗时3.1915毫秒=====
2024-04-26 14:45:16.794 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:16.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:16.816 +08:00 [DBG] =========Yi-SQL耗时19.0529毫秒=====
2024-04-26 14:45:16.818 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:16.818 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 23.8324ms
2024-04-26 14:45:16.818 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.835 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:16.835 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 74.56ms
2024-04-26 14:45:16.835 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.836 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:16.837 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 90.8529ms
2024-04-26 14:45:16.837 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:16.838 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:16.839 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 67.4877ms
2024-04-26 14:45:16.839 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:29.482 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:29.483 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:29.483 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:45:29.483 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:29.484 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:45:29.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:29.485 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.8465ms
2024-04-26 14:45:29.485 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:29.486 +08:00 [DBG] =========Yi-SQL耗时1.2079毫秒=====
2024-04-26 14:45:29.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:45:29.490 +08:00 [DBG] =========Yi-SQL耗时1.0492毫秒=====
2024-04-26 14:45:29.493 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:29.493 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.325ms
2024-04-26 14:45:29.493 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:32.388 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:32.388 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:32.388 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:45:32.388 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:32.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:32.391 +08:00 [DBG] =========Yi-SQL耗时1.0883毫秒=====
2024-04-26 14:45:32.391 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:45:32.392 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.3793ms
2024-04-26 14:45:32.393 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:32.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:45:32.395 +08:00 [DBG] =========Yi-SQL耗时1.0993毫秒=====
2024-04-26 14:45:32.398 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:32.398 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.6901ms
2024-04-26 14:45:32.399 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:34.754 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:45:34.754 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:45:35.418 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:45:35.426 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:45:35.429 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:45:35.449 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.449 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:35.454 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:45:35.455 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.7543ms
2024-04-26 14:45:35.455 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.455 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:45:35.457 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:45:35.470 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.470 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:35.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:35.472 +08:00 [DBG] =========Yi-SQL耗时1.0037毫秒=====
2024-04-26 14:45:35.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:45:35.476 +08:00 [DBG] =========Yi-SQL耗时0.5111毫秒=====
2024-04-26 14:45:35.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:45:35.477 +08:00 [DBG] =========Yi-SQL耗时0.5163毫秒=====
2024-04-26 14:45:35.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:35.479 +08:00 [DBG] =========Yi-SQL耗时0.534毫秒=====
2024-04-26 14:45:35.479 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:35.479 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 9.4226ms
2024-04-26 14:45:35.479 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.526 +08:00 [INF] 2024/4/26 14:45:35：cc,DdUwAbvfmOw17SDv5JOPaA连接服务端success，当前已连接0个
2024-04-26 14:45:35.638 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.638 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:35.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:45:35.641 +08:00 [DBG] =========Yi-SQL耗时1.2762毫秒=====
2024-04-26 14:45:35.646 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:45:35.647 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.3558ms
2024-04-26 14:45:35.647 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.862 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.862 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:35.864 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.864 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.864 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:35.864 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:35.864 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.864 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:35.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:35.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:35.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:35.866 +08:00 [DBG] =========Yi-SQL耗时0.9684毫秒=====
2024-04-26 14:45:35.868 +08:00 [DBG] =========Yi-SQL耗时3.104毫秒=====
2024-04-26 14:45:35.871 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:35.871 +08:00 [DBG] =========Yi-SQL耗时5.9689毫秒=====
2024-04-26 14:45:35.871 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.1306ms
2024-04-26 14:45:35.871 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.872 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:35.872 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.9172ms
2024-04-26 14:45:35.872 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.873 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:35.873 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.879ms
2024-04-26 14:45:35.873 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.897 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.897 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:35.897 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:35.897 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:45:35.898 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:45:35.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:35.899 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.6068ms
2024-04-26 14:45:35.899 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.918 +08:00 [DBG] =========Yi-SQL耗时19.4003毫秒=====
2024-04-26 14:45:35.918 +08:00 [DBG] =========Yi-SQL耗时20.781毫秒=====
2024-04-26 14:45:35.921 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:45:35.921 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:35.921 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 23.9523ms
2024-04-26 14:45:35.921 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.921 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:45:35.923 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:35.923 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 60.715ms
2024-04-26 14:45:35.923 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:45:35.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:45:35.928 +08:00 [DBG] =========Yi-SQL耗时4.6595毫秒=====
2024-04-26 14:45:35.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:45:35.931 +08:00 [DBG] =========Yi-SQL耗时0.9013毫秒=====
2024-04-26 14:45:35.936 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:45:35.937 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.3774ms
2024-04-26 14:45:35.937 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:46:23.948 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:23.949 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:46:23.949 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:46:23.949 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:46:23.950 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:46:23.950 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.1886ms
2024-04-26 14:46:23.950 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:23.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:46:23.953 +08:00 [DBG] =========Yi-SQL耗时1.7908毫秒=====
2024-04-26 14:46:23.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:46:23.956 +08:00 [DBG] =========Yi-SQL耗时0.7161毫秒=====
2024-04-26 14:46:23.958 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:46:23.958 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.1339ms
2024-04-26 14:46:23.958 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:46:25.308 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:46:25.308 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:46:26.121 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:46:26.125 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:46:26.130 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:46:26.135 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.135 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:46:26.136 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:46:26.137 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.7536ms
2024-04-26 14:46:26.137 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.151 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:46:26.153 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:46:26.156 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.158 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:46:26.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:46:26.164 +08:00 [DBG] =========Yi-SQL耗时2.0141毫秒=====
2024-04-26 14:46:26.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:46:26.165 +08:00 [DBG] =========Yi-SQL耗时0.4461毫秒=====
2024-04-26 14:46:26.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:46:26.166 +08:00 [DBG] =========Yi-SQL耗时0.3491毫秒=====
2024-04-26 14:46:26.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:46:26.167 +08:00 [DBG] =========Yi-SQL耗时0.5662毫秒=====
2024-04-26 14:46:26.168 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:46:26.168 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 10.1529ms
2024-04-26 14:46:26.168 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.206 +08:00 [INF] 2024/4/26 14:46:26：cc,gmga8eDHZIwRp-UIF9cWEQ连接服务端success，当前已连接0个
2024-04-26 14:46:26.309 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.309 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:46:26.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:46:26.318 +08:00 [DBG] =========Yi-SQL耗时2.1614毫秒=====
2024-04-26 14:46:26.336 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:46:26.341 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 31.0948ms
2024-04-26 14:46:26.342 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.646 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.647 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:46:26.648 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.648 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:46:26.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:46:26.653 +08:00 [DBG] =========Yi-SQL耗时4.1532毫秒=====
2024-04-26 14:46:26.667 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:46:26.667 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:46:26.667 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 20.3772ms
2024-04-26 14:46:26.667 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 19.1841ms
2024-04-26 14:46:26.667 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.667 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.675 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.676 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:46:26.677 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.677 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.677 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:46:26.677 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:46:26.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:46:26.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:46:26.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:46:26.721 +08:00 [DBG] =========Yi-SQL耗时40.2027毫秒=====
2024-04-26 14:46:26.721 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.722 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:46:26.722 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:46:26.722 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 45.1503ms
2024-04-26 14:46:26.722 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:46:26.738 +08:00 [DBG] =========Yi-SQL耗时55.4067毫秒=====
2024-04-26 14:46:26.738 +08:00 [DBG] =========Yi-SQL耗时56.6697毫秒=====
2024-04-26 14:46:26.743 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:46:26.743 +08:00 [DBG] =========Yi-SQL耗时18.3729毫秒=====
2024-04-26 14:46:26.743 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:46:26.743 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:46:26.743 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 66.8026ms
2024-04-26 14:46:26.743 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.743 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 66.6194ms
2024-04-26 14:46:26.743 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.743 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:46:26.744 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 21.892ms
2024-04-26 14:46:26.744 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:46:26.744 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:46:26.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:46:26.755 +08:00 [DBG] =========Yi-SQL耗时3.6895毫秒=====
2024-04-26 14:46:26.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:46:26.759 +08:00 [DBG] =========Yi-SQL耗时1.7651毫秒=====
2024-04-26 14:46:26.764 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:46:26.764 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 19.5196ms
2024-04-26 14:46:26.764 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:47:42.985 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:47:42.985 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:42.985 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:47:42.985 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:47:42.986 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:47:42.986 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.0983ms
2024-04-26 14:47:42.986 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:42.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:47:42.991 +08:00 [DBG] =========Yi-SQL耗时3.4242毫秒=====
2024-04-26 14:47:42.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:47:42.995 +08:00 [DBG] =========Yi-SQL耗时1.0398毫秒=====
2024-04-26 14:47:42.998 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:47:42.998 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 12.9539ms
2024-04-26 14:47:42.998 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:47:47.396 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:47:47.396 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:47:48.124 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:47:48.128 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:47:48.128 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.128 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:47:48.128 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:47:48.142 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:47:48.142 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 13.7738ms
2024-04-26 14:47:48.142 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.147 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:47:48.188 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:47:48.192 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.193 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:47:48.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:47:48.209 +08:00 [DBG] =========Yi-SQL耗时10.589毫秒=====
2024-04-26 14:47:48.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:47:48.214 +08:00 [DBG] =========Yi-SQL耗时2.0231毫秒=====
2024-04-26 14:47:48.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:47:48.217 +08:00 [DBG] =========Yi-SQL耗时1.4967毫秒=====
2024-04-26 14:47:48.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:47:48.220 +08:00 [DBG] =========Yi-SQL耗时1.398毫秒=====
2024-04-26 14:47:48.221 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:47:48.222 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 29.142ms
2024-04-26 14:47:48.223 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.266 +08:00 [INF] 2024/4/26 14:47:48：cc,V23mPNUYumKVD5EcWW8XgA连接服务端success，当前已连接0个
2024-04-26 14:47:48.388 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.388 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:47:48.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:47:48.392 +08:00 [DBG] =========Yi-SQL耗时1.8314毫秒=====
2024-04-26 14:47:48.396 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:47:48.398 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 9.3809ms
2024-04-26 14:47:48.398 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.601 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.601 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:47:48.603 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.603 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:47:48.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:47:48.606 +08:00 [DBG] =========Yi-SQL耗时2.5775毫秒=====
2024-04-26 14:47:48.609 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.609 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:47:48.609 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.609 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:47:48.609 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.610 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:47:48.610 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:47:48.610 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.0852ms
2024-04-26 14:47:48.610 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.610 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:47:48.610 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.9037ms
2024-04-26 14:47:48.610 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:47:48.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:47:48.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:47:48.617 +08:00 [DBG] =========Yi-SQL耗时6.0477毫秒=====
2024-04-26 14:47:48.617 +08:00 [DBG] =========Yi-SQL耗时5.9652毫秒=====
2024-04-26 14:47:48.628 +08:00 [DBG] =========Yi-SQL耗时17.387毫秒=====
2024-04-26 14:47:48.637 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:47:48.637 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 28.1804ms
2024-04-26 14:47:48.637 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.637 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:47:48.637 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:47:48.638 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:47:48.638 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:47:48.638 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 28.617ms
2024-04-26 14:47:48.638 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.639 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.639 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:47:48.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:47:48.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:47:48.663 +08:00 [DBG] =========Yi-SQL耗时21.6703毫秒=====
2024-04-26 14:47:48.663 +08:00 [DBG] =========Yi-SQL耗时21.5833毫秒=====
2024-04-26 14:47:48.677 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 67.499ms
2024-04-26 14:47:48.677 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.694 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:47:48.694 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 54.9532ms
2024-04-26 14:47:48.695 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:47:48.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:47:48.721 +08:00 [DBG] =========Yi-SQL耗时1.7447毫秒=====
2024-04-26 14:47:48.733 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:47:48.734 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 95.8851ms
2024-04-26 14:47:48.734 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:48:16.538 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:48:16.538 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:16.538 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:48:16.538 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:48:16.539 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:48:16.540 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.623ms
2024-04-26 14:48:16.540 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:16.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:48:16.615 +08:00 [DBG] =========Yi-SQL耗时72.2116毫秒=====
2024-04-26 14:48:16.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:48:16.617 +08:00 [DBG] =========Yi-SQL耗时0.7138毫秒=====
2024-04-26 14:48:16.620 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:48:16.620 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 81.9886ms
2024-04-26 14:48:16.620 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:48:18.516 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 14:48:18.516 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 14:48:19.190 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:48:19.193 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 14:48:19.195 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 14:48:19.251 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.252 +08:00 [INF] CORS policy execution successful.
2024-04-26 14:48:19.252 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:48:19.254 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 14:48:19.260 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:48:19.261 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.7958ms
2024-04-26 14:48:19.261 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.282 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.282 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:48:19.287 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:48:19.292 +08:00 [DBG] =========Yi-SQL耗时4.3744毫秒=====
2024-04-26 14:48:19.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 14:48:19.301 +08:00 [DBG] =========Yi-SQL耗时1.8207毫秒=====
2024-04-26 14:48:19.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 14:48:19.304 +08:00 [DBG] =========Yi-SQL耗时1.8125毫秒=====
2024-04-26 14:48:19.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:48:19.307 +08:00 [DBG] =========Yi-SQL耗时1.3952毫秒=====
2024-04-26 14:48:19.308 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:48:19.308 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 25.6879ms
2024-04-26 14:48:19.308 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.339 +08:00 [INF] 2024/4/26 14:48:19：cc,w1NQeBdzIDp2YpOTcgNxoQ连接服务端success，当前已连接0个
2024-04-26 14:48:19.474 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.474 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 14:48:19.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 14:48:19.482 +08:00 [DBG] =========Yi-SQL耗时2.9488毫秒=====
2024-04-26 14:48:19.485 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 14:48:19.485 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 10.7341ms
2024-04-26 14:48:19.485 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.684 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.684 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:48:19.685 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.685 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 14:48:19.685 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.685 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:48:19.687 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:48:19.697 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.697 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:48:19.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:48:19.698 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 14:48:19.697 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.698 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 12.8335ms
2024-04-26 14:48:19.698 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.698 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:48:19.699 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.699 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 14:48:19.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:48:19.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:48:19.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:48:19.702 +08:00 [DBG] =========Yi-SQL耗时15.4029毫秒=====
2024-04-26 14:48:19.730 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:48:19.730 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 45.6741ms
2024-04-26 14:48:19.730 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:19.754 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:48:19.755 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 14:48:19.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 14:48:19.797 +08:00 [DBG] =========Yi-SQL耗时20.6252毫秒=====
2024-04-26 14:48:19.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 14:48:19.809 +08:00 [DBG] =========Yi-SQL耗时3.0358毫秒=====
2024-04-26 14:48:19.817 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:48:19.819 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 63.8277ms
2024-04-26 14:48:19.819 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 14:48:20.057 +08:00 [DBG] =========Yi-SQL耗时357.5476毫秒=====
2024-04-26 14:48:20.060 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:48:20.060 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 361.6556ms
2024-04-26 14:48:20.061 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:20.068 +08:00 [DBG] =========Yi-SQL耗时369.3079毫秒=====
2024-04-26 14:48:20.073 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:48:20.074 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 376.111ms
2024-04-26 14:48:20.074 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:20.074 +08:00 [DBG] =========Yi-SQL耗时376.7986毫秒=====
2024-04-26 14:48:20.079 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:48:20.079 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 393.8105ms
2024-04-26 14:48:20.079 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 14:48:20.087 +08:00 [DBG] =========Yi-SQL耗时385.5086毫秒=====
2024-04-26 14:48:20.092 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 14:48:20.092 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 393.7893ms
2024-04-26 14:48:20.092 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:13.713 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:24:13.721 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:24:13.726 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:13.727 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:13.782 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:24:13.790 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 62.5662ms
2024-04-26 15:24:13.790 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:13.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:14.076 +08:00 [DBG] =========Yi-SQL耗时210.4933毫秒=====
2024-04-26 15:24:14.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:24:14.082 +08:00 [DBG] =========Yi-SQL耗时1.9935毫秒=====
2024-04-26 15:24:14.094 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:14.095 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 373.9297ms
2024-04-26 15:24:14.095 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:24:22.478 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 15:24:22.482 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 15:24:23.495 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:24:23.502 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 15:24:23.515 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:23.515 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 15:24:23.519 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:23.522 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:24:23.524 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.1473ms
2024-04-26 15:24:23.524 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:23.545 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:24:23.548 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 15:24:23.557 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:23.557 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:23.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:23.572 +08:00 [DBG] =========Yi-SQL耗时8.4909毫秒=====
2024-04-26 15:24:23.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 15:24:23.583 +08:00 [DBG] =========Yi-SQL耗时3.6105毫秒=====
2024-04-26 15:24:23.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 15:24:23.592 +08:00 [DBG] =========Yi-SQL耗时4.302毫秒=====
2024-04-26 15:24:23.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:23.600 +08:00 [DBG] =========Yi-SQL耗时5.0087毫秒=====
2024-04-26 15:24:23.605 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:23.607 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 49.0667ms
2024-04-26 15:24:23.607 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:23.758 +08:00 [INF] 2024/4/26 15:24:23：cc,0vmaeeg1Q4tn0RV9RVBkKA连接服务端success，当前已连接0个
2024-04-26 15:24:23.874 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:23.875 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:23.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 15:24:23.889 +08:00 [DBG] =========Yi-SQL耗时4.4788毫秒=====
2024-04-26 15:24:23.901 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 15:24:23.909 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 33.9767ms
2024-04-26 15:24:23.910 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.289 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.292 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.313 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:24.314 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:24.317 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:24:24.317 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.4374ms
2024-04-26 15:24:24.317 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.323 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.324 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:24.324 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.324 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:24.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:24.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:24.342 +08:00 [DBG] =========Yi-SQL耗时13.0969毫秒=====
2024-04-26 15:24:24.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:24.352 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:24.354 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 29.6631ms
2024-04-26 15:24:24.354 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.361 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.361 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:24:24.361 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.361 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:24.361 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:24:24.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:24.397 +08:00 [DBG] =========Yi-SQL耗时33.3407毫秒=====
2024-04-26 15:24:24.397 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:24.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:24.406 +08:00 [DBG] =========Yi-SQL耗时5.9405毫秒=====
2024-04-26 15:24:24.407 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:24.408 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.1204ms
2024-04-26 15:24:24.408 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.408 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:24.409 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 47.466ms
2024-04-26 15:24:24.409 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:24.414 +08:00 [DBG] =========Yi-SQL耗时2.2978毫秒=====
2024-04-26 15:24:24.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:24:24.457 +08:00 [DBG] =========Yi-SQL耗时29.7636毫秒=====
2024-04-26 15:24:24.512 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:24.512 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 150.7434ms
2024-04-26 15:24:24.512 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:24:24.654 +08:00 [DBG] =========Yi-SQL耗时325.4674毫秒=====
2024-04-26 15:24:24.661 +08:00 [DBG] =========Yi-SQL耗时320.6472毫秒=====
2024-04-26 15:24:24.661 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:24.662 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 337.9094ms
2024-04-26 15:24:24.662 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:24.663 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:24.666 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 351.1838ms
2024-04-26 15:24:24.666 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:43.412 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:43.413 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:43.414 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:24:43.414 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:24:43.414 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:24:43.414 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.5523ms
2024-04-26 15:24:43.414 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:43.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:43.419 +08:00 [DBG] =========Yi-SQL耗时1.3771毫秒=====
2024-04-26 15:24:43.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:24:43.427 +08:00 [DBG] =========Yi-SQL耗时3.0716毫秒=====
2024-04-26 15:24:43.429 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:43.429 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.0208ms
2024-04-26 15:24:43.429 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:24:47.533 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 15:24:47.534 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 15:24:48.308 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:24:48.313 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 15:24:48.313 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 15:24:48.334 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.334 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:48.338 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:24:48.340 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.7234ms
2024-04-26 15:24:48.340 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.345 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:24:48.349 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 15:24:48.363 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.364 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:48.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:48.376 +08:00 [DBG] =========Yi-SQL耗时7.3007毫秒=====
2024-04-26 15:24:48.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 15:24:48.385 +08:00 [DBG] =========Yi-SQL耗时1.3524毫秒=====
2024-04-26 15:24:48.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 15:24:48.390 +08:00 [DBG] =========Yi-SQL耗时1.9623毫秒=====
2024-04-26 15:24:48.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:48.392 +08:00 [DBG] =========Yi-SQL耗时1.4979毫秒=====
2024-04-26 15:24:48.393 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:48.394 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 29.8754ms
2024-04-26 15:24:48.394 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.457 +08:00 [INF] 2024/4/26 15:24:48：cc,sAnp4b6vTCZ7WkDHNAzNRQ连接服务端success，当前已连接0个
2024-04-26 15:24:48.524 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.525 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:48.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 15:24:48.528 +08:00 [DBG] =========Yi-SQL耗时1.3303毫秒=====
2024-04-26 15:24:48.532 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 15:24:48.533 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.0794ms
2024-04-26 15:24:48.533 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.749 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.750 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:48.751 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.751 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:48.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:48.756 +08:00 [DBG] =========Yi-SQL耗时4.179毫秒=====
2024-04-26 15:24:48.758 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.758 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:48.758 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.758 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:48.758 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:48.758 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.758 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:48.758 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.597ms
2024-04-26 15:24:48.758 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:48.764 +08:00 [DBG] =========Yi-SQL耗时1.9005毫秒=====
2024-04-26 15:24:48.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:48.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:48.766 +08:00 [DBG] =========Yi-SQL耗时1.2666毫秒=====
2024-04-26 15:24:48.766 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.766 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:24:48.770 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:48.771 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.845ms
2024-04-26 15:24:48.771 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:48.781 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:48.782 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 24.137ms
2024-04-26 15:24:48.782 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.785 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:24:48.785 +08:00 [DBG] =========Yi-SQL耗时19.9067毫秒=====
2024-04-26 15:24:48.788 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 36.9687ms
2024-04-26 15:24:48.788 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.806 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:24:48.806 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:48.807 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 48.8511ms
2024-04-26 15:24:48.807 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.807 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:24:48.810 +08:00 [DBG] =========Yi-SQL耗时37.6978毫秒=====
2024-04-26 15:24:48.850 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:48.851 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 85.2062ms
2024-04-26 15:24:48.851 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:24:48.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:24:48.876 +08:00 [DBG] =========Yi-SQL耗时23.8724毫秒=====
2024-04-26 15:24:48.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:24:48.882 +08:00 [DBG] =========Yi-SQL耗时1.4708毫秒=====
2024-04-26 15:24:48.893 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:24:48.894 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 86.1197ms
2024-04-26 15:24:48.894 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:25:17.386 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:25:17.386 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:17.386 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:25:17.386 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:25:17.388 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:25:17.388 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.5153ms
2024-04-26 15:25:17.388 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:17.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:25:17.390 +08:00 [DBG] =========Yi-SQL耗时1.5629毫秒=====
2024-04-26 15:25:17.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:25:17.394 +08:00 [DBG] =========Yi-SQL耗时0.9827毫秒=====
2024-04-26 15:25:17.397 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:25:17.397 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.5747ms
2024-04-26 15:25:17.397 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:25:19.705 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 15:25:19.714 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 15:25:20.637 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:25:20.639 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:20.639 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:25:20.640 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 15:25:20.641 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 15:25:20.641 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:25:20.642 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.5399ms
2024-04-26 15:25:20.642 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:20.655 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:25:20.659 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 15:25:20.671 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:20.674 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:25:20.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:25:20.679 +08:00 [DBG] =========Yi-SQL耗时2.7605毫秒=====
2024-04-26 15:25:20.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 15:25:20.682 +08:00 [DBG] =========Yi-SQL耗时1.6383毫秒=====
2024-04-26 15:25:20.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 15:25:20.683 +08:00 [DBG] =========Yi-SQL耗时0.4516毫秒=====
2024-04-26 15:25:20.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:25:20.685 +08:00 [DBG] =========Yi-SQL耗时1.4042毫秒=====
2024-04-26 15:25:20.686 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:25:20.688 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 14.1157ms
2024-04-26 15:25:20.688 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:20.725 +08:00 [INF] 2024/4/26 15:25:20：cc,FdFeOv9SBfcFBhWb_j-1Pg连接服务端success，当前已连接0个
2024-04-26 15:25:20.841 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:20.842 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 15:25:20.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 15:25:20.849 +08:00 [DBG] =========Yi-SQL耗时1.7175毫秒=====
2024-04-26 15:25:20.852 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 15:25:20.853 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 10.954ms
2024-04-26 15:25:20.853 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.059 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.060 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:25:21.060 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.060 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:25:21.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:25:21.070 +08:00 [DBG] =========Yi-SQL耗时8.7519毫秒=====
2024-04-26 15:25:21.071 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:25:21.078 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.080 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 19.3023ms
2024-04-26 15:25:21.080 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:25:21.080 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:25:21.087 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.088 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:25:21.090 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 30.2012ms
2024-04-26 15:25:21.090 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.090 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:25:21.091 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:25:21.091 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:25:21.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:25:21.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:25:21.096 +08:00 [DBG] =========Yi-SQL耗时4.0122毫秒=====
2024-04-26 15:25:21.098 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.096 +08:00 [DBG] =========Yi-SQL耗时9.5351毫秒=====
2024-04-26 15:25:21.099 +08:00 [DBG] =========Yi-SQL耗时2.2902毫秒=====
2024-04-26 15:25:21.099 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:25:21.128 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:25:21.129 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 38.8023ms
2024-04-26 15:25:21.130 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:25:21.132 +08:00 [DBG] =========Yi-SQL耗时1.9774毫秒=====
2024-04-26 15:25:21.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:25:21.136 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:25:21.138 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 58.3748ms
2024-04-26 15:25:21.139 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.175 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.176 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:25:21.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:25:21.192 +08:00 [DBG] =========Yi-SQL耗时58.3354毫秒=====
2024-04-26 15:25:21.193 +08:00 [DBG] =========Yi-SQL耗时14.5431毫秒=====
2024-04-26 15:25:21.194 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:25:21.194 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:25:21.197 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 98.0429ms
2024-04-26 15:25:21.197 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.198 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 21.9292ms
2024-04-26 15:25:21.199 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:25:21.212 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:25:21.213 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 121.421ms
2024-04-26 15:25:21.213 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:26:03.813 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:26:03.817 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:26:03.819 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:03.819 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:03.821 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:26:03.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:03.822 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.0507ms
2024-04-26 15:26:03.822 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:03.823 +08:00 [DBG] =========Yi-SQL耗时1.3028毫秒=====
2024-04-26 15:26:03.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:26:03.827 +08:00 [DBG] =========Yi-SQL耗时1.0057毫秒=====
2024-04-26 15:26:03.834 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:03.834 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.6478ms
2024-04-26 15:26:03.834 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:26:07.520 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 15:26:07.526 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 15:26:08.282 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:26:08.284 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 15:26:08.284 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 15:26:08.329 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.330 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:08.339 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:26:08.340 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 9.936ms
2024-04-26 15:26:08.340 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.358 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:26:08.361 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 15:26:08.382 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.383 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:08.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:08.388 +08:00 [DBG] =========Yi-SQL耗时1.0968毫秒=====
2024-04-26 15:26:08.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 15:26:08.392 +08:00 [DBG] =========Yi-SQL耗时0.6436毫秒=====
2024-04-26 15:26:08.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 15:26:08.393 +08:00 [DBG] =========Yi-SQL耗时0.545毫秒=====
2024-04-26 15:26:08.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:08.394 +08:00 [DBG] =========Yi-SQL耗时0.9585毫秒=====
2024-04-26 15:26:08.395 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:08.396 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 13.5049ms
2024-04-26 15:26:08.396 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.419 +08:00 [INF] 2024/4/26 15:26:08：cc,v8RKEkZPfKR9KPLNmMyYdw连接服务端success，当前已连接0个
2024-04-26 15:26:08.537 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.538 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:08.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 15:26:08.540 +08:00 [DBG] =========Yi-SQL耗时1.0305毫秒=====
2024-04-26 15:26:08.543 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 15:26:08.543 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.1405ms
2024-04-26 15:26:08.543 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.797 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.797 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:08.797 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.797 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:08.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:08.806 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:26:08.807 +08:00 [DBG] =========Yi-SQL耗时8.1074毫秒=====
2024-04-26 15:26:08.808 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:26:08.808 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:26:08.808 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 10.7607ms
2024-04-26 15:26:08.808 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:08.810 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:08.811 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.472ms
2024-04-26 15:26:08.811 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.811 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.812 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:08.812 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:08.820 +08:00 [DBG] =========Yi-SQL耗时1.6972毫秒=====
2024-04-26 15:26:08.815 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:08.823 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:08.823 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.823 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:08.823 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.3783ms
2024-04-26 15:26:08.823 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.813 +08:00 [DBG] =========Yi-SQL耗时2.9029毫秒=====
2024-04-26 15:26:08.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:26:08.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:08.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:08.844 +08:00 [DBG] =========Yi-SQL耗时6.5718毫秒=====
2024-04-26 15:26:08.844 +08:00 [DBG] =========Yi-SQL耗时14.2466毫秒=====
2024-04-26 15:26:08.847 +08:00 [DBG] =========Yi-SQL耗时8.1259毫秒=====
2024-04-26 15:26:08.848 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:08.848 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:08.848 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 25.9673ms
2024-04-26 15:26:08.848 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.848 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.848 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 25.4045ms
2024-04-26 15:26:08.848 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:08.848 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:08.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:08.859 +08:00 [DBG] =========Yi-SQL耗时8.6379毫秒=====
2024-04-26 15:26:08.859 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:08.860 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 51.8722ms
2024-04-26 15:26:08.860 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:26:08.861 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:08.861 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.82ms
2024-04-26 15:26:08.861 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:47.698 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 15:26:47.699 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 15:26:48.576 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:26:48.581 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:48.581 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 15:26:48.581 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:48.581 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 15:26:48.590 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:26:48.590 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 9.5157ms
2024-04-26 15:26:48.590 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:48.709 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:26:48.711 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 15:26:48.728 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:48.729 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:48.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:48.735 +08:00 [DBG] =========Yi-SQL耗时3.9508毫秒=====
2024-04-26 15:26:48.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 15:26:48.740 +08:00 [DBG] =========Yi-SQL耗时1.2214毫秒=====
2024-04-26 15:26:48.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 15:26:48.742 +08:00 [DBG] =========Yi-SQL耗时1.093毫秒=====
2024-04-26 15:26:48.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:48.747 +08:00 [DBG] =========Yi-SQL耗时3.3073毫秒=====
2024-04-26 15:26:48.748 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:48.750 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 21.0795ms
2024-04-26 15:26:48.750 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:48.784 +08:00 [INF] 2024/4/26 15:26:48：cc,yB3PGCtHqj-nsV8Vpd3TQg连接服务端success，当前已连接0个
2024-04-26 15:26:48.928 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:48.928 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:48.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 15:26:48.932 +08:00 [DBG] =========Yi-SQL耗时2.442毫秒=====
2024-04-26 15:26:48.935 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 15:26:48.936 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.6649ms
2024-04-26 15:26:48.936 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.207 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.207 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.208 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:49.208 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:49.210 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:26:49.210 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.2297ms
2024-04-26 15:26:49.210 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.211 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.212 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:49.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:49.219 +08:00 [DBG] =========Yi-SQL耗时5.6113毫秒=====
2024-04-26 15:26:49.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:49.225 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:49.225 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.225 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.226 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.226 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:49.226 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:49.226 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:26:49.226 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 14.2393ms
2024-04-26 15:26:49.226 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:49.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:49.232 +08:00 [DBG] =========Yi-SQL耗时7.2014毫秒=====
2024-04-26 15:26:49.233 +08:00 [DBG] =========Yi-SQL耗时4.3502毫秒=====
2024-04-26 15:26:49.234 +08:00 [DBG] =========Yi-SQL耗时4.5848毫秒=====
2024-04-26 15:26:49.234 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:26:49.234 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:26:49.234 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:49.234 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.301ms
2024-04-26 15:26:49.234 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.234 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:49.234 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:49.234 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.3808ms
2024-04-26 15:26:49.234 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.234 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 26.3765ms
2024-04-26 15:26:49.234 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:49.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:26:49.242 +08:00 [DBG] =========Yi-SQL耗时5.4621毫秒=====
2024-04-26 15:26:49.245 +08:00 [DBG] =========Yi-SQL耗时6.3994毫秒=====
2024-04-26 15:26:49.257 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:49.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:26:49.259 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 33.416ms
2024-04-26 15:26:49.259 +08:00 [DBG] =========Yi-SQL耗时2.3472毫秒=====
2024-04-26 15:26:49.259 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:26:49.262 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:26:49.262 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 28.4608ms
2024-04-26 15:26:49.262 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:27:09.573 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:09.573 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:27:09.573 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:09.573 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:27:09.575 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:27:09.576 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.1093ms
2024-04-26 15:27:09.576 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:09.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:09.577 +08:00 [DBG] =========Yi-SQL耗时1.3087毫秒=====
2024-04-26 15:27:09.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:27:09.585 +08:00 [DBG] =========Yi-SQL耗时1.1066毫秒=====
2024-04-26 15:27:09.588 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:27:09.588 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.5637ms
2024-04-26 15:27:09.588 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:27:36.887 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:27:36.887 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:27:36.893 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:36.893 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:36.893 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:36.895 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:27:36.895 +08:00 [DBG] =========Yi-SQL耗时1.4991毫秒=====
2024-04-26 15:27:36.896 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.1375ms
2024-04-26 15:27:36.896 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:36.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:27:36.900 +08:00 [DBG] =========Yi-SQL耗时1.9901毫秒=====
2024-04-26 15:27:36.913 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:27:36.915 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 27.4542ms
2024-04-26 15:27:36.915 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:27:38.936 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 15:27:38.936 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 15:27:39.775 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:27:39.780 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:39.781 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:39.784 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 15:27:39.786 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 15:27:39.789 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:27:39.793 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 12.6645ms
2024-04-26 15:27:39.793 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:39.812 +08:00 [INF] CORS policy execution successful.
2024-04-26 15:27:39.814 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 15:27:39.817 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:39.818 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:39.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:39.824 +08:00 [DBG] =========Yi-SQL耗时1.0916毫秒=====
2024-04-26 15:27:39.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 15:27:39.827 +08:00 [DBG] =========Yi-SQL耗时0.4872毫秒=====
2024-04-26 15:27:39.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 15:27:39.828 +08:00 [DBG] =========Yi-SQL耗时0.337毫秒=====
2024-04-26 15:27:39.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:39.829 +08:00 [DBG] =========Yi-SQL耗时0.562毫秒=====
2024-04-26 15:27:39.829 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:27:39.830 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 11.9219ms
2024-04-26 15:27:39.830 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:39.872 +08:00 [INF] 2024/4/26 15:27:39：cc,sX3YncB9AP5QQIbI3OxIRA连接服务端success，当前已连接0个
2024-04-26 15:27:40.012 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.012 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:40.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 15:27:40.028 +08:00 [DBG] =========Yi-SQL耗时4.619毫秒=====
2024-04-26 15:27:40.030 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 15:27:40.031 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 18.512ms
2024-04-26 15:27:40.031 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.288 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.288 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:40.290 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:27:40.291 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.3919ms
2024-04-26 15:27:40.291 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.300 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.300 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:40.303 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.303 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:40.303 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:40.303 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:40.313 +08:00 [DBG] =========Yi-SQL耗时9.4775毫秒=====
2024-04-26 15:27:40.313 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:40.313 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:40.313 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:27:40.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:40.314 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.1739ms
2024-04-26 15:27:40.314 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.314 +08:00 [DBG] =========Yi-SQL耗时1.218毫秒=====
2024-04-26 15:27:40.320 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:40.340 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:40.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:40.357 +08:00 [DBG] =========Yi-SQL耗时9.6037毫秒=====
2024-04-26 15:27:40.358 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:27:40.358 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 17.7092ms
2024-04-26 15:27:40.358 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.360 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:27:40.360 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:27:40.360 +08:00 [DBG] =========Yi-SQL耗时47.1584毫秒=====
2024-04-26 15:27:40.361 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:27:40.362 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 58.731ms
2024-04-26 15:27:40.362 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.362 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:27:40.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:40.362 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 59.3205ms
2024-04-26 15:27:40.362 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:40.363 +08:00 [DBG] =========Yi-SQL耗时0.9115毫秒=====
2024-04-26 15:27:40.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:27:40.366 +08:00 [DBG] =========Yi-SQL耗时1.1139毫秒=====
2024-04-26 15:27:40.371 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:27:40.372 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 12.0593ms
2024-04-26 15:27:40.372 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:27:40.392 +08:00 [DBG] =========Yi-SQL耗时75.4431毫秒=====
2024-04-26 15:27:40.393 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:27:40.393 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 79.9777ms
2024-04-26 15:27:40.393 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:58.122 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:58.122 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 15:27:58.122 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 15:27:58.122 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 15:27:58.123 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 15:27:58.124 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.258ms
2024-04-26 15:27:58.124 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 15:27:58.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 15:27:58.126 +08:00 [DBG] =========Yi-SQL耗时0.894毫秒=====
2024-04-26 15:27:58.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 15:27:58.129 +08:00 [DBG] =========Yi-SQL耗时0.7367毫秒=====
2024-04-26 15:27:58.131 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 15:27:58.131 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.6331ms
2024-04-26 15:27:58.131 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:20:51.002 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-26 16:20:51.032 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-26 16:20:56.350 +08:00 [INF] Loaded ABP modules:
2024-04-26 16:20:56.351 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-26 16:20:56.351 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-26 16:20:56.351 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-26 16:20:56.351 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-26 16:20:56.351 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-26 16:20:56.351 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-26 16:20:56.351 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-26 16:20:56.351 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-26 16:20:56.351 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-26 16:20:56.351 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-26 16:20:56.351 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-26 16:20:56.351 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-26 16:20:56.351 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-26 16:20:56.351 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-04-26 16:20:56.351 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-26 16:20:56.351 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-26 16:20:56.351 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-26 16:20:56.351 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-26 16:20:56.357 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-26 16:20:56.362 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-26 16:20:57.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 16:20:57.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 16:20:57.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 16:20:57.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-26 16:20:57.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-26 16:20:57.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-26 16:20:57.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-26 16:20:57.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-26 16:20:57.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-26 16:20:57.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-26 16:20:57.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-26 16:20:57.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-26 16:20:57.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-26 16:20:57.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.208 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 16:20:57.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 16:20:57.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-26 16:20:57.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-26 16:20:57.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-26 16:20:57.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-26 16:20:57.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-26 16:20:57.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-26 16:20:57.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-26 16:20:57.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 16:20:57.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.250 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 16:20:57.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-26 16:20:57.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:20:57.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-26 16:20:57.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-26 16:20:57.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 16:20:57.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 16:20:57.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-26 16:20:57.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-26 16:20:57.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-26 16:20:57.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-26 16:20:57.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-26 16:20:57.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-26 16:20:57.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-26 16:20:57.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-26 16:20:57.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 16:20:57.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.268 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.274 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 16:20:57.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-26 16:20:57.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:20:57.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-26 16:20:57.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-26 16:20:57.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-26 16:20:57.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-26 16:20:57.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-26 16:20:57.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-26 16:20:57.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-26 16:20:57.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-26 16:20:57.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-26 16:20:57.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 16:20:57.286 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.292 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.297 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 16:20:57.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-26 16:20:57.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:20:57.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-26 16:20:57.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-26 16:20:57.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-26 16:20:57.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-26 16:20:57.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-26 16:20:57.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 16:20:57.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 16:20:57.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-26 16:20:57.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-26 16:20:57.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-26 16:20:57.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 16:20:57.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.350 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 16:20:57.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-26 16:20:57.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-26 16:20:57.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-26 16:20:57.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-26 16:20:57.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-26 16:20:57.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-26 16:20:57.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:20:57.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 16:20:57.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 16:20:57.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-26 16:20:57.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:20:57.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-26 16:20:57.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-26 16:20:57.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 16:20:57.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 16:20:57.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-26 16:20:57.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-26 16:20:57.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-26 16:20:57.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-26 16:20:57.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-26 16:20:57.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-26 16:20:57.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-26 16:20:57.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-26 16:20:57.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-26 16:20:57.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-26 16:20:57.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-26 16:20:57.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-26 16:20:57.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 16:20:57.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 16:20:57.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-26 16:20:57.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-26 16:20:57.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-26 16:20:57.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 16:20:57.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 16:20:57.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-26 16:20:57.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:20:57.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-26 16:20:57.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-26 16:20:57.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 16:20:57.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 16:20:57.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-26 16:20:57.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-26 16:20:57.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-26 16:20:57.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-26 16:20:57.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-26 16:20:57.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-26 16:20:57.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 16:20:57.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 16:20:57.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-26 16:20:57.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-26 16:20:57.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-26 16:20:57.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-26 16:20:57.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 16:20:57.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 16:20:57.480 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-26 16:20:57.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:20:57.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-26 16:20:57.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-26 16:20:57.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 16:20:57.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 16:20:57.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-26 16:20:57.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-26 16:20:57.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-26 16:20:57.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-26 16:20:57.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-26 16:20:57.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-26 16:20:57.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-26 16:20:57.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 16:20:57.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 16:20:57.504 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-26 16:20:57.504 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-26 16:20:57.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 16:20:57.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 16:20:57.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-26 16:20:57.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:20:57.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-26 16:20:57.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-26 16:20:57.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-26 16:20:57.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-26 16:20:57.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-26 16:20:57.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-26 16:20:57.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-26 16:20:57.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-26 16:20:57.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-26 16:20:57.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-26 16:20:57.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-26 16:20:57.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-26 16:20:57.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-26 16:20:57.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-26 16:20:57.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-26 16:20:57.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-26 16:20:57.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-26 16:20:57.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 16:20:57.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 16:20:57.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-26 16:20:57.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-26 16:20:57.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-26 16:20:57.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:20:57.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 16:20:57.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 16:20:57.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-26 16:20:57.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-26 16:20:57.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-26 16:20:57.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-26 16:20:57.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 16:20:57.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 16:20:57.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-26 16:20:57.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-26 16:20:57.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-26 16:20:57.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-26 16:20:57.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 16:20:57.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 16:20:57.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-26 16:20:57.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 16:20:57.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 16:20:57.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:20:57.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:20:57.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 16:20:57.641 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 16:20:57.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:20:57.659 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:20:57.660 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 16:20:57.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 16:20:57.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:20:57.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:20:57.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 16:20:57.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 16:20:57.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:20:57.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 16:20:57.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 16:20:57.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-26 16:20:57.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-26 16:20:57.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-26 16:20:57.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 16:20:57.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 16:20:57.747 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-26 16:20:57.748 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 16:20:57.756 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.768 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 16:20:57.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-26 16:20:57.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-26 16:20:57.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-26 16:20:57.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-26 16:20:57.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-26 16:20:57.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 16:20:57.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.790 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 16:20:57.792 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-26 16:20:57.792 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-26 16:20:57.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 16:20:57.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:20:57.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 16:20:57.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-26 16:20:57.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-26 16:20:57.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-26 16:20:57.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-26 16:20:57.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:20:57.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 16:20:57.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:20:57.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:20:57.927 +08:00 [DBG] =========Yi-SQL耗时10.2266毫秒=====
2024-04-26 16:20:57.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:20:57.944 +08:00 [DBG] =========Yi-SQL耗时1.4796毫秒=====
2024-04-26 16:20:57.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:20:57.948 +08:00 [DBG] =========Yi-SQL耗时1.5723毫秒=====
2024-04-26 16:20:57.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:20:57.956 +08:00 [DBG] =========Yi-SQL耗时3.2764毫秒=====
2024-04-26 16:20:57.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:20:57.961 +08:00 [DBG] =========Yi-SQL耗时1.465毫秒=====
2024-04-26 16:20:57.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:20:57.964 +08:00 [DBG] =========Yi-SQL耗时1.0166毫秒=====
2024-04-26 16:20:57.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:20:57.971 +08:00 [DBG] =========Yi-SQL耗时1.9069毫秒=====
2024-04-26 16:20:57.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-26 16:20:57.976 +08:00 [DBG] =========Yi-SQL耗时1.032毫秒=====
2024-04-26 16:20:57.985 +08:00 [DBG] 耗时-1626ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-26 16:20:58.051 +08:00 [DBG] 耗时-63ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-26 16:20:58.055 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-26 16:20:58.072 +08:00 [DBG] 耗时-16ms,已加载模块-Volo.Abp.AspNetCore
2024-04-26 16:20:58.077 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-26 16:20:58.107 +08:00 [DBG] 耗时-29ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 16:20:58.111 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-26 16:20:58.462 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-26 16:20:58.534 +08:00 [DBG] 耗时-422ms,已加载模块-Yi.Abp.Web
2024-04-26 16:20:58.535 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2168ms】==========
2024-04-26 16:20:58.650 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-26 16:20:58.650 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-26 16:20:58.650 +08:00 [INF] Hosting environment: Development
2024-04-26 16:20:58.650 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-26 16:21:44.616 +08:00 [INF] CORS policy execution successful.
2024-04-26 16:21:45.074 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:45.074 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 16:21:45.081 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 16:21:45.093 +08:00 [INF] CORS policy execution successful.
2024-04-26 16:21:45.095 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 16:21:45.099 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:45.335 +08:00 [INF] 2024/4/26 16:21:45：cc,9g0Col49k8rgl1wXyc-Y_w连接服务端success，当前已连接0个
2024-04-26 16:21:45.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:45.387 +08:00 [DBG] =========Yi-SQL耗时6.0548毫秒=====
2024-04-26 16:21:45.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 16:21:45.427 +08:00 [DBG] =========Yi-SQL耗时3.0881毫秒=====
2024-04-26 16:21:45.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 16:21:45.442 +08:00 [DBG] =========Yi-SQL耗时1.3961毫秒=====
2024-04-26 16:21:45.556 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 16:21:45.661 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 558.0763ms
2024-04-26 16:21:45.662 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:45.674 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:45.678 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:45.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:45.685 +08:00 [DBG] =========Yi-SQL耗时2.071毫秒=====
2024-04-26 16:21:45.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 16:21:45.689 +08:00 [DBG] =========Yi-SQL耗时0.9887毫秒=====
2024-04-26 16:21:45.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 16:21:45.694 +08:00 [DBG] =========Yi-SQL耗时4.1597毫秒=====
2024-04-26 16:21:45.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:45.700 +08:00 [DBG] =========Yi-SQL耗时1.5973毫秒=====
2024-04-26 16:21:45.768 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:45.772 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 94.3701ms
2024-04-26 16:21:45.772 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:45.912 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:45.924 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:45.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 16:21:45.957 +08:00 [DBG] =========Yi-SQL耗时3.4347毫秒=====
2024-04-26 16:21:45.968 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 16:21:45.972 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 48.404ms
2024-04-26 16:21:45.972 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.056 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.056 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.058 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.061 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:46.061 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:46.061 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.066 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:46.102 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.103 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:46.104 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.104 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:46.105 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:46.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:46.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:46.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:46.129 +08:00 [DBG] =========Yi-SQL耗时4.0144毫秒=====
2024-04-26 16:21:46.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:46.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:46.160 +08:00 [DBG] =========Yi-SQL耗时10.4633毫秒=====
2024-04-26 16:21:46.161 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 16:21:46.163 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 97.1859ms
2024-04-26 16:21:46.163 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.181 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:46.185 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 80.1964ms
2024-04-26 16:21:46.185 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.204 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:21:46.209 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:46.213 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 109.2532ms
2024-04-26 16:21:46.214 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.216 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:21:46.316 +08:00 [DBG] =========Yi-SQL耗时188.7695毫秒=====
2024-04-26 16:21:46.325 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:46.325 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 264.2902ms
2024-04-26 16:21:46.325 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.338 +08:00 [DBG] =========Yi-SQL耗时213.7469毫秒=====
2024-04-26 16:21:46.340 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:46.379 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 317.5536ms
2024-04-26 16:21:46.379 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.393 +08:00 [DBG] =========Yi-SQL耗时250.5606毫秒=====
2024-04-26 16:21:46.395 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:46.395 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 292.115ms
2024-04-26 16:21:46.395 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:46.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:46.463 +08:00 [DBG] =========Yi-SQL耗时4.6413毫秒=====
2024-04-26 16:21:46.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:21:46.479 +08:00 [DBG] =========Yi-SQL耗时1.4936毫秒=====
2024-04-26 16:21:46.483 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:46.488 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 272.3531ms
2024-04-26 16:21:46.488 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:21:50.761 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 16:21:50.765 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 16:21:51.057 +08:00 [INF] CORS policy execution successful.
2024-04-26 16:21:51.060 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 16:21:51.061 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 16:21:51.077 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.078 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:51.082 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 16:21:51.084 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.5844ms
2024-04-26 16:21:51.085 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.096 +08:00 [INF] CORS policy execution successful.
2024-04-26 16:21:51.106 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 16:21:51.131 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.131 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:51.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:51.154 +08:00 [DBG] =========Yi-SQL耗时16.9256毫秒=====
2024-04-26 16:21:51.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 16:21:51.156 +08:00 [DBG] =========Yi-SQL耗时1.4638毫秒=====
2024-04-26 16:21:51.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 16:21:51.158 +08:00 [DBG] =========Yi-SQL耗时0.89毫秒=====
2024-04-26 16:21:51.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:51.162 +08:00 [DBG] =========Yi-SQL耗时2.3456毫秒=====
2024-04-26 16:21:51.164 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:51.166 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 34.0497ms
2024-04-26 16:21:51.166 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.217 +08:00 [INF] 2024/4/26 16:21:51：cc,WYiUsAIoJc8oeDjKUCVH2A连接服务端success，当前已连接0个
2024-04-26 16:21:51.299 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.299 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:51.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 16:21:51.303 +08:00 [DBG] =========Yi-SQL耗时2.3971毫秒=====
2024-04-26 16:21:51.306 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 16:21:51.306 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.6117ms
2024-04-26 16:21:51.306 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.492 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.492 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:51.494 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 16:21:51.494 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.495 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:51.495 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.2267ms
2024-04-26 16:21:51.495 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.501 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.501 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:51.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:51.502 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:51.503 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:51.505 +08:00 [DBG] =========Yi-SQL耗时2.2896毫秒=====
2024-04-26 16:21:51.505 +08:00 [DBG] =========Yi-SQL耗时2.0826毫秒=====
2024-04-26 16:21:51.507 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:51.508 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.2618ms
2024-04-26 16:21:51.508 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:51.508 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:51.509 +08:00 [DBG] =========Yi-SQL耗时1.2731毫秒=====
2024-04-26 16:21:51.510 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 15.1757ms
2024-04-26 16:21:51.510 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.512 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:21:51.512 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.512 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:21:51.513 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:51.514 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:51.514 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:51.515 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 11.7169ms
2024-04-26 16:21:51.515 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.523 +08:00 [DBG] =========Yi-SQL耗时8.1612毫秒=====
2024-04-26 16:21:51.525 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:51.525 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:51.526 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.1473ms
2024-04-26 16:21:51.526 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:51.528 +08:00 [DBG] =========Yi-SQL耗时1.0191毫秒=====
2024-04-26 16:21:51.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:51.532 +08:00 [DBG] =========Yi-SQL耗时1.9127毫秒=====
2024-04-26 16:21:51.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:21:51.538 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:51.538 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.2159ms
2024-04-26 16:21:51.538 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:51.538 +08:00 [DBG] =========Yi-SQL耗时0.8445毫秒=====
2024-04-26 16:21:51.540 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:51.540 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 27.7508ms
2024-04-26 16:21:51.540 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:21:54.629 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:54.629 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-26 16:21:54.630 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:54.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:54.634 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-26 16:21:54.636 +08:00 [DBG] =========Yi-SQL耗时1.9903毫秒=====
2024-04-26 16:21:54.639 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:54.640 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.7755ms
2024-04-26 16:21:54.640 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:54.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:54.658 +08:00 [DBG] =========Yi-SQL耗时2.5682毫秒=====
2024-04-26 16:21:54.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:21:54.660 +08:00 [DBG] =========Yi-SQL耗时0.8893毫秒=====
2024-04-26 16:21:54.662 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:54.664 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 29.1533ms
2024-04-26 16:21:54.664 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-26 16:21:56.478 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:21:56.478 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:56.478 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:21:56.478 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:21:56.479 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 16:21:56.480 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 0.9876ms
2024-04-26 16:21:56.480 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:21:56.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:21:56.482 +08:00 [DBG] =========Yi-SQL耗时1.2266毫秒=====
2024-04-26 16:21:56.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:21:56.492 +08:00 [DBG] =========Yi-SQL耗时1.7626毫秒=====
2024-04-26 16:21:56.493 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:21:56.493 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.5961ms
2024-04-26 16:21:56.493 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:22:15.650 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 16:22:15.650 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 16:22:29.922 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-26 16:22:29.933 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-26 16:22:35.132 +08:00 [INF] Loaded ABP modules:
2024-04-26 16:22:35.132 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-26 16:22:35.132 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-26 16:22:35.132 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-26 16:22:35.132 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-26 16:22:35.132 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-26 16:22:35.132 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-26 16:22:35.132 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-26 16:22:35.132 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-26 16:22:35.132 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-26 16:22:35.132 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-26 16:22:35.132 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-26 16:22:35.132 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-26 16:22:35.132 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-26 16:22:35.132 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-26 16:22:35.132 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-26 16:22:35.132 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-26 16:22:35.132 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-26 16:22:35.132 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-26 16:22:35.132 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-26 16:22:35.132 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-26 16:22:35.132 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-26 16:22:35.132 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-26 16:22:35.132 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-26 16:22:35.132 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-26 16:22:35.132 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-26 16:22:35.132 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-26 16:22:35.132 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-26 16:22:35.132 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-26 16:22:35.132 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-26 16:22:35.133 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-26 16:22:35.133 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-26 16:22:35.133 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-26 16:22:35.133 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-26 16:22:35.133 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-26 16:22:35.133 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-26 16:22:35.133 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-26 16:22:35.133 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-26 16:22:35.133 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-26 16:22:35.133 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-26 16:22:35.133 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-26 16:22:35.133 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-26 16:22:35.133 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-26 16:22:35.133 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-26 16:22:35.133 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-26 16:22:35.133 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-26 16:22:35.133 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-26 16:22:35.133 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-26 16:22:35.133 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-26 16:22:35.133 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-26 16:22:35.133 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-26 16:22:35.133 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-26 16:22:35.133 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-26 16:22:35.133 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-26 16:22:35.133 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-26 16:22:35.133 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-26 16:22:35.133 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-26 16:22:35.133 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-26 16:22:35.133 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-26 16:22:35.133 +08:00 [INF]   - Volo.Abp.Emailing.AbpEmailingModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Volo.Abp.BackgroundJobs.AbpBackgroundJobsAbstractionsModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Volo.Abp.TextTemplating.AbpTextTemplatingModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Volo.Abp.TextTemplating.Scriban.AbpTextTemplatingScribanModule
2024-04-26 16:22:35.133 +08:00 [INF]         - Volo.Abp.TextTemplating.AbpTextTemplatingCoreModule
2024-04-26 16:22:35.133 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-26 16:22:35.133 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-26 16:22:35.133 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-26 16:22:35.133 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-26 16:22:35.133 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-26 16:22:35.133 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-26 16:22:35.133 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-26 16:22:35.133 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-26 16:22:35.133 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-26 16:22:35.133 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-26 16:22:35.139 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-26 16:22:35.143 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-26 16:22:35.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:35.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:35.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:35.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:35.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 16:22:35.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:35.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:35.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:35.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-26 16:22:35.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:35.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 16:22:36.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-26 16:22:36.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-26 16:22:36.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-26 16:22:36.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-26 16:22:36.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-26 16:22:36.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-26 16:22:36.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-26 16:22:36.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-26 16:22:36.016 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-26 16:22:36.016 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-26 16:22:36.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-26 16:22:36.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.031 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.031 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 16:22:36.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-26 16:22:36.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-26 16:22:36.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-26 16:22:36.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-26 16:22:36.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-26 16:22:36.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-26 16:22:36.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-26 16:22:36.041 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-26 16:22:36.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 16:22:36.063 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-26 16:22:36.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:22:36.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-26 16:22:36.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-26 16:22:36.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 16:22:36.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 16:22:36.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-26 16:22:36.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-26 16:22:36.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-26 16:22:36.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-26 16:22:36.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-26 16:22:36.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-26 16:22:36.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-26 16:22:36.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-26 16:22:36.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.071 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-26 16:22:36.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 16:22:36.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-26 16:22:36.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:22:36.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-26 16:22:36.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-26 16:22:36.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-26 16:22:36.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-26 16:22:36.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-26 16:22:36.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-26 16:22:36.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-26 16:22:36.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-26 16:22:36.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-26 16:22:36.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-26 16:22:36.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 16:22:36.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-26 16:22:36.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:22:36.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-26 16:22:36.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-26 16:22:36.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-26 16:22:36.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-26 16:22:36.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-26 16:22:36.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.124 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-26 16:22:36.126 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 16:22:36.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-26 16:22:36.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-26 16:22:36.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-26 16:22:36.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.143 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-26 16:22:36.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.164 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 16:22:36.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-26 16:22:36.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-26 16:22:36.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-26 16:22:36.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-26 16:22:36.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-26 16:22:36.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-26 16:22:36.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:22:36.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-26 16:22:36.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 16:22:36.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-26 16:22:36.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:22:36.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-26 16:22:36.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-26 16:22:36.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 16:22:36.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 16:22:36.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-26 16:22:36.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-26 16:22:36.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-26 16:22:36.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-26 16:22:36.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-26 16:22:36.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-26 16:22:36.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-26 16:22:36.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-26 16:22:36.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-26 16:22:36.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-26 16:22:36.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-26 16:22:36.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-26 16:22:36.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.208 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-26 16:22:36.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 16:22:36.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-26 16:22:36.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-26 16:22:36.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-26 16:22:36.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.235 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-26 16:22:36.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.248 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 16:22:36.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-26 16:22:36.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:22:36.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-26 16:22:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-26 16:22:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 16:22:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 16:22:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-26 16:22:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-26 16:22:36.252 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-26 16:22:36.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-26 16:22:36.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-26 16:22:36.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-26 16:22:36.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-26 16:22:36.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.270 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 16:22:36.272 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-26 16:22:36.273 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-26 16:22:36.273 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-26 16:22:36.273 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-26 16:22:36.273 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-26 16:22:36.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.286 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 16:22:36.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-26 16:22:36.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:22:36.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-26 16:22:36.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-26 16:22:36.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 16:22:36.294 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 16:22:36.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-26 16:22:36.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-26 16:22:36.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-26 16:22:36.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-26 16:22:36.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-26 16:22:36.295 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-26 16:22:36.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-26 16:22:36.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.304 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-26 16:22:36.307 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 16:22:36.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-26 16:22:36.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-26 16:22:36.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-26 16:22:36.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.334 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.334 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 16:22:36.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-26 16:22:36.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-26 16:22:36.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-26 16:22:36.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-26 16:22:36.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-26 16:22:36.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-26 16:22:36.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-26 16:22:36.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-26 16:22:36.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-26 16:22:36.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-26 16:22:36.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-26 16:22:36.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-26 16:22:36.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-26 16:22:36.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-26 16:22:36.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-26 16:22:36.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-26 16:22:36.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-26 16:22:36.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-26 16:22:36.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-26 16:22:36.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-26 16:22:36.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-26 16:22:36.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-26 16:22:36.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-26 16:22:36.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-26 16:22:36.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:22:36.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-26 16:22:36.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 16:22:36.367 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-26 16:22:36.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-26 16:22:36.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-26 16:22:36.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-26 16:22:36.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-26 16:22:36.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.386 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 16:22:36.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-26 16:22:36.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-26 16:22:36.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-26 16:22:36.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-26 16:22:36.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-26 16:22:36.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 16:22:36.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-26 16:22:36.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-26 16:22:36.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 16:22:36.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:22:36.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:22:36.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-26 16:22:36.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 16:22:36.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:22:36.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:22:36.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-26 16:22:36.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 16:22:36.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:22:36.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:22:36.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-26 16:22:36.496 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 16:22:36.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-26 16:22:36.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-26 16:22:36.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 16:22:36.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-26 16:22:36.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-26 16:22:36.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-26 16:22:36.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-26 16:22:36.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 16:22:36.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-26 16:22:36.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-26 16:22:36.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 16:22:36.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-26 16:22:36.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-26 16:22:36.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-26 16:22:36.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-26 16:22:36.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-26 16:22:36.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-26 16:22:36.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 16:22:36.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-26 16:22:36.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-26 16:22:36.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-26 16:22:36.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.616 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-26 16:22:36.618 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 16:22:36.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-26 16:22:36.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-26 16:22:36.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-26 16:22:36.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-26 16:22:36.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-26 16:22:36.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-26 16:22:36.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-26 16:22:36.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:22:36.780 +08:00 [DBG] =========Yi-SQL耗时9.9毫秒=====
2024-04-26 16:22:36.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:22:36.796 +08:00 [DBG] =========Yi-SQL耗时1.1593毫秒=====
2024-04-26 16:22:36.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:22:36.802 +08:00 [DBG] =========Yi-SQL耗时1.0716毫秒=====
2024-04-26 16:22:36.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:22:36.809 +08:00 [DBG] =========Yi-SQL耗时2.1075毫秒=====
2024-04-26 16:22:36.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:22:36.813 +08:00 [DBG] =========Yi-SQL耗时1.4862毫秒=====
2024-04-26 16:22:36.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:22:36.818 +08:00 [DBG] =========Yi-SQL耗时1.1028毫秒=====
2024-04-26 16:22:36.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-26 16:22:36.930 +08:00 [DBG] =========Yi-SQL耗时1.4302毫秒=====
2024-04-26 16:22:36.932 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-26 16:22:36.933 +08:00 [DBG] =========Yi-SQL耗时0.7205毫秒=====
2024-04-26 16:22:36.942 +08:00 [DBG] 耗时-1802ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-26 16:22:37.001 +08:00 [DBG] 耗时-57ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-26 16:22:37.006 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.EventBus
2024-04-26 16:22:37.021 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-04-26 16:22:37.026 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-26 16:22:37.047 +08:00 [DBG] 耗时-21ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-26 16:22:37.053 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-26 16:22:37.323 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-26 16:22:37.395 +08:00 [DBG] 耗时-341ms,已加载模块-Yi.Abp.Web
2024-04-26 16:22:37.396 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2249ms】==========
2024-04-26 16:22:37.490 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-26 16:22:37.490 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-26 16:22:37.490 +08:00 [INF] Hosting environment: Development
2024-04-26 16:22:37.490 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-26 16:23:00.761 +08:00 [INF] CORS policy execution successful.
2024-04-26 16:23:00.819 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 16:23:00.819 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:00.824 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 16:23:00.831 +08:00 [INF] CORS policy execution successful.
2024-04-26 16:23:00.833 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 16:23:00.836 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:00.930 +08:00 [INF] 2024/4/26 16:23:00：cc,hr6FubgRx15bitTFkwqjjQ连接服务端success，当前已连接0个
2024-04-26 16:23:00.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:00.951 +08:00 [DBG] =========Yi-SQL耗时2.62毫秒=====
2024-04-26 16:23:00.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 16:23:00.977 +08:00 [DBG] =========Yi-SQL耗时0.999毫秒=====
2024-04-26 16:23:00.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 16:23:00.989 +08:00 [DBG] =========Yi-SQL耗时0.4821毫秒=====
2024-04-26 16:23:01.073 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 16:23:01.139 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 299.8385ms
2024-04-26 16:23:01.139 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:01.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:01.148 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:01.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:01.151 +08:00 [DBG] =========Yi-SQL耗时0.7824毫秒=====
2024-04-26 16:23:01.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 16:23:01.155 +08:00 [DBG] =========Yi-SQL耗时0.6059毫秒=====
2024-04-26 16:23:01.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 16:23:01.156 +08:00 [DBG] =========Yi-SQL耗时0.6818毫秒=====
2024-04-26 16:23:01.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:01.160 +08:00 [DBG] =========Yi-SQL耗时0.9878毫秒=====
2024-04-26 16:23:01.222 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:01.225 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 76.7981ms
2024-04-26 16:23:01.225 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:01.393 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:01.402 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:01.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 16:23:01.424 +08:00 [DBG] =========Yi-SQL耗时2.2268毫秒=====
2024-04-26 16:23:01.434 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 16:23:01.437 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 35.1117ms
2024-04-26 16:23:01.437 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:01.484 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:01.492 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:23:01.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:01.699 +08:00 [DBG] =========Yi-SQL耗时1.607毫秒=====
2024-04-26 16:23:01.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:23:01.711 +08:00 [DBG] =========Yi-SQL耗时0.6977毫秒=====
2024-04-26 16:23:01.718 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:01.726 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 233.5957ms
2024-04-26 16:23:01.726 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:11.197 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:11.197 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:23:11.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND  ("project" like concat('%',N'1','%'))   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:11.204 +08:00 [DBG] =========Yi-SQL耗时0.9607毫秒=====
2024-04-26 16:23:11.206 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND  ("project" like concat('%',N'1','%'))   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:23:11.207 +08:00 [DBG] =========Yi-SQL耗时0.7893毫秒=====
2024-04-26 16:23:11.207 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:11.208 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.3312ms
2024-04-26 16:23:11.208 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:14.779 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:14.779 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:23:14.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND  ("project" like concat('%',N'1','%'))   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:14.782 +08:00 [DBG] =========Yi-SQL耗时0.8028毫秒=====
2024-04-26 16:23:14.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND  ("project" like concat('%',N'1','%'))   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:23:14.785 +08:00 [DBG] =========Yi-SQL耗时0.9313毫秒=====
2024-04-26 16:23:14.786 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:14.786 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 6.4023ms
2024-04-26 16:23:14.786 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:18.674 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.674 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.674 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:18.682 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:18.683 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.683 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.683 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.683 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:18.683 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:18.683 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:18.683 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.683 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:18.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:18.696 +08:00 [DBG] =========Yi-SQL耗时2.7451毫秒=====
2024-04-26 16:23:18.701 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:18.703 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 20.1119ms
2024-04-26 16:23:18.703 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:18.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:18.711 +08:00 [DBG] =========Yi-SQL耗时2.1526毫秒=====
2024-04-26 16:23:18.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:18.713 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:18.715 +08:00 [DBG] =========Yi-SQL耗时1.8625毫秒=====
2024-04-26 16:23:18.716 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:18.716 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 32.6671ms
2024-04-26 16:23:18.716 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.717 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:18.718 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:23:18.723 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 16:23:18.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:18.725 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 50.8342ms
2024-04-26 16:23:18.725 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.747 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:18.750 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 67.78ms
2024-04-26 16:23:18.750 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.831 +08:00 [DBG] =========Yi-SQL耗时121.0699毫秒=====
2024-04-26 16:23:18.832 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:18.832 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 148.9405ms
2024-04-26 16:23:18.833 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:18.841 +08:00 [DBG] =========Yi-SQL耗时117.6798毫秒=====
2024-04-26 16:23:18.842 +08:00 [DBG] =========Yi-SQL耗时129.2147毫秒=====
2024-04-26 16:23:18.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:23:18.844 +08:00 [DBG] =========Yi-SQL耗时0.8704毫秒=====
2024-04-26 16:23:18.845 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:18.845 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 127.4032ms
2024-04-26 16:23:18.845 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:18.845 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:18.846 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 162.4246ms
2024-04-26 16:23:18.846 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:20.439 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:20.439 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-26 16:23:20.439 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:20.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:20.441 +08:00 [DBG] =========Yi-SQL耗时0.7491毫秒=====
2024-04-26 16:23:20.443 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:20.444 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 4.3353ms
2024-04-26 16:23:20.444 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:20.444 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-26 16:23:20.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:20.457 +08:00 [DBG] =========Yi-SQL耗时1.1285毫秒=====
2024-04-26 16:23:20.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:23:20.460 +08:00 [DBG] =========Yi-SQL耗时0.7126毫秒=====
2024-04-26 16:23:20.461 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:20.463 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 18.7738ms
2024-04-26 16:23:20.463 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-26 16:23:21.914 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:21.914 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:21.914 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:21.914 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:21.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:21.916 +08:00 [DBG] =========Yi-SQL耗时0.838毫秒=====
2024-04-26 16:23:21.918 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:21.919 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:21.921 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:21.922 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.2966ms
2024-04-26 16:23:21.922 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:21.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-26 16:23:21.962 +08:00 [DBG] =========Yi-SQL耗时3.0167毫秒=====
2024-04-26 16:23:21.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-26 16:23:21.965 +08:00 [DBG] =========Yi-SQL耗时1.2768毫秒=====
2024-04-26 16:23:21.975 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:21.978 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 59.0175ms
2024-04-26 16:23:21.978 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:21.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-26 16:23:21.995 +08:00 [DBG] =========Yi-SQL耗时2.545毫秒=====
2024-04-26 16:23:21.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-26 16:23:21.998 +08:00 [DBG] =========Yi-SQL耗时1.2984毫秒=====
2024-04-26 16:23:22.000 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:22.005 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 86.2645ms
2024-04-26 16:23:22.005 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:23.733 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:23.733 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:23.734 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:23:23.734 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:23.738 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 16:23:23.738 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.511ms
2024-04-26 16:23:23.739 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:23.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:23.744 +08:00 [DBG] =========Yi-SQL耗时2.9568毫秒=====
2024-04-26 16:23:23.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:23:23.746 +08:00 [DBG] =========Yi-SQL耗时1.2664毫秒=====
2024-04-26 16:23:23.747 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:23.748 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 13.6827ms
2024-04-26 16:23:23.748 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:49.605 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 16:23:49.614 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 16:23:49.789 +08:00 [INF] CORS policy execution successful.
2024-04-26 16:23:49.792 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 16:23:49.793 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 16:23:49.810 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:49.812 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:49.815 +08:00 [INF] CORS policy execution successful.
2024-04-26 16:23:49.815 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 16:23:49.820 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 16:23:49.821 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 9.1879ms
2024-04-26 16:23:49.821 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:49.834 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:49.836 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:49.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:49.840 +08:00 [DBG] =========Yi-SQL耗时0.9156毫秒=====
2024-04-26 16:23:49.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 16:23:49.842 +08:00 [DBG] =========Yi-SQL耗时0.3046毫秒=====
2024-04-26 16:23:49.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 16:23:49.843 +08:00 [DBG] =========Yi-SQL耗时0.7831毫秒=====
2024-04-26 16:23:49.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:49.845 +08:00 [DBG] =========Yi-SQL耗时0.8938毫秒=====
2024-04-26 16:23:49.845 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:49.845 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 9.1664ms
2024-04-26 16:23:49.846 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:49.850 +08:00 [INF] 2024/4/26 16:23:49：cc,S9qqsdoIrlzz-jKElbzgug连接服务端success，当前已连接0个
2024-04-26 16:23:49.911 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:49.913 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:49.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 16:23:49.916 +08:00 [DBG] =========Yi-SQL耗时1.0389毫秒=====
2024-04-26 16:23:49.919 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 16:23:49.919 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.8326ms
2024-04-26 16:23:49.920 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.023 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.023 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.024 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:50.025 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 16:23:50.025 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.6285ms
2024-04-26 16:23:50.025 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.027 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.027 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:50.034 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.034 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.034 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:50.034 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:50.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:50.038 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.038 +08:00 [DBG] =========Yi-SQL耗时3.9272毫秒=====
2024-04-26 16:23:50.038 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:50.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:50.039 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 16:23:50.040 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:23:50.041 +08:00 [DBG] =========Yi-SQL耗时2.5936毫秒=====
2024-04-26 16:23:50.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:50.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:50.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:50.042 +08:00 [DBG] =========Yi-SQL耗时0.7504毫秒=====
2024-04-26 16:23:50.042 +08:00 [DBG] =========Yi-SQL耗时0.7736毫秒=====
2024-04-26 16:23:50.043 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:50.045 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.6441ms
2024-04-26 16:23:50.045 +08:00 [DBG] =========Yi-SQL耗时3.6862毫秒=====
2024-04-26 16:23:50.045 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.045 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:50.045 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 18.3615ms
2024-04-26 16:23:50.045 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.045 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:50.046 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 11.7167ms
2024-04-26 16:23:50.046 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.047 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:23:50.048 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:50.049 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.7333ms
2024-04-26 16:23:50.049 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.056 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:50.057 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 22.7784ms
2024-04-26 16:23:50.057 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 16:23:50.057 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:23:50.059 +08:00 [DBG] =========Yi-SQL耗时1.6489毫秒=====
2024-04-26 16:23:50.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:23:50.064 +08:00 [DBG] =========Yi-SQL耗时0.9558毫秒=====
2024-04-26 16:23:50.079 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:23:50.081 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 34.021ms
2024-04-26 16:23:50.081 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:55:19.021 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:55:19.099 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:55:19.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:55:19.367 +08:00 [DBG] =========Yi-SQL耗时141.9785毫秒=====
2024-04-26 16:55:19.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:55:19.377 +08:00 [DBG] =========Yi-SQL耗时4.5606毫秒=====
2024-04-26 16:55:19.389 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:55:19.397 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 296.3476ms
2024-04-26 16:55:19.397 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:55:39.253 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:55:39.258 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:55:39.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:55:39.276 +08:00 [DBG] =========Yi-SQL耗时2.3041毫秒=====
2024-04-26 16:55:39.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:55:39.278 +08:00 [DBG] =========Yi-SQL耗时0.8228毫秒=====
2024-04-26 16:55:39.280 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:55:39.280 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 21.9634ms
2024-04-26 16:55:39.280 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:58:14.264 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:58:14.276 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:58:14.572 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 16:58:14.574 +08:00 [ERR] Nullable object must have a value.
System.InvalidOperationException: Nullable object must have a value.
   at System.Nullable`1.get_Value()
   at Yi.Abp.Application.Services.QuestionService.GetListAsync(QuestionGetListInput input)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.GlobalFeatures.GlobalFeatureInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Validation.ValidationInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Auditing.AuditingInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Uow.UnitOfWorkInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at lambda_method1735(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 16:58:14.648 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 16:58:14.675 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 397.82ms
2024-04-26 16:58:14.675 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:58:30.918 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:58:30.919 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:58:34.833 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-26 16:58:34.833 +08:00 [ERR] Nullable object must have a value.
System.InvalidOperationException: Nullable object must have a value.
   at System.Nullable`1.get_Value()
   at Yi.Abp.Application.Services.QuestionService.GetListAsync(QuestionGetListInput input)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.GlobalFeatures.GlobalFeatureInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Validation.ValidationInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Auditing.AuditingInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Uow.UnitOfWorkInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at lambda_method1735(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-26 16:58:34.833 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-26 16:58:39.292 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8373.0514ms
2024-04-26 16:58:39.292 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:59:01.319 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:59:01.319 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:59:08.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:59:10.138 +08:00 [DBG] =========Yi-SQL耗时3.3111毫秒=====
2024-04-26 16:59:11.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:59:11.411 +08:00 [DBG] =========Yi-SQL耗时0.8108毫秒=====
2024-04-26 16:59:11.412 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:59:11.413 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10093.119ms
2024-04-26 16:59:11.413 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:59:26.030 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:59:26.032 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:59:26.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:59:26.038 +08:00 [DBG] =========Yi-SQL耗时1.4354毫秒=====
2024-04-26 16:59:26.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:59:26.043 +08:00 [DBG] =========Yi-SQL耗时1.3088毫秒=====
2024-04-26 16:59:26.044 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:59:26.045 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 12.3429ms
2024-04-26 16:59:26.045 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:59:32.206 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:59:32.207 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:59:32.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:59:32.210 +08:00 [DBG] =========Yi-SQL耗时0.6604毫秒=====
2024-04-26 16:59:32.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:59:32.212 +08:00 [DBG] =========Yi-SQL耗时0.8427毫秒=====
2024-04-26 16:59:32.213 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:59:32.213 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 6.1448ms
2024-04-26 16:59:32.213 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:59:38.130 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 16:59:38.130 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 16:59:38.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND  ("project" like concat('%',N'1','%'))   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 16:59:38.140 +08:00 [DBG] =========Yi-SQL耗时4.6441毫秒=====
2024-04-26 16:59:38.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND  ("project" like concat('%',N'1','%'))   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 16:59:38.141 +08:00 [DBG] =========Yi-SQL耗时0.9893毫秒=====
2024-04-26 16:59:38.144 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 16:59:38.145 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.0812ms
2024-04-26 16:59:38.145 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 17:00:33.074 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 17:00:33.075 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 17:00:33.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 17:00:33.162 +08:00 [DBG] =========Yi-SQL耗时84.5605毫秒=====
2024-04-26 17:00:33.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE  ("creatorid" = null)   AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 17:00:33.198 +08:00 [DBG] =========Yi-SQL耗时1.3939毫秒=====
2024-04-26 17:00:33.201 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 17:00:33.203 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 127.8842ms
2024-04-26 17:00:33.203 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 17:00:43.903 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 17:00:43.907 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 17:00:43.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 17:00:43.915 +08:00 [DBG] =========Yi-SQL耗时0.9047毫秒=====
2024-04-26 17:00:43.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 17:00:43.918 +08:00 [DBG] =========Yi-SQL耗时0.7073毫秒=====
2024-04-26 17:00:43.924 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 17:00:43.925 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 17.2227ms
2024-04-26 17:00:43.925 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 17:00:49.295 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-26 17:00:49.298 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-26 17:00:49.663 +08:00 [INF] CORS policy execution successful.
2024-04-26 17:00:49.668 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-26 17:00:49.674 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-26 17:00:49.674 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.678 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 17:00:49.682 +08:00 [INF] CORS policy execution successful.
2024-04-26 17:00:49.684 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-26 17:00:49.716 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 17:00:49.717 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 38.3671ms
2024-04-26 17:00:49.717 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.725 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.727 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 17:00:49.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 17:00:49.737 +08:00 [DBG] =========Yi-SQL耗时7.0442毫秒=====
2024-04-26 17:00:49.739 +08:00 [INF] 2024/4/26 17:00:49：cc,F7jjAULRvSBxsfSolz1yXg连接服务端success，当前已连接0个
2024-04-26 17:00:49.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-26 17:00:49.744 +08:00 [DBG] =========Yi-SQL耗时3.9689毫秒=====
2024-04-26 17:00:49.747 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-26 17:00:49.749 +08:00 [DBG] =========Yi-SQL耗时2.2754毫秒=====
2024-04-26 17:00:49.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 17:00:49.755 +08:00 [DBG] =========Yi-SQL耗时4.1119毫秒=====
2024-04-26 17:00:49.757 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 17:00:49.757 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 30.0763ms
2024-04-26 17:00:49.757 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.822 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.825 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-26 17:00:49.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-26 17:00:49.830 +08:00 [DBG] =========Yi-SQL耗时2.6812毫秒=====
2024-04-26 17:00:49.838 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-26 17:00:49.840 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 14.3793ms
2024-04-26 17:00:49.840 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.944 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.944 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.945 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-26 17:00:49.947 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 17:00:49.947 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-26 17:00:49.947 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.7856ms
2024-04-26 17:00:49.947 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'status_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 17:00:49.955 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.958 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.958 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 17:00:49.958 +08:00 [DBG] =========Yi-SQL耗时6.685毫秒=====
2024-04-26 17:00:49.958 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 17:00:49.958 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.958 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.959 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 17:00:49.959 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-26 17:00:49.960 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-26 17:00:49.960 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-26 17:00:49.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_category_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 17:00:49.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'priority_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 17:00:49.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'impact_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 17:00:49.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'question_project_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-26 17:00:49.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-26 17:00:49.965 +08:00 [DBG] =========Yi-SQL耗时4.7713毫秒=====
2024-04-26 17:00:49.974 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 17:00:49.974 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 16.242ms
2024-04-26 17:00:49.974 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:49.977 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 17:00:49.977 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 30.4115ms
2024-04-26 17:00:49.977 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:50.098 +08:00 [DBG] =========Yi-SQL耗时134.6677毫秒=====
2024-04-26 17:00:50.105 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 17:00:50.106 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 146.454ms
2024-04-26 17:00:50.106 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:50.146 +08:00 [DBG] =========Yi-SQL耗时185.8422毫秒=====
2024-04-26 17:00:50.148 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 17:00:50.149 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 190.9134ms
2024-04-26 17:00:50.149 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:50.158 +08:00 [DBG] =========Yi-SQL耗时197.7941毫秒=====
2024-04-26 17:00:50.161 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 17:00:50.161 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 202.0086ms
2024-04-26 17:00:50.161 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-26 17:00:50.166 +08:00 [DBG] =========Yi-SQL耗时201.124毫秒=====
2024-04-26 17:00:50.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","create_name" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-26 17:00:50.170 +08:00 [DBG] =========Yi-SQL耗时1.7716毫秒=====
2024-04-26 17:00:50.175 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-26 17:00:50.175 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 215.3232ms
2024-04-26 17:00:50.175 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
