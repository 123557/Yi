2024-04-22 14:58:54.615 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-22 14:58:54.629 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-22 14:59:00.697 +08:00 [INF] Loaded ABP modules:
2024-04-22 14:59:00.698 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-22 14:59:00.698 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-22 14:59:00.698 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-22 14:59:00.698 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-22 14:59:00.698 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-22 14:59:00.698 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-22 14:59:00.698 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-22 14:59:00.698 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-22 14:59:00.698 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-22 14:59:00.698 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-22 14:59:00.698 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-22 14:59:00.698 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-22 14:59:00.698 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-22 14:59:00.698 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-22 14:59:00.698 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-22 14:59:00.698 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-22 14:59:00.698 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-22 14:59:00.698 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-22 14:59:00.698 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-22 14:59:00.698 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-22 14:59:00.698 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-22 14:59:00.698 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-22 14:59:00.698 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-22 14:59:00.698 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-22 14:59:00.698 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-22 14:59:00.698 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-22 14:59:00.698 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-22 14:59:00.698 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-22 14:59:00.698 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-22 14:59:00.698 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-22 14:59:00.698 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-22 14:59:00.698 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-22 14:59:00.698 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-22 14:59:00.708 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-22 14:59:00.716 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-22 14:59:01.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-22 14:59:01.548 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-22 14:59:01.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-22 14:59:01.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-22 14:59:01.595 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.595 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-22 14:59:01.595 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.595 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-22 14:59:01.595 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.595 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-22 14:59:01.595 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.595 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-22 14:59:01.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-22 14:59:01.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-22 14:59:01.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-22 14:59:01.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-22 14:59:01.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-22 14:59:01.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-22 14:59:01.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-22 14:59:01.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-22 14:59:01.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-22 14:59:01.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-22 14:59:01.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-22 14:59:01.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-22 14:59:01.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-22 14:59:01.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-22 14:59:01.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-22 14:59:01.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-22 14:59:01.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-22 14:59:01.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-22 14:59:01.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-22 14:59:01.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-22 14:59:01.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 14:59:01.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 14:59:01.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-22 14:59:01.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-22 14:59:01.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-22 14:59:01.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-22 14:59:01.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-22 14:59:01.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-22 14:59:01.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-22 14:59:01.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-22 14:59:01.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-22 14:59:01.660 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-22 14:59:01.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-22 14:59:01.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-22 14:59:01.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-22 14:59:01.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-22 14:59:01.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-22 14:59:01.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-22 14:59:01.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-22 14:59:01.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-22 14:59:01.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-22 14:59:01.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-22 14:59:01.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-22 14:59:01.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-22 14:59:01.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.696 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-22 14:59:01.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-22 14:59:01.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-22 14:59:01.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-22 14:59:01.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-22 14:59:01.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-22 14:59:01.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-22 14:59:01.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-22 14:59:01.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-22 14:59:01.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.713 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.713 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-22 14:59:01.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-22 14:59:01.721 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-22 14:59:01.721 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-22 14:59:01.721 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-22 14:59:01.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-22 14:59:01.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-22 14:59:01.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-22 14:59:01.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-22 14:59:01.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-22 14:59:01.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-22 14:59:01.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-22 14:59:01.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.747 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 14:59:01.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-22 14:59:01.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-22 14:59:01.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-22 14:59:01.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-22 14:59:01.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-22 14:59:01.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-22 14:59:01.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 14:59:01.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 14:59:01.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-22 14:59:01.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-22 14:59:01.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-22 14:59:01.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-22 14:59:01.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-22 14:59:01.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-22 14:59:01.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-22 14:59:01.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-22 14:59:01.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-22 14:59:01.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-22 14:59:01.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-22 14:59:01.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-22 14:59:01.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-22 14:59:01.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-22 14:59:01.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-22 14:59:01.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-22 14:59:01.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-22 14:59:01.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-22 14:59:01.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.816 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-22 14:59:01.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-22 14:59:01.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-22 14:59:01.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-22 14:59:01.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-22 14:59:01.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 14:59:01.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 14:59:01.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-22 14:59:01.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-22 14:59:01.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-22 14:59:01.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-22 14:59:01.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-22 14:59:01.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-22 14:59:01.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-22 14:59:01.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-22 14:59:01.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-22 14:59:01.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-22 14:59:01.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-22 14:59:01.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-22 14:59:01.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-22 14:59:01.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-22 14:59:01.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-22 14:59:01.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-22 14:59:01.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-22 14:59:01.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-22 14:59:01.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 14:59:01.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 14:59:01.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-22 14:59:01.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-22 14:59:01.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-22 14:59:01.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-22 14:59:01.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-22 14:59:01.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-22 14:59:01.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-22 14:59:01.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.886 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-22 14:59:01.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-22 14:59:01.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-22 14:59:01.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-22 14:59:01.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.909 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-22 14:59:01.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-22 14:59:01.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-22 14:59:01.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-22 14:59:01.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-22 14:59:01.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-22 14:59:01.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-22 14:59:01.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-22 14:59:01.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-22 14:59:01.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-22 14:59:01.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-22 14:59:01.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-22 14:59:01.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-22 14:59:01.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-22 14:59:01.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-22 14:59:01.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-22 14:59:01.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-22 14:59:01.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-22 14:59:01.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-22 14:59:01.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-22 14:59:01.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-22 14:59:01.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 14:59:01.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 14:59:01.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-22 14:59:01.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-22 14:59:01.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-22 14:59:01.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 14:59:01.930 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-22 14:59:01.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-22 14:59:01.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-22 14:59:01.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-22 14:59:01.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-22 14:59:01.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-22 14:59:01.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-22 14:59:01.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-22 14:59:01.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-22 14:59:01.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-22 14:59:01.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-22 14:59:01.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-22 14:59:01.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-22 14:59:01.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:01.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-22 14:59:01.990 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-22 14:59:01.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:01.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:01.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-22 14:59:01.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:02.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.016 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-22 14:59:02.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 14:59:02.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 14:59:02.022 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.027 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-22 14:59:02.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:02.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.042 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-22 14:59:02.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 14:59:02.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 14:59:02.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-22 14:59:02.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:02.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-22 14:59:02.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 14:59:02.069 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.069 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 14:59:02.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-22 14:59:02.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:02.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-22 14:59:02.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 14:59:02.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-22 14:59:02.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:02.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.109 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-22 14:59:02.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-22 14:59:02.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-22 14:59:02.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-22 14:59:02.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-22 14:59:02.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:02.126 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-22 14:59:02.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-22 14:59:02.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-22 14:59:02.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:02.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-22 14:59:02.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-22 14:59:02.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-22 14:59:02.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-22 14:59:02.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-22 14:59:02.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-22 14:59:02.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.163 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-22 14:59:02.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:02.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-22 14:59:02.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-22 14:59:02.178 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-22 14:59:02.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-22 14:59:02.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 14:59:02.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-22 14:59:02.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-22 14:59:02.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-22 14:59:02.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-22 14:59:02.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-22 14:59:02.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 14:59:02.204 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-22 14:59:02.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 14:59:02.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 14:59:02.300 +08:00 [DBG] =========Yi-SQL耗时10.6718毫秒=====
2024-04-22 14:59:02.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 14:59:02.319 +08:00 [DBG] =========Yi-SQL耗时1.6083毫秒=====
2024-04-22 14:59:02.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 14:59:02.324 +08:00 [DBG] =========Yi-SQL耗时1.6969毫秒=====
2024-04-22 14:59:02.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 14:59:02.331 +08:00 [DBG] =========Yi-SQL耗时2.7194毫秒=====
2024-04-22 14:59:02.334 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 14:59:02.336 +08:00 [DBG] =========Yi-SQL耗时1.4127毫秒=====
2024-04-22 14:59:02.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 14:59:02.340 +08:00 [DBG] =========Yi-SQL耗时1.3624毫秒=====
2024-04-22 14:59:02.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 14:59:02.348 +08:00 [DBG] =========Yi-SQL耗时2.717毫秒=====
2024-04-22 14:59:02.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-22 14:59:02.352 +08:00 [DBG] =========Yi-SQL耗时1.4614毫秒=====
2024-04-22 14:59:02.362 +08:00 [DBG] 耗时-1652ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-22 14:59:02.484 +08:00 [DBG] 耗时-119ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-22 14:59:02.487 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-22 14:59:02.506 +08:00 [DBG] 耗时-18ms,已加载模块-Volo.Abp.AspNetCore
2024-04-22 14:59:02.513 +08:00 [DBG] 耗时-7ms,已加载模块-Volo.Abp.Quartz
2024-04-22 14:59:02.538 +08:00 [DBG] 耗时-24ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-22 14:59:02.541 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-22 14:59:03.093 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-22 14:59:03.223 +08:00 [DBG] 耗时-681ms,已加载模块-Yi.Abp.Web
2024-04-22 14:59:03.224 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【2507ms】==========
2024-04-22 14:59:03.381 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-22 14:59:03.381 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-22 14:59:03.381 +08:00 [INF] Hosting environment: Development
2024-04-22 14:59:03.381 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-22 14:59:05.858 +08:00 [INF] Sending file. Request path: '/favicon-32x32.png'. Physical path: 'N/A'
2024-04-22 15:00:12.970 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.TestService.GetSqlSugarDbAsync (Yi.Abp.Application)'
2024-04-22 15:00:12.989 +08:00 [INF] Route matched with {action = "GetSqlSugarDb", controller = "Test", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] GetSqlSugarDbAsync() on controller Yi.Abp.Application.Services.TestService (Yi.Abp.Application).
2024-04-22 15:00:13.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","logo","color","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "banner"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:00:13.012 +08:00 [DBG] =========Yi-SQL耗时3.0793毫秒=====
2024-04-22 15:00:13.046 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Bbs.Domain.Entities.Forum.BannerEntity, Yi.Framework.Bbs.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:00:13.103 +08:00 [INF] Executed action Yi.Abp.Application.Services.TestService.GetSqlSugarDbAsync (Yi.Abp.Application) in 112.3753ms
2024-04-22 15:00:13.104 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.TestService.GetSqlSugarDbAsync (Yi.Abp.Application)'
2024-04-22 15:03:40.231 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:03:40.381 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-22 15:03:40.381 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:40.385 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-22 15:03:40.386 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-22 15:03:40.387 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:03:40.388 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-22 15:03:40.388 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:03:40.774 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:03:40.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:03:40.931 +08:00 [DBG] =========Yi-SQL耗时127.7421毫秒=====
2024-04-22 15:03:40.945 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:03:40.948 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-22 15:03:40.948 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-22 15:03:40.950 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:03:40.952 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:03:40.962 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 573.8914ms
2024-04-22 15:03:40.962 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-22 15:03:41.150 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-22 15:03:41.156 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 767.8118ms
2024-04-22 15:03:41.156 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:42.172 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:03:42.173 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:42.184 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:03:42.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:03:42.239 +08:00 [DBG] =========Yi-SQL耗时1.6461毫秒=====
2024-04-22 15:03:42.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:03:42.265 +08:00 [DBG] =========Yi-SQL耗时2.3406毫秒=====
2024-04-22 15:03:42.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:03:42.286 +08:00 [DBG] =========Yi-SQL耗时1.5036毫秒=====
2024-04-22 15:03:42.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:03:42.296 +08:00 [DBG] =========Yi-SQL耗时0.3507毫秒=====
2024-04-22 15:03:42.423 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-22 15:03:42.427 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 241.9028ms
2024-04-22 15:03:42.427 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:42.433 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:03:42.443 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-04-22 15:03:42.456 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:03:42.457 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:03:42.460 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:42.463 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:03:42.463 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:03:42.465 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:03:42.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:03:42.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'67fef10f-14f8-8e1c-2105-3a1216caf67b',CAST('2024-04-22 15:03:42.464' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-22 15:03:42.492 +08:00 [DBG] =========Yi-SQL耗时10.5526毫秒=====
2024-04-22 15:03:42.508 +08:00 [INF] 2024/4/22 15:03:42：cc,jqMxKufykXVH6l_WLHE58w连接服务端success，当前已连接1个
2024-04-22 15:03:42.544 +08:00 [DBG] =========Yi-SQL耗时72.0401毫秒=====
2024-04-22 15:03:42.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:03:42.545 +08:00 [DBG] =========Yi-SQL耗时0.2948毫秒=====
2024-04-22 15:03:42.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:03:42.547 +08:00 [DBG] =========Yi-SQL耗时0.6614毫秒=====
2024-04-22 15:03:42.584 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:03:42.593 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 129.8793ms
2024-04-22 15:03:42.593 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:42.600 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:42.603 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:03:42.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:03:42.607 +08:00 [DBG] =========Yi-SQL耗时1.0329毫秒=====
2024-04-22 15:03:42.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:03:42.610 +08:00 [DBG] =========Yi-SQL耗时0.7357毫秒=====
2024-04-22 15:03:42.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:03:42.610 +08:00 [DBG] =========Yi-SQL耗时0.3447毫秒=====
2024-04-22 15:03:42.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:03:42.615 +08:00 [DBG] =========Yi-SQL耗时1.3133毫秒=====
2024-04-22 15:03:42.657 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:03:42.663 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 59.7099ms
2024-04-22 15:03:42.663 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:42.922 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:42.926 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:03:42.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:03:42.939 +08:00 [DBG] =========Yi-SQL耗时2.742毫秒=====
2024-04-22 15:03:42.951 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:03:42.953 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 27.5302ms
2024-04-22 15:03:42.953 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:45.670 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:03:45.670 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:45.673 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:03:45.675 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:03:45.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:03:45.682 +08:00 [DBG] =========Yi-SQL耗时3.2846毫秒=====
2024-04-22 15:03:45.706 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:03:45.710 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 36.4817ms
2024-04-22 15:03:45.710 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:03:45.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:03:45.729 +08:00 [DBG] =========Yi-SQL耗时2.8804毫秒=====
2024-04-22 15:03:45.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:03:45.739 +08:00 [DBG] =========Yi-SQL耗时0.9124毫秒=====
2024-04-22 15:03:45.750 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:03:45.755 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 78.9814ms
2024-04-22 15:03:45.755 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:03:47.231 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:03:47.231 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:03:47.235 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:03:47.236 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:03:47.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a' ) 
===============================

2024-04-22 15:03:47.243 +08:00 [DBG] =========Yi-SQL耗时2.048毫秒=====
2024-04-22 15:03:47.248 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:03:47.250 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 13.9757ms
2024-04-22 15:03:47.250 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:03:47.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a'   
===============================

2024-04-22 15:03:47.292 +08:00 [DBG] =========Yi-SQL耗时0.6513毫秒=====
2024-04-22 15:03:47.304 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:03:47.306 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 70.4367ms
2024-04-22 15:03:47.306 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:03:47.316 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-22 15:03:47.320 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:03:47.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"   WHERE ( "id" = N'3f2432d5-d33c-0055-91b4-3a11ddd5e5bf' )   LIMIT 1 offset 0
===============================

2024-04-22 15:03:47.323 +08:00 [DBG] =========Yi-SQL耗时0.8124毫秒=====
2024-04-22 15:03:47.326 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:03:47.327 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application) in 7.0606ms
2024-04-22 15:03:47.327 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-22 15:03:49.726 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:03:49.726 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:03:49.726 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:03:49.726 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:03:49.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'767c0fa2-6bd1-0fd4-1e61-3a11ddd754cf' ) 
===============================

2024-04-22 15:03:49.729 +08:00 [DBG] =========Yi-SQL耗时1.5035毫秒=====
2024-04-22 15:03:49.730 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:03:49.731 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 4.8002ms
2024-04-22 15:03:49.731 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:03:49.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'767c0fa2-6bd1-0fd4-1e61-3a11ddd754cf'   
===============================

2024-04-22 15:03:49.733 +08:00 [DBG] =========Yi-SQL耗时0.9468毫秒=====
2024-04-22 15:03:49.740 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:03:49.740 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 14.0453ms
2024-04-22 15:03:49.740 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:03:55.678 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:03:55.678 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:03:55.678 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:03:55.678 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:03:55.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a' ) 
===============================

2024-04-22 15:03:55.682 +08:00 [DBG] =========Yi-SQL耗时2.0143毫秒=====
2024-04-22 15:03:55.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a'   
===============================

2024-04-22 15:03:55.684 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:03:55.685 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 6.5666ms
2024-04-22 15:03:55.685 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:03:55.685 +08:00 [DBG] =========Yi-SQL耗时1.1135毫秒=====
2024-04-22 15:03:55.690 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:03:55.691 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 12.3563ms
2024-04-22 15:03:55.691 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:03:59.034 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:03:59.034 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:03:59.035 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:03:59.035 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:03:59.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'767c0fa2-6bd1-0fd4-1e61-3a11ddd754cf' ) 
===============================

2024-04-22 15:03:59.038 +08:00 [DBG] =========Yi-SQL耗时1.1244毫秒=====
2024-04-22 15:03:59.040 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:03:59.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'767c0fa2-6bd1-0fd4-1e61-3a11ddd754cf'   
===============================

2024-04-22 15:03:59.040 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 5.5317ms
2024-04-22 15:03:59.040 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:03:59.042 +08:00 [DBG] =========Yi-SQL耗时1.3194毫秒=====
2024-04-22 15:03:59.046 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:03:59.046 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 11.4196ms
2024-04-22 15:03:59.047 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:05:26.768 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:05:26.769 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:05:26.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'5a22e331-88df-c2fa-37ec-3a11ddd8d46d' ) 
===============================

2024-04-22 15:05:26.771 +08:00 [DBG] =========Yi-SQL耗时0.7091毫秒=====
2024-04-22 15:05:26.772 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:05:26.773 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 3.6977ms
2024-04-22 15:05:26.773 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:05:26.774 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:05:26.774 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:05:26.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'5a22e331-88df-c2fa-37ec-3a11ddd8d46d'   
===============================

2024-04-22 15:05:26.776 +08:00 [DBG] =========Yi-SQL耗时0.5814毫秒=====
2024-04-22 15:05:26.779 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:05:26.779 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 4.7162ms
2024-04-22 15:05:26.779 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:05:29.947 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:05:29.947 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:05:29.948 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:05:29.948 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:05:29.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'dbdfb03d-8b68-9042-09c5-3a11d83af122'   
===============================

2024-04-22 15:05:29.949 +08:00 [DBG] =========Yi-SQL耗时0.8815毫秒=====
2024-04-22 15:05:29.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'dbdfb03d-8b68-9042-09c5-3a11d83af122' ) 
===============================

2024-04-22 15:05:29.953 +08:00 [DBG] =========Yi-SQL耗时2.5815毫秒=====
2024-04-22 15:05:29.955 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:05:29.956 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 7.9694ms
2024-04-22 15:05:29.956 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:05:29.956 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:05:29.956 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 9.1589ms
2024-04-22 15:05:29.956 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:05:33.239 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:05:33.240 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:05:33.240 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:05:33.240 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:05:33.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a' ) 
===============================

2024-04-22 15:05:33.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a'   
===============================

2024-04-22 15:05:33.242 +08:00 [DBG] =========Yi-SQL耗时0.9417毫秒=====
2024-04-22 15:05:33.244 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:05:33.244 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 4.3613ms
2024-04-22 15:05:33.245 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:05:33.297 +08:00 [DBG] =========Yi-SQL耗时54.8667毫秒=====
2024-04-22 15:05:33.299 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:05:33.299 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 59.2021ms
2024-04-22 15:05:33.299 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:06:03.153 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:06:03.153 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:06:03.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:06:03.158 +08:00 [DBG] =========Yi-SQL耗时0.7863毫秒=====
2024-04-22 15:06:03.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:06:03.160 +08:00 [DBG] =========Yi-SQL耗时0.7228毫秒=====
2024-04-22 15:06:03.162 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:06:03.163 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.2123ms
2024-04-22 15:06:03.163 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:06:06.680 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:06:06.680 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:06:06.681 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:06:06.681 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:06:06.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a'   
===============================

2024-04-22 15:06:06.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a' ) 
===============================

2024-04-22 15:06:06.685 +08:00 [DBG] =========Yi-SQL耗时1.1753毫秒=====
2024-04-22 15:06:06.685 +08:00 [DBG] =========Yi-SQL耗时1.8762毫秒=====
2024-04-22 15:06:06.689 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:06:06.691 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 9.8612ms
2024-04-22 15:06:06.691 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:06:06.692 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:06:06.693 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 12.5242ms
2024-04-22 15:06:06.693 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:06:10.702 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:06:10.703 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:06:10.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a'   
===============================

2024-04-22 15:06:10.705 +08:00 [DBG] =========Yi-SQL耗时0.6341毫秒=====
2024-04-22 15:06:10.708 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:06:10.708 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 5.7458ms
2024-04-22 15:06:10.708 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:06:23.446 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:06:23.446 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:06:23.447 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:06:23.447 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:06:23.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a'   
===============================

2024-04-22 15:06:23.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a' ) 
===============================

2024-04-22 15:06:23.449 +08:00 [DBG] =========Yi-SQL耗时0.7554毫秒=====
2024-04-22 15:06:23.449 +08:00 [DBG] =========Yi-SQL耗时0.7265毫秒=====
2024-04-22 15:06:23.453 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:06:23.453 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:06:23.453 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 6.4381ms
2024-04-22 15:06:23.453 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 6.9854ms
2024-04-22 15:06:23.454 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:06:23.454 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:07:48.364 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:07:48.366 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.UpdateAsync (Yi.Abp.Application)'
2024-04-22 15:07:48.368 +08:00 [INF] Route matched with {action = "Update", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] UpdateAsync(System.Guid, Yi.Abp.Application.Contracts.Dtos.Question.QuestionUpdateInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:07:48.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a'   
===============================

2024-04-22 15:07:48.383 +08:00 [DBG] =========Yi-SQL耗时0.7359毫秒=====
2024-04-22 15:07:48.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "question"  SET
           "isdeleted"=0,"project"=N'1',"status"=N'1',"category"=N'1',"impact"=N'1',"priority"=N'1',"title"=N'1',"description"=N'1',"solve_user"=null,"creationtime"=CAST('2024-04-11 13:37:17.605' AS DATETIME),"lastmodificationtime"=CAST('2024-04-22 15:07:48.443' AS DATETIME),"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151'  WHERE "id"=N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a'
===============================

2024-04-22 15:07:48.460 +08:00 [DBG] =========Yi-SQL耗时1.4354毫秒=====
2024-04-22 15:07:48.461 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:07:48.461 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.UpdateAsync (Yi.Abp.Application) in 92.5102ms
2024-04-22 15:07:48.461 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.UpdateAsync (Yi.Abp.Application)'
2024-04-22 15:07:48.480 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:07:48.480 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:07:48.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:07:48.484 +08:00 [DBG] =========Yi-SQL耗时1.0005毫秒=====
2024-04-22 15:07:48.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:07:48.490 +08:00 [DBG] =========Yi-SQL耗时2.7702毫秒=====
2024-04-22 15:07:48.493 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:07:48.493 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 13.1358ms
2024-04-22 15:07:48.493 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:07:50.445 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:07:50.446 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:07:50.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:07:50.450 +08:00 [DBG] =========Yi-SQL耗时1.0064毫秒=====
2024-04-22 15:07:50.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 20
===============================

2024-04-22 15:07:50.453 +08:00 [DBG] =========Yi-SQL耗时1.2935毫秒=====
2024-04-22 15:07:50.456 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:07:50.456 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.5447ms
2024-04-22 15:07:50.456 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:07:57.028 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:07:57.028 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:07:57.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:07:57.031 +08:00 [DBG] =========Yi-SQL耗时0.7682毫秒=====
2024-04-22 15:07:57.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:07:57.034 +08:00 [DBG] =========Yi-SQL耗时0.9832毫秒=====
2024-04-22 15:07:57.036 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:07:57.037 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.3687ms
2024-04-22 15:07:57.037 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:07:58.914 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:07:58.914 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:07:58.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:07:58.918 +08:00 [DBG] =========Yi-SQL耗时0.6357毫秒=====
2024-04-22 15:07:58.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 20
===============================

2024-04-22 15:07:58.922 +08:00 [DBG] =========Yi-SQL耗时1.3582毫秒=====
2024-04-22 15:07:58.923 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:07:58.923 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.0289ms
2024-04-22 15:07:58.923 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:08:13.803 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-04-22 15:08:13.808 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:08:13.809 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:08:14.233 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:08:14.245 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:08:14.246 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:08:14.247 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:08:14.249 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:08:14.322 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:08:14.325 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:08:14.343 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:08:14.345 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 97.7065ms
2024-04-22 15:08:14.345 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:08:14.364 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:08:14.364 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:08:14.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:08:14.370 +08:00 [DBG] =========Yi-SQL耗时3.1557毫秒=====
2024-04-22 15:08:14.375 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:08:14.377 +08:00 [DBG] =========Yi-SQL耗时2.0953毫秒=====
2024-04-22 15:08:14.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:08:14.378 +08:00 [DBG] =========Yi-SQL耗时0.5448毫秒=====
2024-04-22 15:08:14.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:08:14.382 +08:00 [DBG] =========Yi-SQL耗时1.4489毫秒=====
2024-04-22 15:08:14.384 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:08:14.384 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 19.8859ms
2024-04-22 15:08:14.384 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:08:14.440 +08:00 [INF] 2024/4/22 15:08:14：cc,wDzeFg2BIep0XbUo--oosA连接服务端success，当前已连接0个
2024-04-22 15:08:14.554 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:08:14.557 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:08:14.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:08:14.566 +08:00 [DBG] =========Yi-SQL耗时1.9364毫秒=====
2024-04-22 15:08:14.574 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:08:14.577 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 20.3152ms
2024-04-22 15:08:14.577 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:08:14.859 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:08:14.861 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:08:14.862 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:08:14.862 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:08:14.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:08:14.901 +08:00 [DBG] =========Yi-SQL耗时37.8472毫秒=====
2024-04-22 15:08:14.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:08:14.907 +08:00 [DBG] =========Yi-SQL耗时1.9894毫秒=====
2024-04-22 15:08:14.908 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:08:14.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:08:14.909 +08:00 [DBG] =========Yi-SQL耗时1.4003毫秒=====
2024-04-22 15:08:14.911 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 50.5091ms
2024-04-22 15:08:14.911 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:08:14.923 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:08:14.924 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 61.5707ms
2024-04-22 15:08:14.924 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:08:17.749 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:08:17.749 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:08:17.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:08:17.754 +08:00 [DBG] =========Yi-SQL耗时1.1715毫秒=====
2024-04-22 15:08:17.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 20
===============================

2024-04-22 15:08:17.757 +08:00 [DBG] =========Yi-SQL耗时0.5942毫秒=====
2024-04-22 15:08:17.758 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:08:17.758 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.2148ms
2024-04-22 15:08:17.759 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:08:57.825 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:08:57.825 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:08:57.825 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:08:57.825 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:08:57.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a' ) 
===============================

2024-04-22 15:08:57.827 +08:00 [DBG] =========Yi-SQL耗时0.7089毫秒=====
2024-04-22 15:08:57.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a'   
===============================

2024-04-22 15:08:57.830 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:08:57.831 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 5.6323ms
2024-04-22 15:08:57.831 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:08:57.834 +08:00 [DBG] =========Yi-SQL耗时6.5057毫秒=====
2024-04-22 15:08:57.842 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:08:57.842 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 16.948ms
2024-04-22 15:08:57.842 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:08:57.856 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-22 15:08:57.857 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:08:57.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"   WHERE ( "id" = N'3f2432d5-d33c-0055-91b4-3a11ddd5e5bf' )   LIMIT 1 offset 0
===============================

2024-04-22 15:08:57.859 +08:00 [DBG] =========Yi-SQL耗时1.06毫秒=====
2024-04-22 15:08:57.863 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:08:57.863 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application) in 6.431ms
2024-04-22 15:08:57.863 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-22 15:09:04.205 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:04.206 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:09:04.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:09:04.273 +08:00 [DBG] =========Yi-SQL耗时64.0345毫秒=====
2024-04-22 15:09:04.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:09:04.275 +08:00 [DBG] =========Yi-SQL耗时0.5567毫秒=====
2024-04-22 15:09:04.276 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:09:04.276 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 70.6264ms
2024-04-22 15:09:04.277 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:05.562 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:09:05.562 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:09:05.562 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:09:05.562 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:09:05.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'767c0fa2-6bd1-0fd4-1e61-3a11ddd754cf' ) 
===============================

2024-04-22 15:09:05.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'767c0fa2-6bd1-0fd4-1e61-3a11ddd754cf'   
===============================

2024-04-22 15:09:05.565 +08:00 [DBG] =========Yi-SQL耗时1.7327毫秒=====
2024-04-22 15:09:05.567 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:09:05.567 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 4.4655ms
2024-04-22 15:09:05.567 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:09:05.626 +08:00 [DBG] =========Yi-SQL耗时61.4153毫秒=====
2024-04-22 15:09:05.628 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:09:05.628 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 65.812ms
2024-04-22 15:09:05.628 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:09:22.026 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:09:22.028 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-22 15:09:22.032 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:09:22.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid")
     VALUES
           (N'38ce7e91-8707-aa03-3daa-3a1216d02504',0,N'9',N'9',N'9',N'9',N'9',N'9',N'9',null,CAST('2024-04-22 15:09:22.048' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-22 15:09:22.060 +08:00 [DBG] =========Yi-SQL耗时2.0827毫秒=====
2024-04-22 15:09:22.064 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:09:22.065 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 33.0104ms
2024-04-22 15:09:22.065 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-22 15:09:22.085 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:22.085 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:09:22.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:09:22.089 +08:00 [DBG] =========Yi-SQL耗时1.6661毫秒=====
2024-04-22 15:09:22.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:09:22.091 +08:00 [DBG] =========Yi-SQL耗时0.6903毫秒=====
2024-04-22 15:09:22.094 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:09:22.094 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.2908ms
2024-04-22 15:09:22.094 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:23.666 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:23.667 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:09:23.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:09:23.671 +08:00 [DBG] =========Yi-SQL耗时1.1339毫秒=====
2024-04-22 15:09:23.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 20
===============================

2024-04-22 15:09:23.675 +08:00 [DBG] =========Yi-SQL耗时1.7805毫秒=====
2024-04-22 15:09:23.717 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:09:23.717 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 50.1358ms
2024-04-22 15:09:23.717 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:39.801 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:09:39.807 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:09:40.099 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:09:40.102 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:09:40.103 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:09:40.111 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:09:40.111 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:09:40.113 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:09:40.114 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.134ms
2024-04-22 15:09:40.114 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:09:40.160 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:09:40.161 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:09:40.161 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:09:40.161 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:09:40.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:09:40.168 +08:00 [DBG] =========Yi-SQL耗时3.7448毫秒=====
2024-04-22 15:09:40.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:09:40.172 +08:00 [DBG] =========Yi-SQL耗时1.7116毫秒=====
2024-04-22 15:09:40.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:09:40.174 +08:00 [DBG] =========Yi-SQL耗时1.3028毫秒=====
2024-04-22 15:09:40.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:09:40.177 +08:00 [DBG] =========Yi-SQL耗时1.3733毫秒=====
2024-04-22 15:09:40.178 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:09:40.179 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 17.3334ms
2024-04-22 15:09:40.179 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:09:40.200 +08:00 [INF] 2024/4/22 15:09:40：cc,aGxZtWOgp9-Prv7YKOkaAA连接服务端success，当前已连接0个
2024-04-22 15:09:40.340 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:09:40.341 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:09:40.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:09:40.345 +08:00 [DBG] =========Yi-SQL耗时2.2865毫秒=====
2024-04-22 15:09:40.347 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:09:40.347 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.3845ms
2024-04-22 15:09:40.347 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:09:40.565 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:09:40.565 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:40.566 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:09:40.566 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:09:40.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:09:40.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:09:40.576 +08:00 [DBG] =========Yi-SQL耗时7.5141毫秒=====
2024-04-22 15:09:40.576 +08:00 [DBG] =========Yi-SQL耗时8.1562毫秒=====
2024-04-22 15:09:40.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:09:40.584 +08:00 [DBG] =========Yi-SQL耗时1.5316毫秒=====
2024-04-22 15:09:40.591 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:09:40.591 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 25.2548ms
2024-04-22 15:09:40.591 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:09:40.593 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:09:40.593 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 27.1854ms
2024-04-22 15:09:40.593 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:41.892 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:41.892 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:09:41.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:09:41.897 +08:00 [DBG] =========Yi-SQL耗时1.7092毫秒=====
2024-04-22 15:09:41.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 20
===============================

2024-04-22 15:09:41.900 +08:00 [DBG] =========Yi-SQL耗时0.7074毫秒=====
2024-04-22 15:09:41.903 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:09:41.903 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.8703ms
2024-04-22 15:09:41.903 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:46.269 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:09:46.270 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:09:46.278 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:09:46.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE "id" IN ('38ce7e91-8707-aa03-3daa-3a1216d02504') 
===============================

2024-04-22 15:09:46.326 +08:00 [DBG] =========Yi-SQL耗时0.7961毫秒=====
2024-04-22 15:09:46.333 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application) in 55.2608ms
2024-04-22 15:09:46.333 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:09:46.347 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:09:46.348 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:09:46.348 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:09:46.349 +08:00 [DBG] =========Yi-SQL耗时0.7017毫秒=====
2024-04-22 15:09:46.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 20
===============================

2024-04-22 15:09:46.352 +08:00 [DBG] =========Yi-SQL耗时0.8395毫秒=====
2024-04-22 15:09:46.354 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:09:46.355 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.0969ms
2024-04-22 15:09:46.355 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:16:25.842 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:16:25.853 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:16:26.138 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:16:26.147 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:16:26.156 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:16:26.166 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:16:26.180 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:16:26.190 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:16:26.192 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:16:26.197 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:16:26.197 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 17.2928ms
2024-04-22 15:16:26.197 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:16:26.213 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:16:26.215 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:16:26.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:16:26.220 +08:00 [INF] 2024/4/22 15:16:26：cc,VuZUwihvkjvkf7s-SS-8SA连接服务端success，当前已连接0个
2024-04-22 15:16:26.348 +08:00 [DBG] =========Yi-SQL耗时131.1022毫秒=====
2024-04-22 15:16:26.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:16:26.351 +08:00 [DBG] =========Yi-SQL耗时0.9832毫秒=====
2024-04-22 15:16:26.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:16:26.352 +08:00 [DBG] =========Yi-SQL耗时0.9516毫秒=====
2024-04-22 15:16:26.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:16:26.358 +08:00 [DBG] =========Yi-SQL耗时2.7315毫秒=====
2024-04-22 15:16:26.359 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:16:26.361 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 145.018ms
2024-04-22 15:16:26.361 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:16:26.692 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:16:26.699 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:16:26.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:16:26.751 +08:00 [DBG] =========Yi-SQL耗时41.7244毫秒=====
2024-04-22 15:16:26.757 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:16:26.767 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 67.257ms
2024-04-22 15:16:26.767 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:16:26.857 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:16:26.857 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:16:26.860 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:16:26.861 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:16:26.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:16:26.867 +08:00 [DBG] =========Yi-SQL耗时4.7537毫秒=====
2024-04-22 15:16:26.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:16:26.873 +08:00 [DBG] =========Yi-SQL耗时4.594毫秒=====
2024-04-22 15:16:26.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:16:26.876 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:16:26.876 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 15.5846ms
2024-04-22 15:16:26.876 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:16:26.876 +08:00 [DBG] =========Yi-SQL耗时1.0109毫秒=====
2024-04-22 15:16:26.880 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:16:26.880 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 19.8047ms
2024-04-22 15:16:26.880 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:16:29.087 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:16:29.088 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:16:29.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:16:29.090 +08:00 [DBG] =========Yi-SQL耗时0.8358毫秒=====
2024-04-22 15:16:29.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 20
===============================

2024-04-22 15:16:29.095 +08:00 [DBG] =========Yi-SQL耗时1.9932毫秒=====
2024-04-22 15:16:29.102 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:16:29.102 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.2407ms
2024-04-22 15:16:29.102 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:16:52.671 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:16:52.672 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-22 15:16:52.677 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:16:52.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid")
     VALUES
           (N'7f449948-9a0c-02b4-39ad-3a1216d70548',0,N'0',N'0',N'0',N'0',N'0',N'0',N'0',null,CAST('2024-04-22 15:16:52.680' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-22 15:16:52.685 +08:00 [DBG] =========Yi-SQL耗时3.4358毫秒=====
2024-04-22 15:16:52.686 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:16:52.686 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 9.142ms
2024-04-22 15:16:52.686 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-22 15:16:52.707 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:16:52.707 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:16:52.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:16:52.710 +08:00 [DBG] =========Yi-SQL耗时0.6581毫秒=====
2024-04-22 15:16:52.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 20
===============================

2024-04-22 15:16:52.713 +08:00 [DBG] =========Yi-SQL耗时0.6651毫秒=====
2024-04-22 15:16:52.715 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:16:52.715 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.874ms
2024-04-22 15:16:52.715 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:16:54.744 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:16:54.744 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:16:54.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:16:54.748 +08:00 [DBG] =========Yi-SQL耗时1.2887毫秒=====
2024-04-22 15:16:54.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 10
===============================

2024-04-22 15:16:54.751 +08:00 [DBG] =========Yi-SQL耗时1.1656毫秒=====
2024-04-22 15:16:54.753 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:16:54.753 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.9089ms
2024-04-22 15:16:54.753 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:16:56.432 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:16:56.433 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:16:56.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:16:56.435 +08:00 [DBG] =========Yi-SQL耗时0.8113毫秒=====
2024-04-22 15:16:56.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 20
===============================

2024-04-22 15:16:56.439 +08:00 [DBG] =========Yi-SQL耗时1.1798毫秒=====
2024-04-22 15:16:56.440 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:16:56.440 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.6988ms
2024-04-22 15:16:56.440 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:17:16.357 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:17:16.358 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:17:16.362 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:17:16.366 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE "id" IN ('7f449948-9a0c-02b4-39ad-3a1216d70548') 
===============================

2024-04-22 15:17:16.367 +08:00 [DBG] =========Yi-SQL耗时1.1365毫秒=====
2024-04-22 15:17:16.374 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application) in 11.321ms
2024-04-22 15:17:16.374 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:17:16.384 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:17:16.384 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:17:16.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:17:16.388 +08:00 [DBG] =========Yi-SQL耗时1.7756毫秒=====
2024-04-22 15:17:16.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 20
===============================

2024-04-22 15:17:16.393 +08:00 [DBG] =========Yi-SQL耗时1.0403毫秒=====
2024-04-22 15:17:16.396 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:17:16.396 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.6484ms
2024-04-22 15:17:16.396 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:17:29.330 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:17:29.330 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:17:29.330 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:17:29.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:17:29.332 +08:00 [DBG] =========Yi-SQL耗时0.8008毫秒=====
2024-04-22 15:17:29.334 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:17:29.335 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 4.5187ms
2024-04-22 15:17:29.335 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:17:29.335 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:17:29.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:17:29.367 +08:00 [DBG] =========Yi-SQL耗时1.912毫秒=====
2024-04-22 15:17:29.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:17:29.374 +08:00 [DBG] =========Yi-SQL耗时1.2431毫秒=====
2024-04-22 15:17:29.394 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:17:29.402 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 66.3899ms
2024-04-22 15:17:29.402 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:17:38.931 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:17:38.932 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:17:38.935 +08:00 [INF] Route matched with {action = "Delete", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:17:38.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"  WHERE "id" = N'4fbea5d9-672d-5683-5b22-3a119a976181'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:17:38.942 +08:00 [DBG] =========Yi-SQL耗时0.8831毫秒=====
2024-04-22 15:17:38.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE  "config"  SET "configname"=T."configname","configkey"=T."configkey","configvalue"=T."configvalue","configtype"=T."configtype","ordernum"=T."ordernum","remark"=T."remark","isdeleted"=T."isdeleted","creationtime"=T."creationtime","creatorid"=T."creatorid","lastmodifierid"=T."lastmodifierid","lastmodificationtime"=T."lastmodificationtime" FROM              (VALUES
              
 (CAST('4fbea5d9-672d-5683-5b22-3a119a976181' AS uuid),CAST('站点底部信息' AS varchar),CAST('bbs.site.bottom' AS varchar),CAST('你好世界' AS varchar),CAST(NULL AS varchar),CAST('0' AS int4),CAST(NULL AS varchar),CAST(1 AS bool),CAST(CAST('2024-03-29 12:14:27.201' AS DATETIME) AS timestamp),CAST(NULL AS uuid),CAST('e94b7363-80d1-10a3-eb2c-3a119a976151' AS uuid),CAST(CAST('2024-04-22 15:17:38.950' AS DATETIME) AS timestamp))


            ) AS T ("id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime") WHERE "config"."id"=T."id"
                   ;
===============================

2024-04-22 15:17:38.992 +08:00 [DBG] =========Yi-SQL耗时1.2899毫秒=====
2024-04-22 15:17:38.993 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application) in 58.3693ms
2024-04-22 15:17:38.993 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:17:39.004 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:17:39.004 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:17:39.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:17:39.006 +08:00 [DBG] =========Yi-SQL耗时0.4507毫秒=====
2024-04-22 15:17:39.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:17:39.008 +08:00 [DBG] =========Yi-SQL耗时0.5781毫秒=====
2024-04-22 15:17:39.009 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:17:39.009 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 4.6536ms
2024-04-22 15:17:39.009 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:19:45.222 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-22 15:19:45.252 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-22 15:19:49.831 +08:00 [INF] Loaded ABP modules:
2024-04-22 15:19:49.831 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-22 15:19:49.831 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-22 15:19:49.831 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-22 15:19:49.831 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-22 15:19:49.831 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-22 15:19:49.831 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-22 15:19:49.831 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-22 15:19:49.831 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-22 15:19:49.831 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-22 15:19:49.831 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-22 15:19:49.831 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-22 15:19:49.831 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-22 15:19:49.831 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-22 15:19:49.831 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-22 15:19:49.831 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-22 15:19:49.831 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-22 15:19:49.831 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-22 15:19:49.831 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-22 15:19:49.831 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-22 15:19:49.831 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-22 15:19:49.831 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-22 15:19:49.831 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-22 15:19:49.831 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-22 15:19:49.831 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-22 15:19:49.831 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-22 15:19:49.831 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-22 15:19:49.831 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-22 15:19:49.831 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-22 15:19:49.832 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-22 15:19:49.832 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-22 15:19:49.832 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-22 15:19:49.832 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-22 15:19:49.832 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-22 15:19:49.832 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-22 15:19:49.832 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-22 15:19:49.832 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-22 15:19:49.832 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-22 15:19:49.832 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-22 15:19:49.832 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-22 15:19:49.832 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-22 15:19:49.832 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-22 15:19:49.832 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-22 15:19:49.832 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-22 15:19:49.832 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-22 15:19:49.832 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-22 15:19:49.832 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-22 15:19:49.832 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-22 15:19:49.832 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-22 15:19:49.832 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-22 15:19:49.832 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-22 15:19:49.832 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-22 15:19:49.832 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-22 15:19:49.832 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-22 15:19:49.832 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-22 15:19:49.832 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-22 15:19:49.832 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-22 15:19:49.832 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-22 15:19:49.832 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-22 15:19:49.832 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-22 15:19:49.832 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-22 15:19:49.832 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-22 15:19:49.832 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-22 15:19:49.832 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-22 15:19:49.832 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-22 15:19:49.832 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-22 15:19:49.832 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-22 15:19:49.832 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-22 15:19:49.832 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-22 15:19:49.832 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-22 15:19:49.832 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-22 15:19:49.832 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-22 15:19:49.832 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-22 15:19:49.832 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-22 15:19:49.832 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-22 15:19:49.832 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-22 15:19:49.832 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-22 15:19:49.832 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-22 15:19:49.839 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-22 15:19:49.847 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-22 15:19:50.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-22 15:19:50.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-22 15:19:50.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.543 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-22 15:19:50.545 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-22 15:19:50.548 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-22 15:19:50.548 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-22 15:19:50.548 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-22 15:19:50.549 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-22 15:19:50.549 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-22 15:19:50.549 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-22 15:19:50.549 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-22 15:19:50.549 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-22 15:19:50.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-22 15:19:50.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-22 15:19:50.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-22 15:19:50.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-22 15:19:50.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-22 15:19:50.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-22 15:19:50.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-22 15:19:50.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-22 15:19:50.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-22 15:19:50.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-22 15:19:50.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-22 15:19:50.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.590 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.595 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.595 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-22 15:19:50.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-22 15:19:50.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:19:50.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-22 15:19:50.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-22 15:19:50.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 15:19:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 15:19:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-22 15:19:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-22 15:19:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-22 15:19:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-22 15:19:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-22 15:19:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-22 15:19:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-22 15:19:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-22 15:19:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-22 15:19:50.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.613 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-22 15:19:50.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-22 15:19:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:19:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-22 15:19:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-22 15:19:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-22 15:19:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-22 15:19:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-22 15:19:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-22 15:19:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-22 15:19:50.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-22 15:19:50.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-22 15:19:50.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-22 15:19:50.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.641 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-22 15:19:50.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-22 15:19:50.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:19:50.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-22 15:19:50.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-22 15:19:50.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-22 15:19:50.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-22 15:19:50.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-22 15:19:50.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-22 15:19:50.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.666 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-22 15:19:50.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-22 15:19:50.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-22 15:19:50.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-22 15:19:50.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-22 15:19:50.686 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.693 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-22 15:19:50.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-22 15:19:50.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-22 15:19:50.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-22 15:19:50.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-22 15:19:50.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-22 15:19:50.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-22 15:19:50.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:19:50.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-22 15:19:50.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.725 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-22 15:19:50.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-22 15:19:50.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:19:50.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-22 15:19:50.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-22 15:19:50.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 15:19:50.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 15:19:50.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-22 15:19:50.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-22 15:19:50.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-22 15:19:50.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-22 15:19:50.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-22 15:19:50.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-22 15:19:50.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-22 15:19:50.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-22 15:19:50.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-22 15:19:50.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-22 15:19:50.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-22 15:19:50.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-22 15:19:50.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-22 15:19:50.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.753 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-22 15:19:50.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-22 15:19:50.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-22 15:19:50.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-22 15:19:50.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.768 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-22 15:19:50.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-22 15:19:50.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-22 15:19:50.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:19:50.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-22 15:19:50.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-22 15:19:50.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 15:19:50.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 15:19:50.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-22 15:19:50.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-22 15:19:50.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-22 15:19:50.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-22 15:19:50.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-22 15:19:50.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-22 15:19:50.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-22 15:19:50.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-22 15:19:50.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-22 15:19:50.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-22 15:19:50.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-22 15:19:50.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-22 15:19:50.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-22 15:19:50.814 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-22 15:19:50.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-22 15:19:50.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:19:50.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-22 15:19:50.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-22 15:19:50.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 15:19:50.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 15:19:50.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-22 15:19:50.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-22 15:19:50.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-22 15:19:50.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-22 15:19:50.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-22 15:19:50.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-22 15:19:50.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-22 15:19:50.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-22 15:19:50.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-22 15:19:50.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-22 15:19:50.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-22 15:19:50.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-22 15:19:50.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-22 15:19:50.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-22 15:19:50.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:19:50.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-22 15:19:50.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-22 15:19:50.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-22 15:19:50.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-22 15:19:50.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-22 15:19:50.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-22 15:19:50.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-22 15:19:50.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-22 15:19:50.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-22 15:19:50.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-22 15:19:50.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-22 15:19:50.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-22 15:19:50.881 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-22 15:19:50.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-22 15:19:50.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-22 15:19:50.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-22 15:19:50.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-22 15:19:50.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 15:19:50.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 15:19:50.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-22 15:19:50.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-22 15:19:50.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-22 15:19:50.883 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:19:50.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.890 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-22 15:19:50.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-22 15:19:50.905 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-22 15:19:50.905 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-22 15:19:50.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-22 15:19:50.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-22 15:19:50.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-22 15:19:50.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.920 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-22 15:19:50.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-22 15:19:50.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-22 15:19:50.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-22 15:19:50.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-22 15:19:50.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-22 15:19:50.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-22 15:19:50.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-22 15:19:50.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-22 15:19:50.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-22 15:19:50.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:19:50.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:19:50.973 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-22 15:19:50.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:50.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:50.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-22 15:19:50.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:50.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:19:51.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:19:51.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-22 15:19:51.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:51.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-22 15:19:51.022 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:19:51.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:19:51.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-22 15:19:51.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:51.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-22 15:19:51.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:19:51.048 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-22 15:19:51.057 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:51.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-22 15:19:51.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-22 15:19:51.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-22 15:19:51.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-22 15:19:51.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-22 15:19:51.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:51.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "question"(
"id" uuid NOT NULL  ,
"isdeleted" boolean NOT NULL  ,
"project" varchar(255) NOT NULL  ,
"status" varchar(255) NOT NULL  ,
"category" varchar(255) NOT NULL  ,
"impact" varchar(255) NOT NULL  ,
"priority" varchar(255) NOT NULL  ,
"title" varchar(255) NOT NULL  ,
"description" text DEFAULT NULL  ,
"solve_user" varchar(255) DEFAULT NULL  ,
"creationtime" timestamp NOT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"creatorid" uuid DEFAULT NULL   , Primary key("id"))
===============================

2024-04-22 15:19:51.108 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-22 15:19:51.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.109 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-22 15:19:51.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:51.125 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-22 15:19:51.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-22 15:19:51.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-22 15:19:51.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-22 15:19:51.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-22 15:19:51.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-22 15:19:51.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-22 15:19:51.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:51.150 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-22 15:19:51.156 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-22 15:19:51.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-22 15:19:51.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-22 15:19:51.164 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:19:51.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-22 15:19:51.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-22 15:19:51.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-22 15:19:51.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-22 15:19:51.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-22 15:19:51.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:19:51.183 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-22 15:19:51.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:19:51.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:19:51.285 +08:00 [DBG] =========Yi-SQL耗时9.5168毫秒=====
2024-04-22 15:19:51.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:19:51.301 +08:00 [DBG] =========Yi-SQL耗时0.9472毫秒=====
2024-04-22 15:19:51.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:19:51.305 +08:00 [DBG] =========Yi-SQL耗时0.8132毫秒=====
2024-04-22 15:19:51.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:19:51.311 +08:00 [DBG] =========Yi-SQL耗时1.7433毫秒=====
2024-04-22 15:19:51.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:19:51.315 +08:00 [DBG] =========Yi-SQL耗时1.3303毫秒=====
2024-04-22 15:19:51.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:19:51.319 +08:00 [DBG] =========Yi-SQL耗时0.6728毫秒=====
2024-04-22 15:19:51.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:19:51.324 +08:00 [DBG] =========Yi-SQL耗时0.7589毫秒=====
2024-04-22 15:19:51.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-22 15:19:51.327 +08:00 [DBG] =========Yi-SQL耗时0.6488毫秒=====
2024-04-22 15:19:51.339 +08:00 [DBG] 耗时-1499ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-22 15:19:51.400 +08:00 [DBG] 耗时-57ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-22 15:19:51.403 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-22 15:19:51.418 +08:00 [DBG] 耗时-14ms,已加载模块-Volo.Abp.AspNetCore
2024-04-22 15:19:51.423 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-22 15:19:51.445 +08:00 [DBG] 耗时-22ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-22 15:19:51.448 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-22 15:19:51.743 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-22 15:19:51.815 +08:00 [DBG] 耗时-367ms,已加载模块-Yi.Abp.Web
2024-04-22 15:19:51.816 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【1969ms】==========
2024-04-22 15:19:51.906 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-22 15:19:51.906 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-22 15:19:51.906 +08:00 [INF] Hosting environment: Development
2024-04-22 15:19:51.906 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-22 15:20:01.703 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:20:01.731 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:20:02.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:20:02.064 +08:00 [DBG] =========Yi-SQL耗时1.5983毫秒=====
2024-04-22 15:20:02.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:20:02.073 +08:00 [DBG] =========Yi-SQL耗时0.6897毫秒=====
2024-04-22 15:20:02.095 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:20:02.118 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 381.358ms
2024-04-22 15:20:02.119 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:21:14.655 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:21:14.658 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:21:14.663 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:21:14.682 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:21:14.683 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:21:14.748 +08:00 [INF] 2024/4/22 15:21:14：cc,LJV5bmM0db1uxjTsMaLVBw连接服务端success，当前已连接0个
2024-04-22 15:22:18.879 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:22:18.892 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:22:19.197 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:22:19.199 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:22:19.200 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:22:19.240 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:22:19.243 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:22:19.248 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:22:19.252 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:22:19.294 +08:00 [INF] 2024/4/22 15:22:19：cc,qDoM_wNFeh_sTH8y20sH8A连接服务端success，当前已连接0个
2024-04-22 15:22:19.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:22:19.410 +08:00 [DBG] =========Yi-SQL耗时8.6885毫秒=====
2024-04-22 15:22:19.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:22:19.490 +08:00 [DBG] =========Yi-SQL耗时2.3606毫秒=====
2024-04-22 15:22:19.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:22:19.512 +08:00 [DBG] =========Yi-SQL耗时1.0047毫秒=====
2024-04-22 15:22:19.638 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:22:19.653 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 401.1197ms
2024-04-22 15:22:19.653 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:22:19.668 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:22:19.670 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:22:19.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:22:19.674 +08:00 [DBG] =========Yi-SQL耗时1.4961毫秒=====
2024-04-22 15:22:19.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:22:19.677 +08:00 [DBG] =========Yi-SQL耗时0.8222毫秒=====
2024-04-22 15:22:19.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:22:19.679 +08:00 [DBG] =========Yi-SQL耗时0.6606毫秒=====
2024-04-22 15:22:19.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:22:19.686 +08:00 [DBG] =========Yi-SQL耗时1.3627毫秒=====
2024-04-22 15:22:19.732 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:22:19.736 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 66.1794ms
2024-04-22 15:22:19.736 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:22:19.852 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:22:19.855 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:22:19.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:22:19.872 +08:00 [DBG] =========Yi-SQL耗时2.05毫秒=====
2024-04-22 15:22:19.896 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:22:19.904 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 49.4026ms
2024-04-22 15:22:19.905 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:22:20.008 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:22:20.008 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:22:20.008 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:22:20.011 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:22:20.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:22:20.014 +08:00 [DBG] =========Yi-SQL耗时1.0977毫秒=====
2024-04-22 15:22:20.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:22:20.019 +08:00 [DBG] =========Yi-SQL耗时2.52毫秒=====
2024-04-22 15:22:20.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:22:20.025 +08:00 [DBG] =========Yi-SQL耗时2.1549毫秒=====
2024-04-22 15:22:20.045 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:22:20.050 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 40.9765ms
2024-04-22 15:22:20.050 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:22:20.058 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:22:20.064 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 52.2932ms
2024-04-22 15:22:20.064 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:22:22.152 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:22:22.152 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:22:22.155 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:22:22.155 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:22:22.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a' ) 
===============================

2024-04-22 15:22:22.162 +08:00 [DBG] =========Yi-SQL耗时1.6552毫秒=====
2024-04-22 15:22:22.166 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:22:22.168 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 13.2268ms
2024-04-22 15:22:22.168 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:22:22.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'ae765ed3-164c-6490-4ccc-3a11ddd5e52a'   
===============================

2024-04-22 15:22:22.224 +08:00 [DBG] =========Yi-SQL耗时0.7088毫秒=====
2024-04-22 15:22:22.232 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:22:22.234 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 78.4313ms
2024-04-22 15:22:22.234 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:22:22.243 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-22 15:22:22.245 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:22:22.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"   WHERE ( "id" = N'3f2432d5-d33c-0055-91b4-3a11ddd5e5bf' )   LIMIT 1 offset 0
===============================

2024-04-22 15:22:22.248 +08:00 [DBG] =========Yi-SQL耗时0.6032毫秒=====
2024-04-22 15:22:22.250 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:22:22.251 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application) in 6.084ms
2024-04-22 15:22:22.251 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.Get (Yi.Abp.Application)'
2024-04-22 15:22:25.652 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:22:25.652 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:22:25.652 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:22:25.653 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:22:25.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'7babef20-bfad-44b0-4d33-3a11dd983965' ) 
===============================

2024-04-22 15:22:25.654 +08:00 [DBG] =========Yi-SQL耗时0.7204毫秒=====
2024-04-22 15:22:25.655 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:22:25.656 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 3.6859ms
2024-04-22 15:22:25.656 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:22:25.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'7babef20-bfad-44b0-4d33-3a11dd983965'   
===============================

2024-04-22 15:22:25.658 +08:00 [DBG] =========Yi-SQL耗时1.6871毫秒=====
2024-04-22 15:22:25.668 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:22:25.669 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 15.819ms
2024-04-22 15:22:25.669 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:22:37.520 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:22:37.521 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-22 15:22:37.524 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:22:37.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid")
     VALUES
           (N'b8a10696-a15d-77df-9c24-3a1216dc4874',0,N'2',N'2',N'2',N'2',N'22',N'2',N'2',null,CAST('2024-04-22 15:22:37.552' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-22 15:22:37.588 +08:00 [DBG] =========Yi-SQL耗时4.7132毫秒=====
2024-04-22 15:22:37.592 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:22:37.592 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 67.468ms
2024-04-22 15:22:37.592 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-22 15:22:37.611 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:22:37.611 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:22:37.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:22:37.615 +08:00 [DBG] =========Yi-SQL耗时0.9134毫秒=====
2024-04-22 15:22:37.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:22:37.622 +08:00 [DBG] =========Yi-SQL耗时2.4406毫秒=====
2024-04-22 15:22:37.625 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:22:37.626 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.6457ms
2024-04-22 15:22:37.626 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:22:56.706 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:22:56.707 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:22:56.712 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:22:56.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE "id" IN ('b8a10696-a15d-77df-9c24-3a1216dc4874') 
===============================

2024-04-22 15:22:56.761 +08:00 [DBG] =========Yi-SQL耗时1.4098毫秒=====
2024-04-22 15:22:56.781 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application) in 69.569ms
2024-04-22 15:22:56.782 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:22:56.796 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:22:56.796 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:22:56.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-22 15:22:56.799 +08:00 [DBG] =========Yi-SQL耗时0.6845毫秒=====
2024-04-22 15:22:56.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-22 15:22:56.802 +08:00 [DBG] =========Yi-SQL耗时1.6442毫秒=====
2024-04-22 15:22:56.805 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:22:56.805 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.2405ms
2024-04-22 15:22:56.806 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:23:27.085 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:23:27.086 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:23:27.088 +08:00 [INF] Route matched with {action = "Delete", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:23:27.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"  WHERE "id" = N'3fa85f64-5717-4562-b3fc-2c963f66afa6'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:23:27.109 +08:00 [DBG] =========Yi-SQL耗时14.9822毫秒=====
2024-04-22 15:23:27.117 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application) in 28.8778ms
2024-04-22 15:23:27.117 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:23:47.618 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:23:47.619 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:23:47.619 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:23:47.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE 1=2  
===============================

2024-04-22 15:23:47.640 +08:00 [DBG] =========Yi-SQL耗时1.4555毫秒=====
2024-04-22 15:23:47.643 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application) in 23.4989ms
2024-04-22 15:23:47.643 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:23:52.812 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:23:52.813 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:23:52.813 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:23:52.814 +08:00 [DBG] 
==========Yi-SQL执行:==========
DELETE FROM "question" WHERE "id" IN ('3fa85f64-5717-4562-b3fc-2c963f66afa6') 
===============================

2024-04-22 15:23:52.815 +08:00 [DBG] =========Yi-SQL耗时0.7196毫秒=====
2024-04-22 15:23:52.822 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application) in 8.8347ms
2024-04-22 15:23:52.822 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:24:23.132 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:24:23.135 +08:00 [INF] Route matched with {action = "GetList", controller = "Notice", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListInput) on controller Yi.Framework.Rbac.Application.Services.NoticeService (Yi.Framework.Rbac.Application).
2024-04-22 15:24:23.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "notice"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:24:23.147 +08:00 [DBG] =========Yi-SQL耗时1.4713毫秒=====
2024-04-22 15:24:23.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","type","content","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "notice"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:24:23.149 +08:00 [DBG] =========Yi-SQL耗时0.4301毫秒=====
2024-04-22 15:24:23.153 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:24:23.157 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application) in 21.0672ms
2024-04-22 15:24:23.157 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:24:23.680 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:24:23.680 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:24:23.680 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:24:23.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:24:23.683 +08:00 [DBG] =========Yi-SQL耗时0.9809毫秒=====
2024-04-22 15:24:23.685 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:24:23.686 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.3013ms
2024-04-22 15:24:23.686 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:24:23.686 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:24:23.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:24:23.710 +08:00 [DBG] =========Yi-SQL耗时1.0709毫秒=====
2024-04-22 15:24:23.713 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:24:23.714 +08:00 [DBG] =========Yi-SQL耗时0.8483毫秒=====
2024-04-22 15:24:23.729 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:24:23.733 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 47.2063ms
2024-04-22 15:24:23.733 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:24:27.572 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:24:27.573 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:24:27.573 +08:00 [INF] Route matched with {action = "Delete", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:24:27.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"  WHERE "id" = N'4fbea5d9-672d-5683-5b22-3a119a976181'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:24:27.575 +08:00 [DBG] =========Yi-SQL耗时0.779毫秒=====
2024-04-22 15:24:27.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE  "config"  SET "configname"=T."configname","configkey"=T."configkey","configvalue"=T."configvalue","configtype"=T."configtype","ordernum"=T."ordernum","remark"=T."remark","isdeleted"=T."isdeleted","creationtime"=T."creationtime","creatorid"=T."creatorid","lastmodifierid"=T."lastmodifierid","lastmodificationtime"=T."lastmodificationtime" FROM              (VALUES
              
 (CAST('4fbea5d9-672d-5683-5b22-3a119a976181' AS uuid),CAST('站点底部信息' AS varchar),CAST('bbs.site.bottom' AS varchar),CAST('你好世界' AS varchar),CAST(NULL AS varchar),CAST('0' AS int4),CAST(NULL AS varchar),CAST(1 AS bool),CAST(CAST('2024-03-29 12:14:27.201' AS DATETIME) AS timestamp),CAST(NULL AS uuid),CAST('e94b7363-80d1-10a3-eb2c-3a119a976151' AS uuid),CAST(CAST('2024-04-22 15:24:27.590' AS DATETIME) AS timestamp))


            ) AS T ("id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime") WHERE "config"."id"=T."id"
                   ;
===============================

2024-04-22 15:24:27.626 +08:00 [DBG] =========Yi-SQL耗时1.1976毫秒=====
2024-04-22 15:24:27.626 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application) in 53.5056ms
2024-04-22 15:24:27.626 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:24:27.639 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:24:27.639 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:24:27.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:24:27.641 +08:00 [DBG] =========Yi-SQL耗时0.6768毫秒=====
2024-04-22 15:24:27.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:24:27.644 +08:00 [DBG] =========Yi-SQL耗时0.7665毫秒=====
2024-04-22 15:24:27.649 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:24:27.649 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 9.7728ms
2024-04-22 15:24:27.649 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:07.141 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:25:07.142 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:07.142 +08:00 [INF] Route matched with {action = "Delete", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:25:07.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"  WHERE "id" = N'dfa8b62f-8d12-85c0-e7e5-3a119a976181'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:25:07.246 +08:00 [DBG] =========Yi-SQL耗时1.3234毫秒=====
2024-04-22 15:25:07.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE  "config"  SET "configname"=T."configname","configkey"=T."configkey","configvalue"=T."configvalue","configtype"=T."configtype","ordernum"=T."ordernum","remark"=T."remark","isdeleted"=T."isdeleted","creationtime"=T."creationtime","creatorid"=T."creatorid","lastmodifierid"=T."lastmodifierid","lastmodificationtime"=T."lastmodificationtime" FROM              (VALUES
              
 (CAST('dfa8b62f-8d12-85c0-e7e5-3a119a976181' AS uuid),CAST('站点Icp备案' AS varchar),CAST('bbs.site.icp' AS varchar),CAST('赣ICP备20008025号' AS varchar),CAST(NULL AS varchar),CAST('0' AS int4),CAST(NULL AS varchar),CAST(1 AS bool),CAST(CAST('2024-03-29 12:14:27.201' AS DATETIME) AS timestamp),CAST(NULL AS uuid),CAST('e94b7363-80d1-10a3-eb2c-3a119a976151' AS uuid),CAST(CAST('2024-04-22 15:25:07.248' AS DATETIME) AS timestamp))


            ) AS T ("id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime") WHERE "config"."id"=T."id"
                   ;
===============================

2024-04-22 15:25:07.248 +08:00 [DBG] =========Yi-SQL耗时0.6317毫秒=====
2024-04-22 15:25:07.249 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application) in 106.6267ms
2024-04-22 15:25:07.249 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:07.259 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:07.259 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:25:07.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:25:07.261 +08:00 [DBG] =========Yi-SQL耗时0.703毫秒=====
2024-04-22 15:25:07.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:25:07.264 +08:00 [DBG] =========Yi-SQL耗时0.7927毫秒=====
2024-04-22 15:25:07.265 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:25:07.265 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 5.8086ms
2024-04-22 15:25:07.265 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:18.763 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:25:18.770 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:25:19.084 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:25:19.086 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:25:19.087 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:25:19.093 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:19.094 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:25:19.140 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:25:19.142 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:25:19.148 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:25:19.149 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 55.4586ms
2024-04-22 15:25:19.149 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:19.164 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:19.164 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:25:19.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:25:19.177 +08:00 [DBG] =========Yi-SQL耗时2.3768毫秒=====
2024-04-22 15:25:19.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:25:19.180 +08:00 [DBG] =========Yi-SQL耗时0.9658毫秒=====
2024-04-22 15:25:19.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:25:19.181 +08:00 [DBG] =========Yi-SQL耗时0.773毫秒=====
2024-04-22 15:25:19.181 +08:00 [INF] 2024/4/22 15:25:19：cc,A-k3-wHTq3TaWFKtn2P-1Q连接服务端success，当前已连接0个
2024-04-22 15:25:19.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:25:19.187 +08:00 [DBG] =========Yi-SQL耗时4.2321毫秒=====
2024-04-22 15:25:19.189 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:25:19.190 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 25.9493ms
2024-04-22 15:25:19.190 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:19.301 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:19.301 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:25:19.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:25:19.310 +08:00 [DBG] =========Yi-SQL耗时3.901毫秒=====
2024-04-22 15:25:19.312 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:25:19.312 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 10.647ms
2024-04-22 15:25:19.312 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:19.534 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:19.534 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:19.535 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:25:19.535 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:25:19.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:25:19.539 +08:00 [DBG] =========Yi-SQL耗时2.4727毫秒=====
2024-04-22 15:25:19.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:25:19.541 +08:00 [DBG] =========Yi-SQL耗时0.8339毫秒=====
2024-04-22 15:25:19.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:25:19.546 +08:00 [DBG] =========Yi-SQL耗时1.5923毫秒=====
2024-04-22 15:25:19.547 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:25:19.548 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 13.0619ms
2024-04-22 15:25:19.548 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:25:19.563 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:25:19.564 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 28.9055ms
2024-04-22 15:25:19.564 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:04.553 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:26:04.554 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:26:04.886 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:26:04.891 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:26:04.891 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:26:04.896 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:04.896 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:26:04.901 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:26:04.904 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.601ms
2024-04-22 15:26:04.904 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:04.931 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:04.931 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:26:04.932 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:26:04.933 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:26:04.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:26:04.934 +08:00 [DBG] =========Yi-SQL耗时1.3052毫秒=====
2024-04-22 15:26:04.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:26:04.939 +08:00 [DBG] =========Yi-SQL耗时1.3272毫秒=====
2024-04-22 15:26:04.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:26:04.940 +08:00 [DBG] =========Yi-SQL耗时0.5067毫秒=====
2024-04-22 15:26:04.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:26:04.944 +08:00 [DBG] =========Yi-SQL耗时1.5733毫秒=====
2024-04-22 15:26:04.946 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:26:04.946 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 14.9924ms
2024-04-22 15:26:04.946 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:04.964 +08:00 [INF] 2024/4/22 15:26:04：cc,aLS27XRex_1x25VV60eO8g连接服务端success，当前已连接0个
2024-04-22 15:26:05.048 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:05.049 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:26:05.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:26:05.057 +08:00 [DBG] =========Yi-SQL耗时1.429毫秒=====
2024-04-22 15:26:05.059 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:26:05.060 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 10.0837ms
2024-04-22 15:26:05.060 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:05.306 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:05.306 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:26:05.308 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:05.308 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:26:05.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:26:05.310 +08:00 [DBG] =========Yi-SQL耗时1.1889毫秒=====
2024-04-22 15:26:05.317 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:26:05.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:26:05.318 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 11.4366ms
2024-04-22 15:26:05.318 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:05.333 +08:00 [DBG] =========Yi-SQL耗时12.7736毫秒=====
2024-04-22 15:26:05.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:26:05.338 +08:00 [DBG] =========Yi-SQL耗时2.2169毫秒=====
2024-04-22 15:26:05.343 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:26:05.344 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 35.7176ms
2024-04-22 15:26:05.344 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:17.315 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:26:17.316 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:17.316 +08:00 [INF] Route matched with {action = "Delete", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:26:17.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"  WHERE "id" = N'dfa8b62f-8d12-85c0-e7e5-3a119a976181'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:26:17.319 +08:00 [DBG] =========Yi-SQL耗时0.8083毫秒=====
2024-04-22 15:26:17.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE  "config"  SET "configname"=T."configname","configkey"=T."configkey","configvalue"=T."configvalue","configtype"=T."configtype","ordernum"=T."ordernum","remark"=T."remark","isdeleted"=T."isdeleted","creationtime"=T."creationtime","creatorid"=T."creatorid","lastmodifierid"=T."lastmodifierid","lastmodificationtime"=T."lastmodificationtime" FROM              (VALUES
              
 (CAST('dfa8b62f-8d12-85c0-e7e5-3a119a976181' AS uuid),CAST('站点Icp备案' AS varchar),CAST('bbs.site.icp' AS varchar),CAST('赣ICP备20008025号' AS varchar),CAST(NULL AS varchar),CAST('0' AS int4),CAST(NULL AS varchar),CAST(1 AS bool),CAST(CAST('2024-03-29 12:14:27.201' AS DATETIME) AS timestamp),CAST(NULL AS uuid),CAST('e94b7363-80d1-10a3-eb2c-3a119a976151' AS uuid),CAST(CAST('2024-04-22 15:26:17.323' AS DATETIME) AS timestamp))


            ) AS T ("id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime") WHERE "config"."id"=T."id"
                   ;
===============================

2024-04-22 15:26:17.324 +08:00 [DBG] =========Yi-SQL耗时1.0518毫秒=====
2024-04-22 15:26:17.325 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application) in 8.3569ms
2024-04-22 15:26:17.325 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:17.337 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:26:17.338 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-22 15:26:17.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:26:17.342 +08:00 [DBG] =========Yi-SQL耗时1.0481毫秒=====
2024-04-22 15:26:17.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:26:17.346 +08:00 [DBG] =========Yi-SQL耗时0.9061毫秒=====
2024-04-22 15:26:17.347 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:26:17.347 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 9.232ms
2024-04-22 15:26:17.347 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:31:32.054 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-22 15:31:32.266 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-22 15:31:36.652 +08:00 [INF] Loaded ABP modules:
2024-04-22 15:31:36.653 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-22 15:31:36.653 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-22 15:31:36.653 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-22 15:31:36.653 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-22 15:31:36.653 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-22 15:31:36.653 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-22 15:31:36.653 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-22 15:31:36.653 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-22 15:31:36.653 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-22 15:31:36.653 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-22 15:31:36.653 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-22 15:31:36.653 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-22 15:31:36.653 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-22 15:31:36.653 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-22 15:31:36.653 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-22 15:31:36.653 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-22 15:31:36.653 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-22 15:31:36.653 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-22 15:31:36.653 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-22 15:31:36.653 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-22 15:31:36.653 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-22 15:31:36.653 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-22 15:31:36.653 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-22 15:31:36.653 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-22 15:31:36.653 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-22 15:31:36.653 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-22 15:31:36.653 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-22 15:31:36.653 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-22 15:31:36.653 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-22 15:31:36.653 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-22 15:31:36.653 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-22 15:31:36.653 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-22 15:31:36.653 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-22 15:31:36.659 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-22 15:31:36.663 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-22 15:31:37.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.290 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.315 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-22 15:31:37.323 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-22 15:31:37.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-22 15:31:37.367 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-22 15:31:37.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-22 15:31:37.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-22 15:31:37.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-22 15:31:37.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-22 15:31:37.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-22 15:31:37.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-22 15:31:37.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-22 15:31:37.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-22 15:31:37.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-22 15:31:37.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-22 15:31:37.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-22 15:31:37.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-22 15:31:37.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-22 15:31:37.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-22 15:31:37.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-22 15:31:37.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-22 15:31:37.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-22 15:31:37.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-22 15:31:37.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-22 15:31:37.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-22 15:31:37.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-22 15:31:37.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:31:37.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-22 15:31:37.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-22 15:31:37.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 15:31:37.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 15:31:37.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-22 15:31:37.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-22 15:31:37.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-22 15:31:37.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-22 15:31:37.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-22 15:31:37.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-22 15:31:37.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-22 15:31:37.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-22 15:31:37.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-22 15:31:37.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.436 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-22 15:31:37.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-22 15:31:37.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:31:37.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-22 15:31:37.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-22 15:31:37.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-22 15:31:37.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-22 15:31:37.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-22 15:31:37.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-22 15:31:37.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-22 15:31:37.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-22 15:31:37.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-22 15:31:37.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-22 15:31:37.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-22 15:31:37.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-22 15:31:37.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:31:37.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-22 15:31:37.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-22 15:31:37.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-22 15:31:37.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-22 15:31:37.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-22 15:31:37.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.479 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-22 15:31:37.482 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-22 15:31:37.496 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-22 15:31:37.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-22 15:31:37.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-22 15:31:37.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-22 15:31:37.504 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-22 15:31:37.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-22 15:31:37.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-22 15:31:37.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-22 15:31:37.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-22 15:31:37.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-22 15:31:37.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-22 15:31:37.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:31:37.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-22 15:31:37.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-22 15:31:37.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-22 15:31:37.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:31:37.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-22 15:31:37.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-22 15:31:37.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 15:31:37.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 15:31:37.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-22 15:31:37.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-22 15:31:37.557 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-22 15:31:37.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-22 15:31:37.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-22 15:31:37.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-22 15:31:37.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-22 15:31:37.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-22 15:31:37.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-22 15:31:37.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-22 15:31:37.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-22 15:31:37.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-22 15:31:37.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-22 15:31:37.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-22 15:31:37.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-22 15:31:37.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-22 15:31:37.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-22 15:31:37.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-22 15:31:37.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.597 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-22 15:31:37.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-22 15:31:37.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:31:37.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-22 15:31:37.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-22 15:31:37.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 15:31:37.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 15:31:37.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-22 15:31:37.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-22 15:31:37.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-22 15:31:37.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-22 15:31:37.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-22 15:31:37.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-22 15:31:37.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-22 15:31:37.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-22 15:31:37.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-22 15:31:37.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-22 15:31:37.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-22 15:31:37.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-22 15:31:37.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-22 15:31:37.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-22 15:31:37.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-22 15:31:37.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:31:37.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-22 15:31:37.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-22 15:31:37.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 15:31:37.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 15:31:37.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-22 15:31:37.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-22 15:31:37.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-22 15:31:37.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-22 15:31:37.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-22 15:31:37.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-22 15:31:37.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-22 15:31:37.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-22 15:31:37.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-22 15:31:37.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-22 15:31:37.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-22 15:31:37.681 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.686 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-22 15:31:37.688 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-22 15:31:37.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-22 15:31:37.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-22 15:31:37.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-22 15:31:37.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-22 15:31:37.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-22 15:31:37.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-22 15:31:37.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-22 15:31:37.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-22 15:31:37.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-22 15:31:37.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-22 15:31:37.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-22 15:31:37.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-22 15:31:37.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-22 15:31:37.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-22 15:31:37.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-22 15:31:37.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-22 15:31:37.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-22 15:31:37.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-22 15:31:37.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-22 15:31:37.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-22 15:31:37.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-22 15:31:37.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-22 15:31:37.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-22 15:31:37.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-22 15:31:37.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:31:37.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-22 15:31:37.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.721 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-22 15:31:37.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-22 15:31:37.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-22 15:31:37.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-22 15:31:37.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-22 15:31:37.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-22 15:31:37.738 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.744 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-22 15:31:37.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-22 15:31:37.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-22 15:31:37.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-22 15:31:37.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-22 15:31:37.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-22 15:31:37.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-22 15:31:37.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-22 15:31:37.774 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-22 15:31:37.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-22 15:31:37.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:31:37.796 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:31:37.797 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-22 15:31:37.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-22 15:31:37.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:31:37.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:31:37.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-22 15:31:37.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-22 15:31:37.845 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:31:37.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:31:37.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-22 15:31:37.855 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-22 15:31:37.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-22 15:31:37.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-22 15:31:37.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-22 15:31:37.893 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filesize" is '文件大小'
===============================

2024-04-22 15:31:37.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filename" is '文件名'
===============================

2024-04-22 15:31:37.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "filelist"."filepath" is '文件路径'
===============================

2024-04-22 15:31:37.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('filelist') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('filelist')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Filelist')
===============================

2024-04-22 15:31:37.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-22 15:31:37.918 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-22 15:31:37.919 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.919 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-22 15:31:37.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.932 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-22 15:31:37.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-22 15:31:37.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-22 15:31:37.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-22 15:31:37.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-22 15:31:37.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-22 15:31:37.942 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-22 15:31:37.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-22 15:31:37.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-22 15:31:37.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-22 15:31:37.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-22 15:31:37.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-22 15:31:37.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-22 15:31:37.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-22 15:31:37.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-22 15:31:37.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-22 15:31:37.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-22 15:31:37.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-22 15:31:37.988 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:37.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-22 15:31:37.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-22 15:31:38.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:31:38.088 +08:00 [DBG] =========Yi-SQL耗时7.2658毫秒=====
2024-04-22 15:31:38.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:31:38.105 +08:00 [DBG] =========Yi-SQL耗时3.7879毫秒=====
2024-04-22 15:31:38.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:31:38.111 +08:00 [DBG] =========Yi-SQL耗时0.842毫秒=====
2024-04-22 15:31:38.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:31:38.119 +08:00 [DBG] =========Yi-SQL耗时2.9137毫秒=====
2024-04-22 15:31:38.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:31:38.123 +08:00 [DBG] =========Yi-SQL耗时1.0316毫秒=====
2024-04-22 15:31:38.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:31:38.127 +08:00 [DBG] =========Yi-SQL耗时0.7059毫秒=====
2024-04-22 15:31:38.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-22 15:31:38.134 +08:00 [DBG] =========Yi-SQL耗时0.9572毫秒=====
2024-04-22 15:31:38.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-22 15:31:38.138 +08:00 [DBG] =========Yi-SQL耗时0.7834毫秒=====
2024-04-22 15:31:38.148 +08:00 [DBG] 耗时-1488ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-22 15:31:38.209 +08:00 [DBG] 耗时-58ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-22 15:31:38.212 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-22 15:31:38.227 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-04-22 15:31:38.233 +08:00 [DBG] 耗时-4ms,已加载模块-Volo.Abp.Quartz
2024-04-22 15:31:38.254 +08:00 [DBG] 耗时-21ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-22 15:31:38.257 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-22 15:31:38.514 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-22 15:31:38.605 +08:00 [DBG] 耗时-347ms,已加载模块-Yi.Abp.Web
2024-04-22 15:31:38.606 +08:00 [INF] ==========【352】个模块初始化执行完毕，总耗时【1939ms】==========
2024-04-22 15:31:38.707 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-22 15:31:38.707 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-22 15:31:38.707 +08:00 [INF] Hosting environment: Development
2024-04-22 15:31:38.707 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-22 15:31:49.711 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:31:49.711 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:31:49.733 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:31:49.733 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:31:49.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:31:49.771 +08:00 [DBG] =========Yi-SQL耗时1.3595毫秒=====
2024-04-22 15:31:49.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:31:49.862 +08:00 [DBG] =========Yi-SQL耗时2.1643毫秒=====
2024-04-22 15:31:49.866 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:31:49.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:31:49.868 +08:00 [DBG] =========Yi-SQL耗时0.7115毫秒=====
2024-04-22 15:31:49.882 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:31:49.896 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 160.1019ms
2024-04-22 15:31:49.896 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 160.1019ms
2024-04-22 15:31:49.896 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:31:49.896 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:31:58.955 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:31:58.958 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-22 15:31:58.960 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:31:59.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid")
     VALUES
           (N'3c20331d-58c2-e28d-6c27-3a1216e4d98d',0,N'7',N'7',N'7',N'7',N'7',N'7',N'7',null,CAST('2024-04-22 15:31:58.985' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-22 15:31:59.018 +08:00 [DBG] =========Yi-SQL耗时4.4198毫秒=====
2024-04-22 15:31:59.025 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:31:59.028 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 67.3344ms
2024-04-22 15:31:59.028 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-22 15:31:59.044 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:31:59.044 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:31:59.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:31:59.048 +08:00 [DBG] =========Yi-SQL耗时0.9594毫秒=====
2024-04-22 15:31:59.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:31:59.054 +08:00 [DBG] =========Yi-SQL耗时2.3588毫秒=====
2024-04-22 15:31:59.057 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:31:59.058 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 13.6059ms
2024-04-22 15:31:59.058 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:32:01.154 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:32:01.154 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:32:01.157 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:32:01.157 +08:00 [INF] Route matched with {action = "getList", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] getList(System.Guid) on controller Yi.Abp.Application.Services.FileService (Yi.Abp.Application).
2024-04-22 15:32:01.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","questionid","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "filelist"  WHERE ( "questionid" = N'3c20331d-58c2-e28d-6c27-3a1216e4d98d' ) 
===============================

2024-04-22 15:32:01.164 +08:00 [DBG] =========Yi-SQL耗时1.694毫秒=====
2024-04-22 15:32:01.181 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Abp.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:32:01.182 +08:00 [INF] Executed action Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application) in 24.8726ms
2024-04-22 15:32:01.182 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.FileService.getList (Yi.Abp.Application)'
2024-04-22 15:32:01.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'3c20331d-58c2-e28d-6c27-3a1216e4d98d'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:32:01.216 +08:00 [DBG] =========Yi-SQL耗时0.7078毫秒=====
2024-04-22 15:32:01.221 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-22 15:32:01.221 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 64.3725ms
2024-04-22 15:32:01.222 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-22 15:32:04.990 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:32:04.991 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:32:04.994 +08:00 [INF] Route matched with {action = "Delete", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:32:05.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'3c20331d-58c2-e28d-6c27-3a1216e4d98d'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:32:05.005 +08:00 [DBG] =========Yi-SQL耗时0.6247毫秒=====
2024-04-22 15:32:05.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE  "question"  SET "isdeleted"=T."isdeleted","project"=T."project","status"=T."status","category"=T."category","impact"=T."impact","priority"=T."priority","title"=T."title","description"=T."description","solve_user"=T."solve_user","creationtime"=T."creationtime","lastmodificationtime"=T."lastmodificationtime","lastmodifierid"=T."lastmodifierid","creatorid"=T."creatorid" FROM              (VALUES
              
 (CAST('3c20331d-58c2-e28d-6c27-3a1216e4d98d' AS uuid),CAST(1 AS bool),CAST('7' AS varchar),CAST('7' AS varchar),CAST('7' AS varchar),CAST('7' AS varchar),CAST('7' AS varchar),CAST('7' AS varchar),CAST('7' AS text),CAST(NULL AS varchar),CAST(CAST('2024-04-22 15:31:58.985' AS DATETIME) AS timestamp),CAST(CAST('2024-04-22 15:32:05.018' AS DATETIME) AS timestamp),CAST('e94b7363-80d1-10a3-eb2c-3a119a976151' AS uuid),CAST('e94b7363-80d1-10a3-eb2c-3a119a976151' AS uuid))


            ) AS T ("id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid") WHERE "question"."id"=T."id"
                   ;
===============================

2024-04-22 15:32:05.048 +08:00 [DBG] =========Yi-SQL耗时1.4609毫秒=====
2024-04-22 15:32:05.050 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application) in 55.1047ms
2024-04-22 15:32:05.050 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.DeleteAsync (Yi.Abp.Application)'
2024-04-22 15:32:05.060 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:32:05.061 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 15:32:05.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:32:05.065 +08:00 [DBG] =========Yi-SQL耗时1.6594毫秒=====
2024-04-22 15:32:05.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:32:05.069 +08:00 [DBG] =========Yi-SQL耗时0.7078毫秒=====
2024-04-22 15:32:05.072 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:32:05.073 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.8334ms
2024-04-22 15:32:05.073 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 15:33:05.649 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:33:05.650 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:33:05.656 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:33:05.667 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:33:05.668 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:33:05.868 +08:00 [INF] 2024/4/22 15:33:05：cc,gIEngNG6RI2JnqlAqU3ugQ连接服务端success，当前已连接0个
2024-04-22 15:34:20.257 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:20.266 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:34:20.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:34:20.294 +08:00 [DBG] =========Yi-SQL耗时2.07毫秒=====
2024-04-22 15:34:20.334 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:34:20.336 +08:00 [DBG] =========Yi-SQL耗时1.7041毫秒=====
2024-04-22 15:34:20.352 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:20.357 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 90.861ms
2024-04-22 15:34:20.357 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:24.910 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:24.914 +08:00 [INF] Route matched with {action = "Get", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:34:24.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"  WHERE "id" = N'cddc7310-1736-e93f-ed43-3a119a976121'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:34:24.924 +08:00 [DBG] =========Yi-SQL耗时1.4168毫秒=====
2024-04-22 15:34:24.933 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetOutputDto'.
2024-04-22 15:34:24.935 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application) in 21.3728ms
2024-04-22 15:34:24.935 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:27.612 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:34:30.445 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:30.446 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:34:30.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:34:30.449 +08:00 [DBG] =========Yi-SQL耗时0.7066毫秒=====
2024-04-22 15:34:30.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:34:30.452 +08:00 [DBG] =========Yi-SQL耗时0.7892毫秒=====
2024-04-22 15:34:30.456 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:30.456 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 10.6123ms
2024-04-22 15:34:30.456 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:31.270 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:31.271 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:34:31.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:34:31.274 +08:00 [DBG] =========Yi-SQL耗时0.9185毫秒=====
2024-04-22 15:34:31.277 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:34:31.278 +08:00 [DBG] =========Yi-SQL耗时0.729毫秒=====
2024-04-22 15:34:31.283 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:31.283 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 12.5212ms
2024-04-22 15:34:31.284 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:32.558 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:32.558 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:34:32.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:34:32.563 +08:00 [DBG] =========Yi-SQL耗时1.2451毫秒=====
2024-04-22 15:34:32.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-22 15:34:32.569 +08:00 [DBG] =========Yi-SQL耗时0.9633毫秒=====
2024-04-22 15:34:32.570 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:32.570 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 12.1226ms
2024-04-22 15:34:32.570 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:34.585 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:34.585 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:34:34.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:34:34.588 +08:00 [DBG] =========Yi-SQL耗时0.7538毫秒=====
2024-04-22 15:34:34.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:34:34.591 +08:00 [DBG] =========Yi-SQL耗时1.1531毫秒=====
2024-04-22 15:34:34.596 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:34.597 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 11.7002ms
2024-04-22 15:34:34.597 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:41.879 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:41.880 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:34:41.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:34:41.883 +08:00 [DBG] =========Yi-SQL耗时0.8788毫秒=====
2024-04-22 15:34:41.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:34:41.901 +08:00 [DBG] =========Yi-SQL耗时1.752毫秒=====
2024-04-22 15:34:41.906 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:41.907 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 26.9727ms
2024-04-22 15:34:41.907 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:43.190 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:43.195 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-22 15:34:43.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:34:43.209 +08:00 [DBG] =========Yi-SQL耗时0.642毫秒=====
2024-04-22 15:34:43.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:34:43.215 +08:00 [DBG] =========Yi-SQL耗时1.1416毫秒=====
2024-04-22 15:34:43.226 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:43.234 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 38.7586ms
2024-04-22 15:34:43.234 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:45.128 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:45.129 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:34:45.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:34:45.132 +08:00 [DBG] =========Yi-SQL耗时0.8077毫秒=====
2024-04-22 15:34:45.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:34:45.138 +08:00 [DBG] =========Yi-SQL耗时3.9397毫秒=====
2024-04-22 15:34:45.143 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:45.143 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 14.2776ms
2024-04-22 15:34:45.143 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:34:48.922 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:48.929 +08:00 [INF] Route matched with {action = "GetList", controller = "Template", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TemplateService (Yi.Framework.CodeGen.Application).
2024-04-22 15:34:48.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitemplate"  
===============================

2024-04-22 15:34:48.942 +08:00 [DBG] =========Yi-SQL耗时0.5806毫秒=====
2024-04-22 15:34:48.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","templatestr","buildpath","name","remarks" FROM "yitemplate"     LIMIT 10 offset 0
===============================

2024-04-22 15:34:48.946 +08:00 [DBG] =========Yi-SQL耗时3.4428毫秒=====
2024-04-22 15:34:48.955 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:48.957 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application) in 27.8752ms
2024-04-22 15:34:48.957 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:50.031 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:50.032 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:50.033 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:50.036 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:34:50.041 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 15:34:50.042 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:34:50.044 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:50.056 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 19.7318ms
2024-04-22 15:34:50.056 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:50.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 15:34:50.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:34:50.074 +08:00 [DBG] =========Yi-SQL耗时6.8374毫秒=====
2024-04-22 15:34:50.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 15:34:50.076 +08:00 [DBG] =========Yi-SQL耗时0.9591毫秒=====
2024-04-22 15:34:50.097 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:50.104 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 61.396ms
2024-04-22 15:34:50.104 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:50.167 +08:00 [DBG] =========Yi-SQL耗时94.0959毫秒=====
2024-04-22 15:34:50.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 15:34:50.173 +08:00 [DBG] =========Yi-SQL耗时1.7552毫秒=====
2024-04-22 15:34:50.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:34:50.181 +08:00 [DBG] =========Yi-SQL耗时2.0274毫秒=====
2024-04-22 15:34:50.201 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:50.204 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 163.0297ms
2024-04-22 15:34:50.204 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:52.441 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:52.441 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:34:52.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')  
===============================

2024-04-22 15:34:52.462 +08:00 [DBG] =========Yi-SQL耗时1.3815毫秒=====
2024-04-22 15:34:52.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')    LIMIT 10 offset 0
===============================

2024-04-22 15:34:52.466 +08:00 [DBG] =========Yi-SQL耗时1.4704毫秒=====
2024-04-22 15:34:52.468 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:52.468 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 27.0308ms
2024-04-22 15:34:52.468 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:54.628 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:34:54.629 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:34:54.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'8e47d602-45b1-4fc7-897d-6b0c983ee5bd')  
===============================

2024-04-22 15:34:54.633 +08:00 [DBG] =========Yi-SQL耗时0.8936毫秒=====
2024-04-22 15:34:54.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'8e47d602-45b1-4fc7-897d-6b0c983ee5bd')    LIMIT 10 offset 0
===============================

2024-04-22 15:34:54.636 +08:00 [DBG] =========Yi-SQL耗时1.1896毫秒=====
2024-04-22 15:34:54.641 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:34:54.642 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 12.7817ms
2024-04-22 15:34:54.642 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:35:12.627 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:35:12.627 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:35:12.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:35:12.632 +08:00 [DBG] =========Yi-SQL耗时0.7566毫秒=====
2024-04-22 15:35:12.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:35:12.637 +08:00 [DBG] =========Yi-SQL耗时2.789毫秒=====
2024-04-22 15:35:12.654 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:35:12.655 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 27.6861ms
2024-04-22 15:35:12.655 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:35:22.706 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:35:22.706 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:35:22.707 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:35:22.710 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:35:22.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:35:22.711 +08:00 [DBG] =========Yi-SQL耗时1.2555毫秒=====
2024-04-22 15:35:22.715 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:35:22.715 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.4017ms
2024-04-22 15:35:22.715 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:35:22.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:35:22.734 +08:00 [DBG] =========Yi-SQL耗时2.5791毫秒=====
2024-04-22 15:35:22.770 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:35:22.775 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 65.1834ms
2024-04-22 15:35:22.775 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:35:30.335 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:35:30.336 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:35:30.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:35:30.339 +08:00 [DBG] =========Yi-SQL耗时0.8369毫秒=====
2024-04-22 15:35:30.359 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:35:30.360 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 23.7667ms
2024-04-22 15:35:30.360 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:37:16.136 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:37:16.139 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:37:16.142 +08:00 [INF] Route matched with {action = "Create", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:37:16.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "menu"  
           ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query")
     VALUES
           (N'fc32ab99-ae1d-2db8-dec4-3a1216e9b092',0,CAST('2024-04-22 15:37:16.145' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,0,1,N'字段管理',1,null,N'2b299e84-bf9f-0375-cf2b-3a119a97612f',N'dict',N'/dict/dictionary',0,0,1,null,N'/dict/dictionary',null) ;
===============================

2024-04-22 15:37:16.215 +08:00 [DBG] =========Yi-SQL耗时28.2775毫秒=====
2024-04-22 15:37:16.229 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:37:16.234 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application) in 91.8388ms
2024-04-22 15:37:16.234 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:37:16.282 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:37:16.282 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:37:16.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:37:16.287 +08:00 [DBG] =========Yi-SQL耗时1.1801毫秒=====
2024-04-22 15:37:16.348 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:37:16.350 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 67.4895ms
2024-04-22 15:37:16.350 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:11.446 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:11.446 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:11.446 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:11.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:38:11.450 +08:00 [DBG] =========Yi-SQL耗时1.7152毫秒=====
2024-04-22 15:38:11.455 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:11.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'fc32ab99-ae1d-2db8-dec4-3a1216e9b092'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:38:11.466 +08:00 [DBG] =========Yi-SQL耗时1.1111毫秒=====
2024-04-22 15:38:11.470 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:38:11.471 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 24.7394ms
2024-04-22 15:38:11.471 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:11.471 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:38:11.472 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 16.4971ms
2024-04-22 15:38:11.472 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:17.763 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:38:17.764 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:17.767 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:17.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'fc32ab99-ae1d-2db8-dec4-3a1216e9b092'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:38:17.780 +08:00 [DBG] =========Yi-SQL耗时0.5899毫秒=====
2024-04-22 15:38:17.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-22 15:37:16.145' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-22 15:38:17.808' AS DATETIME),"ordernum"=0,"state"=1,"menuname"=N'字段管理',"menutype"=1,"permissioncode"=null,"parentid"=N'2b299e84-bf9f-0375-cf2b-3a119a97612f',"menuicon"=N'dict',"router"=N'system/dict/dictionary',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/dict/dictionary',"query"=null  WHERE "id"=N'fc32ab99-ae1d-2db8-dec4-3a1216e9b092'
===============================

2024-04-22 15:38:17.813 +08:00 [DBG] =========Yi-SQL耗时0.9497毫秒=====
2024-04-22 15:38:17.813 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:38:17.814 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 46.4347ms
2024-04-22 15:38:17.814 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:17.837 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:17.838 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:17.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:38:17.840 +08:00 [DBG] =========Yi-SQL耗时0.692毫秒=====
2024-04-22 15:38:17.856 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:38:17.858 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 19.229ms
2024-04-22 15:38:17.858 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:20.491 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:20.492 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:20.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:38:20.496 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:20.496 +08:00 [DBG] =========Yi-SQL耗时0.9585毫秒=====
2024-04-22 15:38:20.497 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:20.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'2b299e84-bf9f-0375-cf2b-3a119a97612f'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:38:20.506 +08:00 [DBG] =========Yi-SQL耗时0.869毫秒=====
2024-04-22 15:38:20.510 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:38:20.511 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 13.8097ms
2024-04-22 15:38:20.511 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:20.520 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:38:20.520 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 28.2794ms
2024-04-22 15:38:20.520 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:28.869 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:28.869 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:28.869 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:28.869 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:28.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:38:28.872 +08:00 [DBG] =========Yi-SQL耗时0.9506毫秒=====
2024-04-22 15:38:28.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'fc32ab99-ae1d-2db8-dec4-3a1216e9b092'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:38:28.874 +08:00 [DBG] =========Yi-SQL耗时0.6773毫秒=====
2024-04-22 15:38:28.877 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:38:28.877 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 7.7168ms
2024-04-22 15:38:28.877 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:28.890 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:38:28.890 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 21.2746ms
2024-04-22 15:38:28.890 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:46.988 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:38:46.989 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:46.989 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:46.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'fc32ab99-ae1d-2db8-dec4-3a1216e9b092'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:38:46.992 +08:00 [DBG] =========Yi-SQL耗时0.906毫秒=====
2024-04-22 15:38:46.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-22 15:37:16.145' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-22 15:38:46.996' AS DATETIME),"ordernum"=0,"state"=1,"menuname"=N'字段管理',"menutype"=1,"permissioncode"=null,"parentid"=N'2b299e84-bf9f-0375-cf2b-3a119a97612f',"menuicon"=N'dict',"router"=N'/dictionary',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'system/dict/dictionary/index',"query"=null  WHERE "id"=N'fc32ab99-ae1d-2db8-dec4-3a1216e9b092'
===============================

2024-04-22 15:38:46.998 +08:00 [DBG] =========Yi-SQL耗时1.6719毫秒=====
2024-04-22 15:38:46.999 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:38:46.999 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 10.2031ms
2024-04-22 15:38:46.999 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:47.023 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:47.023 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:47.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:38:47.025 +08:00 [DBG] =========Yi-SQL耗时0.7609毫秒=====
2024-04-22 15:38:47.107 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:38:47.109 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 85.9102ms
2024-04-22 15:38:47.109 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:50.122 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:50.123 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:50.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:38:50.127 +08:00 [DBG] =========Yi-SQL耗时1.6603毫秒=====
2024-04-22 15:38:50.130 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:50.130 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:38:50.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'2b299e84-bf9f-0375-cf2b-3a119a97612f'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:38:50.133 +08:00 [DBG] =========Yi-SQL耗时1.1464毫秒=====
2024-04-22 15:38:50.137 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:38:50.137 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 6.7222ms
2024-04-22 15:38:50.137 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:38:50.167 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:38:50.167 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 44.7748ms
2024-04-22 15:38:50.167 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:17.685 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:39:17.693 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:39:17.821 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:39:17.822 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:39:17.823 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:39:17.843 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:39:17.844 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:39:17.861 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:17.863 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:39:17.928 +08:00 [INF] 2024/4/22 15:39:17：cc,6EzVPv-8N_nFhqTOPCZntQ连接服务端success，当前已连接0个
2024-04-22 15:39:18.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:39:18.008 +08:00 [DBG] =========Yi-SQL耗时1.5557毫秒=====
2024-04-22 15:39:18.031 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:39:18.033 +08:00 [DBG] =========Yi-SQL耗时1.884毫秒=====
2024-04-22 15:39:18.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:39:18.042 +08:00 [DBG] =========Yi-SQL耗时0.5764毫秒=====
2024-04-22 15:39:18.097 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:39:18.104 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 241.1782ms
2024-04-22 15:39:18.104 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:18.112 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:18.114 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:39:18.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:39:18.118 +08:00 [DBG] =========Yi-SQL耗时1.8037毫秒=====
2024-04-22 15:39:18.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:39:18.121 +08:00 [DBG] =========Yi-SQL耗时0.4101毫秒=====
2024-04-22 15:39:18.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:39:18.122 +08:00 [DBG] =========Yi-SQL耗时0.2635毫秒=====
2024-04-22 15:39:18.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:39:18.125 +08:00 [DBG] =========Yi-SQL耗时0.4985毫秒=====
2024-04-22 15:39:18.151 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:39:18.154 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 40.3197ms
2024-04-22 15:39:18.154 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:18.226 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:18.228 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:39:18.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:39:18.239 +08:00 [DBG] =========Yi-SQL耗时1.5182毫秒=====
2024-04-22 15:39:18.254 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:39:18.259 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 30.7269ms
2024-04-22 15:39:18.259 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:18.286 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:18.286 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:18.286 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:39:18.286 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:39:18.292 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:18.292 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:39:18.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:39:18.293 +08:00 [DBG] =========Yi-SQL耗时0.843毫秒=====
2024-04-22 15:39:18.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:39:18.298 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:39:18.299 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.1991ms
2024-04-22 15:39:18.299 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:18.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:39:18.336 +08:00 [DBG] =========Yi-SQL耗时37.6401毫秒=====
2024-04-22 15:39:18.357 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:39:18.357 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 65.623ms
2024-04-22 15:39:18.358 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:18.409 +08:00 [DBG] =========Yi-SQL耗时103.6304毫秒=====
2024-04-22 15:39:18.410 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:39:18.410 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 124.0928ms
2024-04-22 15:39:18.411 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:22.457 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:22.457 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:39:22.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:39:22.459 +08:00 [DBG] =========Yi-SQL耗时0.7526毫秒=====
2024-04-22 15:39:22.470 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:39:22.472 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 14.3691ms
2024-04-22 15:39:22.472 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:41.363 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:39:41.364 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:41.373 +08:00 [INF] Route matched with {action = "Delete", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task DeleteAsync(System.Collections.Generic.IEnumerable`1[System.Guid]) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:39:41.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'fc32ab99-ae1d-2db8-dec4-3a1216e9b092'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:39:41.381 +08:00 [DBG] =========Yi-SQL耗时1.7728毫秒=====
2024-04-22 15:39:41.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE  "menu"  SET "isdeleted"=T."isdeleted","creationtime"=T."creationtime","creatorid"=T."creatorid","lastmodifierid"=T."lastmodifierid","lastmodificationtime"=T."lastmodificationtime","ordernum"=T."ordernum","state"=T."state","menuname"=T."menuname","menutype"=T."menutype","permissioncode"=T."permissioncode","parentid"=T."parentid","menuicon"=T."menuicon","router"=T."router","islink"=T."islink","iscache"=T."iscache","isshow"=T."isshow","remark"=T."remark","component"=T."component","query"=T."query" FROM              (VALUES
              
 (CAST('fc32ab99-ae1d-2db8-dec4-3a1216e9b092' AS uuid),CAST(1 AS bool),CAST(CAST('2024-04-22 15:37:16.145' AS DATETIME) AS timestamp),CAST('e94b7363-80d1-10a3-eb2c-3a119a976151' AS uuid),CAST('e94b7363-80d1-10a3-eb2c-3a119a976151' AS uuid),CAST(CAST('2024-04-22 15:39:41.385' AS DATETIME) AS timestamp),CAST('0' AS int4),CAST(1 AS bool),CAST('字段管理' AS varchar),CAST('1' AS int4),CAST(NULL AS varchar),CAST('2b299e84-bf9f-0375-cf2b-3a119a97612f' AS uuid),CAST('dict' AS varchar),CAST('/dictionary' AS varchar),CAST(0 AS bool),CAST(0 AS bool),CAST(1 AS bool),CAST(NULL AS varchar),CAST('system/dict/dictionary/index' AS varchar),CAST(NULL AS varchar))


            ) AS T ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query") WHERE "menu"."id"=T."id"
                   ;
===============================

2024-04-22 15:39:41.411 +08:00 [DBG] =========Yi-SQL耗时0.8793毫秒=====
2024-04-22 15:39:41.411 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.DeleteAsync (Yi.Framework.Rbac.Application) in 38.0904ms
2024-04-22 15:39:41.411 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.DeleteAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:41.424 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:41.424 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:39:41.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:39:41.426 +08:00 [DBG] =========Yi-SQL耗时0.7027毫秒=====
2024-04-22 15:39:41.438 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:39:41.439 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 14.64ms
2024-04-22 15:39:41.439 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:47.828 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:39:47.828 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:39:47.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:39:47.830 +08:00 [DBG] =========Yi-SQL耗时0.8349毫秒=====
2024-04-22 15:39:47.839 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:39:47.840 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 11.5247ms
2024-04-22 15:39:47.840 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:40:09.585 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:40:09.586 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:40:09.586 +08:00 [INF] Route matched with {action = "Create", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:40:09.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "menu"  
           ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query")
     VALUES
           (N'c0029f7d-ee38-0acd-94f6-3a1216ec55f4',0,CAST('2024-04-22 15:40:09.586' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,0,1,N'字段管理',1,null,N'e6bf52fd-b827-33d0-b83c-3a119a97612e',N'documentation',N'/dictionary',0,0,1,null,N'system/dict/dictionary/index',null) ;
===============================

2024-04-22 15:40:09.590 +08:00 [DBG] =========Yi-SQL耗时0.7937毫秒=====
2024-04-22 15:40:09.593 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:40:09.593 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application) in 6.9109ms
2024-04-22 15:40:09.593 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:40:09.616 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:40:09.616 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:40:09.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:40:09.619 +08:00 [DBG] =========Yi-SQL耗时0.7937毫秒=====
2024-04-22 15:40:09.628 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:40:09.629 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 12.4233ms
2024-04-22 15:40:09.629 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:40:27.724 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:40:27.724 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:40:27.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:40:27.726 +08:00 [DBG] =========Yi-SQL耗时0.9053毫秒=====
2024-04-22 15:40:27.743 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:40:27.743 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 19.4002ms
2024-04-22 15:40:27.743 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:40:41.897 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:40:41.897 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:40:41.898 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:40:41.898 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:40:41.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:40:41.899 +08:00 [DBG] =========Yi-SQL耗时0.7678毫秒=====
2024-04-22 15:40:41.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'c0029f7d-ee38-0acd-94f6-3a1216ec55f4'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:40:41.902 +08:00 [DBG] =========Yi-SQL耗时1.1632毫秒=====
2024-04-22 15:40:41.904 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:40:41.905 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 6.6473ms
2024-04-22 15:40:41.905 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:40:41.915 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:40:41.915 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 17.6735ms
2024-04-22 15:40:41.915 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:01.556 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:41:01.557 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:01.557 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:01.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'c0029f7d-ee38-0acd-94f6-3a1216ec55f4'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:01.560 +08:00 [DBG] =========Yi-SQL耗时0.7342毫秒=====
2024-04-22 15:41:01.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-22 15:40:09.586' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-22 15:41:01.563' AS DATETIME),"ordernum"=94,"state"=1,"menuname"=N'字段管理',"menutype"=1,"permissioncode"=null,"parentid"=N'e6bf52fd-b827-33d0-b83c-3a119a97612e',"menuicon"=N'documentation',"router"=N'/dictionary',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'system/dict/dictionary/index',"query"=null  WHERE "id"=N'c0029f7d-ee38-0acd-94f6-3a1216ec55f4'
===============================

2024-04-22 15:41:01.564 +08:00 [DBG] =========Yi-SQL耗时1.0009毫秒=====
2024-04-22 15:41:01.565 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:41:01.565 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 7.4046ms
2024-04-22 15:41:01.565 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:01.589 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:01.589 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:01.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:01.591 +08:00 [DBG] =========Yi-SQL耗时0.903毫秒=====
2024-04-22 15:41:01.604 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:01.604 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 15.2057ms
2024-04-22 15:41:01.604 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:04.861 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:04.861 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:04.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:04.864 +08:00 [DBG] =========Yi-SQL耗时0.9411毫秒=====
2024-04-22 15:41:04.868 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:04.868 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:04.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'33906558-509f-1b84-782e-3a119a97612f'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:04.872 +08:00 [DBG] =========Yi-SQL耗时1.5247毫秒=====
2024-04-22 15:41:04.875 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:41:04.875 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 7.0519ms
2024-04-22 15:41:04.875 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:04.885 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:04.886 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 24.2553ms
2024-04-22 15:41:04.886 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:09.901 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:41:09.902 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:09.902 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:09.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'33906558-509f-1b84-782e-3a119a97612f'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:09.905 +08:00 [DBG] =========Yi-SQL耗时0.662毫秒=====
2024-04-22 15:41:09.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-03-29 12:14:27.119' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-22 15:41:09.907' AS DATETIME),"ordernum"=93,"state"=1,"menuname"=N'参数设置',"menutype"=1,"permissioncode"=N'system:config:list',"parentid"=N'e6bf52fd-b827-33d0-b83c-3a119a97612e',"menuicon"=N'edit',"router"=N'config',"islink"=0,"iscache"=1,"isshow"=1,"remark"=null,"component"=N'system/config/index',"query"=null  WHERE "id"=N'33906558-509f-1b84-782e-3a119a97612f'
===============================

2024-04-22 15:41:09.908 +08:00 [DBG] =========Yi-SQL耗时0.5944毫秒=====
2024-04-22 15:41:09.909 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:41:09.909 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 6.3528ms
2024-04-22 15:41:09.909 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:09.930 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:09.930 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:09.932 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:09.932 +08:00 [DBG] =========Yi-SQL耗时0.7273毫秒=====
2024-04-22 15:41:09.943 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:09.944 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 13.1771ms
2024-04-22 15:41:09.944 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:15.821 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:15.821 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:15.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:15.824 +08:00 [DBG] =========Yi-SQL耗时0.7698毫秒=====
2024-04-22 15:41:15.826 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:15.826 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:15.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'33906558-509f-1b84-782e-3a119a97612f'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:15.828 +08:00 [DBG] =========Yi-SQL耗时0.6611毫秒=====
2024-04-22 15:41:15.832 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:41:15.832 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 5.7657ms
2024-04-22 15:41:15.832 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:15.840 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:15.841 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 19.4105ms
2024-04-22 15:41:15.841 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:18.469 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:41:18.470 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:18.470 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:18.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'33906558-509f-1b84-782e-3a119a97612f'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:18.472 +08:00 [DBG] =========Yi-SQL耗时0.6765毫秒=====
2024-04-22 15:41:18.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-03-29 12:14:27.119' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-22 15:41:18.475' AS DATETIME),"ordernum"=92,"state"=1,"menuname"=N'参数设置',"menutype"=1,"permissioncode"=N'system:config:list',"parentid"=N'e6bf52fd-b827-33d0-b83c-3a119a97612e',"menuicon"=N'edit',"router"=N'config',"islink"=0,"iscache"=1,"isshow"=1,"remark"=null,"component"=N'system/config/index',"query"=null  WHERE "id"=N'33906558-509f-1b84-782e-3a119a97612f'
===============================

2024-04-22 15:41:18.476 +08:00 [DBG] =========Yi-SQL耗时0.6584毫秒=====
2024-04-22 15:41:18.477 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:41:18.477 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 7.1181ms
2024-04-22 15:41:18.477 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:18.497 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:18.497 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:18.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:18.499 +08:00 [DBG] =========Yi-SQL耗时0.8073毫秒=====
2024-04-22 15:41:18.525 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:18.528 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 30.1341ms
2024-04-22 15:41:18.528 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:20.995 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:20.995 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:20.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:20.998 +08:00 [DBG] =========Yi-SQL耗时0.8616毫秒=====
2024-04-22 15:41:20.999 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:21.000 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:21.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'30b5f3d7-8d0c-1acc-5888-3a119a97612f'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:21.004 +08:00 [DBG] =========Yi-SQL耗时0.9534毫秒=====
2024-04-22 15:41:21.008 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:41:21.008 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 8.1641ms
2024-04-22 15:41:21.008 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:21.015 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:21.016 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 20.6876ms
2024-04-22 15:41:21.016 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:23.749 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:41:23.750 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:23.750 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:23.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'30b5f3d7-8d0c-1acc-5888-3a119a97612f'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:23.753 +08:00 [DBG] =========Yi-SQL耗时0.8023毫秒=====
2024-04-22 15:41:23.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-03-29 12:14:27.119' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-22 15:41:23.756' AS DATETIME),"ordernum"=91,"state"=1,"menuname"=N'日志管理',"menutype"=0,"permissioncode"=null,"parentid"=N'e6bf52fd-b827-33d0-b83c-3a119a97612e',"menuicon"=N'log',"router"=N'log',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=null,"query"=null  WHERE "id"=N'30b5f3d7-8d0c-1acc-5888-3a119a97612f'
===============================

2024-04-22 15:41:23.758 +08:00 [DBG] =========Yi-SQL耗时0.6322毫秒=====
2024-04-22 15:41:23.758 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:41:23.758 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 7.9151ms
2024-04-22 15:41:23.758 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:23.781 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:23.781 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:23.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:23.783 +08:00 [DBG] =========Yi-SQL耗时0.7939毫秒=====
2024-04-22 15:41:23.796 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:23.796 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 15.2294ms
2024-04-22 15:41:23.796 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.102 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:41:31.103 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:41:31.260 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:41:31.261 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:41:31.261 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:41:31.278 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.279 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:31.280 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:41:31.281 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:41:31.296 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:41:31.297 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 17.9065ms
2024-04-22 15:41:31.297 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.302 +08:00 [INF] 2024/4/22 15:41:31：cc,08jho2XboovE2f9EX3buwA连接服务端success，当前已连接0个
2024-04-22 15:41:31.307 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.307 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:31.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:31.309 +08:00 [DBG] =========Yi-SQL耗时1.3775毫秒=====
2024-04-22 15:41:31.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:41:31.311 +08:00 [DBG] =========Yi-SQL耗时0.2725毫秒=====
2024-04-22 15:41:31.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:41:31.312 +08:00 [DBG] =========Yi-SQL耗时0.5628毫秒=====
2024-04-22 15:41:31.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:31.313 +08:00 [DBG] =========Yi-SQL耗时0.4085毫秒=====
2024-04-22 15:41:31.313 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:31.313 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 6.3122ms
2024-04-22 15:41:31.313 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.377 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.377 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:31.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:41:31.379 +08:00 [DBG] =========Yi-SQL耗时1.0782毫秒=====
2024-04-22 15:41:31.381 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:41:31.381 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 3.5746ms
2024-04-22 15:41:31.381 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.430 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.430 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.430 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.430 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:31.430 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:31.430 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:31.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:31.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:31.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:31.432 +08:00 [DBG] =========Yi-SQL耗时0.8429毫秒=====
2024-04-22 15:41:31.432 +08:00 [DBG] =========Yi-SQL耗时1.4119毫秒=====
2024-04-22 15:41:31.443 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:31.443 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:31.443 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.4502ms
2024-04-22 15:41:31.443 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.4335ms
2024-04-22 15:41:31.443 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.443 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:31.503 +08:00 [DBG] =========Yi-SQL耗时71.8107毫秒=====
2024-04-22 15:41:31.511 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:31.511 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 81.0462ms
2024-04-22 15:41:31.511 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:34.163 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:34.163 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:34.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:34.165 +08:00 [DBG] =========Yi-SQL耗时1.1833毫秒=====
2024-04-22 15:41:34.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:41:34.170 +08:00 [DBG] =========Yi-SQL耗时1.2724毫秒=====
2024-04-22 15:41:34.172 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:34.172 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 9.2185ms
2024-04-22 15:41:34.172 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:40.759 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:40.760 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:40.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:40.762 +08:00 [DBG] =========Yi-SQL耗时0.8051毫秒=====
2024-04-22 15:41:40.777 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:40.777 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 17.5974ms
2024-04-22 15:41:40.777 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:50.164 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:50.165 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:50.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:50.166 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:50.167 +08:00 [DBG] =========Yi-SQL耗时0.7286毫秒=====
2024-04-22 15:41:50.167 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:50.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'c0029f7d-ee38-0acd-94f6-3a1216ec55f4'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:50.171 +08:00 [DBG] =========Yi-SQL耗时0.759毫秒=====
2024-04-22 15:41:50.174 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:41:50.175 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 7.6453ms
2024-04-22 15:41:50.175 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:50.181 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:50.182 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 17.0434ms
2024-04-22 15:41:50.182 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:52.541 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:41:52.542 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:52.542 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:52.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'c0029f7d-ee38-0acd-94f6-3a1216ec55f4'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:41:52.544 +08:00 [DBG] =========Yi-SQL耗时0.7195毫秒=====
2024-04-22 15:41:52.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-22 15:40:09.586' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-22 15:41:52.547' AS DATETIME),"ordernum"=94,"state"=1,"menuname"=N'字段管理',"menutype"=1,"permissioncode"=null,"parentid"=N'e6bf52fd-b827-33d0-b83c-3a119a97612e',"menuicon"=N'documentation',"router"=N'dictionary',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'system/dict/dictionary/index',"query"=null  WHERE "id"=N'c0029f7d-ee38-0acd-94f6-3a1216ec55f4'
===============================

2024-04-22 15:41:52.548 +08:00 [DBG] =========Yi-SQL耗时0.8491毫秒=====
2024-04-22 15:41:52.549 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 15:41:52.549 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 7.2273ms
2024-04-22 15:41:52.549 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:52.570 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:41:52.571 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:41:52.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:41:52.573 +08:00 [DBG] =========Yi-SQL耗时0.686毫秒=====
2024-04-22 15:41:52.582 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:41:52.582 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 11.4226ms
2024-04-22 15:41:52.582 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:42:43.429 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:42:43.429 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:42:43.429 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:42:43.429 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:42:43.429 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:42:43.429 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:42:43.429 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:42:43.429 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 15:42:43.430 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:42:43.430 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.4643ms
2024-04-22 15:42:43.430 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:42:43.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:42:43.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:42:43.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 15:42:43.433 +08:00 [DBG] =========Yi-SQL耗时1.6257毫秒=====
2024-04-22 15:42:43.521 +08:00 [DBG] =========Yi-SQL耗时67.904毫秒=====
2024-04-22 15:42:43.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 15:42:43.525 +08:00 [DBG] =========Yi-SQL耗时1.4809毫秒=====
2024-04-22 15:42:43.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:42:43.531 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:42:43.531 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 101.669ms
2024-04-22 15:42:43.531 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:42:43.545 +08:00 [DBG] =========Yi-SQL耗时14.6694毫秒=====
2024-04-22 15:42:43.546 +08:00 [DBG] =========Yi-SQL耗时115.6121毫秒=====
2024-04-22 15:42:43.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 15:42:43.550 +08:00 [DBG] =========Yi-SQL耗时1.7068毫秒=====
2024-04-22 15:42:43.551 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:42:43.552 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 122.1364ms
2024-04-22 15:42:43.552 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:42:43.555 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:42:43.556 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 126.1241ms
2024-04-22 15:42:43.556 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:44:23.451 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:44:23.452 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:44:24.868 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:44:24.872 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:44:24.872 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:44:24.878 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:24.878 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:24.882 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:44:24.883 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.8565ms
2024-04-22 15:44:24.883 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:24.913 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:44:24.915 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:44:24.927 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:24.927 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:24.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:44:24.932 +08:00 [DBG] =========Yi-SQL耗时2.4648毫秒=====
2024-04-22 15:44:24.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:44:24.934 +08:00 [DBG] =========Yi-SQL耗时1.0833毫秒=====
2024-04-22 15:44:24.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:44:24.936 +08:00 [DBG] =========Yi-SQL耗时1.1324毫秒=====
2024-04-22 15:44:24.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:44:24.939 +08:00 [DBG] =========Yi-SQL耗时0.9805毫秒=====
2024-04-22 15:44:24.940 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:44:24.940 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 12.7488ms
2024-04-22 15:44:24.940 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:24.960 +08:00 [INF] 2024/4/22 15:44:24：cc,0c_2-aF6a52fo2YwbXoFdw连接服务端success，当前已连接0个
2024-04-22 15:44:25.104 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:25.104 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:25.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:44:25.109 +08:00 [DBG] =========Yi-SQL耗时1.9095毫秒=====
2024-04-22 15:44:25.111 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:44:25.111 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.9099ms
2024-04-22 15:44:25.111 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:25.179 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:25.180 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:25.184 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:25.185 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:25.185 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:25.185 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:25.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:44:25.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:44:25.187 +08:00 [DBG] =========Yi-SQL耗时1.2075毫秒=====
2024-04-22 15:44:25.187 +08:00 [DBG] =========Yi-SQL耗时1.161毫秒=====
2024-04-22 15:44:25.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:44:25.193 +08:00 [DBG] =========Yi-SQL耗时4.2635毫秒=====
2024-04-22 15:44:25.195 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:44:25.195 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:44:25.195 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.8014ms
2024-04-22 15:44:25.195 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:25.195 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 15.5407ms
2024-04-22 15:44:25.195 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:25.206 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:44:25.206 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 21.1213ms
2024-04-22 15:44:25.206 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:30.468 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:44:30.470 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:44:31.017 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:44:31.018 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:44:31.018 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:44:31.023 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.024 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:31.028 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:44:31.028 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.5983ms
2024-04-22 15:44:31.028 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.040 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:44:31.041 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:44:31.041 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.041 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:31.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:44:31.045 +08:00 [DBG] =========Yi-SQL耗时0.8958毫秒=====
2024-04-22 15:44:31.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:44:31.047 +08:00 [DBG] =========Yi-SQL耗时0.3626毫秒=====
2024-04-22 15:44:31.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:44:31.048 +08:00 [DBG] =========Yi-SQL耗时0.6859毫秒=====
2024-04-22 15:44:31.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:44:31.049 +08:00 [DBG] =========Yi-SQL耗时0.4601毫秒=====
2024-04-22 15:44:31.049 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:44:31.049 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 8.2662ms
2024-04-22 15:44:31.049 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.065 +08:00 [INF] 2024/4/22 15:44:31：cc,xSvhqzjbf7IIStjOKohayg连接服务端success，当前已连接0个
2024-04-22 15:44:31.126 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.126 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:31.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:44:31.128 +08:00 [DBG] =========Yi-SQL耗时0.9272毫秒=====
2024-04-22 15:44:31.130 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:44:31.130 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.3984ms
2024-04-22 15:44:31.130 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.266 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.266 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:31.266 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.266 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.266 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:31.266 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 15:44:31.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:44:31.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:44:31.268 +08:00 [DBG] =========Yi-SQL耗时0.9696毫秒=====
2024-04-22 15:44:31.269 +08:00 [DBG] =========Yi-SQL耗时1.909毫秒=====
2024-04-22 15:44:31.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 15:44:31.271 +08:00 [DBG] =========Yi-SQL耗时1.5599毫秒=====
2024-04-22 15:44:31.275 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:44:31.275 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.01ms
2024-04-22 15:44:31.275 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.276 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:44:31.276 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.3747ms
2024-04-22 15:44:31.276 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:44:31.283 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:44:31.284 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 17.4617ms
2024-04-22 15:44:31.284 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:45:00.367 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:00.367 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:45:00.368 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:45:00.368 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:45:00.368 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:45:00.368 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:00.369 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:45:00.369 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.985ms
2024-04-22 15:45:00.369 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:00.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:45:00.376 +08:00 [DBG] =========Yi-SQL耗时5.6124毫秒=====
2024-04-22 15:45:00.379 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:00.380 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 15:45:00.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 15:45:00.381 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:45:00.381 +08:00 [DBG] =========Yi-SQL耗时0.7935毫秒=====
2024-04-22 15:45:00.381 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.7118ms
2024-04-22 15:45:00.384 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:45:00.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 15:45:00.388 +08:00 [DBG] =========Yi-SQL耗时2.9737毫秒=====
2024-04-22 15:45:00.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:45:00.391 +08:00 [DBG] =========Yi-SQL耗时0.8391毫秒=====
2024-04-22 15:45:00.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 15:45:00.394 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:45:00.394 +08:00 [DBG] =========Yi-SQL耗时0.9882毫秒=====
2024-04-22 15:45:00.394 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 25.3165ms
2024-04-22 15:45:00.394 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:00.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:45:00.395 +08:00 [DBG] =========Yi-SQL耗时0.684毫秒=====
2024-04-22 15:45:00.397 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:45:00.397 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 17.2454ms
2024-04-22 15:45:00.397 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:16.057 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:16.057 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:45:16.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')  
===============================

2024-04-22 15:45:16.060 +08:00 [DBG] =========Yi-SQL耗时0.8957毫秒=====
2024-04-22 15:45:16.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')    LIMIT 10 offset 0
===============================

2024-04-22 15:45:16.064 +08:00 [DBG] =========Yi-SQL耗时0.6271毫秒=====
2024-04-22 15:45:16.065 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:45:16.065 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.7509ms
2024-04-22 15:45:16.065 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:17.119 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:17.120 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:45:17.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'8e47d602-45b1-4fc7-897d-6b0c983ee5bd')  
===============================

2024-04-22 15:45:17.122 +08:00 [DBG] =========Yi-SQL耗时0.9474毫秒=====
2024-04-22 15:45:17.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'8e47d602-45b1-4fc7-897d-6b0c983ee5bd')    LIMIT 10 offset 0
===============================

2024-04-22 15:45:17.125 +08:00 [DBG] =========Yi-SQL耗时1.1192毫秒=====
2024-04-22 15:45:17.127 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:45:17.127 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.504ms
2024-04-22 15:45:17.127 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:17.959 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:17.959 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:45:17.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')  
===============================

2024-04-22 15:45:17.961 +08:00 [DBG] =========Yi-SQL耗时0.8203毫秒=====
2024-04-22 15:45:17.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')    LIMIT 10 offset 0
===============================

2024-04-22 15:45:17.965 +08:00 [DBG] =========Yi-SQL耗时0.9508毫秒=====
2024-04-22 15:45:17.966 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:45:17.966 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.4285ms
2024-04-22 15:45:17.966 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:18.623 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:18.623 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:45:18.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'42eb28c9-6606-4309-8f60-ccc64b405840')  
===============================

2024-04-22 15:45:18.626 +08:00 [DBG] =========Yi-SQL耗时0.7784毫秒=====
2024-04-22 15:45:18.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'42eb28c9-6606-4309-8f60-ccc64b405840')    LIMIT 10 offset 0
===============================

2024-04-22 15:45:18.629 +08:00 [DBG] =========Yi-SQL耗时1.2207毫秒=====
2024-04-22 15:45:18.631 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:45:18.631 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.7275ms
2024-04-22 15:45:18.631 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:19.367 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:45:19.367 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:45:19.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'b8d384ca-a781-4673-b016-ee5b288ab316')  
===============================

2024-04-22 15:45:19.370 +08:00 [DBG] =========Yi-SQL耗时1.0795毫秒=====
2024-04-22 15:45:19.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'b8d384ca-a781-4673-b016-ee5b288ab316')    LIMIT 10 offset 0
===============================

2024-04-22 15:45:19.373 +08:00 [DBG] =========Yi-SQL耗时1.253毫秒=====
2024-04-22 15:45:19.375 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:45:19.375 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 8.1833ms
2024-04-22 15:45:19.375 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:47:29.453 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:47:29.453 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:47:29.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:47:29.517 +08:00 [DBG] =========Yi-SQL耗时61.7651毫秒=====
2024-04-22 15:47:29.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:47:29.518 +08:00 [DBG] =========Yi-SQL耗时0.4694毫秒=====
2024-04-22 15:47:29.521 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:47:29.522 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 68.7268ms
2024-04-22 15:47:29.522 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:47:46.964 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:47:46.966 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:47:46.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:47:46.982 +08:00 [DBG] =========Yi-SQL耗时5.4518毫秒=====
2024-04-22 15:47:46.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:47:46.991 +08:00 [DBG] =========Yi-SQL耗时4.8949毫秒=====
2024-04-22 15:47:46.995 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:47:46.997 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 30.5625ms
2024-04-22 15:47:46.997 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:49:02.544 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:02.545 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:02.545 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:02.545 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:02.545 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:02.545 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:02.546 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:02.546 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.8145ms
2024-04-22 15:49:02.546 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:02.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:49:02.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 15:49:02.549 +08:00 [DBG] =========Yi-SQL耗时2.3545毫秒=====
2024-04-22 15:49:02.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 15:49:02.552 +08:00 [DBG] =========Yi-SQL耗时0.5603毫秒=====
2024-04-22 15:49:02.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:49:02.553 +08:00 [DBG] =========Yi-SQL耗时0.7337毫秒=====
2024-04-22 15:49:02.556 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:02.556 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 11.5283ms
2024-04-22 15:49:02.556 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:02.607 +08:00 [DBG] =========Yi-SQL耗时59.9193毫秒=====
2024-04-22 15:49:02.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 15:49:02.609 +08:00 [DBG] =========Yi-SQL耗时1.074毫秒=====
2024-04-22 15:49:02.611 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:02.611 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 66.6001ms
2024-04-22 15:49:02.612 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:05.018 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:05.018 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:05.018 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:05.019 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.4373ms
2024-04-22 15:49:05.019 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:05.065 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:05.065 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:05.065 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:05.066 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:05.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 15:49:05.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:49:05.069 +08:00 [DBG] =========Yi-SQL耗时1.1854毫秒=====
2024-04-22 15:49:05.069 +08:00 [DBG] =========Yi-SQL耗时1.3389毫秒=====
2024-04-22 15:49:05.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 15:49:05.084 +08:00 [DBG] =========Yi-SQL耗时2.6481毫秒=====
2024-04-22 15:49:05.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 15:49:05.086 +08:00 [DBG] =========Yi-SQL耗时1.2461毫秒=====
2024-04-22 15:49:05.088 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:05.089 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 22.5414ms
2024-04-22 15:49:05.089 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:05.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:49:05.092 +08:00 [DBG] =========Yi-SQL耗时2.2473毫秒=====
2024-04-22 15:49:05.096 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:05.097 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 31.56ms
2024-04-22 15:49:05.097 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:06.536 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:49:06.536 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:49:06.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:49:06.540 +08:00 [DBG] =========Yi-SQL耗时1.3857毫秒=====
2024-04-22 15:49:06.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:49:06.543 +08:00 [DBG] =========Yi-SQL耗时0.5087毫秒=====
2024-04-22 15:49:06.544 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:06.544 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 7.9995ms
2024-04-22 15:49:06.544 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:49:07.945 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:07.945 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:07.945 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:07.946 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:07.946 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:07.946 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:07.946 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:07.946 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.5048ms
2024-04-22 15:49:07.946 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:07.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:49:07.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 15:49:07.948 +08:00 [DBG] =========Yi-SQL耗时0.6541毫秒=====
2024-04-22 15:49:07.948 +08:00 [DBG] =========Yi-SQL耗时1.2毫秒=====
2024-04-22 15:49:07.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 15:49:07.951 +08:00 [DBG] =========Yi-SQL耗时1.1541毫秒=====
2024-04-22 15:49:07.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 15:49:07.953 +08:00 [DBG] =========Yi-SQL耗时1.3366毫秒=====
2024-04-22 15:49:07.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:49:07.961 +08:00 [DBG] =========Yi-SQL耗时0.7033毫秒=====
2024-04-22 15:49:07.961 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:07.961 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 15.8571ms
2024-04-22 15:49:07.961 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:07.962 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:07.962 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 16.7775ms
2024-04-22 15:49:07.962 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:08.721 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:08.722 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:08.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')  
===============================

2024-04-22 15:49:08.725 +08:00 [DBG] =========Yi-SQL耗时1.2134毫秒=====
2024-04-22 15:49:08.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')    LIMIT 10 offset 0
===============================

2024-04-22 15:49:08.728 +08:00 [DBG] =========Yi-SQL耗时0.9231毫秒=====
2024-04-22 15:49:08.730 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:08.730 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 8.0765ms
2024-04-22 15:49:08.730 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:09.522 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:09.522 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:09.523 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'8e47d602-45b1-4fc7-897d-6b0c983ee5bd')  
===============================

2024-04-22 15:49:09.524 +08:00 [DBG] =========Yi-SQL耗时0.7762毫秒=====
2024-04-22 15:49:09.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'8e47d602-45b1-4fc7-897d-6b0c983ee5bd')    LIMIT 10 offset 0
===============================

2024-04-22 15:49:09.528 +08:00 [DBG] =========Yi-SQL耗时1.2692毫秒=====
2024-04-22 15:49:09.529 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:09.529 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.2575ms
2024-04-22 15:49:09.529 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:10.144 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:10.144 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:10.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'42eb28c9-6606-4309-8f60-ccc64b405840')  
===============================

2024-04-22 15:49:10.146 +08:00 [DBG] =========Yi-SQL耗时0.6814毫秒=====
2024-04-22 15:49:10.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'42eb28c9-6606-4309-8f60-ccc64b405840')    LIMIT 10 offset 0
===============================

2024-04-22 15:49:10.149 +08:00 [DBG] =========Yi-SQL耗时1.0034毫秒=====
2024-04-22 15:49:10.151 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:10.151 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.7171ms
2024-04-22 15:49:10.151 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:10.693 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:10.694 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:10.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c')  
===============================

2024-04-22 15:49:10.695 +08:00 [DBG] =========Yi-SQL耗时0.5935毫秒=====
2024-04-22 15:49:10.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c')    LIMIT 10 offset 0
===============================

2024-04-22 15:49:10.698 +08:00 [DBG] =========Yi-SQL耗时1.0835毫秒=====
2024-04-22 15:49:10.700 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:10.700 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.4432ms
2024-04-22 15:49:10.700 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:11.160 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:11.160 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:11.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'b8d384ca-a781-4673-b016-ee5b288ab316')  
===============================

2024-04-22 15:49:11.162 +08:00 [DBG] =========Yi-SQL耗时0.7707毫秒=====
2024-04-22 15:49:11.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'b8d384ca-a781-4673-b016-ee5b288ab316')    LIMIT 10 offset 0
===============================

2024-04-22 15:49:11.166 +08:00 [DBG] =========Yi-SQL耗时1.0336毫秒=====
2024-04-22 15:49:11.167 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:11.168 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.6034ms
2024-04-22 15:49:11.168 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:11.567 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:11.568 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:49:11.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'a90d9bad-299d-4b83-bae7-8e9e04ccc55d')  
===============================

2024-04-22 15:49:11.570 +08:00 [DBG] =========Yi-SQL耗时0.7979毫秒=====
2024-04-22 15:49:11.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'a90d9bad-299d-4b83-bae7-8e9e04ccc55d')    LIMIT 10 offset 0
===============================

2024-04-22 15:49:11.573 +08:00 [DBG] =========Yi-SQL耗时1.3459毫秒=====
2024-04-22 15:49:11.575 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:11.575 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.6063ms
2024-04-22 15:49:11.575 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:49:53.086 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:49:53.094 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:49:53.704 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:49:53.705 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:49:53.706 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:49:53.720 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:49:53.720 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:49:53.725 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:49:53.725 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:49:53.726 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.1989ms
2024-04-22 15:49:53.726 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:49:53.727 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:49:53.733 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:49:53.734 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:49:53.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:49:53.736 +08:00 [DBG] =========Yi-SQL耗时1.5544毫秒=====
2024-04-22 15:49:53.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:49:53.739 +08:00 [DBG] =========Yi-SQL耗时1.7074毫秒=====
2024-04-22 15:49:53.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:49:53.743 +08:00 [DBG] =========Yi-SQL耗时2.8083毫秒=====
2024-04-22 15:49:53.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:49:53.745 +08:00 [DBG] =========Yi-SQL耗时1.1433毫秒=====
2024-04-22 15:49:53.746 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:49:53.746 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 12.3527ms
2024-04-22 15:49:53.746 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:49:53.763 +08:00 [INF] 2024/4/22 15:49:53：cc,zibrgsmqcAT8aVqNwx2nwg连接服务端success，当前已连接0个
2024-04-22 15:50:12.441 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:50:12.442 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:50:12.708 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:50:12.712 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:50:12.712 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:50:12.755 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:50:12.755 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:50:12.758 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:50:12.759 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.3423ms
2024-04-22 15:50:12.759 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:50:12.836 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:50:12.837 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:50:12.837 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:50:12.837 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:50:12.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:50:12.862 +08:00 [DBG] =========Yi-SQL耗时1.7663毫秒=====
2024-04-22 15:50:12.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:50:12.879 +08:00 [DBG] =========Yi-SQL耗时1.3292毫秒=====
2024-04-22 15:50:12.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:50:12.881 +08:00 [DBG] =========Yi-SQL耗时0.7503毫秒=====
2024-04-22 15:50:12.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:50:12.884 +08:00 [DBG] =========Yi-SQL耗时1.5239毫秒=====
2024-04-22 15:50:12.885 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:50:12.886 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 48.2262ms
2024-04-22 15:50:12.886 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:50:12.912 +08:00 [INF] 2024/4/22 15:50:12：cc,bFKOKsoFWV-c6jRcm7PsLQ连接服务端success，当前已连接0个
2024-04-22 15:51:02.362 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:51:02.362 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:51:03.176 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:51:03.182 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:51:03.182 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:03.182 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:51:03.182 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:51:03.193 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:51:03.193 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 11.0725ms
2024-04-22 15:51:03.193 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:03.200 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:51:03.203 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:51:03.244 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:03.245 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:51:03.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:51:03.249 +08:00 [DBG] =========Yi-SQL耗时2.7056毫秒=====
2024-04-22 15:51:03.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:51:03.251 +08:00 [DBG] =========Yi-SQL耗时0.8505毫秒=====
2024-04-22 15:51:03.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:51:03.253 +08:00 [DBG] =========Yi-SQL耗时0.9692毫秒=====
2024-04-22 15:51:03.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:51:03.256 +08:00 [DBG] =========Yi-SQL耗时1.0235毫秒=====
2024-04-22 15:51:03.257 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:03.258 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 13.3265ms
2024-04-22 15:51:03.258 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:03.279 +08:00 [INF] 2024/4/22 15:51:03：cc,SklI1racXcXRPPXz0O7P_Q连接服务端success，当前已连接0个
2024-04-22 15:51:03.616 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:03.617 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:51:03.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:51:03.622 +08:00 [DBG] =========Yi-SQL耗时3.4172毫秒=====
2024-04-22 15:51:03.625 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:51:03.626 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.6813ms
2024-04-22 15:51:03.626 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:03.646 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:03.646 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:51:03.651 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:03.651 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:51:03.652 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:03.652 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:51:03.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:51:03.652 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:03.652 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 1.0116ms
2024-04-22 15:51:03.652 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:03.656 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:03.657 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:51:03.658 +08:00 [DBG] =========Yi-SQL耗时6.108毫秒=====
2024-04-22 15:51:03.660 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:03.660 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 14.2397ms
2024-04-22 15:51:03.660 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:03.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 15:51:03.667 +08:00 [DBG] =========Yi-SQL耗时5.8477毫秒=====
2024-04-22 15:51:03.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 15:51:03.718 +08:00 [DBG] =========Yi-SQL耗时3.6869毫秒=====
2024-04-22 15:51:03.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:51:03.722 +08:00 [DBG] =========Yi-SQL耗时1.9487毫秒=====
2024-04-22 15:51:03.724 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:03.724 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 66.8659ms
2024-04-22 15:51:03.724 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:03.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:51:03.726 +08:00 [DBG] =========Yi-SQL耗时1.9643毫秒=====
2024-04-22 15:51:03.733 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:03.733 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 81.0356ms
2024-04-22 15:51:03.733 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:06.709 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:06.709 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:51:06.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'64ae3107-a5ca-e86a-c7d7-3a119a976115')  
===============================

2024-04-22 15:51:06.711 +08:00 [DBG] =========Yi-SQL耗时0.7749毫秒=====
2024-04-22 15:51:06.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'64ae3107-a5ca-e86a-c7d7-3a119a976115')    LIMIT 10 offset 0
===============================

2024-04-22 15:51:06.714 +08:00 [DBG] =========Yi-SQL耗时1.0321毫秒=====
2024-04-22 15:51:06.715 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:06.715 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.0803ms
2024-04-22 15:51:06.715 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:07.514 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:07.514 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:51:07.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'2d4897b0-1479-7981-f538-3a119a976116')  
===============================

2024-04-22 15:51:07.516 +08:00 [DBG] =========Yi-SQL耗时0.6289毫秒=====
2024-04-22 15:51:07.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'2d4897b0-1479-7981-f538-3a119a976116')    LIMIT 10 offset 0
===============================

2024-04-22 15:51:07.519 +08:00 [DBG] =========Yi-SQL耗时0.8528毫秒=====
2024-04-22 15:51:07.520 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:07.520 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 5.4397ms
2024-04-22 15:51:07.520 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:08.098 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:08.099 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:51:08.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'632e519d-349c-2894-400c-3a119a976116')  
===============================

2024-04-22 15:51:08.100 +08:00 [DBG] =========Yi-SQL耗时0.6971毫秒=====
2024-04-22 15:51:08.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'632e519d-349c-2894-400c-3a119a976116')    LIMIT 10 offset 0
===============================

2024-04-22 15:51:08.103 +08:00 [DBG] =========Yi-SQL耗时0.8971毫秒=====
2024-04-22 15:51:08.104 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:08.104 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 5.6153ms
2024-04-22 15:51:08.104 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:08.475 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:08.475 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:51:08.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'f4cba9d0-b072-4d63-c5b0-3a119a976117')  
===============================

2024-04-22 15:51:08.477 +08:00 [DBG] =========Yi-SQL耗时0.643毫秒=====
2024-04-22 15:51:08.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'f4cba9d0-b072-4d63-c5b0-3a119a976117')    LIMIT 10 offset 0
===============================

2024-04-22 15:51:08.479 +08:00 [DBG] =========Yi-SQL耗时0.8605毫秒=====
2024-04-22 15:51:08.480 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:08.480 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 5.5526ms
2024-04-22 15:51:08.480 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:09.059 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:09.059 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:51:09.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'64ae3107-a5ca-e86a-c7d7-3a119a976115')  
===============================

2024-04-22 15:51:09.061 +08:00 [DBG] =========Yi-SQL耗时0.6483毫秒=====
2024-04-22 15:51:09.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'64ae3107-a5ca-e86a-c7d7-3a119a976115')    LIMIT 10 offset 0
===============================

2024-04-22 15:51:09.063 +08:00 [DBG] =========Yi-SQL耗时0.9745毫秒=====
2024-04-22 15:51:09.064 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:09.064 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 5.4044ms
2024-04-22 15:51:09.064 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:13.400 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:51:13.401 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:51:13.707 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:51:13.709 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:51:13.709 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:51:13.716 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:13.716 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:51:13.719 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:51:13.720 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.2684ms
2024-04-22 15:51:13.720 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:13.752 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:13.752 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:51:13.754 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:51:13.755 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:51:13.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:51:13.760 +08:00 [DBG] =========Yi-SQL耗时1.0843毫秒=====
2024-04-22 15:51:13.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:51:13.763 +08:00 [DBG] =========Yi-SQL耗时0.9551毫秒=====
2024-04-22 15:51:13.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:51:13.765 +08:00 [DBG] =========Yi-SQL耗时0.5573毫秒=====
2024-04-22 15:51:13.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:51:13.766 +08:00 [DBG] =========Yi-SQL耗时0.8113毫秒=====
2024-04-22 15:51:13.767 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:13.767 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 14.7535ms
2024-04-22 15:51:13.767 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:13.794 +08:00 [INF] 2024/4/22 15:51:13：cc,puiaX19u0qXx0Dy8rmGfkA连接服务端success，当前已连接0个
2024-04-22 15:51:13.896 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:13.896 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:51:13.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:51:13.899 +08:00 [DBG] =========Yi-SQL耗时1.6065毫秒=====
2024-04-22 15:51:13.902 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:51:13.902 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.0301ms
2024-04-22 15:51:13.902 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:14.067 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:14.067 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:51:14.067 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:14.067 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:14.067 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:51:14.067 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:51:14.068 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:14.068 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.5889ms
2024-04-22 15:51:14.068 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:14.069 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:51:14.164 +08:00 [DBG] =========Yi-SQL耗时95.1439毫秒=====
2024-04-22 15:51:14.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 15:51:14.165 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:14.165 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:51:14.166 +08:00 [DBG] =========Yi-SQL耗时1.0162毫秒=====
2024-04-22 15:51:14.166 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:14.166 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 99.0742ms
2024-04-22 15:51:14.166 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:14.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 15:51:14.168 +08:00 [DBG] =========Yi-SQL耗时1.4866毫秒=====
2024-04-22 15:51:14.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:51:14.180 +08:00 [DBG] =========Yi-SQL耗时10.4805毫秒=====
2024-04-22 15:51:14.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:51:14.186 +08:00 [DBG] =========Yi-SQL耗时2.9634毫秒=====
2024-04-22 15:51:14.191 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:14.193 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 125.6976ms
2024-04-22 15:51:14.193 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:14.210 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:14.211 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 45.9772ms
2024-04-22 15:51:14.211 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:51:54.887 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:51:54.888 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 15:51:54.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:51:54.892 +08:00 [DBG] =========Yi-SQL耗时1.9911毫秒=====
2024-04-22 15:51:54.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 15:51:54.928 +08:00 [DBG] =========Yi-SQL耗时1.0639毫秒=====
2024-04-22 15:51:54.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 15:51:54.933 +08:00 [DBG] =========Yi-SQL耗时0.7679毫秒=====
2024-04-22 15:51:54.936 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:51:54.937 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 48.8402ms
2024-04-22 15:51:54.937 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:52:22.261 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:22.262 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:52:22.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:52:22.264 +08:00 [DBG] =========Yi-SQL耗时0.7581毫秒=====
2024-04-22 15:52:22.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:52:22.272 +08:00 [DBG] =========Yi-SQL耗时0.7422毫秒=====
2024-04-22 15:52:22.274 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:52:22.274 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 12.2349ms
2024-04-22 15:52:22.274 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:25.285 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:52:25.285 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:52:26.105 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:52:26.107 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:52:26.108 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:52:26.125 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:26.126 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:52:26.129 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:52:26.130 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.8256ms
2024-04-22 15:52:26.130 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:26.131 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:52:26.133 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:52:26.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:26.148 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:52:26.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:52:26.164 +08:00 [DBG] =========Yi-SQL耗时10.5632毫秒=====
2024-04-22 15:52:26.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:52:26.171 +08:00 [DBG] =========Yi-SQL耗时1.8994毫秒=====
2024-04-22 15:52:26.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:52:26.174 +08:00 [DBG] =========Yi-SQL耗时1.3926毫秒=====
2024-04-22 15:52:26.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:52:26.177 +08:00 [DBG] =========Yi-SQL耗时2.0055毫秒=====
2024-04-22 15:52:26.179 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:52:26.179 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 31.0276ms
2024-04-22 15:52:26.179 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:26.253 +08:00 [INF] 2024/4/22 15:52:26：cc,hNx-z3tPvpDcYegXebBQag连接服务端success，当前已连接0个
2024-04-22 15:52:26.390 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:26.391 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:52:26.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:52:26.407 +08:00 [DBG] =========Yi-SQL耗时13.57毫秒=====
2024-04-22 15:52:26.409 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:52:26.409 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 18.1687ms
2024-04-22 15:52:26.411 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:26.589 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:26.610 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:52:26.610 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:52:26.610 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:52:26.610 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:26.611 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:52:26.611 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:52:26.611 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.6557ms
2024-04-22 15:52:26.611 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 15:52:26.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:52:26.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:52:26.589 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:52:26.629 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:52:26.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 15:52:26.697 +08:00 [DBG] =========Yi-SQL耗时74.6098毫秒=====
2024-04-22 15:52:26.702 +08:00 [DBG] =========Yi-SQL耗时78.8266毫秒=====
2024-04-22 15:52:26.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:52:26.717 +08:00 [DBG] =========Yi-SQL耗时14.042毫秒=====
2024-04-22 15:52:26.719 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:52:26.720 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 109.0594ms
2024-04-22 15:52:26.720 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:26.724 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:52:26.728 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 117.9715ms
2024-04-22 15:52:26.728 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:52:26.787 +08:00 [DBG] =========Yi-SQL耗时155.3198毫秒=====
2024-04-22 15:52:26.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 15:52:26.790 +08:00 [DBG] =========Yi-SQL耗时1.4914毫秒=====
2024-04-22 15:52:26.796 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:52:26.797 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 168.3002ms
2024-04-22 15:52:26.797 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:14.447 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:14.447 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:14.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'cddc7310-1736-e93f-ed43-3a119a976121')  
===============================

2024-04-22 15:53:14.449 +08:00 [DBG] =========Yi-SQL耗时1.3832毫秒=====
2024-04-22 15:53:14.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'cddc7310-1736-e93f-ed43-3a119a976121')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:14.456 +08:00 [DBG] =========Yi-SQL耗时1.4355毫秒=====
2024-04-22 15:53:14.457 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:14.457 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 10.4347ms
2024-04-22 15:53:14.457 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:15.351 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:15.351 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:15.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'81e1d450-d124-3a4f-d19d-3a119a976122')  
===============================

2024-04-22 15:53:15.353 +08:00 [DBG] =========Yi-SQL耗时0.7323毫秒=====
2024-04-22 15:53:15.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'81e1d450-d124-3a4f-d19d-3a119a976122')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:15.356 +08:00 [DBG] =========Yi-SQL耗时1.1262毫秒=====
2024-04-22 15:53:15.358 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:15.364 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 11.1671ms
2024-04-22 15:53:15.364 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:15.982 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:15.982 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:15.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'5afc7291-7fa4-d81e-a0cc-3a119a976122')  
===============================

2024-04-22 15:53:15.984 +08:00 [DBG] =========Yi-SQL耗时0.6679毫秒=====
2024-04-22 15:53:15.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'5afc7291-7fa4-d81e-a0cc-3a119a976122')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:15.987 +08:00 [DBG] =========Yi-SQL耗时1.2536毫秒=====
2024-04-22 15:53:15.988 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:15.988 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 5.8621ms
2024-04-22 15:53:15.988 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:19.687 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:19.687 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:19.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'c2d8b5e7-8b5c-bec4-054e-3a119a97615f')  
===============================

2024-04-22 15:53:19.689 +08:00 [DBG] =========Yi-SQL耗时0.8272毫秒=====
2024-04-22 15:53:19.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'c2d8b5e7-8b5c-bec4-054e-3a119a97615f')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:19.692 +08:00 [DBG] =========Yi-SQL耗时0.8682毫秒=====
2024-04-22 15:53:19.693 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:19.693 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.4935ms
2024-04-22 15:53:19.693 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:20.094 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:20.094 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:20.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'3b618072-a36a-dcc8-c0f3-3a119a976122')  
===============================

2024-04-22 15:53:20.096 +08:00 [DBG] =========Yi-SQL耗时0.7143毫秒=====
2024-04-22 15:53:20.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'3b618072-a36a-dcc8-c0f3-3a119a976122')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:20.099 +08:00 [DBG] =========Yi-SQL耗时0.5727毫秒=====
2024-04-22 15:53:20.103 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:20.103 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 8.5487ms
2024-04-22 15:53:20.103 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:20.421 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:20.421 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:20.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'8a6b5ab4-fcf9-b0de-de15-3a119a976122')  
===============================

2024-04-22 15:53:20.424 +08:00 [DBG] =========Yi-SQL耗时1.2178毫秒=====
2024-04-22 15:53:20.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'8a6b5ab4-fcf9-b0de-de15-3a119a976122')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:20.429 +08:00 [DBG] =========Yi-SQL耗时2.6401毫秒=====
2024-04-22 15:53:20.430 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:20.431 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 9.4433ms
2024-04-22 15:53:20.431 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:20.735 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:20.735 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:20.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'3466d26c-525a-d4bf-d7bd-3a119a976122')  
===============================

2024-04-22 15:53:20.737 +08:00 [DBG] =========Yi-SQL耗时0.9657毫秒=====
2024-04-22 15:53:20.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'3466d26c-525a-d4bf-d7bd-3a119a976122')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:20.740 +08:00 [DBG] =========Yi-SQL耗时0.6573毫秒=====
2024-04-22 15:53:20.741 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:20.741 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.0172ms
2024-04-22 15:53:20.741 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:21.110 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:21.110 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:21.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'773f803e-4058-61d3-f7cf-3a119a976122')  
===============================

2024-04-22 15:53:21.112 +08:00 [DBG] =========Yi-SQL耗时0.6713毫秒=====
2024-04-22 15:53:21.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'773f803e-4058-61d3-f7cf-3a119a976122')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:21.115 +08:00 [DBG] =========Yi-SQL耗时1.0378毫秒=====
2024-04-22 15:53:21.116 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:21.116 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.5273ms
2024-04-22 15:53:21.116 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:21.496 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:21.496 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:21.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'5afc7291-7fa4-d81e-a0cc-3a119a976122')  
===============================

2024-04-22 15:53:21.499 +08:00 [DBG] =========Yi-SQL耗时0.712毫秒=====
2024-04-22 15:53:21.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'5afc7291-7fa4-d81e-a0cc-3a119a976122')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:21.501 +08:00 [DBG] =========Yi-SQL耗时0.8966毫秒=====
2024-04-22 15:53:21.502 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:21.502 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 5.6195ms
2024-04-22 15:53:21.502 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:21.806 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:21.806 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:21.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'cddc7310-1736-e93f-ed43-3a119a976121')  
===============================

2024-04-22 15:53:21.810 +08:00 [DBG] =========Yi-SQL耗时0.8181毫秒=====
2024-04-22 15:53:21.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'cddc7310-1736-e93f-ed43-3a119a976121')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:21.812 +08:00 [DBG] =========Yi-SQL耗时0.8634毫秒=====
2024-04-22 15:53:21.812 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:21.812 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 5.9311ms
2024-04-22 15:53:21.812 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:22.718 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:53:22.718 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 15:53:22.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'81e1d450-d124-3a4f-d19d-3a119a976122')  
===============================

2024-04-22 15:53:22.720 +08:00 [DBG] =========Yi-SQL耗时0.6945毫秒=====
2024-04-22 15:53:22.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'81e1d450-d124-3a4f-d19d-3a119a976122')    LIMIT 10 offset 0
===============================

2024-04-22 15:53:22.723 +08:00 [DBG] =========Yi-SQL耗时0.9596毫秒=====
2024-04-22 15:53:22.724 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:53:22.724 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 5.6398ms
2024-04-22 15:53:22.724 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 15:54:12.625 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:54:12.627 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:54:13.275 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:54:13.279 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:54:13.279 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:54:13.284 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:54:13.285 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:54:13.288 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:54:13.288 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.1532ms
2024-04-22 15:54:13.288 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:54:13.313 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:54:13.313 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:54:13.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:54:13.316 +08:00 [DBG] =========Yi-SQL耗时1.3394毫秒=====
2024-04-22 15:54:13.316 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:54:13.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:54:13.323 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:54:13.324 +08:00 [DBG] =========Yi-SQL耗时0.9206毫秒=====
2024-04-22 15:54:13.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:54:13.328 +08:00 [DBG] =========Yi-SQL耗时1.2231毫秒=====
2024-04-22 15:54:13.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:54:13.387 +08:00 [DBG] =========Yi-SQL耗时57.8544毫秒=====
2024-04-22 15:54:13.428 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:54:13.429 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 115.9215ms
2024-04-22 15:54:13.429 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:54:13.487 +08:00 [INF] 2024/4/22 15:54:13：cc,-JXj_47zgU4o7DwCYIFBtQ连接服务端success，当前已连接0个
2024-04-22 15:55:43.206 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:55:43.206 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:55:43.466 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:55:43.468 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:55:43.468 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:55:43.474 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:55:43.474 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:55:43.478 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:55:43.478 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.5046ms
2024-04-22 15:55:43.479 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:55:43.533 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:55:43.533 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:55:43.536 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:55:43.538 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:55:43.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:55:43.548 +08:00 [DBG] =========Yi-SQL耗时10.0674毫秒=====
2024-04-22 15:55:43.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:55:43.560 +08:00 [DBG] =========Yi-SQL耗时1.2535毫秒=====
2024-04-22 15:55:43.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:55:43.562 +08:00 [DBG] =========Yi-SQL耗时0.8363毫秒=====
2024-04-22 15:55:43.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:55:43.607 +08:00 [DBG] =========Yi-SQL耗时2.423毫秒=====
2024-04-22 15:55:43.610 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:55:43.610 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 77.0639ms
2024-04-22 15:55:43.611 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:55:43.651 +08:00 [INF] 2024/4/22 15:55:43：cc,tXop_P2xXgSG7kzHfT9NhA连接服务端success，当前已连接0个
2024-04-22 15:56:56.671 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:56:56.677 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:56:57.509 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:56:57.510 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:56:57.510 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:56:57.516 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:56:57.517 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:56:57.521 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:56:57.521 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.1709ms
2024-04-22 15:56:57.521 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:56:57.552 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:56:57.556 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:56:57.558 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:56:57.559 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:56:57.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:56:57.571 +08:00 [DBG] =========Yi-SQL耗时2.6965毫秒=====
2024-04-22 15:56:57.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:56:57.575 +08:00 [DBG] =========Yi-SQL耗时1.6701毫秒=====
2024-04-22 15:56:57.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:56:57.611 +08:00 [DBG] =========Yi-SQL耗时0.5873毫秒=====
2024-04-22 15:56:57.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:56:57.613 +08:00 [DBG] =========Yi-SQL耗时1.2374毫秒=====
2024-04-22 15:56:57.615 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:56:57.616 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 57.2547ms
2024-04-22 15:56:57.616 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:56:57.654 +08:00 [INF] 2024/4/22 15:56:57：cc,Rrvmv10NxmggmMYx_urBfA连接服务端success，当前已连接0个
2024-04-22 15:57:08.643 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:57:08.648 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:57:09.249 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:57:09.251 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:57:09.251 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:57:09.266 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:09.267 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:09.270 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:57:09.271 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.0916ms
2024-04-22 15:57:09.271 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:09.304 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:09.304 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:09.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:57:09.308 +08:00 [DBG] =========Yi-SQL耗时1.2327毫秒=====
2024-04-22 15:57:09.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:57:09.311 +08:00 [DBG] =========Yi-SQL耗时0.8958毫秒=====
2024-04-22 15:57:09.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:57:09.314 +08:00 [DBG] =========Yi-SQL耗时1.2394毫秒=====
2024-04-22 15:57:09.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:57:09.316 +08:00 [DBG] =========Yi-SQL耗时1.0952毫秒=====
2024-04-22 15:57:09.317 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:57:09.318 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 13.9184ms
2024-04-22 15:57:09.318 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:09.326 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:57:09.330 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:57:09.384 +08:00 [INF] 2024/4/22 15:57:09：cc,M_zf57cZuQH0sJsRDAkVcw连接服务端success，当前已连接0个
2024-04-22 15:57:10.467 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:57:10.467 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:57:10.714 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:57:10.716 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:57:10.717 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:57:10.722 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:10.722 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:10.724 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:57:10.724 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.6694ms
2024-04-22 15:57:10.724 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:10.787 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:57:10.789 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:57:10.803 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:10.804 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:10.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:57:10.813 +08:00 [DBG] =========Yi-SQL耗时4.849毫秒=====
2024-04-22 15:57:10.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:57:10.816 +08:00 [DBG] =========Yi-SQL耗时1.0979毫秒=====
2024-04-22 15:57:10.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:57:10.817 +08:00 [DBG] =========Yi-SQL耗时0.5886毫秒=====
2024-04-22 15:57:10.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:57:10.819 +08:00 [DBG] =========Yi-SQL耗时0.7315毫秒=====
2024-04-22 15:57:10.820 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:57:10.820 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 15.4059ms
2024-04-22 15:57:10.820 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:10.875 +08:00 [INF] 2024/4/22 15:57:10：cc,p1mDdRcU9Luw6FGqbSmLiQ连接服务端success，当前已连接0个
2024-04-22 15:57:14.965 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:57:14.965 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:57:15.134 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:57:15.135 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:57:15.135 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:57:15.141 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:15.141 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:15.144 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:57:15.144 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.3197ms
2024-04-22 15:57:15.144 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:15.187 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:15.187 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:57:15.187 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:15.188 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:57:15.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:57:15.195 +08:00 [DBG] =========Yi-SQL耗时4.0104毫秒=====
2024-04-22 15:57:15.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:57:15.203 +08:00 [DBG] =========Yi-SQL耗时2.461毫秒=====
2024-04-22 15:57:15.204 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:57:15.205 +08:00 [DBG] =========Yi-SQL耗时0.7591毫秒=====
2024-04-22 15:57:15.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:57:15.207 +08:00 [DBG] =========Yi-SQL耗时0.8784毫秒=====
2024-04-22 15:57:15.216 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:57:15.217 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 29.7954ms
2024-04-22 15:57:15.217 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:15.264 +08:00 [INF] 2024/4/22 15:57:15：cc,4efT_Sw9x4g6XEqFrm-Y3g连接服务端success，当前已连接0个
2024-04-22 15:57:18.650 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:57:18.650 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:57:18.814 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:57:18.816 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:57:18.816 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:57:18.822 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:18.822 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:18.824 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:57:18.824 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.3887ms
2024-04-22 15:57:18.824 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:18.848 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:18.849 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:18.850 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:57:18.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:57:18.853 +08:00 [DBG] =========Yi-SQL耗时1.0383毫秒=====
2024-04-22 15:57:18.853 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:57:18.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:57:18.857 +08:00 [DBG] =========Yi-SQL耗时0.8244毫秒=====
2024-04-22 15:57:18.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:57:18.859 +08:00 [DBG] =========Yi-SQL耗时0.7685毫秒=====
2024-04-22 15:57:18.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:57:18.861 +08:00 [DBG] =========Yi-SQL耗时1.3526毫秒=====
2024-04-22 15:57:18.862 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:57:18.862 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 13.2963ms
2024-04-22 15:57:18.862 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:18.908 +08:00 [INF] 2024/4/22 15:57:18：cc,UBu9hlZJEYqqamQr3vnCpw连接服务端success，当前已连接0个
2024-04-22 15:57:19.070 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:19.071 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:19.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:57:19.074 +08:00 [DBG] =========Yi-SQL耗时1.8704毫秒=====
2024-04-22 15:57:19.112 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:57:19.113 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 41.7425ms
2024-04-22 15:57:19.114 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:22.993 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:22.993 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:22.993 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:22.993 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:57:22.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:57:22.995 +08:00 [DBG] =========Yi-SQL耗时0.6805毫秒=====
2024-04-22 15:57:22.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:57:22.996 +08:00 [DBG] =========Yi-SQL耗时1.2144毫秒=====
2024-04-22 15:57:22.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:57:23.000 +08:00 [DBG] =========Yi-SQL耗时0.9131毫秒=====
2024-04-22 15:57:23.000 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:57:23.000 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.1921ms
2024-04-22 15:57:23.000 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:57:23.002 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:57:23.002 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 9.3528ms
2024-04-22 15:57:23.002 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:58:13.977 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 15:58:13.977 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 15:58:14.702 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:58:14.703 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 15:58:14.703 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 15:58:14.710 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:58:14.711 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:58:14.730 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 15:58:14.731 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 19.7875ms
2024-04-22 15:58:14.731 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:58:14.744 +08:00 [INF] CORS policy execution successful.
2024-04-22 15:58:14.746 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 15:58:14.752 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:58:14.752 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 15:58:14.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:58:14.786 +08:00 [INF] 2024/4/22 15:58:14：cc,dpW_38MO7jo7JmgaamQNFA连接服务端success，当前已连接0个
2024-04-22 15:58:14.838 +08:00 [DBG] =========Yi-SQL耗时82.7347毫秒=====
2024-04-22 15:58:14.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 15:58:14.840 +08:00 [DBG] =========Yi-SQL耗时1.3223毫秒=====
2024-04-22 15:58:14.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 15:58:14.843 +08:00 [DBG] =========Yi-SQL耗时1.76毫秒=====
2024-04-22 15:58:14.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:58:14.851 +08:00 [DBG] =========Yi-SQL耗时6.684毫秒=====
2024-04-22 15:58:14.856 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:58:14.856 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 103.7174ms
2024-04-22 15:58:14.856 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 15:58:14.998 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:58:14.999 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 15:58:15.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 15:58:15.003 +08:00 [DBG] =========Yi-SQL耗时1.8121毫秒=====
2024-04-22 15:58:15.005 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 15:58:15.005 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.0291ms
2024-04-22 15:58:15.005 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 15:58:59.037 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 15:58:59.037 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:58:59.037 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 15:58:59.037 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 15:58:59.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:58:59.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 15:58:59.041 +08:00 [DBG] =========Yi-SQL耗时2.4738毫秒=====
2024-04-22 15:58:59.042 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:58:59.043 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.0761ms
2024-04-22 15:58:59.043 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 15:58:59.140 +08:00 [DBG] =========Yi-SQL耗时101.1896毫秒=====
2024-04-22 15:58:59.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 15:58:59.142 +08:00 [DBG] =========Yi-SQL耗时0.7178毫秒=====
2024-04-22 15:58:59.143 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 15:58:59.144 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 106.6452ms
2024-04-22 15:58:59.144 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:09.978 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:09.978 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-22 16:00:09.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:00:09.985 +08:00 [DBG] =========Yi-SQL耗时2.6145毫秒=====
2024-04-22 16:00:09.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:00:09.993 +08:00 [DBG] =========Yi-SQL耗时1.2904毫秒=====
2024-04-22 16:00:09.994 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:00:09.994 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 15.5385ms
2024-04-22 16:00:09.994 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:18.323 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:00:18.323 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:00:19.043 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:00:19.045 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:19.046 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:00:19.046 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:00:19.046 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:00:19.054 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:00:19.055 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.6905ms
2024-04-22 16:00:19.055 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:19.069 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:00:19.071 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:00:19.075 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:19.075 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:00:19.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:00:19.101 +08:00 [DBG] =========Yi-SQL耗时19.6462毫秒=====
2024-04-22 16:00:19.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:00:19.119 +08:00 [DBG] =========Yi-SQL耗时0.7189毫秒=====
2024-04-22 16:00:19.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:00:19.120 +08:00 [DBG] =========Yi-SQL耗时0.9272毫秒=====
2024-04-22 16:00:19.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:00:19.122 +08:00 [DBG] =========Yi-SQL耗时0.749毫秒=====
2024-04-22 16:00:19.123 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:00:19.123 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 48.0228ms
2024-04-22 16:00:19.123 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:19.141 +08:00 [INF] 2024/4/22 16:00:19：cc,chX6SYcbvSm6eyepZ6Q9pA连接服务端success，当前已连接0个
2024-04-22 16:00:19.256 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:19.257 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:00:19.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:00:19.260 +08:00 [DBG] =========Yi-SQL耗时1.6298毫秒=====
2024-04-22 16:00:19.262 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:00:19.262 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.2601ms
2024-04-22 16:00:19.262 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:19.394 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:19.394 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:19.395 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:00:19.395 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-22 16:00:19.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:00:19.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:00:19.398 +08:00 [DBG] =========Yi-SQL耗时1.2216毫秒=====
2024-04-22 16:00:19.400 +08:00 [DBG] =========Yi-SQL耗时3.3346毫秒=====
2024-04-22 16:00:19.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:00:19.406 +08:00 [DBG] =========Yi-SQL耗时3.8417毫秒=====
2024-04-22 16:00:19.407 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:00:19.407 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.0455ms
2024-04-22 16:00:19.407 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:19.408 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:00:19.408 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 13.4758ms
2024-04-22 16:00:19.408 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:22.954 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:22.955 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:00:22.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:00:22.961 +08:00 [DBG] =========Yi-SQL耗时2.1279毫秒=====
2024-04-22 16:00:22.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:00:22.972 +08:00 [DBG] =========Yi-SQL耗时1.3347毫秒=====
2024-04-22 16:00:22.974 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:00:22.975 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 19.6326ms
2024-04-22 16:00:22.975 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:31.281 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:31.281 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:00:31.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:00:31.287 +08:00 [DBG] =========Yi-SQL耗时0.9581毫秒=====
2024-04-22 16:00:31.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:00:31.290 +08:00 [DBG] =========Yi-SQL耗时0.5691毫秒=====
2024-04-22 16:00:31.292 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:00:31.292 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 10.4947ms
2024-04-22 16:00:31.292 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:32.398 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:32.399 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:00:32.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:00:32.404 +08:00 [DBG] =========Yi-SQL耗时1.4842毫秒=====
2024-04-22 16:00:32.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:00:32.409 +08:00 [DBG] =========Yi-SQL耗时1.9718毫秒=====
2024-04-22 16:00:32.414 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:00:32.415 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 15.6154ms
2024-04-22 16:00:32.415 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:56.957 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:00:56.957 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:00:56.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:00:56.959 +08:00 [DBG] =========Yi-SQL耗时0.7166毫秒=====
2024-04-22 16:00:56.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:00:56.962 +08:00 [DBG] =========Yi-SQL耗时1.1574毫秒=====
2024-04-22 16:00:56.964 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:00:56.964 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 6.807ms
2024-04-22 16:00:56.964 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:29.339 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:02:29.339 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:02:30.015 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:02:30.019 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:30.019 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:02:30.020 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:02:30.020 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:02:30.024 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:02:30.025 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.9237ms
2024-04-22 16:02:30.025 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:30.037 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:02:30.039 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:02:30.042 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:30.042 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:02:30.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:02:30.047 +08:00 [DBG] =========Yi-SQL耗时1.4265毫秒=====
2024-04-22 16:02:30.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:02:30.054 +08:00 [DBG] =========Yi-SQL耗时1.4837毫秒=====
2024-04-22 16:02:30.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:02:30.056 +08:00 [DBG] =========Yi-SQL耗时0.6911毫秒=====
2024-04-22 16:02:30.057 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:02:30.059 +08:00 [DBG] =========Yi-SQL耗时1.7199毫秒=====
2024-04-22 16:02:30.063 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:02:30.064 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 21.9358ms
2024-04-22 16:02:30.065 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:30.114 +08:00 [INF] 2024/4/22 16:02:30：cc,vU17UeYcS_8v9iOsqQZabg连接服务端success，当前已连接0个
2024-04-22 16:02:30.238 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:30.239 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:02:30.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:02:30.243 +08:00 [DBG] =========Yi-SQL耗时1.2998毫秒=====
2024-04-22 16:02:30.245 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:02:30.246 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.0809ms
2024-04-22 16:02:30.246 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:30.304 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:30.304 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:02:30.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:02:30.310 +08:00 [DBG] =========Yi-SQL耗时1.0269毫秒=====
2024-04-22 16:02:30.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:02:30.314 +08:00 [DBG] =========Yi-SQL耗时1.532毫秒=====
2024-04-22 16:02:30.318 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:02:30.318 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 13.7006ms
2024-04-22 16:02:30.318 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:50.957 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:02:50.958 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:02:50.958 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:02:50.959 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 1.0299ms
2024-04-22 16:02:50.959 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:02:50.975 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:50.975 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:02:50.975 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:02:50.975 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:02:50.976 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 16:02:50.976 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:02:51.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:02:51.012 +08:00 [DBG] =========Yi-SQL耗时1.8573毫秒=====
2024-04-22 16:02:51.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:02:51.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 16:02:51.014 +08:00 [DBG] =========Yi-SQL耗时1.7732毫秒=====
2024-04-22 16:02:51.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 16:02:51.022 +08:00 [DBG] =========Yi-SQL耗时1.6469毫秒=====
2024-04-22 16:02:51.023 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:02:51.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:02:51.024 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 48.3529ms
2024-04-22 16:02:51.024 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:51.031 +08:00 [DBG] =========Yi-SQL耗时7.0602毫秒=====
2024-04-22 16:02:51.038 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:02:51.038 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 62.3475ms
2024-04-22 16:02:51.038 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:02:51.081 +08:00 [DBG] =========Yi-SQL耗时68.7721毫秒=====
2024-04-22 16:02:51.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 16:02:51.085 +08:00 [DBG] =========Yi-SQL耗时1.4158毫秒=====
2024-04-22 16:02:51.089 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:02:51.089 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 113.8153ms
2024-04-22 16:02:51.090 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:02:59.385 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:02:59.385 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:02:59.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:02:59.389 +08:00 [DBG] =========Yi-SQL耗时1.3491毫秒=====
2024-04-22 16:02:59.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:02:59.398 +08:00 [DBG] =========Yi-SQL耗时2.9005毫秒=====
2024-04-22 16:02:59.404 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:02:59.405 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 19.9543ms
2024-04-22 16:02:59.406 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:16.265 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:05:16.266 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:05:16.923 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:05:16.936 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:05:16.937 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:05:16.955 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:16.955 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:05:16.957 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:05:16.957 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:05:16.958 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.5907ms
2024-04-22 16:05:16.958 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:16.959 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:05:16.973 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:16.973 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:05:16.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:05:16.979 +08:00 [DBG] =========Yi-SQL耗时2.3933毫秒=====
2024-04-22 16:05:16.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:05:16.985 +08:00 [DBG] =========Yi-SQL耗时2.2935毫秒=====
2024-04-22 16:05:16.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:05:16.989 +08:00 [DBG] =========Yi-SQL耗时1.603毫秒=====
2024-04-22 16:05:16.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:05:16.999 +08:00 [DBG] =========Yi-SQL耗时8.7554毫秒=====
2024-04-22 16:05:17.000 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:05:17.001 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 27.7137ms
2024-04-22 16:05:17.001 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:17.026 +08:00 [INF] 2024/4/22 16:05:17：cc,P6CqGi734qhatobwWW6uDg连接服务端success，当前已连接0个
2024-04-22 16:05:51.125 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:05:51.135 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:05:51.442 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:05:51.446 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:05:51.447 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:51.447 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:05:51.449 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:05:51.475 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:05:51.475 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 27.7064ms
2024-04-22 16:05:51.475 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:51.542 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:05:51.543 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:05:51.544 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:51.547 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:05:51.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:05:51.561 +08:00 [DBG] =========Yi-SQL耗时2.487毫秒=====
2024-04-22 16:05:51.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:05:51.565 +08:00 [DBG] =========Yi-SQL耗时0.9514毫秒=====
2024-04-22 16:05:51.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:05:51.567 +08:00 [DBG] =========Yi-SQL耗时0.5945毫秒=====
2024-04-22 16:05:51.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:05:51.572 +08:00 [DBG] =========Yi-SQL耗时1.4722毫秒=====
2024-04-22 16:05:51.573 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:05:51.574 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 26.7472ms
2024-04-22 16:05:51.574 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:51.624 +08:00 [INF] 2024/4/22 16:05:51：cc,JyTjPC9cl_1DtyNzpYnyDw连接服务端success，当前已连接0个
2024-04-22 16:05:51.791 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:51.791 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:05:51.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:05:51.811 +08:00 [DBG] =========Yi-SQL耗时5.7783毫秒=====
2024-04-22 16:05:51.859 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:05:51.859 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 67.935ms
2024-04-22 16:05:51.859 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:57.290 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:57.290 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:05:57.290 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:57.290 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:05:57.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:05:57.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:05:57.291 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:57.293 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:05:57.293 +08:00 [DBG] =========Yi-SQL耗时1.8425毫秒=====
2024-04-22 16:05:57.295 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:05:57.295 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.0571ms
2024-04-22 16:05:57.295 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:57.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 16:05:57.310 +08:00 [DBG] =========Yi-SQL耗时8.3822毫秒=====
2024-04-22 16:05:57.344 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:05:57.345 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 51.6829ms
2024-04-22 16:05:57.345 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:05:57.370 +08:00 [DBG] =========Yi-SQL耗时78.8517毫秒=====
2024-04-22 16:05:57.371 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:05:57.371 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 81.5943ms
2024-04-22 16:05:57.371 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:45.387 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:11:45.387 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:11:47.263 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:11:47.264 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:11:47.265 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:11:47.328 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:47.328 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:47.331 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:11:47.331 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.9081ms
2024-04-22 16:11:47.331 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:47.420 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:47.420 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:47.424 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:11:47.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:11:47.430 +08:00 [DBG] =========Yi-SQL耗时3.7366毫秒=====
2024-04-22 16:11:47.431 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:11:47.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:11:47.434 +08:00 [DBG] =========Yi-SQL耗时1.2814毫秒=====
2024-04-22 16:11:47.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:11:47.437 +08:00 [DBG] =========Yi-SQL耗时1.578毫秒=====
2024-04-22 16:11:47.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:11:47.440 +08:00 [DBG] =========Yi-SQL耗时1.4132毫秒=====
2024-04-22 16:11:47.441 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:11:47.441 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 20.6884ms
2024-04-22 16:11:47.441 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:47.481 +08:00 [INF] 2024/4/22 16:11:47：cc,zu8EGjl68cRLsP6_dao_YQ连接服务端success，当前已连接0个
2024-04-22 16:11:47.979 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:47.979 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:47.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:11:47.983 +08:00 [DBG] =========Yi-SQL耗时1.9568毫秒=====
2024-04-22 16:11:47.984 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:11:47.985 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.1114ms
2024-04-22 16:11:47.985 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:48.013 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:48.013 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:48.013 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:48.013 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:48.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:11:48.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:11:48.022 +08:00 [DBG] =========Yi-SQL耗时7.3865毫秒=====
2024-04-22 16:11:48.024 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:48.024 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:48.025 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:11:48.025 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.0272ms
2024-04-22 16:11:48.025 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:48.031 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 16:11:48.033 +08:00 [DBG] =========Yi-SQL耗时2.0963毫秒=====
2024-04-22 16:11:48.127 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:11:48.128 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 104.1143ms
2024-04-22 16:11:48.129 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:48.135 +08:00 [DBG] =========Yi-SQL耗时120.3435毫秒=====
2024-04-22 16:11:48.138 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:11:48.138 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 124.9279ms
2024-04-22 16:11:48.138 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:55.631 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:11:55.631 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:11:57.411 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:11:57.413 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:11:57.413 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:11:57.420 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:57.420 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:57.422 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:11:57.422 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.6521ms
2024-04-22 16:11:57.422 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:57.515 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:57.515 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:57.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:11:57.519 +08:00 [DBG] =========Yi-SQL耗时1.3956毫秒=====
2024-04-22 16:11:57.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:11:57.524 +08:00 [DBG] =========Yi-SQL耗时2.0075毫秒=====
2024-04-22 16:11:57.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:11:57.526 +08:00 [DBG] =========Yi-SQL耗时0.8656毫秒=====
2024-04-22 16:11:57.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:11:57.532 +08:00 [DBG] =========Yi-SQL耗时4.69毫秒=====
2024-04-22 16:11:57.533 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:11:57.534 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 18.3531ms
2024-04-22 16:11:57.534 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:57.567 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:11:57.571 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:11:57.631 +08:00 [INF] 2024/4/22 16:11:57：cc,00JwioO96qxLPyASRTP-yg连接服务端success，当前已连接0个
2024-04-22 16:11:57.856 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:57.857 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:57.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:11:57.861 +08:00 [DBG] =========Yi-SQL耗时2.9473毫秒=====
2024-04-22 16:11:57.864 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:11:57.864 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.8544ms
2024-04-22 16:11:57.865 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:58.134 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:58.134 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:58.134 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:58.134 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:58.134 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:58.134 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:11:58.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:11:58.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 16:11:58.137 +08:00 [DBG] =========Yi-SQL耗时1.4124毫秒=====
2024-04-22 16:11:58.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:11:58.140 +08:00 [DBG] =========Yi-SQL耗时5.503毫秒=====
2024-04-22 16:11:58.140 +08:00 [DBG] =========Yi-SQL耗时1.1218毫秒=====
2024-04-22 16:11:58.144 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:11:58.144 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:11:58.145 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.6732ms
2024-04-22 16:11:58.145 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:58.145 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.9514ms
2024-04-22 16:11:58.145 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:11:58.167 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:11:58.168 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 34.4387ms
2024-04-22 16:11:58.168 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:01.299 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:12:01.299 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:12:15.050 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:12:15.051 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.052 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:15.053 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:12:15.054 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.0361ms
2024-04-22 16:12:15.054 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.086 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:12:15.086 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:12:15.104 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:12:15.112 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:12:15.139 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.140 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:15.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:12:15.153 +08:00 [DBG] =========Yi-SQL耗时9.38毫秒=====
2024-04-22 16:12:15.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:12:15.163 +08:00 [DBG] =========Yi-SQL耗时1.3003毫秒=====
2024-04-22 16:12:15.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:12:15.165 +08:00 [DBG] =========Yi-SQL耗时0.7142毫秒=====
2024-04-22 16:12:15.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:12:15.167 +08:00 [DBG] =========Yi-SQL耗时0.8768毫秒=====
2024-04-22 16:12:15.168 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:12:15.168 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 28.267ms
2024-04-22 16:12:15.168 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.189 +08:00 [INF] 2024/4/22 16:12:15：cc,BmE9AaSbLbJl9zEq3zKjZQ连接服务端success，当前已连接0个
2024-04-22 16:12:15.334 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.335 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:15.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:12:15.338 +08:00 [DBG] =========Yi-SQL耗时1.0897毫秒=====
2024-04-22 16:12:15.349 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:12:15.350 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 14.3987ms
2024-04-22 16:12:15.350 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.508 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.508 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.508 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.508 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:15.508 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:15.508 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:15.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:12:15.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:12:15.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 16:12:15.511 +08:00 [DBG] =========Yi-SQL耗时1.132毫秒=====
2024-04-22 16:12:15.511 +08:00 [DBG] =========Yi-SQL耗时1.3431毫秒=====
2024-04-22 16:12:15.517 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:12:15.517 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:12:15.517 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.5312ms
2024-04-22 16:12:15.517 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.517 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.7542ms
2024-04-22 16:12:15.517 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:15.754 +08:00 [DBG] =========Yi-SQL耗时244.0632毫秒=====
2024-04-22 16:12:15.770 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:12:15.771 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 262.5814ms
2024-04-22 16:12:15.771 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:55.016 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:12:55.016 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:12:55.920 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:12:55.921 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:12:55.921 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:12:55.926 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:55.927 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:55.932 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:12:55.932 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.5258ms
2024-04-22 16:12:55.932 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:55.948 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:55.948 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:55.949 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:12:55.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:12:55.951 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:12:55.951 +08:00 [DBG] =========Yi-SQL耗时1.274毫秒=====
2024-04-22 16:12:55.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:12:55.982 +08:00 [DBG] =========Yi-SQL耗时27.6503毫秒=====
2024-04-22 16:12:55.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:12:55.986 +08:00 [DBG] =========Yi-SQL耗时1.555毫秒=====
2024-04-22 16:12:55.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:12:55.988 +08:00 [DBG] =========Yi-SQL耗时0.8068毫秒=====
2024-04-22 16:12:55.989 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:12:55.990 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 42.0246ms
2024-04-22 16:12:55.990 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:56.015 +08:00 [INF] 2024/4/22 16:12:56：cc,bOUTI2iBf56wYDCpox7Wsw连接服务端success，当前已连接0个
2024-04-22 16:12:56.263 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:56.264 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:56.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:12:56.266 +08:00 [DBG] =========Yi-SQL耗时1.3603毫秒=====
2024-04-22 16:12:56.270 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:12:56.273 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 9.2487ms
2024-04-22 16:12:56.273 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:56.452 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:56.452 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:56.452 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:56.452 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:56.453 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:56.453 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:12:56.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:12:56.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:12:56.455 +08:00 [DBG] =========Yi-SQL耗时0.9452毫秒=====
2024-04-22 16:12:56.456 +08:00 [DBG] =========Yi-SQL耗时1.7794毫秒=====
2024-04-22 16:12:56.458 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:12:56.458 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.2002ms
2024-04-22 16:12:56.458 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:56.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 16:12:56.459 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:12:56.459 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.9586ms
2024-04-22 16:12:56.459 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:12:56.461 +08:00 [DBG] =========Yi-SQL耗时2.0182毫秒=====
2024-04-22 16:12:56.489 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:12:56.490 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 36.4687ms
2024-04-22 16:12:56.490 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:08.844 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:13:08.844 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:13:09.139 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:13:09.146 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:13:09.146 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:13:09.147 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.148 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:13:09.150 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:13:09.150 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.5168ms
2024-04-22 16:13:09.150 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.174 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:13:09.176 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:13:09.184 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.184 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:13:09.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:13:09.199 +08:00 [DBG] =========Yi-SQL耗时8.8488毫秒=====
2024-04-22 16:13:09.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:13:09.205 +08:00 [DBG] =========Yi-SQL耗时2.0253毫秒=====
2024-04-22 16:13:09.206 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:13:09.208 +08:00 [DBG] =========Yi-SQL耗时1.3667毫秒=====
2024-04-22 16:13:09.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:13:09.214 +08:00 [DBG] =========Yi-SQL耗时4.0035毫秒=====
2024-04-22 16:13:09.215 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:13:09.216 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 31.8733ms
2024-04-22 16:13:09.216 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.262 +08:00 [INF] 2024/4/22 16:13:09：cc,Yyd1L8jtcHyet6-p0BZjWw连接服务端success，当前已连接0个
2024-04-22 16:13:09.399 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.399 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:13:09.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:13:09.405 +08:00 [DBG] =========Yi-SQL耗时2.8697毫秒=====
2024-04-22 16:13:09.411 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:13:09.412 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 12.7469ms
2024-04-22 16:13:09.412 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.610 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.611 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.611 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:13:09.611 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:13:09.612 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.613 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:13:09.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 16:13:09.622 +08:00 [DBG] =========Yi-SQL耗时8.9757毫秒=====
2024-04-22 16:13:09.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:13:09.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:13:09.624 +08:00 [DBG] =========Yi-SQL耗时2.0925毫秒=====
2024-04-22 16:13:09.625 +08:00 [DBG] =========Yi-SQL耗时0.9409毫秒=====
2024-04-22 16:13:09.655 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:13:09.656 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 42.887ms
2024-04-22 16:13:09.656 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.692 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:13:09.692 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 80.9264ms
2024-04-22 16:13:09.692 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:09.700 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:13:09.701 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 90.1776ms
2024-04-22 16:13:09.701 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:34.982 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:34.983 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:13:34.984 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:34.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 16:13:34.988 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:13:34.988 +08:00 [DBG] =========Yi-SQL耗时4.0368毫秒=====
2024-04-22 16:13:35.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'c0029f7d-ee38-0acd-94f6-3a1216ec55f4'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:13:35.002 +08:00 [DBG] =========Yi-SQL耗时1.0338毫秒=====
2024-04-22 16:13:35.002 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:13:35.003 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 20.1622ms
2024-04-22 16:13:35.003 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:35.011 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 16:13:35.011 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 23.086ms
2024-04-22 16:13:35.011 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:39.997 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:13:39.998 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:39.998 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:13:40.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'c0029f7d-ee38-0acd-94f6-3a1216ec55f4'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:13:40.023 +08:00 [DBG] =========Yi-SQL耗时0.7468毫秒=====
2024-04-22 16:13:40.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-22 15:40:09.586' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-22 16:13:40.030' AS DATETIME),"ordernum"=94,"state"=1,"menuname"=N'字段管理',"menutype"=1,"permissioncode"=null,"parentid"=N'e6bf52fd-b827-33d0-b83c-3a119a97612e',"menuicon"=N'documentation',"router"=N'dictionary',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'system/dict/dictionary/index',"query"=null  WHERE "id"=N'c0029f7d-ee38-0acd-94f6-3a1216ec55f4'
===============================

2024-04-22 16:13:40.040 +08:00 [DBG] =========Yi-SQL耗时4.4532毫秒=====
2024-04-22 16:13:40.043 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-22 16:13:40.043 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 45.0066ms
2024-04-22 16:13:40.043 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:40.069 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:13:40.069 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:13:40.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 16:13:40.070 +08:00 [DBG] =========Yi-SQL耗时0.6606毫秒=====
2024-04-22 16:13:40.081 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:13:40.081 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 12.633ms
2024-04-22 16:13:40.082 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:18.078 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:14:18.080 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:14:18.780 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:14:18.781 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:14:18.781 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:14:18.802 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:14:18.803 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:14:18.803 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:18.803 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:18.805 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:14:18.806 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.6616ms
2024-04-22 16:14:18.806 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:18.866 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:18.866 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:18.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:14:18.869 +08:00 [DBG] =========Yi-SQL耗时1.4135毫秒=====
2024-04-22 16:14:18.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:14:18.875 +08:00 [DBG] =========Yi-SQL耗时1.2881毫秒=====
2024-04-22 16:14:18.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:14:18.883 +08:00 [DBG] =========Yi-SQL耗时1.4576毫秒=====
2024-04-22 16:14:18.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:14:18.972 +08:00 [DBG] =========Yi-SQL耗时3.5758毫秒=====
2024-04-22 16:14:18.974 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:14:18.975 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 108.9535ms
2024-04-22 16:14:18.975 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:18.979 +08:00 [INF] 2024/4/22 16:14:18：cc,-IyDP8BgkMVIughehyoNEQ连接服务端success，当前已连接0个
2024-04-22 16:14:19.116 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:19.116 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:19.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:14:19.120 +08:00 [DBG] =========Yi-SQL耗时2.2984毫秒=====
2024-04-22 16:14:19.123 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:14:19.123 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.9978ms
2024-04-22 16:14:19.123 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:19.222 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:19.222 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:19.222 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:19.222 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:19.222 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:19.222 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:19.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:14:19.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:14:19.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 16:14:19.225 +08:00 [DBG] =========Yi-SQL耗时1.1032毫秒=====
2024-04-22 16:14:19.224 +08:00 [DBG] =========Yi-SQL耗时0.8588毫秒=====
2024-04-22 16:14:19.229 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:14:19.229 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:14:19.229 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.1885ms
2024-04-22 16:14:19.229 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:19.229 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.2016ms
2024-04-22 16:14:19.229 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:19.349 +08:00 [DBG] =========Yi-SQL耗时124.6406毫秒=====
2024-04-22 16:14:19.372 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:14:19.373 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 150.535ms
2024-04-22 16:14:19.373 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:39.859 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:14:39.859 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:14:40.522 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:14:40.523 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:14:40.524 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:14:40.534 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:40.534 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:40.536 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:14:40.536 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.1867ms
2024-04-22 16:14:40.536 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:40.669 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:14:40.672 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:40.672 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:14:40.672 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:40.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:14:40.682 +08:00 [DBG] =========Yi-SQL耗时3.8873毫秒=====
2024-04-22 16:14:40.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:14:40.685 +08:00 [DBG] =========Yi-SQL耗时0.733毫秒=====
2024-04-22 16:14:40.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:14:40.687 +08:00 [DBG] =========Yi-SQL耗时1.2859毫秒=====
2024-04-22 16:14:40.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:14:40.689 +08:00 [DBG] =========Yi-SQL耗时0.6364毫秒=====
2024-04-22 16:14:40.689 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:14:40.689 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 17.4085ms
2024-04-22 16:14:40.689 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:40.714 +08:00 [INF] 2024/4/22 16:14:40：cc,RJ89I3XQzgbpAKxYSloa-w连接服务端success，当前已连接0个
2024-04-22 16:14:40.877 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:40.877 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:40.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:14:40.880 +08:00 [DBG] =========Yi-SQL耗时1.3688毫秒=====
2024-04-22 16:14:40.882 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:14:40.882 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.3589ms
2024-04-22 16:14:40.882 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:41.056 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:41.056 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:41.056 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:41.058 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:41.058 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:41.058 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:41.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:14:41.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-22 16:14:41.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:14:41.098 +08:00 [DBG] =========Yi-SQL耗时2.9035毫秒=====
2024-04-22 16:14:41.098 +08:00 [DBG] =========Yi-SQL耗时2.9976毫秒=====
2024-04-22 16:14:41.098 +08:00 [DBG] =========Yi-SQL耗时3.1153毫秒=====
2024-04-22 16:14:41.103 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:14:41.103 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.8191ms
2024-04-22 16:14:41.103 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:14:41.103 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:41.103 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.9632ms
2024-04-22 16:14:41.103 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:41.116 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:14:41.116 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 58.2155ms
2024-04-22 16:14:41.117 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:44.908 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:14:44.908 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:14:44.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:14:44.916 +08:00 [DBG] =========Yi-SQL耗时3.466毫秒=====
2024-04-22 16:14:44.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:14:44.918 +08:00 [DBG] =========Yi-SQL耗时0.9038毫秒=====
2024-04-22 16:14:44.920 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:14:44.920 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 12.018ms
2024-04-22 16:14:44.921 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:15:00.649 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:15:00.650 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:15:01.817 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:15:01.818 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:15:01.819 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:15:01.843 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:15:01.845 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:15:01.845 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:15:01.846 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:15:01.847 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:15:01.847 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.2966ms
2024-04-22 16:15:01.847 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:15:01.860 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:15:01.861 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:15:01.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:15:01.867 +08:00 [DBG] =========Yi-SQL耗时3.1032毫秒=====
2024-04-22 16:15:01.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:15:01.869 +08:00 [DBG] =========Yi-SQL耗时1.1096毫秒=====
2024-04-22 16:15:01.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:15:01.870 +08:00 [DBG] =========Yi-SQL耗时0.545毫秒=====
2024-04-22 16:15:01.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:15:01.872 +08:00 [DBG] =========Yi-SQL耗时0.6041毫秒=====
2024-04-22 16:15:01.872 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:15:01.873 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 11.7842ms
2024-04-22 16:15:01.873 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:15:01.888 +08:00 [INF] 2024/4/22 16:15:01：cc,xJFu2hM4puEJxj3jPBESrA连接服务端success，当前已连接0个
2024-04-22 16:15:02.299 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:15:02.299 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:15:02.299 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:15:02.299 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:15:02.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:15:02.319 +08:00 [DBG] =========Yi-SQL耗时15.0443毫秒=====
2024-04-22 16:15:02.336 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:15:02.336 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:15:02.337 +08:00 [DBG] =========Yi-SQL耗时1.3742毫秒=====
2024-04-22 16:15:02.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:15:02.348 +08:00 [DBG] =========Yi-SQL耗时10.0226毫秒=====
2024-04-22 16:15:02.349 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 49.8225ms
2024-04-22 16:15:02.349 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:15:02.374 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:15:02.375 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 76.2539ms
2024-04-22 16:15:02.375 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:04.592 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:04.592 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:04.592 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:21:04.592 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:21:04.595 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:04.595 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:21:04.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:21:04.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:21:04.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:21:04.664 +08:00 [DBG] =========Yi-SQL耗时67.4672毫秒=====
2024-04-22 16:21:04.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:21:04.670 +08:00 [DBG] =========Yi-SQL耗时1.7967毫秒=====
2024-04-22 16:21:04.679 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:21:04.679 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 87.0016ms
2024-04-22 16:21:04.679 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:04.682 +08:00 [DBG] =========Yi-SQL耗时83.8842毫秒=====
2024-04-22 16:21:04.682 +08:00 [DBG] =========Yi-SQL耗时86.113毫秒=====
2024-04-22 16:21:04.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:21:04.689 +08:00 [DBG] =========Yi-SQL耗时2.4489毫秒=====
2024-04-22 16:21:04.691 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:21:04.692 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 99.247ms
2024-04-22 16:21:04.692 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:04.694 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:21:04.695 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 99.3593ms
2024-04-22 16:21:04.695 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:11.863 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:21:11.863 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:21:12.486 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:21:12.487 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:21:12.488 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:21:12.504 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.505 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:21:12.512 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:21:12.512 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.5628ms
2024-04-22 16:21:12.512 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.515 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:21:12.517 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:21:12.528 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.529 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:21:12.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:21:12.541 +08:00 [DBG] =========Yi-SQL耗时1.5631毫秒=====
2024-04-22 16:21:12.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:21:12.544 +08:00 [DBG] =========Yi-SQL耗时0.8844毫秒=====
2024-04-22 16:21:12.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:21:12.545 +08:00 [DBG] =========Yi-SQL耗时0.8199毫秒=====
2024-04-22 16:21:12.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:21:12.546 +08:00 [DBG] =========Yi-SQL耗时0.9049毫秒=====
2024-04-22 16:21:12.547 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:21:12.547 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 8.9956ms
2024-04-22 16:21:12.547 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.578 +08:00 [INF] 2024/4/22 16:21:12：cc,1DC861F1vap8AwxHS12kiQ连接服务端success，当前已连接0个
2024-04-22 16:21:12.756 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.756 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:21:12.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:21:12.768 +08:00 [DBG] =========Yi-SQL耗时8.7635毫秒=====
2024-04-22 16:21:12.771 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:21:12.771 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 14.5699ms
2024-04-22 16:21:12.771 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.904 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.904 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.904 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.904 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:21:12.904 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:21:12.904 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:21:12.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:21:12.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:21:12.908 +08:00 [DBG] =========Yi-SQL耗时2.3123毫秒=====
2024-04-22 16:21:12.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:21:12.911 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:21:12.911 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.9254ms
2024-04-22 16:21:12.911 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.913 +08:00 [DBG] =========Yi-SQL耗时2.3473毫秒=====
2024-04-22 16:21:12.916 +08:00 [DBG] =========Yi-SQL耗时8.5753毫秒=====
2024-04-22 16:21:12.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:21:12.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:21:12.922 +08:00 [DBG] =========Yi-SQL耗时1.9294毫秒=====
2024-04-22 16:21:12.922 +08:00 [DBG] =========Yi-SQL耗时2.2231毫秒=====
2024-04-22 16:21:12.925 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:21:12.926 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 21.583ms
2024-04-22 16:21:12.926 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:21:12.927 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:21:12.927 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 23.3828ms
2024-04-22 16:21:12.927 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:17.749 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:22:17.751 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:22:18.021 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:22:18.022 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:22:18.023 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:22:18.027 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.028 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:22:18.030 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:22:18.031 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.0722ms
2024-04-22 16:22:18.031 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.058 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.059 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:22:18.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:22:18.062 +08:00 [DBG] =========Yi-SQL耗时1.6768毫秒=====
2024-04-22 16:22:18.063 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:22:18.069 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:22:18.069 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:22:18.071 +08:00 [DBG] =========Yi-SQL耗时1.0808毫秒=====
2024-04-22 16:22:18.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:22:18.072 +08:00 [DBG] =========Yi-SQL耗时1.1089毫秒=====
2024-04-22 16:22:18.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:22:18.074 +08:00 [DBG] =========Yi-SQL耗时0.6035毫秒=====
2024-04-22 16:22:18.074 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:22:18.074 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 15.7097ms
2024-04-22 16:22:18.074 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.106 +08:00 [INF] 2024/4/22 16:22:18：cc,KcgV6FA727D-eG5WI8XVqQ连接服务端success，当前已连接0个
2024-04-22 16:22:18.255 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.256 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:22:18.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:22:18.259 +08:00 [DBG] =========Yi-SQL耗时1.5313毫秒=====
2024-04-22 16:22:18.262 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:22:18.263 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.6352ms
2024-04-22 16:22:18.263 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.459 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.459 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:22:18.459 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.459 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:22:18.460 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.460 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:22:18.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:22:18.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:22:18.461 +08:00 [DBG] =========Yi-SQL耗时1.0542毫秒=====
2024-04-22 16:22:18.461 +08:00 [DBG] =========Yi-SQL耗时0.5183毫秒=====
2024-04-22 16:22:18.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:22:18.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:22:18.463 +08:00 [DBG] =========Yi-SQL耗时1.4188毫秒=====
2024-04-22 16:22:18.464 +08:00 [DBG] =========Yi-SQL耗时1.5733毫秒=====
2024-04-22 16:22:18.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:22:18.471 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:22:18.508 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 49.0176ms
2024-04-22 16:22:18.508 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.527 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:22:18.528 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 68.6569ms
2024-04-22 16:22:18.528 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:18.552 +08:00 [DBG] =========Yi-SQL耗时81.5566毫秒=====
2024-04-22 16:22:18.573 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:22:18.573 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 112.5971ms
2024-04-22 16:22:18.573 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:39.444 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:39.444 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:22:39.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:22:39.448 +08:00 [DBG] =========Yi-SQL耗时1.4033毫秒=====
2024-04-22 16:22:39.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:22:39.495 +08:00 [DBG] =========Yi-SQL耗时2.7436毫秒=====
2024-04-22 16:22:39.497 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:22:39.498 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 53.6614ms
2024-04-22 16:22:39.498 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:40.306 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:22:40.306 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:22:40.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:22:40.309 +08:00 [DBG] =========Yi-SQL耗时0.8156毫秒=====
2024-04-22 16:22:40.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:22:40.311 +08:00 [DBG] =========Yi-SQL耗时0.9779毫秒=====
2024-04-22 16:22:40.314 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:22:40.314 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 8.1476ms
2024-04-22 16:22:40.314 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:23:06.726 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:23:06.726 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:23:06.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:23:06.729 +08:00 [DBG] =========Yi-SQL耗时1.272毫秒=====
2024-04-22 16:23:06.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-22 16:23:06.736 +08:00 [DBG] =========Yi-SQL耗时0.6954毫秒=====
2024-04-22 16:23:06.739 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:23:06.739 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 13.14ms
2024-04-22 16:23:06.739 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:11.962 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:24:11.963 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:24:12.466 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:24:12.468 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:24:12.468 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:24:12.478 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.479 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:24:12.486 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:24:12.487 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.0258ms
2024-04-22 16:24:12.487 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.491 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:24:12.495 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:24:12.496 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.496 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:24:12.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:24:12.499 +08:00 [DBG] =========Yi-SQL耗时1.5204毫秒=====
2024-04-22 16:24:12.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:24:12.503 +08:00 [DBG] =========Yi-SQL耗时1.7126毫秒=====
2024-04-22 16:24:12.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:24:12.504 +08:00 [DBG] =========Yi-SQL耗时0.4492毫秒=====
2024-04-22 16:24:12.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:24:12.507 +08:00 [DBG] =========Yi-SQL耗时1.1906毫秒=====
2024-04-22 16:24:12.507 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:24:12.507 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 10.7007ms
2024-04-22 16:24:12.507 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.530 +08:00 [INF] 2024/4/22 16:24:12：cc,Ihv97e25I_j_6_-wF1BAaA连接服务端success，当前已连接0个
2024-04-22 16:24:12.596 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.597 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:24:12.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:24:12.599 +08:00 [DBG] =========Yi-SQL耗时1.4503毫秒=====
2024-04-22 16:24:12.602 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:24:12.603 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.1019ms
2024-04-22 16:24:12.603 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.672 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.672 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:24:12.672 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.672 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.672 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:24:12.672 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:24:12.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:24:12.674 +08:00 [DBG] =========Yi-SQL耗时1.4389毫秒=====
2024-04-22 16:24:12.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:24:12.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:24:12.677 +08:00 [DBG] =========Yi-SQL耗时0.901毫秒=====
2024-04-22 16:24:12.677 +08:00 [DBG] =========Yi-SQL耗时0.8957毫秒=====
2024-04-22 16:24:12.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:24:12.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:24:12.681 +08:00 [DBG] =========Yi-SQL耗时0.7844毫秒=====
2024-04-22 16:24:12.681 +08:00 [DBG] =========Yi-SQL耗时1.4204毫秒=====
2024-04-22 16:24:12.683 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:24:12.691 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 18.8317ms
2024-04-22 16:24:12.691 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.721 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:24:12.721 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:24:12.721 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 48.7309ms
2024-04-22 16:24:12.721 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:24:12.721 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 48.8292ms
2024-04-22 16:24:12.721 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:11.943 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:27:11.945 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:27:12.460 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:27:12.461 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:27:12.461 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:27:12.481 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:27:12.482 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.482 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:27:12.482 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:12.486 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:27:12.487 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.1367ms
2024-04-22 16:27:12.487 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.494 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.494 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:12.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:12.511 +08:00 [INF] 2024/4/22 16:27:12：cc,tnaNKeEUxYDmSZPPaI53nQ连接服务端success，当前已连接0个
2024-04-22 16:27:12.554 +08:00 [DBG] =========Yi-SQL耗时58.1376毫秒=====
2024-04-22 16:27:12.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:27:12.555 +08:00 [DBG] =========Yi-SQL耗时0.4759毫秒=====
2024-04-22 16:27:12.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:27:12.556 +08:00 [DBG] =========Yi-SQL耗时0.5071毫秒=====
2024-04-22 16:27:12.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:12.557 +08:00 [DBG] =========Yi-SQL耗时0.612毫秒=====
2024-04-22 16:27:12.558 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:12.558 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 63.6971ms
2024-04-22 16:27:12.558 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.630 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.630 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:12.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:27:12.632 +08:00 [DBG] =========Yi-SQL耗时1.2毫秒=====
2024-04-22 16:27:12.635 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:27:12.636 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.0636ms
2024-04-22 16:27:12.636 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.687 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.687 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.687 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:12.687 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:12.688 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.688 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:12.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:12.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:12.690 +08:00 [DBG] =========Yi-SQL耗时1.9373毫秒=====
2024-04-22 16:27:12.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:12.697 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:12.697 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.7166ms
2024-04-22 16:27:12.697 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.772 +08:00 [DBG] =========Yi-SQL耗时81.7502毫秒=====
2024-04-22 16:27:12.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:27:12.774 +08:00 [DBG] =========Yi-SQL耗时0.4459毫秒=====
2024-04-22 16:27:12.775 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:12.776 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 87.962ms
2024-04-22 16:27:12.776 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:12.777 +08:00 [DBG] =========Yi-SQL耗时87.9365毫秒=====
2024-04-22 16:27:12.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:27:12.779 +08:00 [DBG] =========Yi-SQL耗时1.0628毫秒=====
2024-04-22 16:27:12.781 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:12.781 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 93.9132ms
2024-04-22 16:27:12.781 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:33.812 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:33.812 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:33.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:33.814 +08:00 [DBG] =========Yi-SQL耗时0.8036毫秒=====
2024-04-22 16:27:33.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:27:33.817 +08:00 [DBG] =========Yi-SQL耗时1.3354毫秒=====
2024-04-22 16:27:33.860 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:33.860 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 48.3407ms
2024-04-22 16:27:33.860 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:34.451 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:34.451 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:34.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:34.453 +08:00 [DBG] =========Yi-SQL耗时0.7308毫秒=====
2024-04-22 16:27:34.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:27:34.456 +08:00 [DBG] =========Yi-SQL耗时0.9293毫秒=====
2024-04-22 16:27:34.458 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:34.459 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 7.5437ms
2024-04-22 16:27:34.459 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:35.898 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:35.899 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:35.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:35.902 +08:00 [DBG] =========Yi-SQL耗时2.0355毫秒=====
2024-04-22 16:27:35.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:27:35.905 +08:00 [DBG] =========Yi-SQL耗时0.8548毫秒=====
2024-04-22 16:27:35.906 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:35.906 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 7.7458ms
2024-04-22 16:27:35.906 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:36.690 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:36.690 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:36.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:36.692 +08:00 [DBG] =========Yi-SQL耗时0.7074毫秒=====
2024-04-22 16:27:36.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:27:36.696 +08:00 [DBG] =========Yi-SQL耗时1.1383毫秒=====
2024-04-22 16:27:36.700 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:36.701 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 10.3106ms
2024-04-22 16:27:36.701 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:41.059 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:41.059 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:41.059 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:41.059 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:41.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:41.062 +08:00 [DBG] =========Yi-SQL耗时1.1414毫秒=====
2024-04-22 16:27:41.064 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:41.064 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 4.4639ms
2024-04-22 16:27:41.064 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:41.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:41.066 +08:00 [DBG] =========Yi-SQL耗时1.5774毫秒=====
2024-04-22 16:27:41.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:27:41.069 +08:00 [DBG] =========Yi-SQL耗时1.5123毫秒=====
2024-04-22 16:27:41.072 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:41.072 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 12.8159ms
2024-04-22 16:27:41.072 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:41.841 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:41.841 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:41.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:41.842 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:41.843 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:41.843 +08:00 [DBG] =========Yi-SQL耗时0.836毫秒=====
2024-04-22 16:27:41.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:27:41.846 +08:00 [DBG] =========Yi-SQL耗时0.6653毫秒=====
2024-04-22 16:27:41.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:41.847 +08:00 [DBG] =========Yi-SQL耗时0.7072毫秒=====
2024-04-22 16:27:41.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:27:41.850 +08:00 [DBG] =========Yi-SQL耗时0.557毫秒=====
2024-04-22 16:27:41.851 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:41.852 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 10.6476ms
2024-04-22 16:27:41.852 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:41.856 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:41.857 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 14.1441ms
2024-04-22 16:27:41.857 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:53.139 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:27:53.139 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:27:53.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:27:53.142 +08:00 [DBG] =========Yi-SQL耗时0.6763毫秒=====
2024-04-22 16:27:53.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:27:53.145 +08:00 [DBG] =========Yi-SQL耗时1.0842毫秒=====
2024-04-22 16:27:53.153 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:27:53.153 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 13.8354ms
2024-04-22 16:27:53.153 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:31:23.333 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:31:23.333 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:31:23.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:31:23.336 +08:00 [DBG] =========Yi-SQL耗时1.4503毫秒=====
2024-04-22 16:31:23.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:31:23.341 +08:00 [DBG] =========Yi-SQL耗时0.6637毫秒=====
2024-04-22 16:31:23.343 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:31:23.343 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 9.5284ms
2024-04-22 16:31:23.343 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:31:24.211 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:31:24.211 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:31:24.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:31:24.213 +08:00 [DBG] =========Yi-SQL耗时0.7851毫秒=====
2024-04-22 16:31:24.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:31:24.217 +08:00 [DBG] =========Yi-SQL耗时2.0045毫秒=====
2024-04-22 16:31:24.225 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:31:24.225 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 13.7526ms
2024-04-22 16:31:24.225 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:36:44.767 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:44.768 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:44.768 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:44.799 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:36:44.799 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 16:36:44.826 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:36:44.831 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:36:44.832 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 6.0617ms
2024-04-22 16:36:44.832 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:44.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 16:36:44.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:36:44.929 +08:00 [DBG] =========Yi-SQL耗时94.3482毫秒=====
2024-04-22 16:36:44.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 16:36:44.932 +08:00 [DBG] =========Yi-SQL耗时0.6344毫秒=====
2024-04-22 16:36:44.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:36:44.982 +08:00 [DBG] =========Yi-SQL耗时7.4954毫秒=====
2024-04-22 16:36:45.041 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:36:45.042 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 242.3565ms
2024-04-22 16:36:45.042 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:45.138 +08:00 [DBG] =========Yi-SQL耗时303.2948毫秒=====
2024-04-22 16:36:45.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 16:36:45.140 +08:00 [DBG] =========Yi-SQL耗时1.163毫秒=====
2024-04-22 16:36:45.143 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:36:45.144 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 344.4478ms
2024-04-22 16:36:45.144 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:53.133 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:36:53.143 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:36:54.128 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:36:54.130 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:36:54.139 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:36:54.157 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:36:54.158 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:36:54.177 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:36:54.178 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:36:54.179 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:36:54.179 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 21.5273ms
2024-04-22 16:36:54.179 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:36:54.208 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:36:54.208 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:36:54.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:36:54.217 +08:00 [DBG] =========Yi-SQL耗时5.5314毫秒=====
2024-04-22 16:36:54.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:36:54.222 +08:00 [DBG] =========Yi-SQL耗时2.6965毫秒=====
2024-04-22 16:36:54.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:36:54.227 +08:00 [DBG] =========Yi-SQL耗时2.6032毫秒=====
2024-04-22 16:36:54.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:36:54.233 +08:00 [DBG] =========Yi-SQL耗时2.8384毫秒=====
2024-04-22 16:36:54.235 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:36:54.236 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 28.1183ms
2024-04-22 16:36:54.237 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:36:54.293 +08:00 [INF] 2024/4/22 16:36:54：cc,CsLVsjQGVeopZLLN9hNccQ连接服务端success，当前已连接0个
2024-04-22 16:36:54.432 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:36:54.433 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:36:54.438 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:36:54.441 +08:00 [DBG] =========Yi-SQL耗时2.0222毫秒=====
2024-04-22 16:36:54.455 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:36:54.459 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 26.2735ms
2024-04-22 16:36:54.459 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:36:54.599 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:54.599 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:36:54.599 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:36:54.599 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:36:54.601 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:36:54.605 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 5.7652ms
2024-04-22 16:36:54.605 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:54.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:36:54.639 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:54.639 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:54.640 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 16:36:54.640 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:36:54.644 +08:00 [DBG] =========Yi-SQL耗时34.4854毫秒=====
2024-04-22 16:36:54.646 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:36:54.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 16:36:54.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:36:54.648 +08:00 [DBG] =========Yi-SQL耗时1.4281毫秒=====
2024-04-22 16:36:54.648 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 48.3642ms
2024-04-22 16:36:54.648 +08:00 [DBG] =========Yi-SQL耗时1.3534毫秒=====
2024-04-22 16:36:54.648 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:36:54.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 16:36:54.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 16:36:54.660 +08:00 [DBG] =========Yi-SQL耗时1.6841毫秒=====
2024-04-22 16:36:54.660 +08:00 [DBG] =========Yi-SQL耗时1.6424毫秒=====
2024-04-22 16:36:54.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:36:54.663 +08:00 [DBG] =========Yi-SQL耗时0.9567毫秒=====
2024-04-22 16:36:54.671 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:36:54.672 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 30.4989ms
2024-04-22 16:36:54.672 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:36:54.675 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:36:54.675 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 35.2136ms
2024-04-22 16:36:54.675 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:37:22.461 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:37:22.461 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:37:22.461 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:37:22.461 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:37:22.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:37:22.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:37:22.465 +08:00 [DBG] =========Yi-SQL耗时0.9986毫秒=====
2024-04-22 16:37:22.465 +08:00 [DBG] =========Yi-SQL耗时1.636毫秒=====
2024-04-22 16:37:22.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:37:22.471 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:37:22.474 +08:00 [DBG] =========Yi-SQL耗时6.7435毫秒=====
2024-04-22 16:37:22.478 +08:00 [DBG] =========Yi-SQL耗时7.2749毫秒=====
2024-04-22 16:37:22.483 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:37:22.484 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 22.8487ms
2024-04-22 16:37:22.484 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:37:22.484 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:37:22.485 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 23.872ms
2024-04-22 16:37:22.485 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:17.380 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:17.380 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:17.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:17.384 +08:00 [DBG] =========Yi-SQL耗时1.5966毫秒=====
2024-04-22 16:39:17.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:39:17.391 +08:00 [DBG] =========Yi-SQL耗时0.7802毫秒=====
2024-04-22 16:39:17.392 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:39:17.393 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 12.601ms
2024-04-22 16:39:17.393 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:26.695 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:39:26.703 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:39:27.540 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:39:27.541 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:39:27.541 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:39:27.552 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.553 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:27.556 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:39:27.557 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.7749ms
2024-04-22 16:39:27.557 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.562 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:39:27.563 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:39:27.573 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.573 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:27.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:27.579 +08:00 [DBG] =========Yi-SQL耗时2.5619毫秒=====
2024-04-22 16:39:27.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:39:27.582 +08:00 [DBG] =========Yi-SQL耗时1.3213毫秒=====
2024-04-22 16:39:27.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:39:27.584 +08:00 [DBG] =========Yi-SQL耗时1.2508毫秒=====
2024-04-22 16:39:27.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:27.587 +08:00 [DBG] =========Yi-SQL耗时1.8341毫秒=====
2024-04-22 16:39:27.590 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:39:27.594 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 20.8314ms
2024-04-22 16:39:27.594 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.627 +08:00 [INF] 2024/4/22 16:39:27：cc,JBNtKlUPZJG7ZoA9qDLKCw连接服务端success，当前已连接0个
2024-04-22 16:39:27.756 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.756 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:27.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:39:27.765 +08:00 [DBG] =========Yi-SQL耗时3.1332毫秒=====
2024-04-22 16:39:27.769 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:39:27.769 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 12.976ms
2024-04-22 16:39:27.769 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.942 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.942 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.942 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:27.942 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.942 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:27.943 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:27.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:27.945 +08:00 [DBG] =========Yi-SQL耗时1.8073毫秒=====
2024-04-22 16:39:27.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:27.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:27.953 +08:00 [DBG] =========Yi-SQL耗时1.4157毫秒=====
2024-04-22 16:39:27.954 +08:00 [DBG] =========Yi-SQL耗时2.387毫秒=====
2024-04-22 16:39:27.954 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:39:27.955 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.7137ms
2024-04-22 16:39:27.955 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:39:27.957 +08:00 [DBG] =========Yi-SQL耗时1.3504毫秒=====
2024-04-22 16:39:27.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:39:27.958 +08:00 [DBG] =========Yi-SQL耗时1.2668毫秒=====
2024-04-22 16:39:27.964 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:39:27.965 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:39:27.965 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 22.532ms
2024-04-22 16:39:27.965 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:27.966 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 23.6615ms
2024-04-22 16:39:27.978 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:33.823 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:33.823 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:33.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:33.825 +08:00 [DBG] =========Yi-SQL耗时0.8224毫秒=====
2024-04-22 16:39:33.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:39:33.829 +08:00 [DBG] =========Yi-SQL耗时1.0291毫秒=====
2024-04-22 16:39:33.833 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:39:33.833 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 9.7771ms
2024-04-22 16:39:33.833 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.186 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:39:51.187 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:39:51.452 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:39:51.455 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:39:51.455 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:39:51.466 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.467 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:51.469 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:39:51.471 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.8518ms
2024-04-22 16:39:51.471 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.512 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.513 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:51.515 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:39:51.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:51.518 +08:00 [DBG] =========Yi-SQL耗时1.771毫秒=====
2024-04-22 16:39:51.521 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:39:51.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:39:51.523 +08:00 [DBG] =========Yi-SQL耗时1.1498毫秒=====
2024-04-22 16:39:51.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:39:51.526 +08:00 [DBG] =========Yi-SQL耗时0.9878毫秒=====
2024-04-22 16:39:51.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:51.528 +08:00 [DBG] =========Yi-SQL耗时1.0544毫秒=====
2024-04-22 16:39:51.529 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:39:51.529 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 16.8112ms
2024-04-22 16:39:51.529 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.606 +08:00 [INF] 2024/4/22 16:39:51：cc,jGoIiUfyPCQy0jTxfrHdgg连接服务端success，当前已连接0个
2024-04-22 16:39:51.681 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.681 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:51.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:39:51.685 +08:00 [DBG] =========Yi-SQL耗时1.6272毫秒=====
2024-04-22 16:39:51.690 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:39:51.690 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.995ms
2024-04-22 16:39:51.690 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.833 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.833 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.834 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.834 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:51.834 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:51.834 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:39:51.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:51.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:51.839 +08:00 [DBG] =========Yi-SQL耗时1.3972毫秒=====
2024-04-22 16:39:51.840 +08:00 [DBG] =========Yi-SQL耗时4.0315毫秒=====
2024-04-22 16:39:51.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:39:51.844 +08:00 [DBG] =========Yi-SQL耗时1.7597毫秒=====
2024-04-22 16:39:51.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:39:51.847 +08:00 [DBG] =========Yi-SQL耗时2.4998毫秒=====
2024-04-22 16:39:51.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:39:51.858 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:39:51.860 +08:00 [DBG] =========Yi-SQL耗时4.6931毫秒=====
2024-04-22 16:39:51.861 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 26.4949ms
2024-04-22 16:39:51.861 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.861 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:39:51.861 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 27.3776ms
2024-04-22 16:39:51.861 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:39:51.879 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:39:51.880 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 45.9741ms
2024-04-22 16:39:51.880 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:07.354 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:40:07.355 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:40:07.633 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:40:07.648 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:07.649 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:07.649 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:40:07.650 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:40:07.652 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:40:07.652 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.5677ms
2024-04-22 16:40:07.652 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:07.674 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:40:07.675 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:07.675 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:40:07.677 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:07.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:40:07.693 +08:00 [DBG] =========Yi-SQL耗时8.9556毫秒=====
2024-04-22 16:40:07.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:40:07.700 +08:00 [DBG] =========Yi-SQL耗时1.6163毫秒=====
2024-04-22 16:40:07.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:40:07.703 +08:00 [DBG] =========Yi-SQL耗时1.0112毫秒=====
2024-04-22 16:40:07.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:40:07.706 +08:00 [DBG] =========Yi-SQL耗时1.7454毫秒=====
2024-04-22 16:40:07.707 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:40:07.708 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 29.9086ms
2024-04-22 16:40:07.708 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:07.762 +08:00 [INF] 2024/4/22 16:40:07：cc,cYzySEEPeQf-VcqXiLwXzw连接服务端success，当前已连接0个
2024-04-22 16:40:07.915 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:07.915 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:07.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:40:07.923 +08:00 [DBG] =========Yi-SQL耗时6.5577毫秒=====
2024-04-22 16:40:07.928 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:40:07.929 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 13.3997ms
2024-04-22 16:40:07.929 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:08.104 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:08.105 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:08.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:40:08.119 +08:00 [DBG] =========Yi-SQL耗时11.2185毫秒=====
2024-04-22 16:40:08.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:40:08.120 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:08.120 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:08.120 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:08.120 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:08.121 +08:00 [DBG] =========Yi-SQL耗时1.0212毫秒=====
2024-04-22 16:40:08.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:40:08.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:40:08.122 +08:00 [DBG] =========Yi-SQL耗时0.7565毫秒=====
2024-04-22 16:40:08.127 +08:00 [DBG] =========Yi-SQL耗时4.6649毫秒=====
2024-04-22 16:40:08.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:40:08.136 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:40:08.136 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 15.5434ms
2024-04-22 16:40:08.136 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:08.138 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:40:08.138 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 33.773ms
2024-04-22 16:40:08.138 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:08.146 +08:00 [DBG] =========Yi-SQL耗时16.2159毫秒=====
2024-04-22 16:40:08.149 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:40:08.150 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 28.9422ms
2024-04-22 16:40:08.150 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:22.338 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:40:22.343 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:40:22.608 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:40:22.608 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:40:22.609 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:40:22.614 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:22.614 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:22.615 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:40:22.616 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.7526ms
2024-04-22 16:40:22.616 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:22.649 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:40:22.650 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:22.650 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:22.650 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:40:22.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:40:22.658 +08:00 [DBG] =========Yi-SQL耗时1.1217毫秒=====
2024-04-22 16:40:22.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:40:22.661 +08:00 [DBG] =========Yi-SQL耗时0.9417毫秒=====
2024-04-22 16:40:22.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:40:22.662 +08:00 [DBG] =========Yi-SQL耗时0.6104毫秒=====
2024-04-22 16:40:22.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:40:22.664 +08:00 [DBG] =========Yi-SQL耗时0.7717毫秒=====
2024-04-22 16:40:22.665 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:40:22.665 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 14.8606ms
2024-04-22 16:40:22.665 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:22.714 +08:00 [INF] 2024/4/22 16:40:22：cc,pTBBNQ65qruQDlPxwVPXNw连接服务端success，当前已连接0个
2024-04-22 16:40:22.869 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:22.870 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:22.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:40:22.881 +08:00 [DBG] =========Yi-SQL耗时8.9245毫秒=====
2024-04-22 16:40:22.885 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:40:22.885 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 15.5983ms
2024-04-22 16:40:22.885 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:25.677 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:40:25.677 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:40:25.796 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:40:25.797 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:40:25.797 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:40:25.802 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:25.803 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:25.814 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:40:25.817 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 14.3345ms
2024-04-22 16:40:25.817 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:25.825 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:40:25.826 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:40:25.830 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:25.830 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:25.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:40:25.835 +08:00 [DBG] =========Yi-SQL耗时0.6785毫秒=====
2024-04-22 16:40:25.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:40:25.836 +08:00 [DBG] =========Yi-SQL耗时0.36毫秒=====
2024-04-22 16:40:25.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:40:25.837 +08:00 [DBG] =========Yi-SQL耗时0.2968毫秒=====
2024-04-22 16:40:25.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:40:25.839 +08:00 [DBG] =========Yi-SQL耗时1.7464毫秒=====
2024-04-22 16:40:25.840 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:40:25.841 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 10.7467ms
2024-04-22 16:40:25.841 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:25.878 +08:00 [INF] 2024/4/22 16:40:25：cc,GnRAVI2aF78pyqLBVfb4Sg连接服务端success，当前已连接0个
2024-04-22 16:40:25.919 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:40:25.919 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:40:25.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:40:25.922 +08:00 [DBG] =========Yi-SQL耗时1.4623毫秒=====
2024-04-22 16:40:25.924 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:40:25.925 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.5016ms
2024-04-22 16:40:25.925 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:40.435 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:40.435 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:40.436 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:44:40.436 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:44:40.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:44:40.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:44:40.528 +08:00 [DBG] =========Yi-SQL耗时85.886毫秒=====
2024-04-22 16:44:40.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:44:40.534 +08:00 [DBG] =========Yi-SQL耗时2.8757毫秒=====
2024-04-22 16:44:40.541 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:44:40.541 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 105.1355ms
2024-04-22 16:44:40.541 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:40.545 +08:00 [DBG] =========Yi-SQL耗时107.9981毫秒=====
2024-04-22 16:44:40.549 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:44:40.549 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 113.47ms
2024-04-22 16:44:40.549 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:49.387 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:44:49.387 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:44:49.752 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:44:49.754 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:44:49.754 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:44:49.780 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:44:49.781 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:44:49.782 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:49.783 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:44:49.785 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:44:49.785 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.6406ms
2024-04-22 16:44:49.785 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:49.798 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:49.798 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:44:49.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:44:49.802 +08:00 [DBG] =========Yi-SQL耗时2.3696毫秒=====
2024-04-22 16:44:49.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:44:49.805 +08:00 [DBG] =========Yi-SQL耗时1.7247毫秒=====
2024-04-22 16:44:49.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:44:49.807 +08:00 [DBG] =========Yi-SQL耗时1.2274毫秒=====
2024-04-22 16:44:49.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:44:49.810 +08:00 [DBG] =========Yi-SQL耗时1.943毫秒=====
2024-04-22 16:44:49.812 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:44:49.813 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 14.3508ms
2024-04-22 16:44:49.813 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:49.857 +08:00 [INF] 2024/4/22 16:44:49：cc,zwMiZcdbSrdsqauEsvEclg连接服务端success，当前已连接0个
2024-04-22 16:44:49.973 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:49.973 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:44:49.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:44:49.987 +08:00 [DBG] =========Yi-SQL耗时2.1057毫秒=====
2024-04-22 16:44:49.997 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:44:49.998 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 24.8098ms
2024-04-22 16:44:49.998 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:50.157 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:50.157 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:44:50.158 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:50.158 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:44:50.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:44:50.161 +08:00 [DBG] =========Yi-SQL耗时0.8422毫秒=====
2024-04-22 16:44:50.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:44:50.163 +08:00 [DBG] =========Yi-SQL耗时1.7962毫秒=====
2024-04-22 16:44:50.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:44:50.167 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:44:50.167 +08:00 [DBG] =========Yi-SQL耗时1.4891毫秒=====
2024-04-22 16:44:50.167 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.88ms
2024-04-22 16:44:50.167 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:50.170 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:44:50.171 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 12.8266ms
2024-04-22 16:44:50.171 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:52.005 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:52.005 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:52.005 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:52.006 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:44:52.006 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:44:52.006 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:44:52.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:44:52.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:44:52.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:44:52.010 +08:00 [DBG] =========Yi-SQL耗时1.3282毫秒=====
2024-04-22 16:44:52.013 +08:00 [DBG] =========Yi-SQL耗时4.982毫秒=====
2024-04-22 16:44:52.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:44:52.023 +08:00 [DBG] =========Yi-SQL耗时2.8647毫秒=====
2024-04-22 16:44:52.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:44:52.051 +08:00 [DBG] =========Yi-SQL耗时27.2584毫秒=====
2024-04-22 16:44:52.053 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:44:52.053 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:44:52.053 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 47.6824ms
2024-04-22 16:44:52.053 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:52.054 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 47.8309ms
2024-04-22 16:44:52.054 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:44:52.087 +08:00 [DBG] =========Yi-SQL耗时78.5541毫秒=====
2024-04-22 16:44:52.088 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:44:52.088 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 82.2501ms
2024-04-22 16:44:52.088 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:55:24.010 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:24.010 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:24.010 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:24.011 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:55:24.011 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:55:24.011 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 16:55:24.013 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:55:24.014 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 2.339ms
2024-04-22 16:55:24.014 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:24.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:55:24.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 16:55:24.096 +08:00 [DBG] =========Yi-SQL耗时74.3562毫秒=====
2024-04-22 16:55:24.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 16:55:24.098 +08:00 [DBG] =========Yi-SQL耗时83.4195毫秒=====
2024-04-22 16:55:24.098 +08:00 [DBG] =========Yi-SQL耗时0.947毫秒=====
2024-04-22 16:55:24.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 16:55:24.100 +08:00 [DBG] =========Yi-SQL耗时0.5336毫秒=====
2024-04-22 16:55:24.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:55:24.105 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:55:24.106 +08:00 [DBG] =========Yi-SQL耗时1.3125毫秒=====
2024-04-22 16:55:24.106 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 94.8109ms
2024-04-22 16:55:24.106 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:24.111 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:55:24.112 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 100.2333ms
2024-04-22 16:55:24.112 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:34.707 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:55:34.707 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:55:34.971 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:55:34.973 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:55:34.974 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:55:34.978 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:55:34.979 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:55:34.981 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:55:34.981 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.0627ms
2024-04-22 16:55:34.981 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:55:35.012 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:55:35.012 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:55:35.012 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:55:35.013 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:55:35.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:55:35.019 +08:00 [DBG] =========Yi-SQL耗时3.3349毫秒=====
2024-04-22 16:55:35.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:55:35.022 +08:00 [DBG] =========Yi-SQL耗时1.4455毫秒=====
2024-04-22 16:55:35.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:55:35.024 +08:00 [DBG] =========Yi-SQL耗时1.2833毫秒=====
2024-04-22 16:55:35.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:55:35.027 +08:00 [DBG] =========Yi-SQL耗时1.8854毫秒=====
2024-04-22 16:55:35.028 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:55:35.029 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 16.3155ms
2024-04-22 16:55:35.029 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:55:35.063 +08:00 [INF] 2024/4/22 16:55:35：cc,upelpVspOBvElK0-9tzuiQ连接服务端success，当前已连接0个
2024-04-22 16:55:35.184 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:55:35.184 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:55:35.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:55:35.196 +08:00 [DBG] =========Yi-SQL耗时7.1517毫秒=====
2024-04-22 16:55:35.202 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:55:35.205 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 20.1529ms
2024-04-22 16:55:35.205 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:55:35.315 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:35.315 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:55:35.315 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:55:35.315 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:55:35.316 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:55:35.316 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:35.317 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:55:35.317 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 1.1803ms
2024-04-22 16:55:35.317 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:35.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 16:55:35.321 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:35.329 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 16:55:35.334 +08:00 [DBG] =========Yi-SQL耗时13.4912毫秒=====
2024-04-22 16:55:35.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 16:55:35.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:55:35.341 +08:00 [DBG] =========Yi-SQL耗时3.4363毫秒=====
2024-04-22 16:55:35.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:55:35.345 +08:00 [DBG] =========Yi-SQL耗时2.5958毫秒=====
2024-04-22 16:55:35.346 +08:00 [DBG] =========Yi-SQL耗时4.0623毫秒=====
2024-04-22 16:55:35.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 16:55:35.355 +08:00 [DBG] =========Yi-SQL耗时7.9779毫秒=====
2024-04-22 16:55:35.355 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:55:35.356 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 40.9335ms
2024-04-22 16:55:35.356 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:55:35.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:55:35.360 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:55:35.362 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 44.8676ms
2024-04-22 16:55:35.362 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:55:35.364 +08:00 [DBG] =========Yi-SQL耗时4.6131毫秒=====
2024-04-22 16:55:35.373 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:55:35.373 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 43.4932ms
2024-04-22 16:55:35.373 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:57:06.483 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:06.483 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:57:06.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:57:06.488 +08:00 [DBG] =========Yi-SQL耗时3.0023毫秒=====
2024-04-22 16:57:06.555 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 16:57:06.555 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:57:06.556 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 72.6083ms
2024-04-22 16:57:06.556 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:06.559 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Abp.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-22 16:57:06.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:57:06.578 +08:00 [DBG] =========Yi-SQL耗时4.5749毫秒=====
2024-04-22 16:57:06.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:57:06.583 +08:00 [DBG] =========Yi-SQL耗时1.3176毫秒=====
2024-04-22 16:57:06.587 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:57:06.589 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 30.1482ms
2024-04-22 16:57:06.589 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-22 16:57:08.572 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:08.572 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:08.572 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:57:08.572 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:57:08.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:57:08.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:57:08.576 +08:00 [DBG] =========Yi-SQL耗时2.4121毫秒=====
2024-04-22 16:57:08.576 +08:00 [DBG] =========Yi-SQL耗时2.2683毫秒=====
2024-04-22 16:57:08.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:57:08.586 +08:00 [DBG] =========Yi-SQL耗时2.3655毫秒=====
2024-04-22 16:57:08.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:57:08.588 +08:00 [DBG] =========Yi-SQL耗时1.681毫秒=====
2024-04-22 16:57:08.593 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:57:08.593 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 21.5301ms
2024-04-22 16:57:08.594 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:08.597 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:57:08.598 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 25.905ms
2024-04-22 16:57:08.598 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:38.777 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:38.777 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:57:38.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:57:38.779 +08:00 [DBG] =========Yi-SQL耗时0.6065毫秒=====
2024-04-22 16:57:38.781 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:57:38.781 +08:00 [DBG] =========Yi-SQL耗时0.9709毫秒=====
2024-04-22 16:57:38.813 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:57:38.813 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 35.3653ms
2024-04-22 16:57:38.813 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:52.226 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 16:57:52.227 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 16:57:53.100 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:57:53.102 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 16:57:53.102 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 16:57:53.113 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.117 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:57:53.121 +08:00 [INF] CORS policy execution successful.
2024-04-22 16:57:53.122 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 16:57:53.122 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.6814ms
2024-04-22 16:57:53.122 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.124 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 16:57:53.141 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.142 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 16:57:53.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:57:53.149 +08:00 [DBG] =========Yi-SQL耗时1.9981毫秒=====
2024-04-22 16:57:53.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 16:57:53.160 +08:00 [DBG] =========Yi-SQL耗时1.0156毫秒=====
2024-04-22 16:57:53.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 16:57:53.161 +08:00 [DBG] =========Yi-SQL耗时0.4166毫秒=====
2024-04-22 16:57:53.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:57:53.163 +08:00 [DBG] =========Yi-SQL耗时0.7967毫秒=====
2024-04-22 16:57:53.164 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:57:53.164 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 21.8902ms
2024-04-22 16:57:53.164 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.214 +08:00 [INF] 2024/4/22 16:57:53：cc,p2BE8CtF673pPL6JKEts1g连接服务端success，当前已连接0个
2024-04-22 16:57:53.391 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.391 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 16:57:53.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 16:57:53.429 +08:00 [DBG] =========Yi-SQL耗时35.7401毫秒=====
2024-04-22 16:57:53.433 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 16:57:53.433 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 41.9069ms
2024-04-22 16:57:53.433 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.524 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.524 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.524 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:57:53.525 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.526 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 16:57:53.530 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:57:53.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:57:53.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:57:53.534 +08:00 [DBG] =========Yi-SQL耗时1.3176毫秒=====
2024-04-22 16:57:53.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:57:53.537 +08:00 [DBG] =========Yi-SQL耗时4.1273毫秒=====
2024-04-22 16:57:53.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:57:53.567 +08:00 [DBG] =========Yi-SQL耗时23.0657毫秒=====
2024-04-22 16:57:53.567 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:57:53.646 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 115.7786ms
2024-04-22 16:57:53.646 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.664 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:57:53.664 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 138.9456ms
2024-04-22 16:57:53.664 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:57:53.735 +08:00 [DBG] =========Yi-SQL耗时201.4621毫秒=====
2024-04-22 16:57:53.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:57:53.743 +08:00 [DBG] =========Yi-SQL耗时2.7589毫秒=====
2024-04-22 16:57:53.748 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:57:53.749 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 222.9213ms
2024-04-22 16:57:53.749 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:58:00.954 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:58:00.954 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 16:58:00.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 16:58:00.959 +08:00 [DBG] =========Yi-SQL耗时1.0693毫秒=====
2024-04-22 16:58:00.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 16:58:00.964 +08:00 [DBG] =========Yi-SQL耗时1.4671毫秒=====
2024-04-22 16:58:00.966 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:58:00.967 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 12.3343ms
2024-04-22 16:58:00.967 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 16:58:28.678 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:58:28.678 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:58:28.679 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:58:28.680 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:58:28.680 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:58:28.682 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 2.3095ms
2024-04-22 16:58:28.682 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-22 16:58:28.685 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:58:28.685 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-22 16:58:28.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-22 16:58:28.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:58:28.714 +08:00 [DBG] =========Yi-SQL耗时4.3576毫秒=====
2024-04-22 16:58:28.712 +08:00 [DBG] =========Yi-SQL耗时3.5082毫秒=====
2024-04-22 16:58:28.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-22 16:58:28.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-22 16:58:28.719 +08:00 [DBG] =========Yi-SQL耗时2.3042毫秒=====
2024-04-22 16:58:28.719 +08:00 [DBG] =========Yi-SQL耗时2.3124毫秒=====
2024-04-22 16:58:28.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-22 16:58:28.727 +08:00 [DBG] =========Yi-SQL耗时2.3089毫秒=====
2024-04-22 16:58:28.734 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:58:28.735 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:58:28.735 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 55.1385ms
2024-04-22 16:58:28.735 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:58:28.735 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 49.7663ms
2024-04-22 16:58:28.735 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:58:39.525 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:58:39.525 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:58:39.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')  
===============================

2024-04-22 16:58:39.535 +08:00 [DBG] =========Yi-SQL耗时1.6551毫秒=====
2024-04-22 16:58:39.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')    LIMIT 10 offset 0
===============================

2024-04-22 16:58:39.538 +08:00 [DBG] =========Yi-SQL耗时1.1742毫秒=====
2024-04-22 16:58:39.539 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:58:39.540 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 14.763ms
2024-04-22 16:58:39.540 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:59:12.268 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 16:59:12.269 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-22 16:59:12.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'8e47d602-45b1-4fc7-897d-6b0c983ee5bd')  
===============================

2024-04-22 16:59:12.290 +08:00 [DBG] =========Yi-SQL耗时6.4608毫秒=====
2024-04-22 16:59:12.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'8e47d602-45b1-4fc7-897d-6b0c983ee5bd')    LIMIT 10 offset 0
===============================

2024-04-22 16:59:12.293 +08:00 [DBG] =========Yi-SQL耗时1.5324毫秒=====
2024-04-22 16:59:12.304 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 16:59:12.304 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 35.5434ms
2024-04-22 16:59:12.304 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-22 17:00:53.149 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:00:53.150 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:00:53.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:00:53.156 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:00:53.157 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 17:00:53.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:00:53.225 +08:00 [DBG] =========Yi-SQL耗时68.8247毫秒=====
2024-04-22 17:00:53.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:00:53.229 +08:00 [DBG] =========Yi-SQL耗时0.633毫秒=====
2024-04-22 17:00:53.231 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:00:53.231 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 81.1758ms
2024-04-22 17:00:53.231 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:00:53.243 +08:00 [DBG] =========Yi-SQL耗时82.5879毫秒=====
2024-04-22 17:00:53.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:00:53.245 +08:00 [DBG] =========Yi-SQL耗时0.7651毫秒=====
2024-04-22 17:00:53.247 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:00:53.247 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 90.3601ms
2024-04-22 17:00:53.247 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:01:16.771 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:01:16.771 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:01:16.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:01:16.774 +08:00 [DBG] =========Yi-SQL耗时1.0993毫秒=====
2024-04-22 17:01:16.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:01:16.777 +08:00 [DBG] =========Yi-SQL耗时0.7384毫秒=====
2024-04-22 17:01:16.779 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:01:16.780 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 8.7026ms
2024-04-22 17:01:16.780 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:01:35.024 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:01:35.024 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:01:35.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:01:35.026 +08:00 [DBG] =========Yi-SQL耗时0.908毫秒=====
2024-04-22 17:01:35.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:01:35.031 +08:00 [DBG] =========Yi-SQL耗时1.7846毫秒=====
2024-04-22 17:01:35.036 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:01:35.037 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 12.5493ms
2024-04-22 17:01:35.037 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:02:33.389 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:02:33.390 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:02:33.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:02:33.400 +08:00 [DBG] =========Yi-SQL耗时5.0526毫秒=====
2024-04-22 17:02:33.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:02:33.411 +08:00 [DBG] =========Yi-SQL耗时1.4399毫秒=====
2024-04-22 17:02:33.416 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:02:33.417 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 26.5648ms
2024-04-22 17:02:33.417 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:02:39.475 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:02:39.476 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:02:39.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "dicttype" = N'sys_user_sex' )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:02:39.482 +08:00 [DBG] =========Yi-SQL耗时1.7031毫秒=====
2024-04-22 17:02:39.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "dicttype" = N'sys_user_sex' )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:02:39.494 +08:00 [DBG] =========Yi-SQL耗时9.6736毫秒=====
2024-04-22 17:02:39.498 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:02:39.498 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 22.469ms
2024-04-22 17:02:39.498 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:02:58.659 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:02:58.659 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:02:58.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "dicttype" = N'sys_show_hide' )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:02:58.662 +08:00 [DBG] =========Yi-SQL耗时0.9873毫秒=====
2024-04-22 17:02:58.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "dicttype" = N'sys_show_hide' )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:02:58.665 +08:00 [DBG] =========Yi-SQL耗时0.8824毫秒=====
2024-04-22 17:02:58.666 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:02:58.667 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 7.3494ms
2024-04-22 17:02:58.667 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:06.367 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 17:03:06.367 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 17:03:07.167 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:03:07.173 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 17:03:07.174 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 17:03:07.204 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.205 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:03:07.208 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 17:03:07.209 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.1168ms
2024-04-22 17:03:07.209 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.229 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:03:07.238 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 17:03:07.256 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.256 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:03:07.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:03:07.265 +08:00 [DBG] =========Yi-SQL耗时5.9446毫秒=====
2024-04-22 17:03:07.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 17:03:07.271 +08:00 [DBG] =========Yi-SQL耗时2.3418毫秒=====
2024-04-22 17:03:07.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 17:03:07.280 +08:00 [DBG] =========Yi-SQL耗时8.5992毫秒=====
2024-04-22 17:03:07.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:03:07.326 +08:00 [DBG] =========Yi-SQL耗时3.8414毫秒=====
2024-04-22 17:03:07.327 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:03:07.327 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 71.4575ms
2024-04-22 17:03:07.327 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.351 +08:00 [INF] 2024/4/22 17:03:07：cc,NxudFdi3IddjIsjvmCEbEw连接服务端success，当前已连接0个
2024-04-22 17:03:07.683 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.683 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 17:03:07.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 17:03:07.685 +08:00 [DBG] =========Yi-SQL耗时1.3117毫秒=====
2024-04-22 17:03:07.689 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 17:03:07.690 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.9221ms
2024-04-22 17:03:07.690 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.717 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.717 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.717 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.718 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:03:07.718 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 17:03:07.718 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:03:07.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:03:07.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:03:07.720 +08:00 [DBG] =========Yi-SQL耗时0.6484毫秒=====
2024-04-22 17:03:07.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:03:07.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:03:07.721 +08:00 [DBG] =========Yi-SQL耗时2.0654毫秒=====
2024-04-22 17:03:07.729 +08:00 [DBG] =========Yi-SQL耗时6.9111毫秒=====
2024-04-22 17:03:07.730 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:03:07.730 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.2972ms
2024-04-22 17:03:07.730 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.743 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:03:07.748 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 29.9409ms
2024-04-22 17:03:07.748 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:07.851 +08:00 [DBG] =========Yi-SQL耗时128.9736毫秒=====
2024-04-22 17:03:07.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:03:07.854 +08:00 [DBG] =========Yi-SQL耗时0.7466毫秒=====
2024-04-22 17:03:07.856 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:03:07.856 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 138.4594ms
2024-04-22 17:03:07.856 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:16.065 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:03:16.065 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:03:16.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "dicttype" = N'sys_show_hide' )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:03:16.067 +08:00 [DBG] =========Yi-SQL耗时0.8931毫秒=====
2024-04-22 17:03:16.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "dicttype" = N'sys_show_hide' )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:03:16.072 +08:00 [DBG] =========Yi-SQL耗时2.1997毫秒=====
2024-04-22 17:03:16.073 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:03:16.073 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 8.4612ms
2024-04-22 17:03:16.074 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:40.642 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 17:05:40.643 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 17:05:41.574 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:05:41.575 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:41.575 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 17:05:41.576 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 17:05:41.576 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:05:41.584 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 17:05:41.585 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 9.7299ms
2024-04-22 17:05:41.585 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:41.610 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:05:41.617 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 17:05:41.649 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:41.650 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:05:41.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:05:41.676 +08:00 [DBG] =========Yi-SQL耗时18.8899毫秒=====
2024-04-22 17:05:41.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 17:05:41.683 +08:00 [DBG] =========Yi-SQL耗时5.4474毫秒=====
2024-04-22 17:05:41.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 17:05:41.687 +08:00 [DBG] =========Yi-SQL耗时2.695毫秒=====
2024-04-22 17:05:41.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:05:41.692 +08:00 [DBG] =========Yi-SQL耗时3.8546毫秒=====
2024-04-22 17:05:41.693 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:05:41.694 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 44.0016ms
2024-04-22 17:05:41.694 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:41.704 +08:00 [INF] 2024/4/22 17:05:41：cc,4LPMOekVkSGoyZHu1SmaUA连接服务端success，当前已连接0个
2024-04-22 17:05:42.123 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:42.123 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 17:05:42.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 17:05:42.131 +08:00 [DBG] =========Yi-SQL耗时1.9813毫秒=====
2024-04-22 17:05:42.135 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 17:05:42.135 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 11.6067ms
2024-04-22 17:05:42.135 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:42.158 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:42.158 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:42.158 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:42.159 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 17:05:42.159 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:05:42.159 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:05:42.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:05:42.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:05:42.187 +08:00 [DBG] =========Yi-SQL耗时4.7273毫秒=====
2024-04-22 17:05:42.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:05:42.199 +08:00 [DBG] =========Yi-SQL耗时10.9072毫秒=====
2024-04-22 17:05:42.200 +08:00 [DBG] =========Yi-SQL耗时7.3107毫秒=====
2024-04-22 17:05:42.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:05:42.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:05:42.203 +08:00 [DBG] =========Yi-SQL耗时2.2334毫秒=====
2024-04-22 17:05:42.204 +08:00 [DBG] =========Yi-SQL耗时2.8072毫秒=====
2024-04-22 17:05:42.214 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:05:42.215 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 56.3519ms
2024-04-22 17:05:42.215 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:42.216 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:05:42.217 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 58.4284ms
2024-04-22 17:05:42.217 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:05:42.219 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:05:42.220 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 60.8396ms
2024-04-22 17:05:42.220 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:10.610 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 17:06:10.611 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 17:06:11.634 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:06:11.636 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 17:06:11.638 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 17:06:11.653 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:11.653 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:11.655 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 17:06:11.655 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.8849ms
2024-04-22 17:06:11.655 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:11.659 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:06:11.660 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 17:06:11.673 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:11.673 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:11.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:06:11.726 +08:00 [INF] 2024/4/22 17:06:11：cc,lHJhBnaHeICUwLiwPQnmwQ连接服务端success，当前已连接0个
2024-04-22 17:06:11.822 +08:00 [DBG] =========Yi-SQL耗时147.2869毫秒=====
2024-04-22 17:06:11.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 17:06:11.825 +08:00 [DBG] =========Yi-SQL耗时1.3206毫秒=====
2024-04-22 17:06:11.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 17:06:11.828 +08:00 [DBG] =========Yi-SQL耗时2.1648毫秒=====
2024-04-22 17:06:11.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:06:11.841 +08:00 [DBG] =========Yi-SQL耗时10.8158毫秒=====
2024-04-22 17:06:11.842 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:06:11.844 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 170.0677ms
2024-04-22 17:06:11.844 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:12.255 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:12.255 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:12.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 17:06:12.258 +08:00 [DBG] =========Yi-SQL耗时1.5544毫秒=====
2024-04-22 17:06:12.260 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 17:06:12.260 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.9999ms
2024-04-22 17:06:12.260 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:12.283 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:12.283 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:12.290 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:12.290 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:12.291 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:12.291 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:12.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:06:12.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:06:12.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:06:12.301 +08:00 [DBG] =========Yi-SQL耗时9.0654毫秒=====
2024-04-22 17:06:12.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:06:12.328 +08:00 [DBG] =========Yi-SQL耗时1.3884毫秒=====
2024-04-22 17:06:12.332 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:06:12.333 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 42.2779ms
2024-04-22 17:06:12.333 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:12.521 +08:00 [DBG] =========Yi-SQL耗时228.22毫秒=====
2024-04-22 17:06:12.530 +08:00 [DBG] =========Yi-SQL耗时237.6318毫秒=====
2024-04-22 17:06:12.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:06:12.533 +08:00 [DBG] =========Yi-SQL耗时2.4546毫秒=====
2024-04-22 17:06:12.534 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:06:12.534 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 243.3114ms
2024-04-22 17:06:12.534 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:12.537 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:06:12.538 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 254.6191ms
2024-04-22 17:06:12.538 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:25.677 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 17:06:25.678 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 17:06:26.493 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:06:26.494 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 17:06:26.495 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 17:06:26.501 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.503 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:26.514 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 17:06:26.515 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 12.2193ms
2024-04-22 17:06:26.515 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.519 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:06:26.520 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 17:06:26.529 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.530 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:26.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:06:26.540 +08:00 [DBG] =========Yi-SQL耗时2.4662毫秒=====
2024-04-22 17:06:26.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 17:06:26.546 +08:00 [DBG] =========Yi-SQL耗时1.8194毫秒=====
2024-04-22 17:06:26.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 17:06:26.549 +08:00 [DBG] =========Yi-SQL耗时1.3439毫秒=====
2024-04-22 17:06:26.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:06:26.551 +08:00 [DBG] =========Yi-SQL耗时1.5896毫秒=====
2024-04-22 17:06:26.552 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:06:26.552 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 22.5026ms
2024-04-22 17:06:26.552 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.590 +08:00 [INF] 2024/4/22 17:06:26：cc,xn42Gmz0XOCqOLG96uSYQA连接服务端success，当前已连接0个
2024-04-22 17:06:26.918 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.919 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:26.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 17:06:26.923 +08:00 [DBG] =========Yi-SQL耗时1.5399毫秒=====
2024-04-22 17:06:26.925 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 17:06:26.925 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.3052ms
2024-04-22 17:06:26.925 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.943 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.943 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.943 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.943 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:26.943 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:26.943 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:06:26.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:06:26.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:06:26.946 +08:00 [DBG] =========Yi-SQL耗时1.7497毫秒=====
2024-04-22 17:06:26.946 +08:00 [DBG] =========Yi-SQL耗时1.3797毫秒=====
2024-04-22 17:06:26.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:06:26.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:06:26.952 +08:00 [DBG] =========Yi-SQL耗时1.4692毫秒=====
2024-04-22 17:06:26.952 +08:00 [DBG] =========Yi-SQL耗时1.5259毫秒=====
2024-04-22 17:06:26.954 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:06:26.955 +08:00 [DBG] =========Yi-SQL耗时1.0103毫秒=====
2024-04-22 17:06:26.956 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:06:26.956 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.869ms
2024-04-22 17:06:26.956 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.959 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:06:26.960 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 17.1101ms
2024-04-22 17:06:26.960 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:06:26.970 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:06:26.970 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 27.4618ms
2024-04-22 17:06:26.970 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:36.995 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 17:07:36.996 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 17:07:37.989 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:07:37.992 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 17:07:37.992 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 17:07:38.006 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:07:38.011 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 17:07:38.019 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.020 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:07:38.027 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 17:07:38.027 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.4633ms
2024-04-22 17:07:38.028 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.055 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.055 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:07:38.057 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:07:38.064 +08:00 [DBG] =========Yi-SQL耗时6.5459毫秒=====
2024-04-22 17:07:38.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 17:07:38.071 +08:00 [DBG] =========Yi-SQL耗时4.6878毫秒=====
2024-04-22 17:07:38.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 17:07:38.074 +08:00 [DBG] =========Yi-SQL耗时1.2868毫秒=====
2024-04-22 17:07:38.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:07:38.086 +08:00 [DBG] =========Yi-SQL耗时9.4397毫秒=====
2024-04-22 17:07:38.087 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:07:38.088 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 32.4864ms
2024-04-22 17:07:38.088 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.202 +08:00 [INF] 2024/4/22 17:07:38：cc,exQXTJY_UKEU0OybcIuzXQ连接服务端success，当前已连接0个
2024-04-22 17:07:38.521 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.522 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 17:07:38.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 17:07:38.528 +08:00 [DBG] =========Yi-SQL耗时2.0721毫秒=====
2024-04-22 17:07:38.532 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 17:07:38.533 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 10.7261ms
2024-04-22 17:07:38.533 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.551 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.551 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:07:38.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:07:38.561 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.563 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:07:38.565 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.565 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 17:07:38.569 +08:00 [DBG] =========Yi-SQL耗时11.4021毫秒=====
2024-04-22 17:07:38.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:07:38.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:07:38.574 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:07:38.604 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 52.9038ms
2024-04-22 17:07:38.605 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.605 +08:00 [DBG] =========Yi-SQL耗时31.9494毫秒=====
2024-04-22 17:07:38.605 +08:00 [DBG] =========Yi-SQL耗时31.9846毫秒=====
2024-04-22 17:07:38.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:07:38.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:07:38.617 +08:00 [DBG] =========Yi-SQL耗时7.846毫秒=====
2024-04-22 17:07:38.617 +08:00 [DBG] =========Yi-SQL耗时7.8286毫秒=====
2024-04-22 17:07:38.620 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:07:38.621 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:07:38.621 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 55.9277ms
2024-04-22 17:07:38.621 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 57.7272ms
2024-04-22 17:07:38.621 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:07:38.621 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:00.741 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 17:08:00.741 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-22 17:08:01.788 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:08:01.789 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-22 17:08:01.790 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-22 17:08:01.804 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:01.810 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:01.812 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-22 17:08:01.813 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.5506ms
2024-04-22 17:08:01.813 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:01.814 +08:00 [INF] CORS policy execution successful.
2024-04-22 17:08:01.823 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-22 17:08:01.828 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:01.828 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:01.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:01.854 +08:00 [DBG] =========Yi-SQL耗时23.7892毫秒=====
2024-04-22 17:08:01.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-22 17:08:01.857 +08:00 [DBG] =========Yi-SQL耗时1.2588毫秒=====
2024-04-22 17:08:01.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-22 17:08:01.861 +08:00 [DBG] =========Yi-SQL耗时2.2954毫秒=====
2024-04-22 17:08:01.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:01.865 +08:00 [DBG] =========Yi-SQL耗时2.8124毫秒=====
2024-04-22 17:08:01.866 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:01.867 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 38.7651ms
2024-04-22 17:08:01.867 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:01.909 +08:00 [INF] 2024/4/22 17:08:01：cc,xPcbTPeMv9_x_XtdCMCuCA连接服务端success，当前已连接0个
2024-04-22 17:08:02.250 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:02.251 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:02.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'5f43c32c-34c1-ced2-e3ae-3a11f30f195f' )   LIMIT 1 offset 0
===============================

2024-04-22 17:08:02.254 +08:00 [DBG] =========Yi-SQL耗时0.9995毫秒=====
2024-04-22 17:08:02.256 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-22 17:08:02.257 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.8146ms
2024-04-22 17:08:02.257 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:02.280 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:02.280 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:02.280 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:02.280 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:02.280 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:02.281 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:02.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:02.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:02.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:02.283 +08:00 [DBG] =========Yi-SQL耗时0.9882毫秒=====
2024-04-22 17:08:02.283 +08:00 [DBG] =========Yi-SQL耗时1.383毫秒=====
2024-04-22 17:08:02.284 +08:00 [DBG] =========Yi-SQL耗时2.1206毫秒=====
2024-04-22 17:08:02.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:08:02.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:08:02.294 +08:00 [DBG] =========Yi-SQL耗时3.8944毫秒=====
2024-04-22 17:08:02.294 +08:00 [DBG] =========Yi-SQL耗时7.6588毫秒=====
2024-04-22 17:08:02.296 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:02.296 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 15.7399ms
2024-04-22 17:08:02.297 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:02.298 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:02.298 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:02.299 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 18.7388ms
2024-04-22 17:08:02.299 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:02.299 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 19.1828ms
2024-04-22 17:08:02.300 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:13.939 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:13.940 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:13.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:13.942 +08:00 [DBG] =========Yi-SQL耗时0.7586毫秒=====
2024-04-22 17:08:13.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 10
===============================

2024-04-22 17:08:13.945 +08:00 [DBG] =========Yi-SQL耗时1.2156毫秒=====
2024-04-22 17:08:13.948 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:13.948 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 8.7971ms
2024-04-22 17:08:13.948 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:15.125 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:15.126 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:15.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:15.128 +08:00 [DBG] =========Yi-SQL耗时0.827毫秒=====
2024-04-22 17:08:15.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 20
===============================

2024-04-22 17:08:15.132 +08:00 [DBG] =========Yi-SQL耗时1.0825毫秒=====
2024-04-22 17:08:15.134 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:15.135 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 9.1667ms
2024-04-22 17:08:15.135 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:38.572 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:38.572 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:38.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:38.574 +08:00 [DBG] =========Yi-SQL耗时0.6953毫秒=====
2024-04-22 17:08:38.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 30
===============================

2024-04-22 17:08:38.577 +08:00 [DBG] =========Yi-SQL耗时0.7715毫秒=====
2024-04-22 17:08:38.580 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:38.581 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 8.7891ms
2024-04-22 17:08:38.581 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:40.393 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:40.393 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:40.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "dicttype" = N'sys_show_hide' )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:40.396 +08:00 [DBG] =========Yi-SQL耗时0.9491毫秒=====
2024-04-22 17:08:40.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "dicttype" = N'sys_show_hide' )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 30
===============================

2024-04-22 17:08:40.399 +08:00 [DBG] =========Yi-SQL耗时0.5902毫秒=====
2024-04-22 17:08:40.400 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:40.411 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 17.1071ms
2024-04-22 17:08:40.411 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:40.451 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:40.452 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:40.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "dicttype" = N'sys_show_hide' )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:40.502 +08:00 [DBG] =========Yi-SQL耗时45.6493毫秒=====
2024-04-22 17:08:40.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "dicttype" = N'sys_show_hide' )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:08:40.510 +08:00 [DBG] =========Yi-SQL耗时1.6373毫秒=====
2024-04-22 17:08:40.511 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:40.511 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 59.4516ms
2024-04-22 17:08:40.511 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:41.401 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:41.401 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:41.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "dicttype" = N'sys_normal_disable' )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:41.403 +08:00 [DBG] =========Yi-SQL耗时0.6632毫秒=====
2024-04-22 17:08:41.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "dicttype" = N'sys_normal_disable' )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:08:41.406 +08:00 [DBG] =========Yi-SQL耗时1.0393毫秒=====
2024-04-22 17:08:41.407 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:41.407 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 6.2366ms
2024-04-22 17:08:41.407 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:42.159 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:42.159 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:42.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "dicttype" = N'sys_job_status' )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:42.164 +08:00 [DBG] =========Yi-SQL耗时1.3847毫秒=====
2024-04-22 17:08:42.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "dicttype" = N'sys_job_status' )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:08:42.168 +08:00 [DBG] =========Yi-SQL耗时0.6416毫秒=====
2024-04-22 17:08:42.169 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:42.169 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 10.443ms
2024-04-22 17:08:42.169 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:42.710 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:42.710 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:42.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "dicttype" = N'sys_yes_no' )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:42.712 +08:00 [DBG] =========Yi-SQL耗时0.6276毫秒=====
2024-04-22 17:08:42.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "dicttype" = N'sys_yes_no' )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:08:42.717 +08:00 [DBG] =========Yi-SQL耗时1.2543毫秒=====
2024-04-22 17:08:42.720 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:42.720 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 9.2515ms
2024-04-22 17:08:42.720 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:43.201 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:08:43.201 +08:00 [INF] Route matched with {action = "GetList", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-22 17:08:43.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionary"  WHERE ( "dicttype" = N'sys_show_hide' )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-22 17:08:43.203 +08:00 [DBG] =========Yi-SQL耗时0.632毫秒=====
2024-04-22 17:08:43.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"   WHERE ( "dicttype" = N'sys_show_hide' )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-22 17:08:43.206 +08:00 [DBG] =========Yi-SQL耗时1.1377毫秒=====
2024-04-22 17:08:43.207 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-22 17:08:43.207 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application) in 6.0549ms
2024-04-22 17:08:43.207 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-22 17:10:12.871 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-22 17:10:12.871 +08:00 [INF] Executed endpoint '/hub/main'
