2024-04-10 09:42:36.219 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-10 09:42:36.243 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-10 09:42:42.113 +08:00 [INF] Loaded ABP modules:
2024-04-10 09:42:42.113 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-10 09:42:42.113 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-10 09:42:42.113 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-10 09:42:42.113 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-10 09:42:42.113 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-10 09:42:42.114 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-10 09:42:42.114 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-10 09:42:42.114 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-10 09:42:42.114 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-10 09:42:42.114 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-10 09:42:42.114 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-10 09:42:42.114 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-10 09:42:42.114 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-10 09:42:42.114 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-10 09:42:42.114 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-10 09:42:42.114 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-10 09:42:42.114 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-10 09:42:42.114 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-10 09:42:42.114 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-10 09:42:42.114 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-10 09:42:42.114 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-10 09:42:42.114 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-10 09:42:42.114 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-10 09:42:42.114 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-10 09:42:42.114 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-10 09:42:42.114 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-10 09:42:42.114 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-10 09:42:42.114 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-10 09:42:42.114 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-10 09:42:42.114 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-10 09:42:42.114 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-10 09:42:42.114 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-10 09:42:42.114 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-10 09:42:42.114 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-10 09:42:42.114 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-10 09:42:42.114 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-10 09:42:42.119 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-10 09:42:42.124 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-10 09:42:42.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:42.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-10 09:42:42.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-10 09:42:42.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:42.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-10 09:42:42.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-10 09:42:42.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-10 09:42:42.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-10 09:42:42.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-10 09:42:42.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-10 09:42:42.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-10 09:42:42.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-10 09:42:42.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-10 09:42:42.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-10 09:42:42.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-10 09:42:42.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-10 09:42:42.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:42.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-10 09:42:42.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-10 09:42:42.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-10 09:42:42.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-10 09:42:42.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-10 09:42:42.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-10 09:42:42.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-10 09:42:42.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-10 09:42:42.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.931 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-10 09:42:42.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:42.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-10 09:42:42.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-10 09:42:42.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-10 09:42:42.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-10 09:42:42.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-10 09:42:42.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 09:42:42.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 09:42:42.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-10 09:42:42.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-10 09:42:42.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-10 09:42:42.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-10 09:42:42.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-10 09:42:42.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-10 09:42:42.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-10 09:42:42.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-10 09:42:42.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-10 09:42:42.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:42.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-10 09:42:42.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-10 09:42:42.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-10 09:42:42.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-10 09:42:42.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-10 09:42:42.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-10 09:42:42.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-10 09:42:42.973 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-10 09:42:42.973 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-10 09:42:42.973 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-10 09:42:42.973 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-10 09:42:42.973 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-10 09:42:42.974 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-10 09:42:42.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:42.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:42.997 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:42.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-10 09:42:43.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-10 09:42:43.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-10 09:42:43.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-10 09:42:43.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-10 09:42:43.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-10 09:42:43.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-10 09:42:43.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-10 09:42:43.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.008 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-10 09:42:43.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-10 09:42:43.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-10 09:42:43.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-10 09:42:43.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-10 09:42:43.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.031 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-10 09:42:43.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-10 09:42:43.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-10 09:42:43.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-10 09:42:43.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-10 09:42:43.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-10 09:42:43.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-10 09:42:43.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-10 09:42:43.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-10 09:42:43.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-10 09:42:43.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-10 09:42:43.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-10 09:42:43.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-10 09:42:43.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-10 09:42:43.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 09:42:43.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 09:42:43.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-10 09:42:43.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-10 09:42:43.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-10 09:42:43.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-10 09:42:43.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-10 09:42:43.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-10 09:42:43.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-10 09:42:43.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-10 09:42:43.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-10 09:42:43.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-10 09:42:43.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-10 09:42:43.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-10 09:42:43.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-10 09:42:43.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.110 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-10 09:42:43.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-10 09:42:43.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-10 09:42:43.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-10 09:42:43.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.125 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-10 09:42:43.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.137 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-10 09:42:43.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-10 09:42:43.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-10 09:42:43.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-10 09:42:43.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-10 09:42:43.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 09:42:43.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 09:42:43.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-10 09:42:43.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-10 09:42:43.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-10 09:42:43.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-10 09:42:43.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-10 09:42:43.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-10 09:42:43.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-10 09:42:43.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.154 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-10 09:42:43.161 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-10 09:42:43.161 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-10 09:42:43.161 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-10 09:42:43.161 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-10 09:42:43.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-10 09:42:43.169 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-10 09:42:43.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-10 09:42:43.183 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-10 09:42:43.183 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-10 09:42:43.183 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-10 09:42:43.183 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 09:42:43.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 09:42:43.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-10 09:42:43.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-10 09:42:43.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-10 09:42:43.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-10 09:42:43.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-10 09:42:43.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-10 09:42:43.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-10 09:42:43.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-10 09:42:43.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-10 09:42:43.205 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-10 09:42:43.205 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-10 09:42:43.205 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-10 09:42:43.213 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-10 09:42:43.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-10 09:42:43.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-10 09:42:43.229 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-10 09:42:43.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-10 09:42:43.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-10 09:42:43.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-10 09:42:43.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-10 09:42:43.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-10 09:42:43.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-10 09:42:43.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-10 09:42:43.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-10 09:42:43.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-10 09:42:43.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-10 09:42:43.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-10 09:42:43.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-10 09:42:43.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-10 09:42:43.232 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-10 09:42:43.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-10 09:42:43.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-10 09:42:43.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 09:42:43.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 09:42:43.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-10 09:42:43.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-10 09:42:43.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-10 09:42:43.234 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-10 09:42:43.246 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-10 09:42:43.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-10 09:42:43.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-10 09:42:43.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-10 09:42:43.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-10 09:42:43.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-10 09:42:43.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.272 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-10 09:42:43.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-10 09:42:43.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-10 09:42:43.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-10 09:42:43.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-10 09:42:43.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-10 09:42:43.287 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-10 09:42:43.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-10 09:42:43.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-10 09:42:43.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.313 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-10 09:42:43.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-10 09:42:43.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.333 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-10 09:42:43.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-10 09:42:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-10 09:42:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-10 09:42:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-10 09:42:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-10 09:42:43.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-10 09:42:43.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-10 09:42:43.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-10 09:42:43.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-10 09:42:43.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-10 09:42:43.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.366 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-10 09:42:43.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-10 09:42:43.375 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.384 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-10 09:42:43.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-10 09:42:43.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-10 09:42:43.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-10 09:42:43.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-10 09:42:43.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-10 09:42:43.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-10 09:42:43.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-10 09:42:43.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-10 09:42:43.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-10 09:42:43.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-10 09:42:43.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-10 09:42:43.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-10 09:42:43.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-10 09:42:43.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-10 09:42:43.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-10 09:42:43.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.435 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-10 09:42:43.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-10 09:42:43.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-10 09:42:43.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-10 09:42:43.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-10 09:42:43.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-10 09:42:43.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.496 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-10 09:42:43.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-10 09:42:43.504 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-10 09:42:43.504 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-10 09:42:43.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-10 09:42:43.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-10 09:42:43.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-10 09:42:43.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-10 09:42:43.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-10 09:42:43.542 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.547 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-10 09:42:43.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.559 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-10 09:42:43.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-10 09:42:43.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-10 09:42:43.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-10 09:42:43.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-10 09:42:43.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-10 09:42:43.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-10 09:42:43.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-10 09:42:43.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.619 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-10 09:42:43.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-10 09:42:43.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-10 09:42:43.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-10 09:42:43.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-10 09:42:43.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-10 09:42:43.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-10 09:42:43.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-10 09:42:43.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-10 09:42:43.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-10 09:42:43.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-10 09:42:43.644 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-10 09:42:43.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-10 09:42:43.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-10 09:42:43.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-10 09:42:43.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-10 09:42:43.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.661 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-10 09:42:43.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-10 09:42:43.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.677 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-10 09:42:43.688 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-10 09:42:43.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.713 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-10 09:42:43.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.725 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-10 09:42:43.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.736 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-10 09:42:43.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.744 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-10 09:42:43.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 09:42:43.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-10 09:42:43.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.768 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.774 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-10 09:42:43.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."id" is '主键'
===============================

2024-04-10 09:42:43.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."project" is '项目'
===============================

2024-04-10 09:42:43.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."status" is '状态'
===============================

2024-04-10 09:42:43.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."category" is '类别'
===============================

2024-04-10 09:42:43.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."impact" is '影响'
===============================

2024-04-10 09:42:43.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."priority" is '优先级'
===============================

2024-04-10 09:42:43.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."title" is '标题'
===============================

2024-04-10 09:42:43.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."description" is '详情'
===============================

2024-04-10 09:42:43.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."solve_user" is '对应人'
===============================

2024-04-10 09:42:43.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."creationtime" is '创建时间'
===============================

2024-04-10 09:42:43.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.784 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-10 09:42:43.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.792 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-10 09:42:43.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-10 09:42:43.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-10 09:42:43.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-10 09:42:43.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-10 09:42:43.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-10 09:42:43.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-10 09:42:43.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-10 09:42:43.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-10 09:42:43.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-10 09:42:43.820 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-10 09:42:43.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 09:42:43.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-10 09:42:43.839 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-10 09:42:43.839 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-10 09:42:43.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-10 09:42:43.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-10 09:42:43.840 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 09:42:43.845 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-10 09:42:43.847 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 09:42:43.932 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.941 +08:00 [DBG] =========Yi-SQL耗时9.738毫秒=====
2024-04-10 09:42:43.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.957 +08:00 [DBG] =========Yi-SQL耗时1.3402毫秒=====
2024-04-10 09:42:43.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.961 +08:00 [DBG] =========Yi-SQL耗时1.1661毫秒=====
2024-04-10 09:42:43.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.969 +08:00 [DBG] =========Yi-SQL耗时3.006毫秒=====
2024-04-10 09:42:43.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.972 +08:00 [DBG] =========Yi-SQL耗时1.0373毫秒=====
2024-04-10 09:42:43.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.977 +08:00 [DBG] =========Yi-SQL耗时1.8908毫秒=====
2024-04-10 09:42:43.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.985 +08:00 [DBG] =========Yi-SQL耗时1.6763毫秒=====
2024-04-10 09:42:43.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.989 +08:00 [DBG] =========Yi-SQL耗时1.3319毫秒=====
2024-04-10 09:42:43.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.992 +08:00 [DBG] =========Yi-SQL耗时0.6822毫秒=====
2024-04-10 09:42:43.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.995 +08:00 [DBG] =========Yi-SQL耗时0.4565毫秒=====
2024-04-10 09:42:43.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 09:42:43.998 +08:00 [DBG] =========Yi-SQL耗时1.7197毫秒=====
2024-04-10 09:42:44.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 09:42:44.002 +08:00 [DBG] =========Yi-SQL耗时0.8868毫秒=====
2024-04-10 09:42:44.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 09:42:44.005 +08:00 [DBG] =========Yi-SQL耗时1.0648毫秒=====
2024-04-10 09:42:44.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 09:42:44.010 +08:00 [DBG] =========Yi-SQL耗时1.5886毫秒=====
2024-04-10 09:42:44.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 09:42:44.015 +08:00 [DBG] =========Yi-SQL耗时1.4953毫秒=====
2024-04-10 09:42:44.024 +08:00 [DBG] 耗时-1904ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-10 09:42:44.086 +08:00 [DBG] 耗时-59ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-10 09:42:44.089 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-10 09:42:44.104 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-04-10 09:42:44.110 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-10 09:42:44.150 +08:00 [DBG] 耗时-40ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-10 09:42:44.153 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-10 09:42:44.451 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-10 09:42:44.530 +08:00 [DBG] 耗时-376ms,已加载模块-Yi.Abp.Web
2024-04-10 09:42:44.539 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-10 09:42:44.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-10 09:42:44.552 +08:00 [DBG] =========Yi-SQL耗时3.0239毫秒=====
2024-04-10 09:42:44.629 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-10 09:42:44.629 +08:00 [DBG] 耗时-98ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-10 09:42:44.630 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2503ms】==========
2024-04-10 09:42:44.722 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-10 09:42:44.722 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-10 09:42:44.722 +08:00 [INF] Hosting environment: Development
2024-04-10 09:42:44.722 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-10 09:49:40.556 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 09:49:40.581 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-10 09:49:40.648 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`1[[Volo.Abp.Http.RemoteServiceErrorInfo, Volo.Abp.ExceptionHandling, Version=8.0.5.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 09:49:40.707 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 123.7454ms
2024-04-10 09:49:40.707 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 10:00:00.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-10 10:00:00.105 +08:00 [DBG] =========Yi-SQL耗时84.8305毫秒=====
2024-04-10 10:00:00.589 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-10 10:00:00.590 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-10 10:10:47.965 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-10 10:10:47.988 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-10 10:10:52.243 +08:00 [INF] Loaded ABP modules:
2024-04-10 10:10:52.244 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-10 10:10:52.244 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-10 10:10:52.244 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-10 10:10:52.244 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-10 10:10:52.244 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-10 10:10:52.244 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-10 10:10:52.244 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-10 10:10:52.244 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-10 10:10:52.244 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-10 10:10:52.244 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-10 10:10:52.244 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-10 10:10:52.244 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-10 10:10:52.244 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-10 10:10:52.244 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-10 10:10:52.244 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-10 10:10:52.244 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-10 10:10:52.244 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-10 10:10:52.244 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-10 10:10:52.244 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-10 10:10:52.244 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-10 10:10:52.244 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-10 10:10:52.244 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-10 10:10:52.244 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-10 10:10:52.244 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-10 10:10:52.244 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-10 10:10:52.244 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-10 10:10:52.244 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-10 10:10:52.245 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-10 10:10:52.245 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-10 10:10:52.245 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-10 10:10:52.245 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-10 10:10:52.245 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-10 10:10:52.245 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-10 10:10:52.245 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-10 10:10:52.245 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-10 10:10:52.245 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-10 10:10:52.245 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-10 10:10:52.251 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-10 10:10:52.254 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-10 10:10:52.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:52.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:52.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-10 10:10:52.918 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:52.932 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-10 10:10:52.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:52.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:52.951 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-10 10:10:52.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-10 10:10:52.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-10 10:10:52.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-10 10:10:52.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-10 10:10:52.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-10 10:10:52.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-10 10:10:52.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-10 10:10:52.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-10 10:10:52.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-10 10:10:52.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-10 10:10:52.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:52.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-10 10:10:52.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:52.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:52.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-10 10:10:52.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-10 10:10:52.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-10 10:10:52.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-10 10:10:52.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-10 10:10:52.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-10 10:10:52.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-10 10:10:52.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-10 10:10:52.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:52.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-10 10:10:52.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:52.997 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:52.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-10 10:10:53.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-10 10:10:53.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:10:53.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-10 10:10:53.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-10 10:10:53.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 10:10:53.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 10:10:53.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-10 10:10:53.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-10 10:10:53.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-10 10:10:53.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-10 10:10:53.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-10 10:10:53.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-10 10:10:53.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-10 10:10:53.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-10 10:10:53.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.012 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-10 10:10:53.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-10 10:10:53.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-10 10:10:53.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:10:53.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-10 10:10:53.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-10 10:10:53.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-10 10:10:53.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-10 10:10:53.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-10 10:10:53.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-10 10:10:53.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-10 10:10:53.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-10 10:10:53.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-10 10:10:53.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-10 10:10:53.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.043 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-10 10:10:53.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-10 10:10:53.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:10:53.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-10 10:10:53.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-10 10:10:53.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-10 10:10:53.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-10 10:10:53.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-10 10:10:53.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.059 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-10 10:10:53.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-10 10:10:53.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-10 10:10:53.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-10 10:10:53.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-10 10:10:53.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-10 10:10:53.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-10 10:10:53.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-10 10:10:53.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-10 10:10:53.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-10 10:10:53.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-10 10:10:53.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-10 10:10:53.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-10 10:10:53.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.108 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.114 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-10 10:10:53.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.129 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-10 10:10:53.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-10 10:10:53.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:10:53.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-10 10:10:53.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-10 10:10:53.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 10:10:53.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 10:10:53.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-10 10:10:53.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-10 10:10:53.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-10 10:10:53.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-10 10:10:53.133 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-10 10:10:53.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-10 10:10:53.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-10 10:10:53.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-10 10:10:53.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-10 10:10:53.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-10 10:10:53.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-10 10:10:53.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-10 10:10:53.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-10 10:10:53.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.156 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-10 10:10:53.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-10 10:10:53.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-10 10:10:53.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-10 10:10:53.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-10 10:10:53.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.172 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-10 10:10:53.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-10 10:10:53.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:10:53.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-10 10:10:53.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-10 10:10:53.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 10:10:53.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 10:10:53.180 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-10 10:10:53.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-10 10:10:53.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-10 10:10:53.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-10 10:10:53.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-10 10:10:53.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-10 10:10:53.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-10 10:10:53.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-10 10:10:53.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-10 10:10:53.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-10 10:10:53.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-10 10:10:53.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-10 10:10:53.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.208 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-10 10:10:53.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-10 10:10:53.224 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-10 10:10:53.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:10:53.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-10 10:10:53.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-10 10:10:53.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 10:10:53.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 10:10:53.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-10 10:10:53.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-10 10:10:53.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-10 10:10:53.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-10 10:10:53.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-10 10:10:53.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-10 10:10:53.226 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-10 10:10:53.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-10 10:10:53.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-10 10:10:53.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-10 10:10:53.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-10 10:10:53.248 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-10 10:10:53.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.338 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-10 10:10:53.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-10 10:10:53.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:10:53.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-10 10:10:53.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-10 10:10:53.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-10 10:10:53.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-10 10:10:53.342 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-10 10:10:53.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-10 10:10:53.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-10 10:10:53.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-10 10:10:53.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-10 10:10:53.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-10 10:10:53.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-10 10:10:53.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-10 10:10:53.343 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-10 10:10:53.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-10 10:10:53.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-10 10:10:53.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-10 10:10:53.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-10 10:10:53.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 10:10:53.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 10:10:53.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-10 10:10:53.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-10 10:10:53.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-10 10:10:53.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.345 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-10 10:10:53.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.366 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.366 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-10 10:10:53.369 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-10 10:10:53.369 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-10 10:10:53.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-10 10:10:53.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-10 10:10:53.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-10 10:10:53.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.383 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-10 10:10:53.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-10 10:10:53.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-10 10:10:53.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-10 10:10:53.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-10 10:10:53.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-10 10:10:53.402 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-10 10:10:53.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-10 10:10:53.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.423 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-10 10:10:53.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-10 10:10:53.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.447 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-10 10:10:53.450 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-10 10:10:53.463 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-10 10:10:53.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-10 10:10:53.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-10 10:10:53.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-10 10:10:53.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-10 10:10:53.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-10 10:10:53.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-10 10:10:53.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-10 10:10:53.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-10 10:10:53.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-10 10:10:53.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.490 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-10 10:10:53.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-10 10:10:53.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-10 10:10:53.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-10 10:10:53.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-10 10:10:53.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-10 10:10:53.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-10 10:10:53.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-10 10:10:53.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-10 10:10:53.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.514 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-10 10:10:53.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-10 10:10:53.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-10 10:10:53.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-10 10:10:53.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-10 10:10:53.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.533 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-10 10:10:53.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.545 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-10 10:10:53.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-10 10:10:53.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-10 10:10:53.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-10 10:10:53.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-10 10:10:53.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-10 10:10:53.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-10 10:10:53.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-10 10:10:53.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-10 10:10:53.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.615 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-10 10:10:53.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-10 10:10:53.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-10 10:10:53.624 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-10 10:10:53.633 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-10 10:10:53.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-10 10:10:53.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-10 10:10:53.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-10 10:10:53.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.650 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.652 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.658 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-10 10:10:53.660 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-10 10:10:53.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.679 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-10 10:10:53.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-10 10:10:53.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-10 10:10:53.694 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-10 10:10:53.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-10 10:10:53.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-10 10:10:53.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.738 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-10 10:10:53.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-10 10:10:53.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-10 10:10:53.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-10 10:10:53.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-10 10:10:53.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-10 10:10:53.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-10 10:10:53.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-10 10:10:53.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-10 10:10:53.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-10 10:10:53.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-10 10:10:53.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-10 10:10:53.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-10 10:10:53.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-10 10:10:53.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-10 10:10:53.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-10 10:10:53.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-10 10:10:53.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-10 10:10:53.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.792 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-10 10:10:53.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-10 10:10:53.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.816 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-10 10:10:53.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-10 10:10:53.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.842 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-10 10:10:53.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-10 10:10:53.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-10 10:10:53.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-10 10:10:53.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:10:53.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-10 10:10:53.887 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.893 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-10 10:10:53.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
ALTER TABLE "question" DROP COLUMN "concurrencystamp"
===============================

2024-04-10 10:10:53.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" ALTER COLUMN "description"  type varchar(255)   
===============================

2024-04-10 10:10:53.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" alter "description"  DROP NOT NULL 
===============================

2024-04-10 10:10:53.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" ALTER COLUMN "solve_user"  type varchar(255)   
===============================

2024-04-10 10:10:53.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" alter "solve_user"  DROP NOT NULL 
===============================

2024-04-10 10:10:53.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-10 10:10:53.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.942 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-10 10:10:53.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:10:53.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:10:53.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-10 10:10:53.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:10:53.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
ALTER TABLE "question" ADD COLUMN "concurrencystamp" varchar(255) NOT NULL  
===============================

2024-04-10 10:10:54.035 +08:00 [FTL] Yi框架-Abp.vNext，爆炸！
Volo.Abp.AbpInitializationException: An error occurred during the initialize Volo.Abp.Modularity.OnPreApplicationInitializationModuleLifecycleContributor phase of the module Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule, Yi.Framework.SqlSugarCore, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null: QuestionAggregateRoot 创建失败,请认真检查 1、属性需要get set 2、特殊类型需要加Ignore 具体错误内容： 23502: column "concurrencystamp" of relation "question" contains null values. See the inner exception for details.
 ---> System.Exception: QuestionAggregateRoot 创建失败,请认真检查 1、属性需要get set 2、特殊类型需要加Ignore 具体错误内容： 23502: column "concurrencystamp" of relation "question" contains null values
   at SqlSugar.CodeFirstProvider.InitTables(Type[] entityTypes)
   at Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule.CodeFirst(IServiceProvider service) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\YiFrameworkSqlSugarCoreModule.cs:line 100
   at Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule.OnPreApplicationInitializationAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\YiFrameworkSqlSugarCoreModule.cs:line 73
   at Volo.Abp.Modularity.OnPreApplicationInitializationModuleLifecycleContributor.InitializeAsync(ApplicationInitializationContext context, IAbpModule module)
   at Yi.Framework.Core.Modularity.YiModuleManager.InitializeModulesAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.Core\Modularity\YiModuleManager.cs:line 39
   --- End of inner exception stack trace ---
   at Yi.Framework.Core.Modularity.YiModuleManager.InitializeModulesAsync(ApplicationInitializationContext context) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.Core\Modularity\YiModuleManager.cs:line 51
   at Volo.Abp.AbpApplicationBase.InitializeModulesAsync()
   at Volo.Abp.AbpApplicationWithExternalServiceProvider.InitializeAsync(IServiceProvider serviceProvider)
   at Microsoft.AspNetCore.Builder.AbpApplicationBuilderExtensions.InitializeApplicationAsync(IApplicationBuilder app)
   at Program.<Main>$(String[] args) in D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web\Program.cs:line 37
2024-04-10 10:13:44.637 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-10 10:13:44.653 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-10 10:13:49.582 +08:00 [INF] Loaded ABP modules:
2024-04-10 10:13:49.583 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-10 10:13:49.583 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-10 10:13:49.583 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-10 10:13:49.583 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-10 10:13:49.583 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-10 10:13:49.583 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-10 10:13:49.583 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-10 10:13:49.583 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-10 10:13:49.583 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-10 10:13:49.583 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-10 10:13:49.583 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-10 10:13:49.583 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-10 10:13:49.583 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-10 10:13:49.583 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-10 10:13:49.583 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-10 10:13:49.583 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-10 10:13:49.583 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-10 10:13:49.583 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-10 10:13:49.583 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-10 10:13:49.583 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-10 10:13:49.583 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-10 10:13:49.583 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-10 10:13:49.583 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-10 10:13:49.583 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-10 10:13:49.583 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-10 10:13:49.583 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-10 10:13:49.583 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-10 10:13:49.583 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-10 10:13:49.583 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-10 10:13:49.583 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-10 10:13:49.583 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-10 10:13:49.591 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-10 10:13:49.596 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-10 10:13:50.204 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.235 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-10 10:13:50.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-10 10:13:50.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.271 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.277 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-10 10:13:50.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-10 10:13:50.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-10 10:13:50.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-10 10:13:50.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-10 10:13:50.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-10 10:13:50.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-10 10:13:50.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-10 10:13:50.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-10 10:13:50.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-10 10:13:50.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-10 10:13:50.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-10 10:13:50.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-10 10:13:50.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-10 10:13:50.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-10 10:13:50.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-10 10:13:50.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-10 10:13:50.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-10 10:13:50.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-10 10:13:50.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-10 10:13:50.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-10 10:13:50.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-10 10:13:50.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-10 10:13:50.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:13:50.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-10 10:13:50.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-10 10:13:50.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 10:13:50.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 10:13:50.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-10 10:13:50.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-10 10:13:50.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-10 10:13:50.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-10 10:13:50.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-10 10:13:50.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-10 10:13:50.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-10 10:13:50.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-10 10:13:50.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-10 10:13:50.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.345 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-10 10:13:50.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-10 10:13:50.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:13:50.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-10 10:13:50.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-10 10:13:50.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-10 10:13:50.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-10 10:13:50.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-10 10:13:50.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-10 10:13:50.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-10 10:13:50.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-10 10:13:50.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-10 10:13:50.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-10 10:13:50.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-10 10:13:50.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-10 10:13:50.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:13:50.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-10 10:13:50.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-10 10:13:50.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-10 10:13:50.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-10 10:13:50.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-10 10:13:50.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-10 10:13:50.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-10 10:13:50.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-10 10:13:50.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-10 10:13:50.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-10 10:13:50.401 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.401 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-10 10:13:50.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-10 10:13:50.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-10 10:13:50.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-10 10:13:50.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-10 10:13:50.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-10 10:13:50.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-10 10:13:50.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-10 10:13:50.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-10 10:13:50.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-10 10:13:50.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-10 10:13:50.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:13:50.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-10 10:13:50.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-10 10:13:50.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 10:13:50.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 10:13:50.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-10 10:13:50.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-10 10:13:50.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-10 10:13:50.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-10 10:13:50.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-10 10:13:50.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-10 10:13:50.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-10 10:13:50.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-10 10:13:50.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-10 10:13:50.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-10 10:13:50.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-10 10:13:50.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-10 10:13:50.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-10 10:13:50.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.479 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.484 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-10 10:13:50.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-10 10:13:50.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-10 10:13:50.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-10 10:13:50.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-10 10:13:50.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-10 10:13:50.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-10 10:13:50.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:13:50.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-10 10:13:50.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-10 10:13:50.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 10:13:50.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 10:13:50.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-10 10:13:50.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-10 10:13:50.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-10 10:13:50.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-10 10:13:50.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-10 10:13:50.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-10 10:13:50.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.516 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-10 10:13:50.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-10 10:13:50.531 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-10 10:13:50.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-10 10:13:50.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-10 10:13:50.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-10 10:13:50.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-10 10:13:50.540 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-10 10:13:50.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-10 10:13:50.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:13:50.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-10 10:13:50.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-10 10:13:50.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 10:13:50.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 10:13:50.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-10 10:13:50.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-10 10:13:50.555 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-10 10:13:50.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-10 10:13:50.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-10 10:13:50.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-10 10:13:50.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-10 10:13:50.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-10 10:13:50.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.569 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-10 10:13:50.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-10 10:13:50.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-10 10:13:50.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-10 10:13:50.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.588 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.596 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-10 10:13:50.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-10 10:13:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-10 10:13:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-10 10:13:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-10 10:13:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-10 10:13:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-10 10:13:50.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-10 10:13:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-10 10:13:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-10 10:13:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-10 10:13:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-10 10:13:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-10 10:13:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-10 10:13:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-10 10:13:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-10 10:13:50.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-10 10:13:50.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-10 10:13:50.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-10 10:13:50.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-10 10:13:50.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 10:13:50.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 10:13:50.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-10 10:13:50.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-10 10:13:50.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-10 10:13:50.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-10 10:13:50.610 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.615 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-10 10:13:50.622 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-10 10:13:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-10 10:13:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-10 10:13:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-10 10:13:50.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-10 10:13:50.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-10 10:13:50.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-10 10:13:50.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-10 10:13:50.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-10 10:13:50.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-10 10:13:50.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-10 10:13:50.653 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.659 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-10 10:13:50.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-10 10:13:50.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-10 10:13:50.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-10 10:13:50.687 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.693 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-10 10:13:50.695 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-10 10:13:50.707 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-10 10:13:50.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-10 10:13:50.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-10 10:13:50.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-10 10:13:50.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-10 10:13:50.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-10 10:13:50.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-10 10:13:50.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-10 10:13:50.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-10 10:13:50.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-10 10:13:50.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-10 10:13:50.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-10 10:13:50.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.748 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-10 10:13:50.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-10 10:13:50.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-10 10:13:50.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-10 10:13:50.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-10 10:13:50.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-10 10:13:50.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-10 10:13:50.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.757 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-10 10:13:50.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-10 10:13:50.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-10 10:13:50.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-10 10:13:50.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-10 10:13:50.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.773 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.773 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-10 10:13:50.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-10 10:13:50.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-10 10:13:50.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-10 10:13:50.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-10 10:13:50.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-10 10:13:50.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-10 10:13:50.815 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.816 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-10 10:13:50.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-10 10:13:50.839 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.845 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-10 10:13:50.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-10 10:13:50.862 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-10 10:13:50.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-10 10:13:50.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.867 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-10 10:13:50.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.883 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-10 10:13:50.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-10 10:13:50.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-10 10:13:50.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-10 10:13:50.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.893 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.893 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:50.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-10 10:13:50.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-10 10:13:50.915 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.915 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.920 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-10 10:13:50.922 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.932 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.932 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-10 10:13:50.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-10 10:13:50.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-10 10:13:50.942 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.952 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-10 10:13:50.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-10 10:13:50.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-10 10:13:50.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-10 10:13:50.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-10 10:13:50.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.988 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:50.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:50.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:50.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-10 10:13:51.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-10 10:13:51.001 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-10 10:13:51.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-10 10:13:51.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-10 10:13:51.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-10 10:13:51.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-10 10:13:51.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-10 10:13:51.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-10 10:13:51.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-10 10:13:51.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:51.016 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.021 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-10 10:13:51.023 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-10 10:13:51.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-10 10:13:51.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-10 10:13:51.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-10 10:13:51.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-10 10:13:51.031 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:51.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.042 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-10 10:13:51.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:51.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:51.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-10 10:13:51.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:51.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-10 10:13:51.071 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:51.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:51.075 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-10 10:13:51.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:51.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-10 10:13:51.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:51.098 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:51.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.104 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-10 10:13:51.107 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:51.112 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-10 10:13:51.120 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 10:13:51.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-10 10:13:51.129 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:51.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
CREATE TABLE "question"(
"id" uuid NOT NULL  ,
"project" varchar(255) NOT NULL  ,
"status" varchar(255) NOT NULL  ,
"category" varchar(255) NOT NULL  ,
"impact" varchar(255) NOT NULL  ,
"priority" varchar(255) NOT NULL  ,
"title" varchar(255) NOT NULL  ,
"description" varchar(255) DEFAULT NULL  ,
"solve_user" varchar(255) DEFAULT NULL  ,
"creationtime" timestamp NOT NULL  ,
"lastmodificationtime" timestamp DEFAULT NULL  ,
"lastmodifierid" uuid DEFAULT NULL  ,
"creatorid" uuid DEFAULT NULL   , Primary key("id"))
===============================

2024-04-10 10:13:51.149 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-10 10:13:51.150 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.155 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-10 10:13:51.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:51.163 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-10 10:13:51.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-10 10:13:51.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-10 10:13:51.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-10 10:13:51.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-10 10:13:51.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-10 10:13:51.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-10 10:13:51.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:51.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.189 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-10 10:13:51.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-10 10:13:51.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-10 10:13:51.192 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.198 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-10 10:13:51.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 10:13:51.205 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.211 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-10 10:13:51.213 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-10 10:13:51.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-10 10:13:51.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-10 10:13:51.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-10 10:13:51.214 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.214 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 10:13:51.220 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-10 10:13:51.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 10:13:51.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.322 +08:00 [DBG] =========Yi-SQL耗时9.1406毫秒=====
2024-04-10 10:13:51.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.336 +08:00 [DBG] =========Yi-SQL耗时1.069毫秒=====
2024-04-10 10:13:51.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.342 +08:00 [DBG] =========Yi-SQL耗时0.923毫秒=====
2024-04-10 10:13:51.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.349 +08:00 [DBG] =========Yi-SQL耗时1.8575毫秒=====
2024-04-10 10:13:51.351 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.352 +08:00 [DBG] =========Yi-SQL耗时0.8035毫秒=====
2024-04-10 10:13:51.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.357 +08:00 [DBG] =========Yi-SQL耗时1.1187毫秒=====
2024-04-10 10:13:51.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.365 +08:00 [DBG] =========Yi-SQL耗时1.5314毫秒=====
2024-04-10 10:13:51.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.379 +08:00 [DBG] =========Yi-SQL耗时1.591毫秒=====
2024-04-10 10:13:51.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.381 +08:00 [DBG] =========Yi-SQL耗时0.665毫秒=====
2024-04-10 10:13:51.384 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.385 +08:00 [DBG] =========Yi-SQL耗时1.4153毫秒=====
2024-04-10 10:13:51.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.391 +08:00 [DBG] =========Yi-SQL耗时1.8921毫秒=====
2024-04-10 10:13:51.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.395 +08:00 [DBG] =========Yi-SQL耗时1.1738毫秒=====
2024-04-10 10:13:51.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.399 +08:00 [DBG] =========Yi-SQL耗时0.8927毫秒=====
2024-04-10 10:13:51.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 10:13:51.402 +08:00 [DBG] =========Yi-SQL耗时0.8484毫秒=====
2024-04-10 10:13:51.413 +08:00 [DBG] 耗时-1820ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-10 10:13:51.417 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-10 10:13:51.686 +08:00 [DBG] 耗时-267ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-10 10:13:51.689 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-10 10:13:51.706 +08:00 [DBG] 耗时-16ms,已加载模块-Volo.Abp.AspNetCore
2024-04-10 10:13:51.713 +08:00 [DBG] 耗时-6ms,已加载模块-Volo.Abp.Quartz
2024-04-10 10:13:51.737 +08:00 [DBG] 耗时-24ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-10 10:13:51.741 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-10 10:13:52.149 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-10 10:13:52.252 +08:00 [DBG] 耗时-510ms,已加载模块-Yi.Abp.Web
2024-04-10 10:13:52.263 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-10 10:13:52.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-10 10:13:52.283 +08:00 [DBG] =========Yi-SQL耗时1.6987毫秒=====
2024-04-10 10:13:52.400 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-10 10:13:52.401 +08:00 [DBG] 耗时-147ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-10 10:13:52.401 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2799ms】==========
2024-04-10 10:13:52.502 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-10 10:13:52.502 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-10 10:13:52.502 +08:00 [INF] Hosting environment: Development
2024-04-10 10:13:52.502 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-10 10:14:09.649 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:14:09.678 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:14:09.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:14:09.788 +08:00 [DBG] =========Yi-SQL耗时1.8202毫秒=====
2024-04-10 10:14:09.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:14:09.798 +08:00 [DBG] =========Yi-SQL耗时0.7539毫秒=====
2024-04-10 10:14:09.820 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:14:09.845 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 163.6033ms
2024-04-10 10:14:09.846 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:19:08.189 +08:00 [INF] CORS policy execution successful.
2024-04-10 10:19:08.217 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-10 10:19:08.218 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-10 10:19:08.219 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 10:19:08.254 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 10:19:08.344 +08:00 [INF] CORS policy execution successful.
2024-04-10 10:19:08.344 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-10 10:19:08.344 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-10 10:19:08.345 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 10:19:08.447 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 10:19:08.447 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:08.452 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 10:19:08.452 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-10 10:19:08.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:19:08.551 +08:00 [DBG] =========Yi-SQL耗时89.4745毫秒=====
2024-04-10 10:19:08.588 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:19:08.593 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 140.8684ms
2024-04-10 10:19:08.593 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 10:19:08.882 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-10 10:19:08.884 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 432.6391ms
2024-04-10 10:19:08.884 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:10.493 +08:00 [INF] CORS policy execution successful.
2024-04-10 10:19:10.494 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:10.499 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 10:19:10.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 10:19:10.531 +08:00 [DBG] =========Yi-SQL耗时5.5454毫秒=====
2024-04-10 10:19:10.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:19:10.545 +08:00 [DBG] =========Yi-SQL耗时1.8655毫秒=====
2024-04-10 10:19:10.562 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 10:19:10.563 +08:00 [DBG] =========Yi-SQL耗时1.4051毫秒=====
2024-04-10 10:19:10.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 10:19:10.573 +08:00 [DBG] =========Yi-SQL耗时1.6293毫秒=====
2024-04-10 10:19:10.629 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-10 10:19:10.633 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 134.6427ms
2024-04-10 10:19:10.633 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:10.643 +08:00 [INF] CORS policy execution successful.
2024-04-10 10:19:10.654 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-04-10 10:19:10.667 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 10:19:10.668 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 10:19:10.672 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:10.674 +08:00 [INF] CORS policy execution successful.
2024-04-10 10:19:10.674 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 10:19:10.675 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 10:19:10.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:19:10.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'f7cc6fa4-fbe0-4874-8695-3a11d7fa27cc',CAST('2024-04-10 10:19:10.673' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-10 10:19:10.702 +08:00 [DBG] =========Yi-SQL耗时9.1394毫秒=====
2024-04-10 10:19:10.711 +08:00 [INF] 2024/4/10 10:19:10：cc,16EdQyPhiuJ6bU1e6a0gJQ连接服务端success，当前已连接1个
2024-04-10 10:19:10.846 +08:00 [DBG] =========Yi-SQL耗时166.1205毫秒=====
2024-04-10 10:19:10.848 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 10:19:10.849 +08:00 [DBG] =========Yi-SQL耗时0.5433毫秒=====
2024-04-10 10:19:10.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 10:19:10.850 +08:00 [DBG] =========Yi-SQL耗时0.9895毫秒=====
2024-04-10 10:19:10.878 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 10:19:10.889 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 215.2141ms
2024-04-10 10:19:10.889 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:10.896 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:10.900 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 10:19:10.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:19:10.903 +08:00 [DBG] =========Yi-SQL耗时0.7485毫秒=====
2024-04-10 10:19:10.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 10:19:10.906 +08:00 [DBG] =========Yi-SQL耗时0.6102毫秒=====
2024-04-10 10:19:10.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 10:19:10.906 +08:00 [DBG] =========Yi-SQL耗时0.2973毫秒=====
2024-04-10 10:19:10.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:19:10.909 +08:00 [DBG] =========Yi-SQL耗时1.3113毫秒=====
2024-04-10 10:19:10.932 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:19:10.936 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 35.9256ms
2024-04-10 10:19:10.936 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:13.940 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:19:13.940 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:13.940 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:19:13.942 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 10:19:13.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:19:13.946 +08:00 [DBG] =========Yi-SQL耗时2.2622毫秒=====
2024-04-10 10:19:13.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:19:13.950 +08:00 [DBG] =========Yi-SQL耗时1.5299毫秒=====
2024-04-10 10:19:13.951 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:19:13.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:19:13.951 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.6501ms
2024-04-10 10:19:13.951 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:19:13.953 +08:00 [DBG] =========Yi-SQL耗时1.9101毫秒=====
2024-04-10 10:19:13.968 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:19:13.971 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 28.6928ms
2024-04-10 10:19:13.971 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:23.323 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:19:23.324 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:19:23.325 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:19:23.326 +08:00 [DBG] =========Yi-SQL耗时0.8832毫秒=====
2024-04-10 10:19:23.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:19:23.330 +08:00 [DBG] =========Yi-SQL耗时0.6243毫秒=====
2024-04-10 10:19:23.331 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:19:23.331 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.0824ms
2024-04-10 10:19:23.331 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:19:25.920 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:25.920 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:25.920 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:25.920 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 10:19:25.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:19:25.923 +08:00 [DBG] =========Yi-SQL耗时1.8068毫秒=====
2024-04-10 10:19:25.925 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-10 10:19:25.925 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-10 10:19:25.925 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:19:25.926 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.0854ms
2024-04-10 10:19:25.926 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:25.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-10 10:19:25.960 +08:00 [DBG] =========Yi-SQL耗时5.5126毫秒=====
2024-04-10 10:19:25.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-10 10:19:25.968 +08:00 [DBG] =========Yi-SQL耗时4.2448毫秒=====
2024-04-10 10:19:25.980 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:19:25.986 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 61.5538ms
2024-04-10 10:19:25.986 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 10:19:26.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-10 10:19:26.012 +08:00 [DBG] =========Yi-SQL耗时1.3159毫秒=====
2024-04-10 10:19:26.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-10 10:19:26.017 +08:00 [DBG] =========Yi-SQL耗时2.2484毫秒=====
2024-04-10 10:19:26.020 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:19:26.025 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 100.2221ms
2024-04-10 10:19:26.025 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 10:20:10.454 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:20:10.454 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:20:10.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:20:10.457 +08:00 [DBG] =========Yi-SQL耗时0.8823毫秒=====
2024-04-10 10:20:10.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:20:10.462 +08:00 [DBG] =========Yi-SQL耗时1.89毫秒=====
2024-04-10 10:20:10.463 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:20:10.463 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.2834ms
2024-04-10 10:20:10.464 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:20:42.375 +08:00 [INF] CORS policy execution successful.
2024-04-10 10:20:42.376 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-10 10:20:42.379 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:20:42.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid")
     VALUES
           (N'999a7986-3d88-a379-9aa9-3a11d7fb8e23',N'string',N'string',N'string',N'string',N'string',N'string',N'string',N'string',CAST('2024-04-10 10:20:42.400' AS DATETIME),null,null,null) ;
===============================

2024-04-10 10:20:42.408 +08:00 [DBG] =========Yi-SQL耗时2.2363毫秒=====
2024-04-10 10:20:42.415 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 10:20:42.417 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 37.7528ms
2024-04-10 10:20:42.417 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-10 10:21:07.839 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 10:21:07.845 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 10:21:07.845 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 10:21:07.992 +08:00 [INF] CORS policy execution successful.
2024-04-10 10:21:08.006 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 10:21:08.007 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 10:21:08.008 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 10:21:08.009 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 10:21:08.027 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 10:21:08.028 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 18.7228ms
2024-04-10 10:21:08.028 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 10:21:08.077 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 10:21:08.077 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 10:21:08.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:21:08.081 +08:00 [DBG] =========Yi-SQL耗时1.944毫秒=====
2024-04-10 10:21:08.082 +08:00 [INF] CORS policy execution successful.
2024-04-10 10:21:08.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 10:21:08.083 +08:00 [DBG] =========Yi-SQL耗时0.4694毫秒=====
2024-04-10 10:21:08.083 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 10:21:08.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 10:21:08.085 +08:00 [DBG] =========Yi-SQL耗时0.7443毫秒=====
2024-04-10 10:21:08.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:21:08.087 +08:00 [DBG] =========Yi-SQL耗时1.1947毫秒=====
2024-04-10 10:21:08.087 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:21:08.088 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 11.0603ms
2024-04-10 10:21:08.088 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 10:21:08.176 +08:00 [INF] 2024/4/10 10:21:08：cc,SAu3qVDYOx1Z3TsFvGUt0Q连接服务端success，当前已连接0个
2024-04-10 10:21:08.293 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:21:08.293 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 10:21:08.293 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:21:08.293 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 10:21:08.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:21:08.295 +08:00 [DBG] =========Yi-SQL耗时0.92毫秒=====
2024-04-10 10:21:08.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:21:08.297 +08:00 [DBG] =========Yi-SQL耗时0.868毫秒=====
2024-04-10 10:21:08.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:21:08.301 +08:00 [DBG] =========Yi-SQL耗时0.9445毫秒=====
2024-04-10 10:21:08.301 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:21:08.301 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.1109ms
2024-04-10 10:21:08.301 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 10:21:08.310 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:21:08.312 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 19.1002ms
2024-04-10 10:21:08.312 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:21:11.913 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 10:21:11.916 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:21:11.979 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'999a7986-3d88-a379-9aa9-3a11d7fb8e23'   
===============================

2024-04-10 10:21:11.980 +08:00 [DBG] =========Yi-SQL耗时0.6858毫秒=====
2024-04-10 10:21:11.985 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 10:21:11.985 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 69.0305ms
2024-04-10 10:21:11.985 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 10:21:17.747 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 10:21:17.747 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:21:17.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'999a7986-3d88-a379-9aa9-3a11d7fb8e23'   
===============================

2024-04-10 10:21:17.750 +08:00 [DBG] =========Yi-SQL耗时0.7682毫秒=====
2024-04-10 10:21:17.756 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 10:21:17.757 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 9.3965ms
2024-04-10 10:21:17.757 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 10:21:19.611 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:21:19.611 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:21:19.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:21:19.614 +08:00 [DBG] =========Yi-SQL耗时0.8377毫秒=====
2024-04-10 10:21:19.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:21:19.618 +08:00 [DBG] =========Yi-SQL耗时0.9929毫秒=====
2024-04-10 10:21:19.619 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:21:19.619 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.7432ms
2024-04-10 10:21:19.619 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:21:20.037 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:21:20.038 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:21:20.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:21:20.040 +08:00 [DBG] =========Yi-SQL耗时0.8075毫秒=====
2024-04-10 10:21:20.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:21:20.045 +08:00 [DBG] =========Yi-SQL耗时1.1911毫秒=====
2024-04-10 10:21:20.046 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:21:20.046 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.1368ms
2024-04-10 10:21:20.046 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:24:47.391 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:24:47.391 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:24:47.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:24:47.442 +08:00 [DBG] =========Yi-SQL耗时48.8426毫秒=====
2024-04-10 10:24:47.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:24:47.449 +08:00 [DBG] =========Yi-SQL耗时0.5143毫秒=====
2024-04-10 10:24:47.450 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:24:47.450 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 59.2341ms
2024-04-10 10:24:47.450 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:24:58.648 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 10:24:58.651 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 10:24:59.280 +08:00 [INF] CORS policy execution successful.
2024-04-10 10:24:59.287 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 10:24:59.288 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 10:24:59.296 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 10:24:59.296 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 10:24:59.298 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 10:24:59.298 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.4066ms
2024-04-10 10:24:59.298 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 10:24:59.365 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 10:24:59.365 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 10:24:59.367 +08:00 [INF] CORS policy execution successful.
2024-04-10 10:24:59.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:24:59.369 +08:00 [DBG] =========Yi-SQL耗时1.6262毫秒=====
2024-04-10 10:24:59.370 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 10:24:59.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 10:24:59.371 +08:00 [DBG] =========Yi-SQL耗时0.8077毫秒=====
2024-04-10 10:24:59.373 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 10:24:59.374 +08:00 [DBG] =========Yi-SQL耗时0.7166毫秒=====
2024-04-10 10:24:59.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:24:59.375 +08:00 [DBG] =========Yi-SQL耗时0.9633毫秒=====
2024-04-10 10:24:59.376 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:24:59.376 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 11.1462ms
2024-04-10 10:24:59.376 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 10:24:59.398 +08:00 [INF] 2024/4/10 10:24:59：cc,QhJ9b8kcaQWxv8dX3DmzMg连接服务端success，当前已连接0个
2024-04-10 10:24:59.512 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 10:24:59.512 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:24:59.512 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 10:24:59.513 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:24:59.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 10:24:59.515 +08:00 [DBG] =========Yi-SQL耗时1.5296毫秒=====
2024-04-10 10:24:59.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:24:59.516 +08:00 [DBG] =========Yi-SQL耗时0.6996毫秒=====
2024-04-10 10:24:59.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:24:59.518 +08:00 [DBG] =========Yi-SQL耗时0.7124毫秒=====
2024-04-10 10:24:59.519 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:24:59.520 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.2728ms
2024-04-10 10:24:59.520 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 10:24:59.519 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:24:59.522 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.9274ms
2024-04-10 10:24:59.523 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:03.117 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:03.118 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:27:03.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:27:03.120 +08:00 [DBG] =========Yi-SQL耗时0.9682毫秒=====
2024-04-10 10:27:03.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:27:03.128 +08:00 [DBG] =========Yi-SQL耗时1.0353毫秒=====
2024-04-10 10:27:03.133 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:27:03.133 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.6999ms
2024-04-10 10:27:03.133 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:09.445 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:09.445 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:27:09.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:27:09.448 +08:00 [DBG] =========Yi-SQL耗时0.8064毫秒=====
2024-04-10 10:27:09.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:27:09.451 +08:00 [DBG] =========Yi-SQL耗时0.9822毫秒=====
2024-04-10 10:27:09.452 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:27:09.452 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.2301ms
2024-04-10 10:27:09.452 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:16.372 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:16.373 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:27:16.394 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("impact" like concat('%',N'1','%'))  
===============================

2024-04-10 10:27:16.396 +08:00 [DBG] =========Yi-SQL耗时2.3369毫秒=====
2024-04-10 10:27:16.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE  ("impact" like concat('%',N'1','%'))    LIMIT 10 offset 0
===============================

2024-04-10 10:27:16.398 +08:00 [DBG] =========Yi-SQL耗时0.4508毫秒=====
2024-04-10 10:27:16.398 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:27:16.399 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 25.84ms
2024-04-10 10:27:16.399 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:20.915 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:20.916 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:27:20.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("impact" like concat('%',N'st','%'))  
===============================

2024-04-10 10:27:20.925 +08:00 [DBG] =========Yi-SQL耗时7.3884毫秒=====
2024-04-10 10:27:20.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE  ("impact" like concat('%',N'st','%'))    LIMIT 10 offset 0
===============================

2024-04-10 10:27:20.929 +08:00 [DBG] =========Yi-SQL耗时1.197毫秒=====
2024-04-10 10:27:20.930 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:27:20.930 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.2916ms
2024-04-10 10:27:20.930 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:23.468 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:23.468 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:27:23.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("impact" like concat('%',N's','%'))  
===============================

2024-04-10 10:27:23.474 +08:00 [DBG] =========Yi-SQL耗时0.8855毫秒=====
2024-04-10 10:27:23.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE  ("impact" like concat('%',N's','%'))    LIMIT 10 offset 0
===============================

2024-04-10 10:27:23.476 +08:00 [DBG] =========Yi-SQL耗时0.9598毫秒=====
2024-04-10 10:27:23.478 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:27:23.478 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.7659ms
2024-04-10 10:27:23.478 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:25.249 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:25.250 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:27:25.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:27:25.253 +08:00 [DBG] =========Yi-SQL耗时1.1391毫秒=====
2024-04-10 10:27:25.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:27:25.266 +08:00 [DBG] =========Yi-SQL耗时0.7732毫秒=====
2024-04-10 10:27:25.266 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:27:25.267 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 17.1387ms
2024-04-10 10:27:25.267 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:26.379 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:26.380 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:27:26.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:27:26.382 +08:00 [DBG] =========Yi-SQL耗时0.6091毫秒=====
2024-04-10 10:27:26.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:27:26.384 +08:00 [DBG] =========Yi-SQL耗时0.7449毫秒=====
2024-04-10 10:27:26.385 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:27:26.386 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 5.7419ms
2024-04-10 10:27:26.386 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:27.143 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:27.144 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:27:27.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:27:27.147 +08:00 [DBG] =========Yi-SQL耗时0.6217毫秒=====
2024-04-10 10:27:27.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:27:27.149 +08:00 [DBG] =========Yi-SQL耗时0.8299毫秒=====
2024-04-10 10:27:27.151 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:27:27.151 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.361ms
2024-04-10 10:27:27.151 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:27.596 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 10:27:27.596 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 10:27:27.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 10:27:27.599 +08:00 [DBG] =========Yi-SQL耗时0.7269毫秒=====
2024-04-10 10:27:27.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 10:27:27.602 +08:00 [DBG] =========Yi-SQL耗时1.056毫秒=====
2024-04-10 10:27:27.603 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 10:27:27.603 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 6.7071ms
2024-04-10 10:27:27.603 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:00:00.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-10 11:00:00.157 +08:00 [DBG] =========Yi-SQL耗时82.1974毫秒=====
2024-04-10 11:00:00.522 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-10 11:00:00.524 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-10 11:15:27.392 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 11:15:27.400 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 11:15:27.883 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:15:27.903 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 11:15:27.907 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:15:27.909 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 11:15:27.911 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:15:27.940 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 11:15:27.947 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 35.6284ms
2024-04-10 11:15:27.947 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:15:27.951 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:15:27.953 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 11:15:27.987 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:15:27.987 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:15:27.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:15:28.052 +08:00 [INF] 2024/4/10 11:15:28：cc,_c39DzNaKJxHDiAk3KUytw连接服务端success，当前已连接0个
2024-04-10 11:15:28.076 +08:00 [DBG] =========Yi-SQL耗时77.8972毫秒=====
2024-04-10 11:15:28.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 11:15:28.083 +08:00 [DBG] =========Yi-SQL耗时2.3036毫秒=====
2024-04-10 11:15:28.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 11:15:28.087 +08:00 [DBG] =========Yi-SQL耗时0.8802毫秒=====
2024-04-10 11:15:28.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:15:28.092 +08:00 [DBG] =========Yi-SQL耗时2.2544毫秒=====
2024-04-10 11:15:28.094 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:15:28.096 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 108.3214ms
2024-04-10 11:15:28.096 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:15:28.242 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:15:28.242 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:28.243 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 11:15:28.243 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:15:28.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:15:28.258 +08:00 [DBG] =========Yi-SQL耗时4.8956毫秒=====
2024-04-10 11:15:28.263 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:15:28.264 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 20.931ms
2024-04-10 11:15:28.264 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:15:28.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:15:28.268 +08:00 [DBG] =========Yi-SQL耗时3.6612毫秒=====
2024-04-10 11:15:28.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:15:28.271 +08:00 [DBG] =========Yi-SQL耗时1.3221毫秒=====
2024-04-10 11:15:28.275 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:15:28.276 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 32.5267ms
2024-04-10 11:15:28.276 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:32.138 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:32.138 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:15:32.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:15:32.142 +08:00 [DBG] =========Yi-SQL耗时0.8344毫秒=====
2024-04-10 11:15:32.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:15:32.144 +08:00 [DBG] =========Yi-SQL耗时0.8092毫秒=====
2024-04-10 11:15:32.146 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:15:32.146 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.8643ms
2024-04-10 11:15:32.146 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:42.610 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:42.611 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:15:42.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-02 00:00:00.000' AS DATETIME) )) 
===============================

2024-04-10 11:15:42.633 +08:00 [DBG] =========Yi-SQL耗时2.0073毫秒=====
2024-04-10 11:15:42.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-02 00:00:00.000' AS DATETIME) ))   LIMIT 10 offset 0
===============================

2024-04-10 11:15:42.635 +08:00 [DBG] =========Yi-SQL耗时0.9669毫秒=====
2024-04-10 11:15:42.637 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:15:42.637 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 26.351ms
2024-04-10 11:15:42.637 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:47.185 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:47.185 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:15:47.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-02 00:00:00.000' AS DATETIME) )) 
===============================

2024-04-10 11:15:47.198 +08:00 [DBG] =========Yi-SQL耗时1.141毫秒=====
2024-04-10 11:15:47.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-02 00:00:00.000' AS DATETIME) ))   LIMIT 10 offset 0
===============================

2024-04-10 11:15:47.200 +08:00 [DBG] =========Yi-SQL耗时0.5812毫秒=====
2024-04-10 11:15:47.203 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:15:47.203 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 17.8513ms
2024-04-10 11:15:47.203 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:50.706 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:50.706 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:15:50.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE (( "creationtime" >= CAST('2024-04-06 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-10 00:00:00.000' AS DATETIME) )) 
===============================

2024-04-10 11:15:50.710 +08:00 [DBG] =========Yi-SQL耗时1.2277毫秒=====
2024-04-10 11:15:50.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE (( "creationtime" >= CAST('2024-04-06 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-10 00:00:00.000' AS DATETIME) ))   LIMIT 10 offset 0
===============================

2024-04-10 11:15:50.713 +08:00 [DBG] =========Yi-SQL耗时1.3769毫秒=====
2024-04-10 11:15:50.714 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:15:50.714 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.4797ms
2024-04-10 11:15:50.714 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:55.728 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:55.728 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:15:55.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE (( "creationtime" >= CAST('2024-04-11 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-11 00:00:00.000' AS DATETIME) )) 
===============================

2024-04-10 11:15:55.731 +08:00 [DBG] =========Yi-SQL耗时0.6937毫秒=====
2024-04-10 11:15:55.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE (( "creationtime" >= CAST('2024-04-11 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-11 00:00:00.000' AS DATETIME) ))   LIMIT 10 offset 0
===============================

2024-04-10 11:15:55.734 +08:00 [DBG] =========Yi-SQL耗时0.9701毫秒=====
2024-04-10 11:15:55.735 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:15:55.736 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.2504ms
2024-04-10 11:15:55.736 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:59.247 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:15:59.247 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:15:59.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE (( "creationtime" >= CAST('2024-04-10 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-11 00:00:00.000' AS DATETIME) )) 
===============================

2024-04-10 11:15:59.249 +08:00 [DBG] =========Yi-SQL耗时0.6901毫秒=====
2024-04-10 11:15:59.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE (( "creationtime" >= CAST('2024-04-10 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-11 00:00:00.000' AS DATETIME) ))   LIMIT 10 offset 0
===============================

2024-04-10 11:15:59.252 +08:00 [DBG] =========Yi-SQL耗时1.0689毫秒=====
2024-04-10 11:15:59.254 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:15:59.254 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 6.875ms
2024-04-10 11:15:59.254 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:16:04.344 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:16:04.344 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:16:04.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:16:04.351 +08:00 [DBG] =========Yi-SQL耗时0.7533毫秒=====
2024-04-10 11:16:04.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:16:04.354 +08:00 [DBG] =========Yi-SQL耗时0.9956毫秒=====
2024-04-10 11:16:04.356 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:16:04.356 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.7324ms
2024-04-10 11:16:04.356 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:16:05.523 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:16:05.523 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:16:05.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:16:05.526 +08:00 [DBG] =========Yi-SQL耗时0.5872毫秒=====
2024-04-10 11:16:05.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:16:05.529 +08:00 [DBG] =========Yi-SQL耗时0.9367毫秒=====
2024-04-10 11:16:05.530 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:16:05.531 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.2665ms
2024-04-10 11:16:05.531 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:19:49.938 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:19:49.938 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:19:49.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:19:49.942 +08:00 [DBG] =========Yi-SQL耗时1.0501毫秒=====
2024-04-10 11:19:49.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:19:49.945 +08:00 [DBG] =========Yi-SQL耗时1.4198毫秒=====
2024-04-10 11:19:49.951 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:19:49.951 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 12.9313ms
2024-04-10 11:19:49.951 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:24:06.823 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 11:24:06.827 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 11:24:07.364 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:24:07.371 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 11:24:07.378 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:24:07.379 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:24:07.380 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 11:24:07.398 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 11:24:07.399 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 19.9831ms
2024-04-10 11:24:07.399 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:24:07.442 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:24:07.443 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:24:07.449 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:24:07.450 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 11:24:07.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:24:07.514 +08:00 [INF] 2024/4/10 11:24:07：cc,GLqEc8Hi6W7MKdRMoAUWUg连接服务端success，当前已连接0个
2024-04-10 11:24:07.635 +08:00 [DBG] =========Yi-SQL耗时184.1621毫秒=====
2024-04-10 11:24:07.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 11:24:07.641 +08:00 [DBG] =========Yi-SQL耗时1.6597毫秒=====
2024-04-10 11:24:07.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 11:24:07.643 +08:00 [DBG] =========Yi-SQL耗时1.0331毫秒=====
2024-04-10 11:24:07.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:24:07.646 +08:00 [DBG] =========Yi-SQL耗时1.3511毫秒=====
2024-04-10 11:24:07.647 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:24:07.648 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 204.3852ms
2024-04-10 11:24:07.648 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:24:07.760 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:24:07.760 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:24:07.760 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:24:07.761 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 11:24:07.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:24:07.765 +08:00 [DBG] =========Yi-SQL耗时2.2505毫秒=====
2024-04-10 11:24:07.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:24:07.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:24:07.767 +08:00 [DBG] =========Yi-SQL耗时1.1956毫秒=====
2024-04-10 11:24:07.770 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:24:07.770 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.9172ms
2024-04-10 11:24:07.770 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:24:07.841 +08:00 [DBG] =========Yi-SQL耗时74.7645毫秒=====
2024-04-10 11:24:07.844 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:24:07.845 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 84.0478ms
2024-04-10 11:24:07.845 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:24:13.313 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:24:13.313 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:24:13.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:24:13.316 +08:00 [DBG] =========Yi-SQL耗时0.6596毫秒=====
2024-04-10 11:24:13.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:24:13.318 +08:00 [DBG] =========Yi-SQL耗时1.0716毫秒=====
2024-04-10 11:24:13.320 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:24:13.320 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 6.9761ms
2024-04-10 11:24:13.320 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:25:05.691 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 11:25:05.693 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 11:25:06.255 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:25:06.265 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 11:25:06.266 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 11:25:06.266 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:25:06.266 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:25:06.271 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 11:25:06.272 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.259ms
2024-04-10 11:25:06.272 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:25:06.346 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:25:06.347 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:25:06.348 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:25:06.350 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 11:25:06.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:25:06.355 +08:00 [DBG] =========Yi-SQL耗时2.4124毫秒=====
2024-04-10 11:25:06.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 11:25:06.362 +08:00 [DBG] =========Yi-SQL耗时1.981毫秒=====
2024-04-10 11:25:06.363 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 11:25:06.363 +08:00 [DBG] =========Yi-SQL耗时0.433毫秒=====
2024-04-10 11:25:06.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:25:06.366 +08:00 [DBG] =========Yi-SQL耗时1.6422毫秒=====
2024-04-10 11:25:06.372 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:25:06.374 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 26.9353ms
2024-04-10 11:25:06.374 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:25:06.416 +08:00 [INF] 2024/4/10 11:25:06：cc,3nYbzbKArjuWTpymSy6xBQ连接服务端success，当前已连接0个
2024-04-10 11:25:06.552 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:25:06.553 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 11:25:06.553 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:25:06.554 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:25:06.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:25:06.556 +08:00 [DBG] =========Yi-SQL耗时2.2073毫秒=====
2024-04-10 11:25:06.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:25:06.559 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:25:06.558 +08:00 [DBG] =========Yi-SQL耗时0.7598毫秒=====
2024-04-10 11:25:06.559 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.7654ms
2024-04-10 11:25:06.560 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:25:06.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:25:06.561 +08:00 [DBG] =========Yi-SQL耗时0.4886毫秒=====
2024-04-10 11:25:06.563 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:25:06.563 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.4169ms
2024-04-10 11:25:06.563 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:25:24.138 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:25:24.141 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-10 11:25:24.142 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:25:24.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid")
     VALUES
           (N'5e20b944-b259-9dfc-a2ee-3a11d836c947',null,N'1',N'1',N'1',N'1',N'1',N'1',null,CAST('2024-04-10 11:25:24.164' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-10 11:25:24.376 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {
    "Severity": "错误",
    "InvariantSeverity": "ERROR",
    "SqlState": "23502",
    "MessageText": "null value in column \"project\" of relation \"question\" violates not-null constraint",
    "Detail": "Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.",
    "SchemaName": "public",
    "TableName": "question",
    "ColumnName": "project",
    "File": "execmain.c",
    "Line": "1889",
    "Routine": "ExecConstraints"
  },
  "validationErrors": null
}

2024-04-10 11:25:24.378 +08:00 [ERR] 23502: null value in column "project" of relation "question" violates not-null constraint
Npgsql.PostgresException (0x80004005): 23502: null value in column "project" of relation "question" violates not-null constraint
   at Npgsql.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|194_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at SqlSugar.AdoProvider.ExecuteCommandAsync(String sql, SugarParameter[] parameters)
   at SqlSugar.InsertableProvider`1.ExecuteCommandAsync()
   at SqlSugar.InsertableProvider`1.ExecuteCommandIdentityIntoEntityAsync()
   at SqlSugar.InsertableProvider`1.ExecuteReturnEntityAsync()
   at SqlSugar.SimpleClient`1.InsertReturnEntityAsync(T insertObj)
   at Yi.Framework.SqlSugarCore.Repositories.SqlSugarRepository`1.InsertReturnEntityAsync(TEntity insertObj) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\Repositories\SqlSugarRepository.cs:line 355
   at Yi.Framework.SqlSugarCore.Repositories.SqlSugarRepository`1.InsertAsync(TEntity entity, Boolean autoSave, CancellationToken cancellationToken) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\Repositories\SqlSugarRepository.cs:line 106
   at Volo.Abp.Application.Services.AbstractKeyCrudAppService`7.CreateAsync(TCreateInput input)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.GlobalFeatures.GlobalFeatureInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Validation.ValidationInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Auditing.AuditingInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Uow.UnitOfWorkInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at lambda_method1722(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
  Exception data:
    Severity: 错误
    SqlState: 23502
    MessageText: null value in column "project" of relation "question" violates not-null constraint
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: question
    ColumnName: project
    File: execmain.c
    Line: 1889
    Routine: ExecConstraints
2024-04-10 11:25:24.381 +08:00 [ERR] ---------- Exception Data ----------
Severity = 错误
InvariantSeverity = ERROR
SqlState = 23502
MessageText = null value in column "project" of relation "question" violates not-null constraint
Detail = Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
SchemaName = public
TableName = question
ColumnName = project
File = execmain.c
Line = 1889
Routine = ExecConstraints

2024-04-10 11:25:24.395 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 11:25:24.405 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 262.9419ms
2024-04-10 11:25:24.405 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-10 11:25:34.024 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:25:34.026 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-10 11:25:34.026 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:25:34.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid")
     VALUES
           (N'cfb4e688-6174-a843-b6f4-3a11d836efcf',null,N'1',N'1',N'1',N'1',N'1',N'1',null,CAST('2024-04-10 11:25:34.030' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-10 11:25:34.082 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {
    "Severity": "错误",
    "InvariantSeverity": "ERROR",
    "SqlState": "23502",
    "MessageText": "null value in column \"project\" of relation \"question\" violates not-null constraint",
    "Detail": "Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.",
    "SchemaName": "public",
    "TableName": "question",
    "ColumnName": "project",
    "File": "execmain.c",
    "Line": "1889",
    "Routine": "ExecConstraints"
  },
  "validationErrors": null
}

2024-04-10 11:25:34.082 +08:00 [ERR] 23502: null value in column "project" of relation "question" violates not-null constraint
Npgsql.PostgresException (0x80004005): 23502: null value in column "project" of relation "question" violates not-null constraint
   at Npgsql.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|194_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at SqlSugar.AdoProvider.ExecuteCommandAsync(String sql, SugarParameter[] parameters)
   at SqlSugar.InsertableProvider`1.ExecuteCommandAsync()
   at SqlSugar.InsertableProvider`1.ExecuteCommandIdentityIntoEntityAsync()
   at SqlSugar.InsertableProvider`1.ExecuteReturnEntityAsync()
   at SqlSugar.SimpleClient`1.InsertReturnEntityAsync(T insertObj)
   at Yi.Framework.SqlSugarCore.Repositories.SqlSugarRepository`1.InsertReturnEntityAsync(TEntity insertObj) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\Repositories\SqlSugarRepository.cs:line 355
   at Yi.Framework.SqlSugarCore.Repositories.SqlSugarRepository`1.InsertAsync(TEntity entity, Boolean autoSave, CancellationToken cancellationToken) in D:\vs_space\Yi\Yi.Abp.Net8\framework\Yi.Framework.SqlSugarCore\Repositories\SqlSugarRepository.cs:line 106
   at Volo.Abp.Application.Services.AbstractKeyCrudAppService`7.CreateAsync(TCreateInput input)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.GlobalFeatures.GlobalFeatureInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Validation.ValidationInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Auditing.AuditingInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at Castle.DynamicProxy.AsyncInterceptorBase.ProceedAsynchronous[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo)
   at Volo.Abp.Castle.DynamicProxy.CastleAbpMethodInvocationAdapterWithReturnValue`1.ProceedAsync()
   at Volo.Abp.Uow.UnitOfWorkInterceptor.InterceptAsync(IAbpMethodInvocation invocation)
   at Volo.Abp.Castle.DynamicProxy.CastleAsyncAbpInterceptorAdapter`1.InterceptAsync[TResult](IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3 proceed)
   at lambda_method1722(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
  Exception data:
    Severity: 错误
    SqlState: 23502
    MessageText: null value in column "project" of relation "question" violates not-null constraint
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: question
    ColumnName: project
    File: execmain.c
    Line: 1889
    Routine: ExecConstraints
2024-04-10 11:25:34.082 +08:00 [ERR] ---------- Exception Data ----------
Severity = 错误
InvariantSeverity = ERROR
SqlState = 23502
MessageText = null value in column "project" of relation "question" violates not-null constraint
Detail = Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
SchemaName = public
TableName = question
ColumnName = project
File = execmain.c
Line = 1889
Routine = ExecConstraints

2024-04-10 11:25:34.083 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 11:25:34.083 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 56.4918ms
2024-04-10 11:25:34.083 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-10 11:29:49.579 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 11:29:49.581 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 11:29:50.196 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:29:50.205 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 11:29:50.206 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 11:29:50.213 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:29:50.215 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:29:50.223 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 11:29:50.225 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 9.8245ms
2024-04-10 11:29:50.225 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:29:50.335 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:29:50.335 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:29:50.336 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:29:50.338 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 11:29:50.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:29:50.397 +08:00 [INF] 2024/4/10 11:29:50：cc,O-t0jFzEAnj_zv3-bg6X8g连接服务端success，当前已连接0个
2024-04-10 11:29:50.410 +08:00 [DBG] =========Yi-SQL耗时67.11毫秒=====
2024-04-10 11:29:50.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 11:29:50.413 +08:00 [DBG] =========Yi-SQL耗时0.7174毫秒=====
2024-04-10 11:29:50.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 11:29:50.414 +08:00 [DBG] =========Yi-SQL耗时0.8275毫秒=====
2024-04-10 11:29:50.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:29:50.418 +08:00 [DBG] =========Yi-SQL耗时2.1066毫秒=====
2024-04-10 11:29:50.420 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:29:50.421 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 85.2764ms
2024-04-10 11:29:50.422 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:29:50.632 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:29:50.633 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:29:50.633 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:29:50.633 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 11:29:50.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:29:50.639 +08:00 [DBG] =========Yi-SQL耗时2.4596毫秒=====
2024-04-10 11:29:50.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:29:50.646 +08:00 [DBG] =========Yi-SQL耗时2.8057毫秒=====
2024-04-10 11:29:50.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:29:50.649 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:29:50.650 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 17.4555ms
2024-04-10 11:29:50.651 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:29:50.651 +08:00 [DBG] =========Yi-SQL耗时2.7863毫秒=====
2024-04-10 11:29:50.655 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:29:50.656 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 23.0606ms
2024-04-10 11:29:50.656 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:29:56.508 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:29:56.509 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-10 11:29:56.510 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:29:56.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid")
     VALUES
           (N'dbdfb03d-8b68-9042-09c5-3a11d83af122',N'1',N'1',N'1',N'1',N'1',N'1',N'1',null,CAST('2024-04-10 11:29:56.513' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-10 11:29:56.521 +08:00 [DBG] =========Yi-SQL耗时5.9119毫秒=====
2024-04-10 11:29:56.522 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 11:29:56.523 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 13.0267ms
2024-04-10 11:29:56.523 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-10 11:29:56.539 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:29:56.539 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:29:56.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:29:56.542 +08:00 [DBG] =========Yi-SQL耗时0.9498毫秒=====
2024-04-10 11:29:56.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:29:56.545 +08:00 [DBG] =========Yi-SQL耗时0.8498毫秒=====
2024-04-10 11:29:56.547 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:29:56.548 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.1282ms
2024-04-10 11:29:56.548 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:39:19.870 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:39:19.871 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:39:19.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:39:19.938 +08:00 [DBG] =========Yi-SQL耗时56.5741毫秒=====
2024-04-10 11:39:19.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:39:19.969 +08:00 [DBG] =========Yi-SQL耗时4.6005毫秒=====
2024-04-10 11:39:20.032 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:39:20.034 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 162.8865ms
2024-04-10 11:39:20.034 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:39:24.906 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 11:39:24.907 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 11:39:25.464 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:39:25.471 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 11:39:25.477 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 11:39:25.483 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:39:25.483 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:39:25.490 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 11:39:25.491 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.2105ms
2024-04-10 11:39:25.491 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:39:25.551 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:39:25.551 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:39:25.552 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:39:25.555 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 11:39:25.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:39:25.562 +08:00 [DBG] =========Yi-SQL耗时4.9648毫秒=====
2024-04-10 11:39:25.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 11:39:25.567 +08:00 [DBG] =========Yi-SQL耗时1.742毫秒=====
2024-04-10 11:39:25.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 11:39:25.571 +08:00 [DBG] =========Yi-SQL耗时1.5723毫秒=====
2024-04-10 11:39:25.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:39:25.575 +08:00 [DBG] =========Yi-SQL耗时2.6257毫秒=====
2024-04-10 11:39:25.578 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:39:25.579 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 28.041ms
2024-04-10 11:39:25.579 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:39:25.624 +08:00 [INF] 2024/4/10 11:39:25：cc,REdlZv-iCHDB44K5Zk4wvg连接服务端success，当前已连接0个
2024-04-10 11:39:25.732 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:39:25.732 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:39:25.732 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 11:39:25.733 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:39:25.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:39:25.735 +08:00 [DBG] =========Yi-SQL耗时0.7062毫秒=====
2024-04-10 11:39:25.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:39:25.739 +08:00 [DBG] =========Yi-SQL耗时2.2724毫秒=====
2024-04-10 11:39:25.746 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:39:25.747 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 14.6935ms
2024-04-10 11:39:25.747 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:39:25.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:39:25.777 +08:00 [DBG] =========Yi-SQL耗时0.9698毫秒=====
2024-04-10 11:39:25.782 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:39:25.782 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 48.6639ms
2024-04-10 11:39:25.782 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:39:47.332 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:39:47.334 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-10 11:39:47.334 +08:00 [INF] Route matched with {action = "Create", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionCreateInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:39:47.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "question"  
           ("id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid")
     VALUES
           (N'ae80ec00-804c-7640-c918-3a11d843f517',N'2',N'2',N'2',N'2',N'2',N'2',N'2',null,CAST('2024-04-10 11:39:47.349' AS DATETIME),null,null,N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-10 11:39:47.363 +08:00 [DBG] =========Yi-SQL耗时5.0355毫秒=====
2024-04-10 11:39:47.367 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 11:39:47.367 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application) in 32.3851ms
2024-04-10 11:39:47.367 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.CreateAsync (Yi.Abp.Application)'
2024-04-10 11:39:47.390 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:39:47.390 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:39:47.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:39:47.396 +08:00 [DBG] =========Yi-SQL耗时0.8564毫秒=====
2024-04-10 11:39:47.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:39:47.400 +08:00 [DBG] =========Yi-SQL耗时1.3883毫秒=====
2024-04-10 11:39:47.411 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:39:47.411 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 20.6113ms
2024-04-10 11:39:47.411 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:39:59.162 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:39:59.162 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:39:59.172 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("impact" like concat('%',N'1','%'))  
===============================

2024-04-10 11:39:59.174 +08:00 [DBG] =========Yi-SQL耗时2.5053毫秒=====
2024-04-10 11:39:59.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE  ("impact" like concat('%',N'1','%'))    LIMIT 10 offset 0
===============================

2024-04-10 11:39:59.177 +08:00 [DBG] =========Yi-SQL耗时0.8817毫秒=====
2024-04-10 11:39:59.180 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:39:59.180 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 17.2717ms
2024-04-10 11:39:59.180 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:01.050 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:01.050 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:01.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("impact" like concat('%',N'2','%'))  
===============================

2024-04-10 11:40:01.053 +08:00 [DBG] =========Yi-SQL耗时0.6913毫秒=====
2024-04-10 11:40:01.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE  ("impact" like concat('%',N'2','%'))    LIMIT 10 offset 0
===============================

2024-04-10 11:40:01.056 +08:00 [DBG] =========Yi-SQL耗时1.206毫秒=====
2024-04-10 11:40:01.058 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:01.059 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.4133ms
2024-04-10 11:40:01.059 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:04.331 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:04.331 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:04.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("impact" like concat('%',N'1','%'))   AND  ("impact" like concat('%',N'2','%'))  
===============================

2024-04-10 11:40:04.336 +08:00 [DBG] =========Yi-SQL耗时0.6049毫秒=====
2024-04-10 11:40:04.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE  ("impact" like concat('%',N'1','%'))   AND  ("impact" like concat('%',N'2','%'))    LIMIT 10 offset 0
===============================

2024-04-10 11:40:04.340 +08:00 [DBG] =========Yi-SQL耗时1.2292毫秒=====
2024-04-10 11:40:04.341 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:04.341 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.5836ms
2024-04-10 11:40:04.341 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:05.230 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:05.231 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:05.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:40:05.233 +08:00 [DBG] =========Yi-SQL耗时0.7153毫秒=====
2024-04-10 11:40:05.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:40:05.237 +08:00 [DBG] =========Yi-SQL耗时0.8533毫秒=====
2024-04-10 11:40:05.238 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:05.239 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.8735ms
2024-04-10 11:40:05.239 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:08.327 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:08.327 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:08.330 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("impact" like concat('%',N'1','%'))   AND  ("impact" like concat('%',N'1','%'))  
===============================

2024-04-10 11:40:08.332 +08:00 [DBG] =========Yi-SQL耗时1.0815毫秒=====
2024-04-10 11:40:08.334 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE  ("impact" like concat('%',N'1','%'))   AND  ("impact" like concat('%',N'1','%'))    LIMIT 10 offset 0
===============================

2024-04-10 11:40:08.335 +08:00 [DBG] =========Yi-SQL耗时1.3054毫秒=====
2024-04-10 11:40:08.336 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:08.337 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.0898ms
2024-04-10 11:40:08.337 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:09.453 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:09.453 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:09.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:40:09.457 +08:00 [DBG] =========Yi-SQL耗时0.8298毫秒=====
2024-04-10 11:40:09.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:40:09.461 +08:00 [DBG] =========Yi-SQL耗时0.6111毫秒=====
2024-04-10 11:40:09.463 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:09.463 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.174ms
2024-04-10 11:40:09.463 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:12.858 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:12.858 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:12.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("project" like concat('%',N'1','%'))  
===============================

2024-04-10 11:40:12.861 +08:00 [DBG] =========Yi-SQL耗时0.8701毫秒=====
2024-04-10 11:40:12.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE  ("project" like concat('%',N'1','%'))    LIMIT 10 offset 0
===============================

2024-04-10 11:40:12.864 +08:00 [DBG] =========Yi-SQL耗时1.0431毫秒=====
2024-04-10 11:40:12.866 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:12.866 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.7764ms
2024-04-10 11:40:12.866 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:13.533 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:13.534 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:13.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:40:13.536 +08:00 [DBG] =========Yi-SQL耗时0.7018毫秒=====
2024-04-10 11:40:13.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:40:13.538 +08:00 [DBG] =========Yi-SQL耗时1.0983毫秒=====
2024-04-10 11:40:13.542 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:13.542 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.7274ms
2024-04-10 11:40:13.542 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:14.963 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:14.963 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:14.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("status" like concat('%',N'1','%'))  
===============================

2024-04-10 11:40:14.967 +08:00 [DBG] =========Yi-SQL耗时0.6873毫秒=====
2024-04-10 11:40:14.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE  ("status" like concat('%',N'1','%'))    LIMIT 10 offset 0
===============================

2024-04-10 11:40:14.969 +08:00 [DBG] =========Yi-SQL耗时1.2276毫秒=====
2024-04-10 11:40:14.971 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:14.971 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.6461ms
2024-04-10 11:40:14.971 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:15.445 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:15.445 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:15.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:40:15.448 +08:00 [DBG] =========Yi-SQL耗时0.5026毫秒=====
2024-04-10 11:40:15.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:40:15.449 +08:00 [DBG] =========Yi-SQL耗时0.5724毫秒=====
2024-04-10 11:40:15.452 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:15.452 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 6.86ms
2024-04-10 11:40:15.452 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:17.426 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:17.426 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:17.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  WHERE  ("category" like concat('%',N'2','%'))  
===============================

2024-04-10 11:40:17.429 +08:00 [DBG] =========Yi-SQL耗时0.7074毫秒=====
2024-04-10 11:40:17.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"   WHERE  ("category" like concat('%',N'2','%'))    LIMIT 10 offset 0
===============================

2024-04-10 11:40:17.433 +08:00 [DBG] =========Yi-SQL耗时0.4922毫秒=====
2024-04-10 11:40:17.434 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:17.435 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.6388ms
2024-04-10 11:40:17.435 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:18.043 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:40:18.043 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:40:18.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:40:18.046 +08:00 [DBG] =========Yi-SQL耗时0.5352毫秒=====
2024-04-10 11:40:18.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:40:18.048 +08:00 [DBG] =========Yi-SQL耗时0.9347毫秒=====
2024-04-10 11:40:18.050 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:40:18.051 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.7035ms
2024-04-10 11:40:18.051 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:42:36.339 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetExportExcelAsync (Yi.Abp.Application)'
2024-04-10 11:42:36.364 +08:00 [INF] Route matched with {action = "GetExportExcel", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetExportExcelAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:42:36.436 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:42:36.437 +08:00 [DBG] =========Yi-SQL耗时0.6721毫秒=====
2024-04-10 11:42:36.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10000 offset 0
===============================

2024-04-10 11:42:36.441 +08:00 [DBG] =========Yi-SQL耗时2.7628毫秒=====
2024-04-10 11:42:36.568 +08:00 [INF] Executing PhysicalFileResult, sending file '/wwwroot/temp/QuestionEntity_2024-04-10_11-42-36_f3d2a350-1b8a-4068-a7f3-75425cd5b587.xlsx' with download name '' ...
2024-04-10 11:42:36.600 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetExportExcelAsync (Yi.Abp.Application) in 235.7653ms
2024-04-10 11:42:36.600 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetExportExcelAsync (Yi.Abp.Application)'
2024-04-10 11:45:37.115 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:45:37.115 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:45:37.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:45:37.175 +08:00 [DBG] =========Yi-SQL耗时55.7294毫秒=====
2024-04-10 11:45:37.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:45:37.181 +08:00 [DBG] =========Yi-SQL耗时0.5854毫秒=====
2024-04-10 11:45:37.183 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:45:37.191 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 75.1706ms
2024-04-10 11:45:37.191 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:46:56.352 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:46:56.352 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:46:56.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:46:56.355 +08:00 [DBG] =========Yi-SQL耗时1.2527毫秒=====
2024-04-10 11:46:56.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 50 offset 0
===============================

2024-04-10 11:46:56.360 +08:00 [DBG] =========Yi-SQL耗时3.1246毫秒=====
2024-04-10 11:46:56.362 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:46:56.362 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.2647ms
2024-04-10 11:46:56.362 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:46:57.591 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:46:57.591 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:46:57.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:46:57.593 +08:00 [DBG] =========Yi-SQL耗时0.7021毫秒=====
2024-04-10 11:46:57.595 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:46:57.596 +08:00 [DBG] =========Yi-SQL耗时1.5492毫秒=====
2024-04-10 11:46:57.604 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:46:57.605 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 13.0481ms
2024-04-10 11:46:57.605 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:47:05.413 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 11:47:05.413 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 11:47:05.994 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:47:05.995 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 11:47:05.995 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 11:47:06.007 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:06.007 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:06.010 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 11:47:06.010 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.8853ms
2024-04-10 11:47:06.010 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:06.072 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:47:06.073 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 11:47:06.073 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:06.073 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:06.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:06.078 +08:00 [DBG] =========Yi-SQL耗时1.6191毫秒=====
2024-04-10 11:47:06.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 11:47:06.079 +08:00 [DBG] =========Yi-SQL耗时0.4727毫秒=====
2024-04-10 11:47:06.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 11:47:06.080 +08:00 [DBG] =========Yi-SQL耗时0.6035毫秒=====
2024-04-10 11:47:06.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:06.082 +08:00 [DBG] =========Yi-SQL耗时1.0663毫秒=====
2024-04-10 11:47:06.083 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:06.083 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 10.0611ms
2024-04-10 11:47:06.083 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:06.112 +08:00 [INF] 2024/4/10 11:47:06：cc,iaH9AryiuozkxkkwVYRkvA连接服务端success，当前已连接0个
2024-04-10 11:47:10.219 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:10.219 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:10.220 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:47:10.220 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:47:10.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:10.222 +08:00 [DBG] =========Yi-SQL耗时1.6047毫秒=====
2024-04-10 11:47:10.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:47:10.224 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:10.224 +08:00 [DBG] =========Yi-SQL耗时0.6995毫秒=====
2024-04-10 11:47:10.225 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.5246ms
2024-04-10 11:47:10.225 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:10.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:47:10.228 +08:00 [DBG] =========Yi-SQL耗时0.6883毫秒=====
2024-04-10 11:47:10.230 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:10.231 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.784ms
2024-04-10 11:47:10.231 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:47:13.191 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 11:47:13.195 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-10 11:47:13.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:13.234 +08:00 [DBG] =========Yi-SQL耗时3.7841毫秒=====
2024-04-10 11:47:13.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-10 11:47:13.242 +08:00 [DBG] =========Yi-SQL耗时2.3725毫秒=====
2024-04-10 11:47:13.246 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:13.257 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 62.0169ms
2024-04-10 11:47:13.257 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 11:47:14.232 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:14.232 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:14.233 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:14.235 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:14.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:14.263 +08:00 [DBG] =========Yi-SQL耗时0.8888毫秒=====
2024-04-10 11:47:14.263 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:14.263 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:14.264 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:14.264 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 31.5689ms
2024-04-10 11:47:14.264 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:14.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-10 11:47:14.272 +08:00 [DBG] =========Yi-SQL耗时5.2382毫秒=====
2024-04-10 11:47:14.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-10 11:47:14.274 +08:00 [DBG] =========Yi-SQL耗时0.8703毫秒=====
2024-04-10 11:47:14.278 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:14.278 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 43.1917ms
2024-04-10 11:47:14.278 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:14.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-10 11:47:14.280 +08:00 [DBG] =========Yi-SQL耗时1.2066毫秒=====
2024-04-10 11:47:14.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-10 11:47:14.283 +08:00 [DBG] =========Yi-SQL耗时1.3369毫秒=====
2024-04-10 11:47:14.283 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:14.284 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 20.5358ms
2024-04-10 11:47:14.284 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:16.373 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:47:16.374 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:47:16.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:47:16.377 +08:00 [DBG] =========Yi-SQL耗时0.7154毫秒=====
2024-04-10 11:47:16.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:47:16.379 +08:00 [DBG] =========Yi-SQL耗时0.9623毫秒=====
2024-04-10 11:47:16.381 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:16.382 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.7298ms
2024-04-10 11:47:16.382 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:47:29.332 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 11:47:29.332 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 11:47:29.483 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:47:29.490 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 11:47:29.491 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 11:47:29.497 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:29.498 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:29.501 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 11:47:29.502 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.499ms
2024-04-10 11:47:29.502 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:29.561 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:29.561 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:29.563 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:47:29.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:29.564 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 11:47:29.565 +08:00 [DBG] =========Yi-SQL耗时0.7989毫秒=====
2024-04-10 11:47:29.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 11:47:29.568 +08:00 [DBG] =========Yi-SQL耗时0.8204毫秒=====
2024-04-10 11:47:29.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 11:47:29.569 +08:00 [DBG] =========Yi-SQL耗时0.2878毫秒=====
2024-04-10 11:47:29.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:29.570 +08:00 [DBG] =========Yi-SQL耗时0.51毫秒=====
2024-04-10 11:47:29.571 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:29.571 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 9.9364ms
2024-04-10 11:47:29.571 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:29.613 +08:00 [INF] 2024/4/10 11:47:29：cc,t86RNNNY8PuONd2cWVjDSA连接服务端success，当前已连接0个
2024-04-10 11:47:29.705 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:29.705 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:29.705 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:47:29.705 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:47:29.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:29.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:47:29.707 +08:00 [DBG] =========Yi-SQL耗时0.6747毫秒=====
2024-04-10 11:47:29.710 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:29.710 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.0551ms
2024-04-10 11:47:29.710 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:29.804 +08:00 [DBG] =========Yi-SQL耗时97.0575毫秒=====
2024-04-10 11:47:29.805 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:47:29.806 +08:00 [DBG] =========Yi-SQL耗时1.2988毫秒=====
2024-04-10 11:47:29.810 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:29.810 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 105.0081ms
2024-04-10 11:47:29.810 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:47:38.306 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 11:47:38.307 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 11:47:38.439 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:47:38.449 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 11:47:38.450 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 11:47:38.450 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:38.452 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:38.453 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 11:47:38.453 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.818ms
2024-04-10 11:47:38.454 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:38.489 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:38.490 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:38.491 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:47:38.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:38.493 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 11:47:38.493 +08:00 [DBG] =========Yi-SQL耗时1.6619毫秒=====
2024-04-10 11:47:38.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 11:47:38.496 +08:00 [DBG] =========Yi-SQL耗时0.3453毫秒=====
2024-04-10 11:47:38.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 11:47:38.497 +08:00 [DBG] =========Yi-SQL耗时0.6109毫秒=====
2024-04-10 11:47:38.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:38.499 +08:00 [DBG] =========Yi-SQL耗时0.4342毫秒=====
2024-04-10 11:47:38.500 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:38.501 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 11.1729ms
2024-04-10 11:47:38.501 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:38.546 +08:00 [INF] 2024/4/10 11:47:38：cc,calzoXcRNZgsahHNLUL1GA连接服务端success，当前已连接0个
2024-04-10 11:47:38.640 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:47:38.640 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:47:38.640 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:38.640 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:38.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:38.643 +08:00 [DBG] =========Yi-SQL耗时1.5326毫秒=====
2024-04-10 11:47:38.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:47:38.645 +08:00 [DBG] =========Yi-SQL耗时0.5602毫秒=====
2024-04-10 11:47:38.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:47:38.647 +08:00 [DBG] =========Yi-SQL耗时0.9631毫秒=====
2024-04-10 11:47:38.648 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:38.648 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.9125ms
2024-04-10 11:47:38.648 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:38.649 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:38.649 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.1481ms
2024-04-10 11:47:38.649 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:47:43.696 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 11:47:43.699 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 11:47:43.830 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:47:43.831 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 11:47:43.831 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 11:47:43.844 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:43.844 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:43.845 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 11:47:43.845 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.2209ms
2024-04-10 11:47:43.845 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:43.878 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:43.878 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:43.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:43.882 +08:00 [INF] CORS policy execution successful.
2024-04-10 11:47:43.882 +08:00 [DBG] =========Yi-SQL耗时1.0174毫秒=====
2024-04-10 11:47:43.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 11:47:43.886 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 11:47:43.887 +08:00 [DBG] =========Yi-SQL耗时1.9375毫秒=====
2024-04-10 11:47:43.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 11:47:43.889 +08:00 [DBG] =========Yi-SQL耗时0.4301毫秒=====
2024-04-10 11:47:43.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:43.890 +08:00 [DBG] =========Yi-SQL耗时0.9239毫秒=====
2024-04-10 11:47:43.891 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:43.892 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 13.2483ms
2024-04-10 11:47:43.892 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:43.948 +08:00 [INF] 2024/4/10 11:47:43：cc,gbsmhmuhD9J7PDjMsgtfFQ连接服务端success，当前已连接0个
2024-04-10 11:47:44.009 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:44.009 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 11:47:44.010 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 11:47:44.010 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 11:47:44.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 11:47:44.011 +08:00 [DBG] =========Yi-SQL耗时0.7755毫秒=====
2024-04-10 11:47:44.014 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:44.015 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.233ms
2024-04-10 11:47:44.015 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 11:47:44.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 11:47:44.018 +08:00 [DBG] =========Yi-SQL耗时1.7812毫秒=====
2024-04-10 11:47:44.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 11:47:44.020 +08:00 [DBG] =========Yi-SQL耗时0.503毫秒=====
2024-04-10 11:47:44.021 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 11:47:44.022 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.7659ms
2024-04-10 11:47:44.022 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 12:00:00.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-10 12:00:00.102 +08:00 [DBG] =========Yi-SQL耗时76.4019毫秒=====
2024-04-10 12:00:00.388 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-10 12:00:00.388 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-10 12:11:27.444 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 12:11:27.446 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:11:27.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 12:11:27.533 +08:00 [DBG] =========Yi-SQL耗时79.5012毫秒=====
2024-04-10 12:11:27.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 12:11:27.536 +08:00 [DBG] =========Yi-SQL耗时2.3311毫秒=====
2024-04-10 12:11:27.539 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 12:11:27.540 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 94.3931ms
2024-04-10 12:11:27.540 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 12:11:32.375 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:11:32.375 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:11:32.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'999a7986-3d88-a379-9aa9-3a11d7fb8e23'   
===============================

2024-04-10 12:11:32.382 +08:00 [DBG] =========Yi-SQL耗时3.2983毫秒=====
2024-04-10 12:11:32.384 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 12:11:32.384 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 9.5423ms
2024-04-10 12:11:32.384 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:11:36.098 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:11:36.098 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:11:36.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'dbdfb03d-8b68-9042-09c5-3a11d83af122'   
===============================

2024-04-10 12:11:36.100 +08:00 [DBG] =========Yi-SQL耗时0.8614毫秒=====
2024-04-10 12:11:36.105 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 12:11:36.105 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 6.948ms
2024-04-10 12:11:36.105 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:11:39.015 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:11:39.015 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:11:39.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'999a7986-3d88-a379-9aa9-3a11d7fb8e23'   
===============================

2024-04-10 12:11:39.018 +08:00 [DBG] =========Yi-SQL耗时0.7971毫秒=====
2024-04-10 12:11:39.031 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 12:11:39.031 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 16.4716ms
2024-04-10 12:11:39.032 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:14:46.354 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:14:46.354 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:14:46.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'999a7986-3d88-a379-9aa9-3a11d7fb8e23'   
===============================

2024-04-10 12:14:46.358 +08:00 [DBG] =========Yi-SQL耗时2.2913毫秒=====
2024-04-10 12:14:46.364 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 12:14:46.365 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 10.2735ms
2024-04-10 12:14:46.365 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:15:06.300 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:15:06.300 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:15:06.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'999a7986-3d88-a379-9aa9-3a11d7fb8e23'   
===============================

2024-04-10 12:15:06.303 +08:00 [DBG] =========Yi-SQL耗时0.9196毫秒=====
2024-04-10 12:15:06.308 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 12:15:06.308 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 7.6643ms
2024-04-10 12:15:06.308 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:15:12.291 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:15:12.292 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:15:12.294 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'dbdfb03d-8b68-9042-09c5-3a11d83af122'   
===============================

2024-04-10 12:15:12.296 +08:00 [DBG] =========Yi-SQL耗时1.9596毫秒=====
2024-04-10 12:15:12.300 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 12:15:12.300 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 8.8439ms
2024-04-10 12:15:12.300 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:17:51.730 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 12:17:51.732 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 12:17:51.907 +08:00 [INF] CORS policy execution successful.
2024-04-10 12:17:51.911 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 12:17:51.913 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 12:17:51.928 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 12:17:51.928 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 12:17:51.946 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 12:17:51.947 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 18.6224ms
2024-04-10 12:17:51.947 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 12:17:52.002 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 12:17:52.002 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 12:17:52.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 12:17:52.006 +08:00 [INF] CORS policy execution successful.
2024-04-10 12:17:52.008 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 12:17:52.082 +08:00 [DBG] =========Yi-SQL耗时76.693毫秒=====
2024-04-10 12:17:52.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 12:17:52.085 +08:00 [DBG] =========Yi-SQL耗时2.2668毫秒=====
2024-04-10 12:17:52.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 12:17:52.089 +08:00 [DBG] =========Yi-SQL耗时2.0206毫秒=====
2024-04-10 12:17:52.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 12:17:52.094 +08:00 [INF] 2024/4/10 12:17:52：cc,XnvAVvPXO711owhMEtfUag连接服务端success，当前已连接0个
2024-04-10 12:17:52.094 +08:00 [DBG] =========Yi-SQL耗时4.0864毫秒=====
2024-04-10 12:17:52.096 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 12:17:52.097 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 94.8324ms
2024-04-10 12:17:52.097 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 12:17:52.278 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 12:17:52.278 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 12:17:52.278 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:17:52.278 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 12:17:52.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 12:17:52.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 12:17:52.282 +08:00 [DBG] =========Yi-SQL耗时1.3917毫秒=====
2024-04-10 12:17:52.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 12:17:52.284 +08:00 [DBG] =========Yi-SQL耗时0.6439毫秒=====
2024-04-10 12:17:52.287 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 12:17:52.287 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.9824ms
2024-04-10 12:17:52.287 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 12:17:52.348 +08:00 [DBG] =========Yi-SQL耗时67.1495毫秒=====
2024-04-10 12:17:52.350 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 12:17:52.350 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 71.6842ms
2024-04-10 12:17:52.350 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 12:17:56.198 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:17:56.198 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:17:56.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'999a7986-3d88-a379-9aa9-3a11d7fb8e23'   
===============================

2024-04-10 12:17:56.201 +08:00 [DBG] =========Yi-SQL耗时1.1753毫秒=====
2024-04-10 12:17:56.204 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 12:17:56.205 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 6.8003ms
2024-04-10 12:17:56.205 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:18:00.479 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:18:00.479 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:18:00.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'dbdfb03d-8b68-9042-09c5-3a11d83af122'   
===============================

2024-04-10 12:18:00.483 +08:00 [DBG] =========Yi-SQL耗时1.3242毫秒=====
2024-04-10 12:18:00.486 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 12:18:00.486 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 6.6094ms
2024-04-10 12:18:00.486 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:19:04.105 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:19:04.106 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:19:04.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'999a7986-3d88-a379-9aa9-3a11d7fb8e23'   
===============================

2024-04-10 12:19:04.109 +08:00 [DBG] =========Yi-SQL耗时0.9475毫秒=====
2024-04-10 12:19:04.112 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 12:19:04.113 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 6.8822ms
2024-04-10 12:19:04.113 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:19:10.072 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:19:10.072 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 12:19:10.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'999a7986-3d88-a379-9aa9-3a11d7fb8e23'   
===============================

2024-04-10 12:19:10.076 +08:00 [DBG] =========Yi-SQL耗时1.0944毫秒=====
2024-04-10 12:19:10.080 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 12:19:10.080 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 7.77ms
2024-04-10 12:19:10.080 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 12:22:51.123 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 12:22:51.124 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 12:22:51.125 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 12:22:51.125 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.8616ms
2024-04-10 12:22:51.125 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 12:23:31.032 +08:00 [INF] CORS policy execution successful.
2024-04-10 12:23:31.033 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 12:23:31.043 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 12:23:31.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "file"  
           ("id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp")
     VALUES
           (N'a1198983-519f-4ff8-02cb-3a11d86bfe0d',31.2333984375,N'blob',N'wwwroot/File\a1198983-519f-4ff8-02cb-3a11d86bfe0d',CAST('2024-04-10 12:23:31.255' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,N'6eaed450d5364f449152a8abfc59da68') ;
===============================

2024-04-10 12:23:31.272 +08:00 [DBG] =========Yi-SQL耗时12.1904毫秒=====
2024-04-10 12:23:31.287 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 12:23:31.288 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 245.1763ms
2024-04-10 12:23:31.288 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 12:23:31.305 +08:00 [INF] CORS policy execution successful.
2024-04-10 12:23:31.309 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.UpdateIconAsync (Yi.Framework.Rbac.Application)'
2024-04-10 12:23:31.341 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 12:23:31.346 +08:00 [INF] Route matched with {action = "UpdateIcon", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] UpdateIconAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.UpdateIconDto) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 12:23:31.347 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 12:23:31.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'a1198983-519f-4ff8-02cb-3a11d86bfe0d' )   LIMIT 1 offset 0
===============================

2024-04-10 12:23:31.363 +08:00 [DBG] =========Yi-SQL耗时1.4998毫秒=====
2024-04-10 12:23:31.386 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 12:23:31.392 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 44.6327ms
2024-04-10 12:23:31.392 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 12:23:31.399 +08:00 [INF] CORS policy execution successful.
2024-04-10 12:23:31.401 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 12:23:31.402 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 12:23:31.403 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'a1198983-519f-4ff8-02cb-3a11d86bfe0d' )   LIMIT 1 offset 0
===============================

2024-04-10 12:23:31.404 +08:00 [DBG] =========Yi-SQL耗时1.1304毫秒=====
2024-04-10 12:23:31.407 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 12:23:31.407 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.7733ms
2024-04-10 12:23:31.407 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 12:23:31.416 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 12:23:31.416 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 12:23:31.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'a1198983-519f-4ff8-02cb-3a11d86bfe0d' )   LIMIT 1 offset 0
===============================

2024-04-10 12:23:31.419 +08:00 [DBG] =========Yi-SQL耗时0.9318毫秒=====
2024-04-10 12:23:31.424 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 12:23:31.426 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 9.4995ms
2024-04-10 12:23:31.428 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 12:23:31.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 12:23:31.499 +08:00 [DBG] =========Yi-SQL耗时2.8831毫秒=====
2024-04-10 12:23:31.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "user"  SET
           "isdeleted"=0,"name"=N'大橙子',"age"=20,"username"=N'cc',"password"=N'brnsRut38aRx39ovAFnN9DVLlndT5ZmPJET8TOpGSfNjX9U1CwqSnEp5DuzzMw7O9zrE6w9_xYlKttiuzJ1xfw',"salt"=N'GyW9lyIC20uRkWk+bBjTaw==',"icon"=N'a1198983-519f-4ff8-02cb-3a11d86bfe0d',"nick"=N'橙子',"email"=N'454313500@qq.com',"ip"=null,"address"=N'深圳',"phone"=13800000000,"introduction"=N'还有谁？',"remark"=N'描述是什么呢？',"sex"=0,"deptid"=null,"creationtime"=CAST('2024-03-29 12:14:27.151' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-10 12:23:31.526' AS DATETIME),"ordernum"=999,"state"=1  WHERE "id"=N'e94b7363-80d1-10a3-eb2c-3a119a976151'
===============================

2024-04-10 12:23:31.572 +08:00 [DBG] =========Yi-SQL耗时9.2014毫秒=====
2024-04-10 12:23:31.577 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-04-10 12:23:31.577 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.UpdateIconAsync (Yi.Framework.Rbac.Application) in 230.5858ms
2024-04-10 12:23:31.577 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.UpdateIconAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:00:00.049 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-10 13:00:00.137 +08:00 [DBG] =========Yi-SQL耗时89.0578毫秒=====
2024-04-10 13:00:00.394 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-10 13:00:00.394 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-10 13:00:38.010 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 13:00:38.011 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:16:03.880 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:16:03.907 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:16:03.913 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:16:04.738 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:16:04.740 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:16:04.761 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:16:05.719 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:16:05.721 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:16:05.725 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:16:05.733 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:16:05.737 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:16:05.775 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:16:05.779 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 42.086ms
2024-04-10 13:16:05.779 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:16:05.874 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:16:05.874 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:16:05.881 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:16:05.882 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:16:05.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:16:05.921 +08:00 [DBG] =========Yi-SQL耗时30.9299毫秒=====
2024-04-10 13:16:05.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 13:16:05.937 +08:00 [DBG] =========Yi-SQL耗时4.2349毫秒=====
2024-04-10 13:16:05.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:16:05.944 +08:00 [DBG] =========Yi-SQL耗时3.1506毫秒=====
2024-04-10 13:16:05.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:16:05.950 +08:00 [DBG] =========Yi-SQL耗时3.8281毫秒=====
2024-04-10 13:16:05.954 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:16:05.956 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 81.5716ms
2024-04-10 13:16:05.956 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:16:05.959 +08:00 [INF] 2024/4/10 13:16:05：cc,RIEC2zr3XjFtVYr75KT5Xw连接服务端success，当前已连接0个
2024-04-10 13:16:06.269 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:16:06.269 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:16:06.271 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:16:06.272 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.2333ms
2024-04-10 13:16:06.272 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:20:59.140 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:20:59.141 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 13:20:59.142 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:20:59.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "file"  
           ("id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp")
     VALUES
           (N'7ab8ae3c-d528-a81c-cb05-3a11d8a09b12',27.400390625,N'blob',N'wwwroot/File\7ab8ae3c-d528-a81c-cb05-3a11d8a09b12',CAST('2024-04-10 13:20:59.352' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,N'73961b0273d4405088671e5cd4d037e7') ;
===============================

2024-04-10 13:20:59.363 +08:00 [DBG] =========Yi-SQL耗时8.2702毫秒=====
2024-04-10 13:20:59.364 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:20:59.364 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 222.6953ms
2024-04-10 13:20:59.364 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 13:20:59.374 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:20:59.375 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.UpdateIconAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:20:59.375 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:20:59.375 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:20:59.375 +08:00 [INF] Route matched with {action = "UpdateIcon", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] UpdateIconAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.UpdateIconDto) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:20:59.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:20:59.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'7ab8ae3c-d528-a81c-cb05-3a11d8a09b12' )   LIMIT 1 offset 0
===============================

2024-04-10 13:20:59.442 +08:00 [DBG] =========Yi-SQL耗时9.4323毫秒=====
2024-04-10 13:20:59.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "user"  SET
           "isdeleted"=0,"name"=N'大橙子',"age"=20,"username"=N'cc',"password"=N'brnsRut38aRx39ovAFnN9DVLlndT5ZmPJET8TOpGSfNjX9U1CwqSnEp5DuzzMw7O9zrE6w9_xYlKttiuzJ1xfw',"salt"=N'GyW9lyIC20uRkWk+bBjTaw==',"icon"=N'7ab8ae3c-d528-a81c-cb05-3a11d8a09b12',"nick"=N'橙子',"email"=N'454313500@qq.com',"ip"=null,"address"=N'深圳',"phone"=13800000000,"introduction"=N'还有谁？',"remark"=N'描述是什么呢？',"sex"=0,"deptid"=null,"creationtime"=CAST('2024-03-29 12:14:27.151' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-10 13:20:59.451' AS DATETIME),"ordernum"=999,"state"=1  WHERE "id"=N'e94b7363-80d1-10a3-eb2c-3a119a976151'
===============================

2024-04-10 13:20:59.459 +08:00 [DBG] =========Yi-SQL耗时5.2112毫秒=====
2024-04-10 13:20:59.459 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-04-10 13:20:59.460 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.UpdateIconAsync (Yi.Framework.Rbac.Application) in 84.7072ms
2024-04-10 13:20:59.460 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.UpdateIconAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:20:59.524 +08:00 [DBG] =========Yi-SQL耗时91.2639毫秒=====
2024-04-10 13:20:59.527 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:20:59.529 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 154.3306ms
2024-04-10 13:20:59.530 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:20:59.537 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:20:59.538 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:20:59.538 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:20:59.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'7ab8ae3c-d528-a81c-cb05-3a11d8a09b12' )   LIMIT 1 offset 0
===============================

2024-04-10 13:20:59.540 +08:00 [DBG] =========Yi-SQL耗时0.7906毫秒=====
2024-04-10 13:20:59.541 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:20:59.542 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 3.6266ms
2024-04-10 13:20:59.542 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:20:59.548 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:20:59.548 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:20:59.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'7ab8ae3c-d528-a81c-cb05-3a11d8a09b12' )   LIMIT 1 offset 0
===============================

2024-04-10 13:20:59.550 +08:00 [DBG] =========Yi-SQL耗时0.6974毫秒=====
2024-04-10 13:20:59.554 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:20:59.554 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.861ms
2024-04-10 13:20:59.554 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:01.466 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:01.468 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:01.469 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:01.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'7ab8ae3c-d528-a81c-cb05-3a11d8a09b12' )   LIMIT 1 offset 0
===============================

2024-04-10 13:21:01.472 +08:00 [DBG] =========Yi-SQL耗时1.0481毫秒=====
2024-04-10 13:21:01.474 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:21:01.474 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.1789ms
2024-04-10 13:21:01.474 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:01.482 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:01.482 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:01.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'7ab8ae3c-d528-a81c-cb05-3a11d8a09b12' )   LIMIT 1 offset 0
===============================

2024-04-10 13:21:01.485 +08:00 [DBG] =========Yi-SQL耗时0.7359毫秒=====
2024-04-10 13:21:01.487 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:21:01.487 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.9996ms
2024-04-10 13:21:01.487 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:08.866 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:08.867 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:08.867 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:08.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "file"  
           ("id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp")
     VALUES
           (N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103',54.298828125,N'blob',N'wwwroot/File\ab0bdda9-f700-bb50-c72f-3a11d8a0c103',CAST('2024-04-10 13:21:08.872' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,N'5b5a104a87534fc5961f4bc1139e51d2') ;
===============================

2024-04-10 13:21:08.874 +08:00 [DBG] =========Yi-SQL耗时1.0144毫秒=====
2024-04-10 13:21:08.874 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:21:08.874 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 7.8067ms
2024-04-10 13:21:08.875 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:08.886 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:08.887 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.UpdateIconAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:08.887 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:08.887 +08:00 [INF] Route matched with {action = "UpdateIcon", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] UpdateIconAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.UpdateIconDto) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:08.887 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:08.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:21:08.888 +08:00 [DBG] =========Yi-SQL耗时0.8866毫秒=====
2024-04-10 13:21:08.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:21:08.890 +08:00 [DBG] =========Yi-SQL耗时1.037毫秒=====
2024-04-10 13:21:08.893 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:21:08.893 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "user"  SET
           "isdeleted"=0,"name"=N'大橙子',"age"=20,"username"=N'cc',"password"=N'brnsRut38aRx39ovAFnN9DVLlndT5ZmPJET8TOpGSfNjX9U1CwqSnEp5DuzzMw7O9zrE6w9_xYlKttiuzJ1xfw',"salt"=N'GyW9lyIC20uRkWk+bBjTaw==',"icon"=N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103',"nick"=N'橙子',"email"=N'454313500@qq.com',"ip"=null,"address"=N'深圳',"phone"=13800000000,"introduction"=N'还有谁？',"remark"=N'描述是什么呢？',"sex"=0,"deptid"=null,"creationtime"=CAST('2024-03-29 12:14:27.151' AS DATETIME),"creatorid"=null,"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-10 13:21:08.892' AS DATETIME),"ordernum"=999,"state"=1  WHERE "id"=N'e94b7363-80d1-10a3-eb2c-3a119a976151'
===============================

2024-04-10 13:21:08.894 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.8085ms
2024-04-10 13:21:08.894 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:08.894 +08:00 [DBG] =========Yi-SQL耗时1.18毫秒=====
2024-04-10 13:21:08.895 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-04-10 13:21:08.895 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.UpdateIconAsync (Yi.Framework.Rbac.Application) in 8.2437ms
2024-04-10 13:21:08.895 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.UpdateIconAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:08.898 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:08.899 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:08.899 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:08.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:21:08.900 +08:00 [DBG] =========Yi-SQL耗时0.5806毫秒=====
2024-04-10 13:21:08.902 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:21:08.903 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 3.5003ms
2024-04-10 13:21:08.903 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:08.908 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:08.908 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:08.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:21:08.910 +08:00 [DBG] =========Yi-SQL耗时0.6819毫秒=====
2024-04-10 13:21:08.912 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:21:08.912 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.1223ms
2024-04-10 13:21:08.912 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:55.805 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:55.806 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:55.821 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:55.831 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-04-10 13:21:55.831 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 9.958ms
2024-04-10 13:21:55.831 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:55.842 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:55.844 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-10 13:21:55.845 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-10 13:21:55.846 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:21:55.846 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:21:55.870 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:55.871 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-10 13:21:55.871 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-10 13:21:55.871 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:21:55.901 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-04-10 13:21:55.902 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:21:55.902 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:21:56.048 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:56.049 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-10 13:21:56.049 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-10 13:21:56.050 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:21:56.051 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:21:56.134 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:56.135 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-10 13:21:56.135 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-10 13:21:56.135 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:21:56.181 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:56.182 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:56.183 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 13:21:56.184 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-10 13:21:56.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:21:56.192 +08:00 [DBG] =========Yi-SQL耗时2.9649毫秒=====
2024-04-10 13:21:56.193 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:21:56.194 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 9.3836ms
2024-04-10 13:21:56.194 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 13:21:56.220 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-10 13:21:56.221 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 38.3592ms
2024-04-10 13:21:56.221 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:59.050 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:59.051 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:59.052 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:59.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'006238' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:21:59.059 +08:00 [DBG] =========Yi-SQL耗时3.3627毫秒=====
2024-04-10 13:21:59.063 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:21:59.063 +08:00 [DBG] =========Yi-SQL耗时0.5517毫秒=====
2024-04-10 13:21:59.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-10 13:21:59.069 +08:00 [DBG] =========Yi-SQL耗时4.819毫秒=====
2024-04-10 13:21:59.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:21:59.077 +08:00 [DBG] =========Yi-SQL耗时1.5148毫秒=====
2024-04-10 13:21:59.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-10 13:21:59.086 +08:00 [DBG] =========Yi-SQL耗时1.4735毫秒=====
2024-04-10 13:21:59.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('e6bf52fd-b827-33d0-b83c-3a119a97612e','60604454-c644-fd31-e57c-3a119a97612e','e893eea8-99b8-2d23-4c3f-3a119a97612e','ceecb9ff-5230-f3e0-79fe-3a119a97612e','0965b770-1de8-1c24-7e9f-3a119a97612e','49d3225a-5f55-53fe-01fd-3a119a97612e','51121df1-70bc-842c-6592-3a119a97616a','33197b18-4bca-93d8-d456-3a119a97612e','46c0eabd-f0f6-163e-9c8d-3a119a97612e')     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:21:59.098 +08:00 [DBG] =========Yi-SQL耗时3.8367毫秒=====
2024-04-10 13:21:59.157 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-10 13:21:59.157 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 105.1755ms
2024-04-10 13:21:59.157 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:59.159 +08:00 [INF] 用户【14034830-d11c-db5d-ea3e-3a11a05c01b1:006238】登入系统
2024-04-10 13:21:59.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'1a4aa49c-127a-806c-3f0c-3a11d8a1857a',CAST('2024-04-10 13:21:59.163' AS DATETIME),N'006238',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'006238登录系统',N'14034830-d11c-db5d-ea3e-3a11a05c01b1') ;
===============================

2024-04-10 13:21:59.167 +08:00 [DBG] =========Yi-SQL耗时3.0252毫秒=====
2024-04-10 13:21:59.168 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:59.175 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:21:59.175 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:21:59.177 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:59.177 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:59.180 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:21:59.181 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:21:59.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-04-10 13:21:59.199 +08:00 [DBG] =========Yi-SQL耗时1.4207毫秒=====
2024-04-10 13:21:59.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-10 13:21:59.200 +08:00 [DBG] =========Yi-SQL耗时0.2564毫秒=====
2024-04-10 13:21:59.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 ) AND ( 1 = 1 )    AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:21:59.201 +08:00 [DBG] =========Yi-SQL耗时0.5399毫秒=====
2024-04-10 13:21:59.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-10 13:21:59.202 +08:00 [DBG] =========Yi-SQL耗时0.1717毫秒=====
2024-04-10 13:21:59.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('e6bf52fd-b827-33d0-b83c-3a119a97612e','60604454-c644-fd31-e57c-3a119a97612e','e893eea8-99b8-2d23-4c3f-3a119a97612e','ceecb9ff-5230-f3e0-79fe-3a119a97612e','0965b770-1de8-1c24-7e9f-3a119a97612e','49d3225a-5f55-53fe-01fd-3a119a97612e','51121df1-70bc-842c-6592-3a119a97616a','33197b18-4bca-93d8-d456-3a119a97612e','46c0eabd-f0f6-163e-9c8d-3a119a97612e')     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:21:59.203 +08:00 [DBG] =========Yi-SQL耗时0.8902毫秒=====
2024-04-10 13:21:59.209 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:21:59.211 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 33.4256ms
2024-04-10 13:21:59.211 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:59.217 +08:00 [INF] 2024/4/10 13:21:59：006238,Wq-9P6zDhKferH88px4EpQ连接服务端success，当前已连接1个
2024-04-10 13:21:59.217 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:21:59.217 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:21:59.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 )  AND ( 1 = 1 )  
===============================

2024-04-10 13:21:59.220 +08:00 [DBG] =========Yi-SQL耗时0.8332毫秒=====
2024-04-10 13:21:59.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-10 13:21:59.223 +08:00 [DBG] =========Yi-SQL耗时0.794毫秒=====
2024-04-10 13:21:59.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 ) AND ( 1 = 1 )    AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:21:59.223 +08:00 [DBG] =========Yi-SQL耗时0.2858毫秒=====
2024-04-10 13:21:59.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "roleid" as aid,"menuid" as bid FROM "rolemenu"  WHERE   "roleid" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-10 13:21:59.224 +08:00 [DBG] =========Yi-SQL耗时0.472毫秒=====
2024-04-10 13:21:59.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","menuname" AS "menuname","menutype" AS "menutype","permissioncode" AS "permissioncode","parentid" AS "parentid","menuicon" AS "menuicon","router" AS "router","islink" AS "islink","iscache" AS "iscache","isshow" AS "isshow","remark" AS "remark","component" AS "component","query" AS "query" FROM "menu"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN ('e6bf52fd-b827-33d0-b83c-3a119a97612e','60604454-c644-fd31-e57c-3a119a97612e','e893eea8-99b8-2d23-4c3f-3a119a97612e','ceecb9ff-5230-f3e0-79fe-3a119a97612e','0965b770-1de8-1c24-7e9f-3a119a97612e','49d3225a-5f55-53fe-01fd-3a119a97612e','51121df1-70bc-842c-6592-3a119a97616a','33197b18-4bca-93d8-d456-3a119a97612e','46c0eabd-f0f6-163e-9c8d-3a119a97612e')     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:21:59.225 +08:00 [DBG] =========Yi-SQL耗时0.3131毫秒=====
2024-04-10 13:21:59.225 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:21:59.225 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 7.8391ms
2024-04-10 13:21:59.225 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:02.868 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:02.868 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:22:02.875 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:22:02.875 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.3729ms
2024-04-10 13:22:02.875 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:06.892 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:22:06.893 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:06.893 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:22:06.894 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-04-10 13:22:06.894 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 0.8332ms
2024-04-10 13:22:06.894 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:06.900 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:22:06.901 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-10 13:22:06.901 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-10 13:22:06.901 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:22:06.901 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:22:06.952 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:22:06.953 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-10 13:22:06.953 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-10 13:22:06.955 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:22:06.959 +08:00 [INF] 用户006238离开了，当前已连接1个
2024-04-10 13:22:06.959 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:22:06.961 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:22:06.974 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:22:07.089 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:22:07.093 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-10 13:22:07.093 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-10 13:22:07.094 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:22:07.094 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:22:07.150 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:22:07.150 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-10 13:22:07.150 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-10 13:22:07.151 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:22:07.174 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:07.174 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 13:22:07.174 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:22:07.174 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-10 13:22:07.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:22:07.177 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-10 13:22:07.178 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 3.4313ms
2024-04-10 13:22:07.178 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:07.178 +08:00 [DBG] =========Yi-SQL耗时1.4469毫秒=====
2024-04-10 13:22:07.180 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:22:07.180 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 5.9833ms
2024-04-10 13:22:07.180 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 13:22:09.359 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:22:09.360 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:09.360 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:22:09.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:22:09.363 +08:00 [DBG] =========Yi-SQL耗时1.1998毫秒=====
2024-04-10 13:22:09.366 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:22:09.367 +08:00 [DBG] =========Yi-SQL耗时0.7651毫秒=====
2024-04-10 13:22:09.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 13:22:09.368 +08:00 [DBG] =========Yi-SQL耗时0.2885毫秒=====
2024-04-10 13:22:09.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:22:09.369 +08:00 [DBG] =========Yi-SQL耗时0.4245毫秒=====
2024-04-10 13:22:09.387 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-10 13:22:09.388 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 27.4438ms
2024-04-10 13:22:09.388 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:09.388 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-04-10 13:22:09.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'2b659aed-f243-ae57-1a21-3a11d8a1ad6c',CAST('2024-04-10 13:22:09.389' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-10 13:22:09.391 +08:00 [DBG] =========Yi-SQL耗时1.7893毫秒=====
2024-04-10 13:22:09.396 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:22:09.397 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:22:09.397 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:22:09.401 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:09.402 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:22:09.403 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:22:09.403 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:22:09.404 +08:00 [DBG] =========Yi-SQL耗时0.7105毫秒=====
2024-04-10 13:22:09.405 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 13:22:09.406 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:22:09.406 +08:00 [DBG] =========Yi-SQL耗时0.5242毫秒=====
2024-04-10 13:22:09.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:22:09.408 +08:00 [DBG] =========Yi-SQL耗时0.6509毫秒=====
2024-04-10 13:22:09.409 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:22:09.409 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.2129ms
2024-04-10 13:22:09.409 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:09.417 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:09.417 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:22:09.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:22:09.419 +08:00 [DBG] =========Yi-SQL耗时0.5901毫秒=====
2024-04-10 13:22:09.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 13:22:09.421 +08:00 [DBG] =========Yi-SQL耗时0.3908毫秒=====
2024-04-10 13:22:09.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:22:09.422 +08:00 [DBG] =========Yi-SQL耗时0.2951毫秒=====
2024-04-10 13:22:09.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:22:09.422 +08:00 [DBG] =========Yi-SQL耗时0.4263毫秒=====
2024-04-10 13:22:09.423 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:22:09.423 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 5.5704ms
2024-04-10 13:22:09.423 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:09.447 +08:00 [INF] 2024/4/10 13:22:09：cc,7X1mdhrIOtDDL7xvRT7-_w连接服务端success，当前已连接1个
2024-04-10 13:22:09.490 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:22:09.490 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:22:09.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:22:09.492 +08:00 [DBG] =========Yi-SQL耗时0.6338毫秒=====
2024-04-10 13:22:09.495 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:22:09.496 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.4205ms
2024-04-10 13:22:09.496 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:32:44.440 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-04-10 13:32:44.447 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:32:44.447 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:39:20.924 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-10 13:39:20.947 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-10 13:39:26.399 +08:00 [INF] Loaded ABP modules:
2024-04-10 13:39:26.399 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-10 13:39:26.399 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-10 13:39:26.399 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-10 13:39:26.399 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-10 13:39:26.399 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-10 13:39:26.399 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-10 13:39:26.399 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-10 13:39:26.399 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-10 13:39:26.399 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-10 13:39:26.399 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-10 13:39:26.399 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-10 13:39:26.399 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-10 13:39:26.399 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-10 13:39:26.399 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-10 13:39:26.399 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-10 13:39:26.399 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-10 13:39:26.399 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-10 13:39:26.399 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-10 13:39:26.399 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-10 13:39:26.399 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-10 13:39:26.399 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-10 13:39:26.399 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-10 13:39:26.399 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-10 13:39:26.399 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-10 13:39:26.399 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-10 13:39:26.399 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-10 13:39:26.399 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-10 13:39:26.399 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-10 13:39:26.399 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-10 13:39:26.399 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-10 13:39:26.399 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-10 13:39:26.399 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-10 13:39:26.400 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-10 13:39:26.400 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-10 13:39:26.400 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-10 13:39:26.400 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-10 13:39:26.400 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-10 13:39:26.400 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-10 13:39:26.400 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-10 13:39:26.400 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-10 13:39:26.400 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-10 13:39:26.400 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-10 13:39:26.400 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-10 13:39:26.400 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-10 13:39:26.400 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-10 13:39:26.400 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-10 13:39:26.400 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-10 13:39:26.400 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-10 13:39:26.400 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-10 13:39:26.400 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-10 13:39:26.400 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-10 13:39:26.400 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-10 13:39:26.400 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-10 13:39:26.400 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-10 13:39:26.400 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-10 13:39:26.400 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-10 13:39:26.400 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-10 13:39:26.400 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-10 13:39:26.400 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-10 13:39:26.400 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-10 13:39:26.400 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-10 13:39:26.400 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-10 13:39:26.400 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-10 13:39:26.400 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-10 13:39:26.400 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-10 13:39:26.400 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-10 13:39:26.400 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-10 13:39:26.400 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-10 13:39:26.400 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-10 13:39:26.406 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-10 13:39:26.410 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-10 13:39:27.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.077 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-10 13:39:27.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-10 13:39:27.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.123 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-10 13:39:27.126 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-10 13:39:27.129 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-10 13:39:27.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-10 13:39:27.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-10 13:39:27.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-10 13:39:27.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-10 13:39:27.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-10 13:39:27.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-10 13:39:27.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-10 13:39:27.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-10 13:39:27.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-10 13:39:27.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.147 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.154 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.155 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-10 13:39:27.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-10 13:39:27.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-10 13:39:27.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-10 13:39:27.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-10 13:39:27.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-10 13:39:27.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-10 13:39:27.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-10 13:39:27.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-10 13:39:27.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.182 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-10 13:39:27.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-10 13:39:27.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-10 13:39:27.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-10 13:39:27.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-10 13:39:27.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 13:39:27.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 13:39:27.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-10 13:39:27.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-10 13:39:27.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-10 13:39:27.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-10 13:39:27.186 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-10 13:39:27.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-10 13:39:27.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-10 13:39:27.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-10 13:39:27.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-10 13:39:27.197 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.204 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.204 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.212 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-10 13:39:27.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-10 13:39:27.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-10 13:39:27.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-10 13:39:27.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-10 13:39:27.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-10 13:39:27.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-10 13:39:27.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-10 13:39:27.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-10 13:39:27.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-10 13:39:27.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-10 13:39:27.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-10 13:39:27.217 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.223 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-10 13:39:27.225 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-10 13:39:27.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-10 13:39:27.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-10 13:39:27.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-10 13:39:27.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-10 13:39:27.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-10 13:39:27.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-10 13:39:27.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-10 13:39:27.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-10 13:39:27.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-10 13:39:27.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-10 13:39:27.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-10 13:39:27.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-10 13:39:27.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.267 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-10 13:39:27.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-10 13:39:27.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-10 13:39:27.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-10 13:39:27.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-10 13:39:27.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-10 13:39:27.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-10 13:39:27.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-10 13:39:27.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.299 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.299 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-10 13:39:27.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-10 13:39:27.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-10 13:39:27.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-10 13:39:27.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-10 13:39:27.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-10 13:39:27.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 13:39:27.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 13:39:27.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-10 13:39:27.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-10 13:39:27.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-10 13:39:27.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-10 13:39:27.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-10 13:39:27.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-10 13:39:27.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-10 13:39:27.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-10 13:39:27.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-10 13:39:27.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-10 13:39:27.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-10 13:39:27.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-10 13:39:27.321 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-10 13:39:27.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-10 13:39:27.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-10 13:39:27.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-10 13:39:27.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-10 13:39:27.347 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-10 13:39:27.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.366 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-10 13:39:27.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-10 13:39:27.369 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-10 13:39:27.369 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-10 13:39:27.369 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-10 13:39:27.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 13:39:27.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 13:39:27.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-10 13:39:27.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-10 13:39:27.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-10 13:39:27.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-10 13:39:27.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-10 13:39:27.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-10 13:39:27.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.376 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-10 13:39:27.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.383 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.388 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.388 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-10 13:39:27.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-10 13:39:27.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-10 13:39:27.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-10 13:39:27.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-10 13:39:27.391 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.391 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.396 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-10 13:39:27.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.403 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.403 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-10 13:39:27.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-10 13:39:27.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-10 13:39:27.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-10 13:39:27.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-10 13:39:27.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 13:39:27.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 13:39:27.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-10 13:39:27.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-10 13:39:27.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-10 13:39:27.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-10 13:39:27.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-10 13:39:27.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-10 13:39:27.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-10 13:39:27.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-10 13:39:27.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.424 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-10 13:39:27.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-10 13:39:27.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-10 13:39:27.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-10 13:39:27.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-10 13:39:27.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-10 13:39:27.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-10 13:39:27.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-10 13:39:27.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-10 13:39:27.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-10 13:39:27.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-10 13:39:27.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-10 13:39:27.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-10 13:39:27.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-10 13:39:27.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-10 13:39:27.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-10 13:39:27.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-10 13:39:27.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-10 13:39:27.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-10 13:39:27.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-10 13:39:27.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-10 13:39:27.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-10 13:39:27.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-10 13:39:27.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-10 13:39:27.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 13:39:27.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 13:39:27.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-10 13:39:27.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-10 13:39:27.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-10 13:39:27.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.458 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-10 13:39:27.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-10 13:39:27.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-10 13:39:27.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-10 13:39:27.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-10 13:39:27.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-10 13:39:27.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.483 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.483 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-10 13:39:27.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.488 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.489 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-10 13:39:27.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.497 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-10 13:39:27.497 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-10 13:39:27.498 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-10 13:39:27.498 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-10 13:39:27.498 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.504 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-10 13:39:27.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-10 13:39:27.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-10 13:39:27.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.524 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-10 13:39:27.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-10 13:39:27.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-10 13:39:27.548 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-10 13:39:27.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-10 13:39:27.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-10 13:39:27.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-10 13:39:27.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-10 13:39:27.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-10 13:39:27.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-10 13:39:27.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-10 13:39:27.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-10 13:39:27.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-10 13:39:27.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-10 13:39:27.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-10 13:39:27.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-10 13:39:27.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-10 13:39:27.619 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-10 13:39:27.619 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.619 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-10 13:39:27.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-10 13:39:27.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-10 13:39:27.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-10 13:39:27.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-10 13:39:27.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-10 13:39:27.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.631 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.632 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.639 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-10 13:39:27.641 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-10 13:39:27.641 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-10 13:39:27.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-10 13:39:27.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-10 13:39:27.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.659 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-10 13:39:27.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-10 13:39:27.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-10 13:39:27.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-10 13:39:27.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.680 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-10 13:39:27.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-10 13:39:27.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-10 13:39:27.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.703 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-10 13:39:27.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-10 13:39:27.713 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.725 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-10 13:39:27.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-10 13:39:27.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-10 13:39:27.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-10 13:39:27.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.747 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.749 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.749 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-10 13:39:27.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-10 13:39:27.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-10 13:39:27.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-10 13:39:27.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-10 13:39:27.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.783 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-10 13:39:27.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-10 13:39:27.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.796 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-10 13:39:27.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-10 13:39:27.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-10 13:39:27.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-10 13:39:27.825 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-10 13:39:27.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-10 13:39:27.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-10 13:39:27.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-10 13:39:27.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-10 13:39:27.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-10 13:39:27.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-10 13:39:27.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-10 13:39:27.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-10 13:39:27.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-10 13:39:27.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-10 13:39:27.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-10 13:39:27.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-10 13:39:27.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.872 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.872 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-10 13:39:27.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.883 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-10 13:39:27.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-10 13:39:27.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-10 13:39:27.886 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-10 13:39:27.886 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-10 13:39:27.886 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-10 13:39:27.893 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.904 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-10 13:39:27.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.908 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.914 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-10 13:39:27.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.922 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.931 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.931 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-10 13:39:27.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-10 13:39:27.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.948 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-10 13:39:27.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-10 13:39:27.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.974 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.974 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-10 13:39:27.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 13:39:27.977 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-10 13:39:27.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:27.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:27.996 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:27.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-10 13:39:27.999 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" ALTER COLUMN "description"  type text   
===============================

2024-04-10 13:39:28.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
alter table "question" alter "description"  DROP NOT NULL 
===============================

2024-04-10 13:39:28.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-10 13:39:28.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:28.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-10 13:39:28.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:28.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:28.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-10 13:39:28.033 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-10 13:39:28.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-10 13:39:28.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-10 13:39:28.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-10 13:39:28.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.034 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-10 13:39:28.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:28.043 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.043 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-10 13:39:28.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:28.050 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:28.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-10 13:39:28.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-10 13:39:28.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-10 13:39:28.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:28.064 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-10 13:39:28.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 13:39:28.071 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:28.076 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-10 13:39:28.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-10 13:39:28.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-10 13:39:28.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-10 13:39:28.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-10 13:39:28.079 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.079 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 13:39:28.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-10 13:39:28.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 13:39:28.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.184 +08:00 [DBG] =========Yi-SQL耗时9.49毫秒=====
2024-04-10 13:39:28.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.202 +08:00 [DBG] =========Yi-SQL耗时1.2498毫秒=====
2024-04-10 13:39:28.206 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.207 +08:00 [DBG] =========Yi-SQL耗时1.2329毫秒=====
2024-04-10 13:39:28.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.214 +08:00 [DBG] =========Yi-SQL耗时2.1307毫秒=====
2024-04-10 13:39:28.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.218 +08:00 [DBG] =========Yi-SQL耗时0.8663毫秒=====
2024-04-10 13:39:28.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.222 +08:00 [DBG] =========Yi-SQL耗时1.3214毫秒=====
2024-04-10 13:39:28.227 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.228 +08:00 [DBG] =========Yi-SQL耗时1.4052毫秒=====
2024-04-10 13:39:28.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.232 +08:00 [DBG] =========Yi-SQL耗时0.8468毫秒=====
2024-04-10 13:39:28.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.234 +08:00 [DBG] =========Yi-SQL耗时0.4717毫秒=====
2024-04-10 13:39:28.237 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.238 +08:00 [DBG] =========Yi-SQL耗时0.6507毫秒=====
2024-04-10 13:39:28.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.242 +08:00 [DBG] =========Yi-SQL耗时1.188毫秒=====
2024-04-10 13:39:28.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.245 +08:00 [DBG] =========Yi-SQL耗时0.8364毫秒=====
2024-04-10 13:39:28.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.249 +08:00 [DBG] =========Yi-SQL耗时0.636毫秒=====
2024-04-10 13:39:28.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 13:39:28.252 +08:00 [DBG] =========Yi-SQL耗时1.0676毫秒=====
2024-04-10 13:39:28.261 +08:00 [DBG] 耗时-1854ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-10 13:39:28.264 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-10 13:39:28.359 +08:00 [DBG] 耗时-93ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-10 13:39:28.366 +08:00 [DBG] 耗时-7ms,已加载模块-Volo.Abp.EventBus
2024-04-10 13:39:28.383 +08:00 [DBG] 耗时-16ms,已加载模块-Volo.Abp.AspNetCore
2024-04-10 13:39:28.389 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-10 13:39:28.424 +08:00 [DBG] 耗时-34ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-10 13:39:28.428 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-10 13:39:29.038 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-10 13:39:29.133 +08:00 [DBG] 耗时-705ms,已加载模块-Yi.Abp.Web
2024-04-10 13:39:29.242 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-10 13:39:29.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-10 13:39:29.260 +08:00 [DBG] =========Yi-SQL耗时1.4258毫秒=====
2024-04-10 13:39:29.356 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-10 13:39:29.356 +08:00 [DBG] 耗时-222ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-10 13:39:29.357 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2942ms】==========
2024-04-10 13:39:29.467 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-10 13:39:29.467 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-10 13:39:29.467 +08:00 [INF] Hosting environment: Development
2024-04-10 13:39:29.467 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-10 13:39:37.525 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:39:37.599 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:39:37.599 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:39:37.607 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:39:37.628 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:39:37.632 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:39:37.638 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:39:37.748 +08:00 [INF] 2024/4/10 13:39:37：cc,i3RGf19iOUfOdbAcizQPug连接服务端success，当前已连接0个
2024-04-10 13:39:37.757 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:39:37.759 +08:00 [DBG] =========Yi-SQL耗时2.3341毫秒=====
2024-04-10 13:39:37.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 13:39:37.784 +08:00 [DBG] =========Yi-SQL耗时1.2608毫秒=====
2024-04-10 13:39:37.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:39:37.792 +08:00 [DBG] =========Yi-SQL耗时0.5695毫秒=====
2024-04-10 13:39:37.832 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:39:37.890 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 247.6165ms
2024-04-10 13:39:37.890 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:39:37.897 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:39:37.899 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:39:37.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:39:37.903 +08:00 [DBG] =========Yi-SQL耗时0.8896毫秒=====
2024-04-10 13:39:37.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 13:39:37.906 +08:00 [DBG] =========Yi-SQL耗时0.3411毫秒=====
2024-04-10 13:39:37.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:39:37.907 +08:00 [DBG] =========Yi-SQL耗时0.3153毫秒=====
2024-04-10 13:39:37.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:39:37.909 +08:00 [DBG] =========Yi-SQL耗时0.5962毫秒=====
2024-04-10 13:39:37.930 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:39:37.934 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 34.674ms
2024-04-10 13:39:37.934 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:39:38.057 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:39:38.064 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:39:38.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:39:38.089 +08:00 [DBG] =========Yi-SQL耗时2.759毫秒=====
2024-04-10 13:39:38.096 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:39:38.099 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 35.6755ms
2024-04-10 13:39:38.099 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:39:42.114 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 13:39:42.114 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 13:39:42.116 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 13:39:42.118 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 13:39:42.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:39:42.131 +08:00 [DBG] =========Yi-SQL耗时0.9309毫秒=====
2024-04-10 13:39:42.150 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:39:42.155 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 38.7162ms
2024-04-10 13:39:42.155 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 13:39:42.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 13:39:42.176 +08:00 [DBG] =========Yi-SQL耗时1.399毫秒=====
2024-04-10 13:39:42.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 13:39:42.185 +08:00 [DBG] =========Yi-SQL耗时0.508毫秒=====
2024-04-10 13:39:42.195 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:39:42.198 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 80.1558ms
2024-04-10 13:39:42.198 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 13:39:47.614 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:39:47.614 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:39:47.627 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:39:47.628 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 14.2415ms
2024-04-10 13:39:47.628 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:41:02.752 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:41:02.755 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:41:02.756 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:41:02.766 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:41:02.767 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:41:02.798 +08:00 [INF] 2024/4/10 13:41:02：cc,1w9misOTXl9s-usoFigRjg连接服务端success，当前已连接0个
2024-04-10 13:51:13.458 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 13:51:13.468 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:51:13.641 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:51:13.650 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:51:13.656 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:51:13.660 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:13.663 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:51:13.675 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:51:13.678 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 15.2499ms
2024-04-10 13:51:13.678 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:13.738 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:13.738 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:51:13.741 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:51:13.743 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:51:13.756 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:51:13.791 +08:00 [INF] 2024/4/10 13:51:13：cc,Q-2wncS7WnD3cum3CqcSDQ连接服务端success，当前已连接0个
2024-04-10 13:51:13.863 +08:00 [DBG] =========Yi-SQL耗时111.1789毫秒=====
2024-04-10 13:51:13.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 13:51:13.870 +08:00 [DBG] =========Yi-SQL耗时1.7726毫秒=====
2024-04-10 13:51:13.871 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:51:13.872 +08:00 [DBG] =========Yi-SQL耗时0.9239毫秒=====
2024-04-10 13:51:13.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:51:13.875 +08:00 [DBG] =========Yi-SQL耗时1.1905毫秒=====
2024-04-10 13:51:13.876 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:51:13.877 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 138.0492ms
2024-04-10 13:51:13.877 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:13.989 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:13.990 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:51:13.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:51:13.997 +08:00 [DBG] =========Yi-SQL耗时3.0572毫秒=====
2024-04-10 13:51:14.000 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:51:14.001 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 10.5418ms
2024-04-10 13:51:14.001 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:17.693 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:17.693 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:51:17.695 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:51:17.695 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.634ms
2024-04-10 13:51:17.695 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:18.676 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:51:18.679 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:18.679 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:51:18.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:51:18.687 +08:00 [DBG] =========Yi-SQL耗时2.317毫秒=====
2024-04-10 13:51:18.694 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:51:18.696 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 16.5008ms
2024-04-10 13:51:18.696 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:18.706 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:51:18.706 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:51:18.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:51:18.708 +08:00 [DBG] =========Yi-SQL耗时0.6494毫秒=====
2024-04-10 13:51:18.710 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:51:18.711 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.4783ms
2024-04-10 13:51:18.711 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:56:22.308 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 13:56:22.313 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 13:56:22.639 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:56:22.648 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 13:56:22.649 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 13:56:22.690 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:56:22.690 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:56:22.694 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:56:22.694 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.8253ms
2024-04-10 13:56:22.695 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:56:22.911 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:56:22.912 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:56:22.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:56:22.919 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:56:22.922 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 13:56:22.999 +08:00 [INF] 2024/4/10 13:56:22：cc,u06SZIY9tmCnKaOPz4FY0Q连接服务端success，当前已连接0个
2024-04-10 13:56:23.037 +08:00 [DBG] =========Yi-SQL耗时119.0644毫秒=====
2024-04-10 13:56:23.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 13:56:23.040 +08:00 [DBG] =========Yi-SQL耗时1.7507毫秒=====
2024-04-10 13:56:23.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 13:56:23.046 +08:00 [DBG] =========Yi-SQL耗时3.7588毫秒=====
2024-04-10 13:56:23.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 13:56:23.051 +08:00 [DBG] =========Yi-SQL耗时2.4029毫秒=====
2024-04-10 13:56:23.052 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 13:56:23.053 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 140.7578ms
2024-04-10 13:56:23.053 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 13:56:23.418 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:56:23.419 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:56:23.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:56:23.424 +08:00 [DBG] =========Yi-SQL耗时2.5229毫秒=====
2024-04-10 13:56:23.427 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:56:23.428 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.8097ms
2024-04-10 13:56:23.428 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:56:23.430 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:56:23.430 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 13:56:23.432 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 13:56:23.433 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.667ms
2024-04-10 13:56:23.433 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:59:02.121 +08:00 [INF] CORS policy execution successful.
2024-04-10 13:59:02.126 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:59:02.127 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:59:02.130 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:59:02.132 +08:00 [DBG] =========Yi-SQL耗时1.5491毫秒=====
2024-04-10 13:59:02.141 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:59:02.141 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 13.7717ms
2024-04-10 13:59:02.141 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:59:02.155 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 13:59:02.156 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 13:59:02.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 13:59:02.159 +08:00 [DBG] =========Yi-SQL耗时0.9919毫秒=====
2024-04-10 13:59:02.162 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 13:59:02.162 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.4797ms
2024-04-10 13:59:02.163 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:00:00.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-10 14:00:00.051 +08:00 [DBG] =========Yi-SQL耗时3.0542毫秒=====
2024-04-10 14:00:00.407 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-10 14:00:00.408 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-10 14:07:41.140 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:07:41.142 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 14:07:41.165 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:07:41.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "file"  
           ("id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp")
     VALUES
           (N'c38676e8-b512-9bf1-52f6-3a11d8cb5cb1',1754.5771484375,N'fileUpload.jpg',N'wwwroot/Image\c38676e8-b512-9bf1-52f6-3a11d8cb5cb1.jpg',CAST('2024-04-10 14:07:41.337' AS DATETIME),null,null,null,N'bba771b731674d91a33c8e80537863c9') ;
===============================

2024-04-10 14:07:41.360 +08:00 [DBG] =========Yi-SQL耗时7.4353毫秒=====
2024-04-10 14:07:41.370 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:07:41.372 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 207.1442ms
2024-04-10 14:07:41.372 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 14:09:10.254 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:09:10.254 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:09:10.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:09:10.277 +08:00 [DBG] =========Yi-SQL耗时4.3877毫秒=====
2024-04-10 14:09:10.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:09:10.281 +08:00 [DBG] =========Yi-SQL耗时0.7139毫秒=====
2024-04-10 14:09:10.284 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:09:10.284 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 30.1565ms
2024-04-10 14:09:10.284 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:13:10.577 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:13:10.577 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:13:10.579 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:13:10.580 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:13:10.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:13:10.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:13:10.659 +08:00 [DBG] =========Yi-SQL耗时63.6802毫秒=====
2024-04-10 14:13:10.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:13:10.666 +08:00 [DBG] =========Yi-SQL耗时0.6312毫秒=====
2024-04-10 14:13:10.674 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:13:10.675 +08:00 [DBG] =========Yi-SQL耗时77.2759毫秒=====
2024-04-10 14:13:10.676 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 98.3291ms
2024-04-10 14:13:10.676 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:13:10.680 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:13:10.681 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 100.8624ms
2024-04-10 14:13:10.681 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:08.453 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:32:08.457 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:32:08.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:32:08.555 +08:00 [DBG] =========Yi-SQL耗时67.9117毫秒=====
2024-04-10 14:32:08.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:32:08.558 +08:00 [DBG] =========Yi-SQL耗时0.9867毫秒=====
2024-04-10 14:32:08.562 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:32:08.563 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 104.1269ms
2024-04-10 14:32:08.563 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:32:08.568 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:32:08.569 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:32:08.574 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:32:08.575 +08:00 [DBG] =========Yi-SQL耗时0.761毫秒=====
2024-04-10 14:32:08.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:32:08.582 +08:00 [DBG] =========Yi-SQL耗时4.6566毫秒=====
2024-04-10 14:32:08.583 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:32:08.584 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.174ms
2024-04-10 14:32:08.584 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:32:21.378 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:32:21.383 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:32:22.080 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:32:22.094 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 14:32:22.097 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 14:32:22.103 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:22.105 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:32:22.128 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 14:32:22.130 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 25.2759ms
2024-04-10 14:32:22.130 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:22.227 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:22.227 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:32:22.230 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:32:22.232 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 14:32:22.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:32:22.241 +08:00 [DBG] =========Yi-SQL耗时5.3773毫秒=====
2024-04-10 14:32:22.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 14:32:22.249 +08:00 [DBG] =========Yi-SQL耗时1.6337毫秒=====
2024-04-10 14:32:22.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 14:32:22.253 +08:00 [DBG] =========Yi-SQL耗时2.4139毫秒=====
2024-04-10 14:32:22.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:32:22.258 +08:00 [DBG] =========Yi-SQL耗时1.7296毫秒=====
2024-04-10 14:32:22.260 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:32:22.261 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 33.7871ms
2024-04-10 14:32:22.261 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:22.299 +08:00 [INF] 2024/4/10 14:32:22：cc,5mVd5PBPgQw8f0282RBeUQ连接服务端success，当前已连接0个
2024-04-10 14:32:22.471 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:22.472 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:32:22.475 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 14:32:22.477 +08:00 [DBG] =========Yi-SQL耗时2.3035毫秒=====
2024-04-10 14:32:22.484 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:32:22.484 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:32:22.522 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:22.524 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:32:22.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:32:22.527 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 14:32:22.527 +08:00 [DBG] =========Yi-SQL耗时2.5682毫秒=====
2024-04-10 14:32:22.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:32:22.530 +08:00 [DBG] =========Yi-SQL耗时0.566毫秒=====
2024-04-10 14:32:22.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:32:22.531 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 58.9535ms
2024-04-10 14:32:22.531 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:22.533 +08:00 [DBG] =========Yi-SQL耗时2.5583毫秒=====
2024-04-10 14:32:22.533 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:32:22.534 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 49.4799ms
2024-04-10 14:32:22.534 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:32:22.535 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:32:22.536 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.843ms
2024-04-10 14:32:22.537 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:26.870 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 14:32:26.881 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:32:27.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"  WHERE "id" = N'999a7986-3d88-a379-9aa9-3a11d7fb8e23'   
===============================

2024-04-10 14:32:27.065 +08:00 [DBG] =========Yi-SQL耗时0.8905毫秒=====
2024-04-10 14:32:27.087 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetOutputDto'.
2024-04-10 14:32:27.092 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application) in 211.2464ms
2024-04-10 14:32:27.092 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetAsync (Yi.Abp.Application)'
2024-04-10 14:32:53.243 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:32:53.243 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:32:53.246 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:32:53.247 +08:00 [DBG] =========Yi-SQL耗时0.6682毫秒=====
2024-04-10 14:32:53.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:32:53.250 +08:00 [DBG] =========Yi-SQL耗时1.1349毫秒=====
2024-04-10 14:32:53.257 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:32:53.258 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.2414ms
2024-04-10 14:32:53.258 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:32:55.112 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:32:55.112 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:32:55.797 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:32:55.799 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 14:32:55.800 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 14:32:55.825 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:55.825 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:32:55.828 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 14:32:55.828 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.2421ms
2024-04-10 14:32:55.828 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:56.093 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:56.094 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:32:56.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:32:56.099 +08:00 [DBG] =========Yi-SQL耗时1.7311毫秒=====
2024-04-10 14:32:56.100 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:32:56.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 14:32:56.102 +08:00 [DBG] =========Yi-SQL耗时0.7007毫秒=====
2024-04-10 14:32:56.103 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 14:32:56.104 +08:00 [DBG] =========Yi-SQL耗时1.0767毫秒=====
2024-04-10 14:32:56.105 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 14:32:56.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:32:56.107 +08:00 [DBG] =========Yi-SQL耗时0.9975毫秒=====
2024-04-10 14:32:56.109 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:32:56.110 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 16.6635ms
2024-04-10 14:32:56.110 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:56.171 +08:00 [INF] 2024/4/10 14:32:56：cc,yWHppSYMlWVJyTYlgQANwQ连接服务端success，当前已连接0个
2024-04-10 14:32:56.416 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:56.416 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:32:56.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 14:32:56.418 +08:00 [DBG] =========Yi-SQL耗时0.8061毫秒=====
2024-04-10 14:32:56.422 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 14:32:56.424 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.9947ms
2024-04-10 14:32:56.424 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:56.433 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:56.433 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:32:56.433 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:32:56.433 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:32:56.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:32:56.438 +08:00 [DBG] =========Yi-SQL耗时1.5986毫秒=====
2024-04-10 14:32:56.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:32:56.442 +08:00 [DBG] =========Yi-SQL耗时1.5443毫秒=====
2024-04-10 14:32:56.446 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:32:56.447 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 13.4621ms
2024-04-10 14:32:56.447 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:32:56.447 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:32:56.448 +08:00 [DBG] =========Yi-SQL耗时0.8815毫秒=====
2024-04-10 14:32:56.451 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:32:56.452 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 18.7457ms
2024-04-10 14:32:56.452 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:33:34.117 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:33:34.118 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:33:34.271 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:33:34.280 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 14:33:34.283 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 14:33:34.284 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:33:34.284 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:33:34.286 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 14:33:34.286 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.0837ms
2024-04-10 14:33:34.287 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:33:34.413 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:33:34.413 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:33:34.415 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:33:34.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:33:34.418 +08:00 [DBG] =========Yi-SQL耗时1.9262毫秒=====
2024-04-10 14:33:34.420 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 14:33:34.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 14:33:34.421 +08:00 [DBG] =========Yi-SQL耗时0.9697毫秒=====
2024-04-10 14:33:34.423 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 14:33:34.424 +08:00 [DBG] =========Yi-SQL耗时0.9901毫秒=====
2024-04-10 14:33:34.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:33:34.427 +08:00 [DBG] =========Yi-SQL耗时0.8693毫秒=====
2024-04-10 14:33:34.427 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:33:34.428 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 14.5748ms
2024-04-10 14:33:34.428 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:33:34.466 +08:00 [INF] 2024/4/10 14:33:34：cc,EHYkFJX3nucasmb6NEdwYg连接服务端success，当前已连接0个
2024-04-10 14:33:34.609 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:33:34.609 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:33:34.610 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 14:33:34.610 +08:00 [DBG] =========Yi-SQL耗时0.6386毫秒=====
2024-04-10 14:33:34.613 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 14:33:34.613 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.3439ms
2024-04-10 14:33:34.613 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:33:34.618 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:33:34.618 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:33:34.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:33:34.622 +08:00 [DBG] =========Yi-SQL耗时1.7631毫秒=====
2024-04-10 14:33:34.624 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:33:34.624 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:33:34.625 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:33:34.626 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.3453ms
2024-04-10 14:33:34.626 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:33:34.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:33:34.627 +08:00 [DBG] =========Yi-SQL耗时0.9742毫秒=====
2024-04-10 14:33:34.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:33:34.630 +08:00 [DBG] =========Yi-SQL耗时0.8196毫秒=====
2024-04-10 14:33:34.632 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:33:34.633 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.7019ms
2024-04-10 14:33:34.633 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:33:38.493 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:33:38.494 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:33:38.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:33:38.497 +08:00 [DBG] =========Yi-SQL耗时0.6967毫秒=====
2024-04-10 14:33:38.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:33:38.499 +08:00 [DBG] =========Yi-SQL耗时0.7406毫秒=====
2024-04-10 14:33:38.501 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:33:38.502 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 8.0817ms
2024-04-10 14:33:38.502 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:33:38.507 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:33:38.508 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:33:38.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:33:38.510 +08:00 [DBG] =========Yi-SQL耗时0.6492毫秒=====
2024-04-10 14:33:38.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:33:38.512 +08:00 [DBG] =========Yi-SQL耗时0.8108毫秒=====
2024-04-10 14:33:38.515 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:33:38.515 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 7.4284ms
2024-04-10 14:33:38.515 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:34:46.335 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:34:46.335 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:34:46.939 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:34:46.941 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 14:34:46.944 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 14:34:46.960 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:34:46.960 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:34:46.961 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 14:34:46.962 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.3835ms
2024-04-10 14:34:46.962 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:34:47.024 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:34:47.025 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:34:47.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:34:47.028 +08:00 [DBG] =========Yi-SQL耗时1.2089毫秒=====
2024-04-10 14:34:47.029 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:34:47.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 14:34:47.030 +08:00 [DBG] =========Yi-SQL耗时0.5598毫秒=====
2024-04-10 14:34:47.031 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 14:34:47.031 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 14:34:47.031 +08:00 [DBG] =========Yi-SQL耗时0.3537毫秒=====
2024-04-10 14:34:47.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:34:47.033 +08:00 [DBG] =========Yi-SQL耗时0.6548毫秒=====
2024-04-10 14:34:47.034 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:34:47.034 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 9.8231ms
2024-04-10 14:34:47.035 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:34:47.072 +08:00 [INF] 2024/4/10 14:34:47：cc,MowOF6XkGEO5WRsE0LCkyA连接服务端success，当前已连接0个
2024-04-10 14:34:47.209 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:34:47.209 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:34:47.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 14:34:47.211 +08:00 [DBG] =========Yi-SQL耗时0.6279毫秒=====
2024-04-10 14:34:47.213 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 14:34:47.213 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.2599ms
2024-04-10 14:34:47.213 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:34:47.217 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:34:47.217 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:34:47.218 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:34:47.218 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:34:47.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:34:47.220 +08:00 [DBG] =========Yi-SQL耗时0.8457毫秒=====
2024-04-10 14:34:47.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:34:47.223 +08:00 [DBG] =========Yi-SQL耗时2.7988毫秒=====
2024-04-10 14:34:47.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:34:47.225 +08:00 [DBG] =========Yi-SQL耗时1.0733毫秒=====
2024-04-10 14:34:47.226 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:34:47.226 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.3711ms
2024-04-10 14:34:47.226 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:34:47.227 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:34:47.229 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.9116ms
2024-04-10 14:34:47.229 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:42:17.338 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:42:17.340 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:42:17.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:42:17.460 +08:00 [DBG] =========Yi-SQL耗时83.7271毫秒=====
2024-04-10 14:42:17.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:42:17.465 +08:00 [DBG] =========Yi-SQL耗时2.1208毫秒=====
2024-04-10 14:42:17.477 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:42:17.479 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 138.1512ms
2024-04-10 14:42:17.479 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:42:17.487 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:42:17.487 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:42:17.490 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:42:17.491 +08:00 [DBG] =========Yi-SQL耗时1.0681毫秒=====
2024-04-10 14:42:17.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:42:17.495 +08:00 [DBG] =========Yi-SQL耗时0.7118毫秒=====
2024-04-10 14:42:17.501 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:42:17.502 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.4912ms
2024-04-10 14:42:17.502 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:42:20.529 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:42:20.530 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:42:21.193 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:42:21.195 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 14:42:21.196 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 14:42:21.212 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:42:21.214 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:42:21.218 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 14:42:21.219 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.9702ms
2024-04-10 14:42:21.219 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:42:21.292 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:42:21.293 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:42:21.300 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:42:21.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:42:21.304 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 14:42:21.307 +08:00 [DBG] =========Yi-SQL耗时7.8401毫秒=====
2024-04-10 14:42:21.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 14:42:21.314 +08:00 [DBG] =========Yi-SQL耗时1.6788毫秒=====
2024-04-10 14:42:21.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 14:42:21.317 +08:00 [DBG] =========Yi-SQL耗时1.6569毫秒=====
2024-04-10 14:42:21.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:42:21.321 +08:00 [DBG] =========Yi-SQL耗时2.791毫秒=====
2024-04-10 14:42:21.322 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:42:21.325 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 31.7981ms
2024-04-10 14:42:21.325 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:42:21.361 +08:00 [INF] 2024/4/10 14:42:21：cc,EcsoBVcNGJy4G-rYJv2ITQ连接服务端success，当前已连接0个
2024-04-10 14:42:21.513 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:42:21.513 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:42:21.515 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 14:42:21.518 +08:00 [DBG] =========Yi-SQL耗时3.0665毫秒=====
2024-04-10 14:42:21.522 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:42:21.522 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 14:42:21.522 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:42:21.522 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:42:21.523 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 9.1231ms
2024-04-10 14:42:21.523 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:42:21.523 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:42:21.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:42:21.528 +08:00 [DBG] =========Yi-SQL耗时1.0088毫秒=====
2024-04-10 14:42:21.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:42:21.531 +08:00 [DBG] =========Yi-SQL耗时0.7344毫秒=====
2024-04-10 14:42:21.532 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:42:21.532 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.0667ms
2024-04-10 14:42:21.532 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:42:21.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:42:21.564 +08:00 [DBG] =========Yi-SQL耗时5.4778毫秒=====
2024-04-10 14:42:21.567 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:42:21.568 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 44.9195ms
2024-04-10 14:42:21.568 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:45:44.551 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:45:44.551 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:45:44.555 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:45:44.557 +08:00 [DBG] =========Yi-SQL耗时1.1091毫秒=====
2024-04-10 14:45:44.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:45:44.560 +08:00 [DBG] =========Yi-SQL耗时0.9279毫秒=====
2024-04-10 14:45:44.562 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:45:44.562 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.2158ms
2024-04-10 14:45:44.562 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:45:44.595 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:45:44.596 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:45:44.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:45:44.600 +08:00 [DBG] =========Yi-SQL耗时0.7507毫秒=====
2024-04-10 14:45:44.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:45:44.603 +08:00 [DBG] =========Yi-SQL耗时1.0319毫秒=====
2024-04-10 14:45:44.611 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:45:44.612 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 16.2244ms
2024-04-10 14:45:44.612 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:45:47.263 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:45:47.263 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:45:47.960 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:45:47.962 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 14:45:47.962 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 14:45:47.984 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:45:47.985 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:45:47.986 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 14:45:47.986 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.7361ms
2024-04-10 14:45:47.986 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:45:48.308 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:45:48.308 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:45:48.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:45:48.319 +08:00 [DBG] =========Yi-SQL耗时3.4849毫秒=====
2024-04-10 14:45:48.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 14:45:48.323 +08:00 [DBG] =========Yi-SQL耗时0.7898毫秒=====
2024-04-10 14:45:48.325 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:45:48.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 14:45:48.326 +08:00 [DBG] =========Yi-SQL耗时0.7152毫秒=====
2024-04-10 14:45:48.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:45:48.327 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 14:45:48.328 +08:00 [DBG] =========Yi-SQL耗时0.8133毫秒=====
2024-04-10 14:45:48.331 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:45:48.337 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 28.8265ms
2024-04-10 14:45:48.337 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:45:48.409 +08:00 [INF] 2024/4/10 14:45:48：cc,-1PQrUgaxwfs_ObqTQg83g连接服务端success，当前已连接0个
2024-04-10 14:45:48.619 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:45:48.619 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:45:48.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 14:45:48.623 +08:00 [DBG] =========Yi-SQL耗时1.3218毫秒=====
2024-04-10 14:45:48.626 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 14:45:48.627 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.2341ms
2024-04-10 14:45:48.627 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:45:48.635 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:45:48.636 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:45:48.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:45:48.639 +08:00 [DBG] =========Yi-SQL耗时0.8096毫秒=====
2024-04-10 14:45:48.641 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:45:48.642 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:45:48.644 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:45:48.645 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.5006ms
2024-04-10 14:45:48.645 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:45:48.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:45:48.649 +08:00 [DBG] =========Yi-SQL耗时1.2409毫秒=====
2024-04-10 14:45:48.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:45:48.651 +08:00 [DBG] =========Yi-SQL耗时0.9789毫秒=====
2024-04-10 14:45:48.653 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:45:48.654 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.9069ms
2024-04-10 14:45:48.654 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:46:10.074 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:46:10.074 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:48:07.705 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:48:07.706 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:48:08.601 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:48:08.604 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 14:48:08.605 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 14:48:08.625 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:08.625 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:48:08.631 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 14:48:08.632 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.8293ms
2024-04-10 14:48:08.632 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:08.855 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:08.856 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:48:08.860 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:48:08.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:48:08.865 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 14:48:08.971 +08:00 [INF] 2024/4/10 14:48:08：cc,la488KJoJAtscipjjgM6xg连接服务端success，当前已连接0个
2024-04-10 14:48:08.990 +08:00 [DBG] =========Yi-SQL耗时128.5615毫秒=====
2024-04-10 14:48:08.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 14:48:08.994 +08:00 [DBG] =========Yi-SQL耗时2.3326毫秒=====
2024-04-10 14:48:08.996 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 14:48:08.999 +08:00 [DBG] =========Yi-SQL耗时2.9533毫秒=====
2024-04-10 14:48:09.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:48:09.006 +08:00 [DBG] =========Yi-SQL耗时3.6504毫秒=====
2024-04-10 14:48:09.009 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:48:09.010 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 153.3096ms
2024-04-10 14:48:09.010 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:09.316 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:09.317 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:48:09.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 14:48:09.321 +08:00 [DBG] =========Yi-SQL耗时1.8546毫秒=====
2024-04-10 14:48:09.324 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 14:48:09.325 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.1269ms
2024-04-10 14:48:09.325 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:09.339 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:09.340 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:48:09.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:48:09.342 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:48:09.347 +08:00 [DBG] =========Yi-SQL耗时4.9123毫秒=====
2024-04-10 14:48:09.347 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:48:09.350 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:48:09.350 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.3726ms
2024-04-10 14:48:09.350 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:09.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:48:09.356 +08:00 [DBG] =========Yi-SQL耗时2.1027毫秒=====
2024-04-10 14:48:09.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:48:09.360 +08:00 [DBG] =========Yi-SQL耗时2.0708毫秒=====
2024-04-10 14:48:09.391 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:48:09.392 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 44.6704ms
2024-04-10 14:48:09.392 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:48:56.140 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:48:56.141 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:48:56.933 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:48:56.936 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 14:48:56.937 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 14:48:56.953 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:56.954 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:48:56.956 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 14:48:56.956 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.0119ms
2024-04-10 14:48:56.956 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:57.208 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:57.209 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:48:57.212 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:48:57.218 +08:00 [DBG] =========Yi-SQL耗时6.0297毫秒=====
2024-04-10 14:48:57.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 14:48:57.222 +08:00 [DBG] =========Yi-SQL耗时1.1484毫秒=====
2024-04-10 14:48:57.223 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:48:57.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 14:48:57.225 +08:00 [DBG] =========Yi-SQL耗时0.8084毫秒=====
2024-04-10 14:48:57.225 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 14:48:57.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:48:57.227 +08:00 [DBG] =========Yi-SQL耗时0.77毫秒=====
2024-04-10 14:48:57.237 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:48:57.239 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 30.2002ms
2024-04-10 14:48:57.239 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:57.301 +08:00 [INF] 2024/4/10 14:48:57：cc,_bJxN07bt4m9JOjx0-Vyfg连接服务端success，当前已连接0个
2024-04-10 14:48:57.591 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:57.591 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:48:57.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 14:48:57.595 +08:00 [DBG] =========Yi-SQL耗时1.5695毫秒=====
2024-04-10 14:48:57.597 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 14:48:57.598 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.8436ms
2024-04-10 14:48:57.598 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:57.606 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:48:57.606 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:57.606 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:48:57.606 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:48:57.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:48:57.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:48:57.611 +08:00 [DBG] =========Yi-SQL耗时1.3886毫秒=====
2024-04-10 14:48:57.613 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:48:57.613 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.9832ms
2024-04-10 14:48:57.613 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:48:57.727 +08:00 [DBG] =========Yi-SQL耗时118.124毫秒=====
2024-04-10 14:48:57.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:48:57.730 +08:00 [DBG] =========Yi-SQL耗时0.9618毫秒=====
2024-04-10 14:48:57.733 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:48:57.734 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 127.9664ms
2024-04-10 14:48:57.734 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:54:12.890 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:54:12.890 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:54:12.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:54:12.950 +08:00 [DBG] =========Yi-SQL耗时55.9832毫秒=====
2024-04-10 14:54:12.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:54:12.959 +08:00 [DBG] =========Yi-SQL耗时0.9699毫秒=====
2024-04-10 14:54:12.962 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:54:12.962 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 72.071ms
2024-04-10 14:54:12.962 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:56:46.917 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:56:46.918 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:56:46.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:56:46.922 +08:00 [DBG] =========Yi-SQL耗时0.8172毫秒=====
2024-04-10 14:56:46.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:56:46.924 +08:00 [DBG] =========Yi-SQL耗时1.2609毫秒=====
2024-04-10 14:56:46.932 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:56:46.932 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.2005ms
2024-04-10 14:56:46.932 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:57:20.140 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:57:20.140 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:57:20.664 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:57:20.673 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 14:57:20.676 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 14:57:20.678 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:57:20.678 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:57:20.689 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 14:57:20.691 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 12.9964ms
2024-04-10 14:57:20.691 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:57:20.813 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:57:20.814 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:57:20.814 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:57:20.816 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 14:57:20.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:57:20.828 +08:00 [DBG] =========Yi-SQL耗时8.9492毫秒=====
2024-04-10 14:57:20.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 14:57:20.832 +08:00 [DBG] =========Yi-SQL耗时1.8292毫秒=====
2024-04-10 14:57:20.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 14:57:20.835 +08:00 [DBG] =========Yi-SQL耗时1.5102毫秒=====
2024-04-10 14:57:20.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:57:20.838 +08:00 [DBG] =========Yi-SQL耗时2.0088毫秒=====
2024-04-10 14:57:20.839 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:57:20.840 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 26.4827ms
2024-04-10 14:57:20.840 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:57:20.855 +08:00 [INF] 2024/4/10 14:57:20：cc,gXoTpdjPNp8AWbINvuOLHw连接服务端success，当前已连接0个
2024-04-10 14:57:21.014 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:57:21.014 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:57:21.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 14:57:21.018 +08:00 [DBG] =========Yi-SQL耗时1.7663毫秒=====
2024-04-10 14:57:21.020 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 14:57:21.021 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.3677ms
2024-04-10 14:57:21.021 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:57:21.027 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:57:21.027 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:57:21.027 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:57:21.027 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:57:21.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:57:21.028 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:57:21.031 +08:00 [DBG] =========Yi-SQL耗时2.7965毫秒=====
2024-04-10 14:57:21.033 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:57:21.033 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.4735ms
2024-04-10 14:57:21.033 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:57:21.098 +08:00 [DBG] =========Yi-SQL耗时70.0236毫秒=====
2024-04-10 14:57:21.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:57:21.100 +08:00 [DBG] =========Yi-SQL耗时0.8398毫秒=====
2024-04-10 14:57:21.102 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:57:21.103 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 76.3617ms
2024-04-10 14:57:21.103 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:58:17.504 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 14:58:17.505 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 14:58:18.377 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:58:18.381 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 14:58:18.381 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 14:58:18.410 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:58:18.411 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:58:18.415 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 14:58:18.416 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.869ms
2024-04-10 14:58:18.416 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:58:18.698 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:58:18.699 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 14:58:18.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:58:18.713 +08:00 [DBG] =========Yi-SQL耗时9.6943毫秒=====
2024-04-10 14:58:18.713 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:58:18.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 14:58:18.719 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 14:58:18.720 +08:00 [DBG] =========Yi-SQL耗时5.0534毫秒=====
2024-04-10 14:58:18.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 14:58:18.730 +08:00 [DBG] =========Yi-SQL耗时3.1211毫秒=====
2024-04-10 14:58:18.733 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:58:18.734 +08:00 [DBG] =========Yi-SQL耗时1.0009毫秒=====
2024-04-10 14:58:18.736 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:58:18.737 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 38.7414ms
2024-04-10 14:58:18.737 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 14:58:18.829 +08:00 [INF] 2024/4/10 14:58:18：cc,oanNiAqNm54S2cVYDP19qQ连接服务端success，当前已连接0个
2024-04-10 14:58:19.089 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:58:19.090 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:58:19.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 14:58:19.093 +08:00 [DBG] =========Yi-SQL耗时2.001毫秒=====
2024-04-10 14:58:19.096 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 14:58:19.097 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.9299ms
2024-04-10 14:58:19.097 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 14:58:19.110 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:58:19.110 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:58:19.110 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 14:58:19.110 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 14:58:19.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 14:58:19.114 +08:00 [DBG] =========Yi-SQL耗时1.5153毫秒=====
2024-04-10 14:58:19.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 14:58:19.119 +08:00 [DBG] =========Yi-SQL耗时2.5069毫秒=====
2024-04-10 14:58:19.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 14:58:19.125 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:58:19.125 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 14.8441ms
2024-04-10 14:58:19.125 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 14:58:19.126 +08:00 [DBG] =========Yi-SQL耗时3.3526毫秒=====
2024-04-10 14:58:19.130 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 14:58:19.130 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 19.9204ms
2024-04-10 14:58:19.131 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 14:59:36.250 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:59:36.252 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 14:59:36.254 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:59:36.525 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 14:59:36.530 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 14:59:36.565 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 14:59:36.585 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 331.6042ms
2024-04-10 14:59:36.585 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 14:59:48.060 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:59:48.061 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 14:59:48.061 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:59:48.104 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 14:59:48.104 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 14:59:48.104 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 14:59:48.104 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 42.9747ms
2024-04-10 14:59:48.104 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 14:59:50.529 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:59:50.548 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 14:59:50.549 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:59:50.576 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 14:59:50.576 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 14:59:50.576 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 14:59:50.576 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 27.7417ms
2024-04-10 14:59:50.576 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 14:59:54.262 +08:00 [INF] CORS policy execution successful.
2024-04-10 14:59:54.263 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 14:59:54.263 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 14:59:54.313 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 14:59:54.313 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 14:59:54.313 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 14:59:54.313 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 49.3964ms
2024-04-10 14:59:54.313 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 15:00:00.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-10 15:00:00.031 +08:00 [DBG] =========Yi-SQL耗时8.1827毫秒=====
2024-04-10 15:00:00.265 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-10 15:00:00.265 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-10 15:00:03.261 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:00:03.262 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 15:00:03.263 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 15:00:03.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "file"  
           ("id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp")
     VALUES
           (N'1c3441ae-9f81-9376-0d70-3a11d8fb4e67',409.4306640625,N'2024-03-25_16-10.png',N'wwwroot/Image\1c3441ae-9f81-9376-0d70-3a11d8fb4e67.png',CAST('2024-04-10 15:00:03.317' AS DATETIME),null,null,null,N'd014cc3b4eae4ee8bf13fee626216886') ;
===============================

2024-04-10 15:00:03.327 +08:00 [DBG] =========Yi-SQL耗时7.4095毫秒=====
2024-04-10 15:00:03.330 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:00:03.330 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 66.8957ms
2024-04-10 15:00:03.330 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 15:00:54.336 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:00:54.336 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:00:54.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:00:54.340 +08:00 [DBG] =========Yi-SQL耗时0.8254毫秒=====
2024-04-10 15:00:54.347 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:00:54.350 +08:00 [DBG] =========Yi-SQL耗时3.1383毫秒=====
2024-04-10 15:00:54.352 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:00:54.352 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.8645ms
2024-04-10 15:00:54.352 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:01:17.529 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:01:17.529 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:01:17.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:01:17.533 +08:00 [DBG] =========Yi-SQL耗时0.6841毫秒=====
2024-04-10 15:01:17.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:01:17.536 +08:00 [DBG] =========Yi-SQL耗时0.9395毫秒=====
2024-04-10 15:01:17.539 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:01:17.539 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.941ms
2024-04-10 15:01:17.539 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:07:37.032 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 15:07:37.034 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 15:07:37.382 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:07:37.387 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 15:07:37.387 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 15:07:37.407 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:07:37.408 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:07:37.409 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 15:07:37.410 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.8859ms
2024-04-10 15:07:37.410 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:07:37.765 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:07:37.767 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 15:07:37.775 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:07:37.776 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:07:37.779 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:07:37.839 +08:00 [INF] 2024/4/10 15:07:37：cc,7rGBbUHry_hCzAy052g4vw连接服务端success，当前已连接0个
2024-04-10 15:07:37.895 +08:00 [DBG] =========Yi-SQL耗时115.8881毫秒=====
2024-04-10 15:07:37.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 15:07:37.898 +08:00 [DBG] =========Yi-SQL耗时1.868毫秒=====
2024-04-10 15:07:37.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 15:07:37.900 +08:00 [DBG] =========Yi-SQL耗时1.4377毫秒=====
2024-04-10 15:07:37.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:07:37.904 +08:00 [DBG] =========Yi-SQL耗时2.3841毫秒=====
2024-04-10 15:07:37.905 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:07:37.905 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 129.9021ms
2024-04-10 15:07:37.905 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:07:38.223 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:07:38.223 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 15:07:38.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 15:07:38.228 +08:00 [DBG] =========Yi-SQL耗时2.7926毫秒=====
2024-04-10 15:07:38.231 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 15:07:38.232 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.1068ms
2024-04-10 15:07:38.232 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:07:38.243 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:07:38.243 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:07:38.243 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 15:07:38.243 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:07:38.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:07:38.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:07:38.259 +08:00 [DBG] =========Yi-SQL耗时4.4909毫秒=====
2024-04-10 15:07:38.261 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:07:38.262 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 18.3458ms
2024-04-10 15:07:38.262 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:07:38.356 +08:00 [DBG] =========Yi-SQL耗时101.5111毫秒=====
2024-04-10 15:07:38.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:07:38.359 +08:00 [DBG] =========Yi-SQL耗时1.7031毫秒=====
2024-04-10 15:07:38.361 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:07:38.361 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 117.6611ms
2024-04-10 15:07:38.361 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:08:55.684 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 15:08:55.688 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 15:08:56.417 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:08:56.419 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 15:08:56.421 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 15:08:56.454 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:08:56.455 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:08:56.460 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 15:08:56.461 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.1161ms
2024-04-10 15:08:56.461 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:08:56.681 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:08:56.682 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:08:56.682 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:08:56.682 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 15:08:56.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:08:56.689 +08:00 [DBG] =========Yi-SQL耗时4.4468毫秒=====
2024-04-10 15:08:56.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 15:08:56.692 +08:00 [DBG] =========Yi-SQL耗时1.0818毫秒=====
2024-04-10 15:08:56.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 15:08:56.694 +08:00 [DBG] =========Yi-SQL耗时1.3926毫秒=====
2024-04-10 15:08:56.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:08:56.696 +08:00 [DBG] =========Yi-SQL耗时0.9034毫秒=====
2024-04-10 15:08:56.697 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:08:56.697 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 15.3317ms
2024-04-10 15:08:56.697 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:08:56.752 +08:00 [INF] 2024/4/10 15:08:56：cc,r_6bdfTe8yp-AwxVHnMndw连接服务端success，当前已连接0个
2024-04-10 15:08:57.045 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:08:57.045 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 15:08:57.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 15:08:57.047 +08:00 [DBG] =========Yi-SQL耗时1.5465毫秒=====
2024-04-10 15:08:57.050 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 15:08:57.050 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.1985ms
2024-04-10 15:08:57.050 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:08:57.065 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:08:57.065 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 15:08:57.066 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:08:57.066 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:08:57.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:08:57.069 +08:00 [DBG] =========Yi-SQL耗时2.5215毫秒=====
2024-04-10 15:08:57.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:08:57.073 +08:00 [DBG] =========Yi-SQL耗时0.8744毫秒=====
2024-04-10 15:08:57.076 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:08:57.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:08:57.077 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.0688ms
2024-04-10 15:08:57.077 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:08:57.077 +08:00 [DBG] =========Yi-SQL耗时0.9709毫秒=====
2024-04-10 15:08:57.082 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:08:57.082 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 16.3433ms
2024-04-10 15:08:57.082 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:10:02.751 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 15:10:02.753 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 15:10:03.716 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:10:03.718 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 15:10:03.720 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 15:10:03.751 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:03.751 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:10:03.753 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 15:10:03.753 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.3962ms
2024-04-10 15:10:03.754 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:04.017 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:04.017 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:10:04.022 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:10:04.023 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 15:10:04.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:10:04.025 +08:00 [DBG] =========Yi-SQL耗时1.3139毫秒=====
2024-04-10 15:10:04.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 15:10:04.041 +08:00 [DBG] =========Yi-SQL耗时0.8008毫秒=====
2024-04-10 15:10:04.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 15:10:04.042 +08:00 [DBG] =========Yi-SQL耗时0.5896毫秒=====
2024-04-10 15:10:04.043 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:10:04.044 +08:00 [DBG] =========Yi-SQL耗时0.9518毫秒=====
2024-04-10 15:10:04.045 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:10:04.046 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 28.1668ms
2024-04-10 15:10:04.046 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:04.076 +08:00 [INF] 2024/4/10 15:10:04：cc,_dLd_siERehXHO-KLPjYxg连接服务端success，当前已连接0个
2024-04-10 15:10:04.359 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:04.359 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 15:10:04.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 15:10:04.362 +08:00 [DBG] =========Yi-SQL耗时0.834毫秒=====
2024-04-10 15:10:04.364 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 15:10:04.364 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.9963ms
2024-04-10 15:10:04.365 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:04.377 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:10:04.377 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:04.377 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:10:04.377 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 15:10:04.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:10:04.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:10:04.379 +08:00 [DBG] =========Yi-SQL耗时0.9635毫秒=====
2024-04-10 15:10:04.380 +08:00 [DBG] =========Yi-SQL耗时1.3957毫秒=====
2024-04-10 15:10:04.387 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:10:04.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:10:04.387 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.9433ms
2024-04-10 15:10:04.387 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:04.388 +08:00 [DBG] =========Yi-SQL耗时1.8106毫秒=====
2024-04-10 15:10:04.390 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:10:04.390 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 13.5961ms
2024-04-10 15:10:04.391 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:10:22.481 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 15:10:22.482 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 15:10:23.229 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:10:23.231 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 15:10:23.232 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 15:10:23.249 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:23.250 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:10:23.254 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 15:10:23.255 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.889ms
2024-04-10 15:10:23.255 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:23.496 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:23.496 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:10:23.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:10:23.499 +08:00 [DBG] =========Yi-SQL耗时1.4241毫秒=====
2024-04-10 15:10:23.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 15:10:23.504 +08:00 [DBG] =========Yi-SQL耗时1.1949毫秒=====
2024-04-10 15:10:23.504 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 15:10:23.505 +08:00 [DBG] =========Yi-SQL耗时0.4376毫秒=====
2024-04-10 15:10:23.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:10:23.507 +08:00 [DBG] =========Yi-SQL耗时1.0707毫秒=====
2024-04-10 15:10:23.507 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:10:23.508 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 11.7794ms
2024-04-10 15:10:23.508 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:23.576 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:10:23.577 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 15:10:23.713 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:23.713 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 15:10:23.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 15:10:23.716 +08:00 [DBG] =========Yi-SQL耗时1.6367毫秒=====
2024-04-10 15:10:23.720 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 15:10:23.721 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.9396ms
2024-04-10 15:10:23.721 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:23.729 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:23.729 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:10:23.729 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 15:10:23.729 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:10:23.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:10:23.735 +08:00 [DBG] =========Yi-SQL耗时3.6995毫秒=====
2024-04-10 15:10:23.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:10:23.738 +08:00 [DBG] =========Yi-SQL耗时2.492毫秒=====
2024-04-10 15:10:23.741 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:10:23.741 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:10:23.742 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.4755ms
2024-04-10 15:10:23.742 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:10:23.742 +08:00 [DBG] =========Yi-SQL耗时1.0155毫秒=====
2024-04-10 15:10:23.745 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:10:23.745 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 16.3304ms
2024-04-10 15:10:23.745 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:10:23.866 +08:00 [INF] 2024/4/10 15:10:23：cc,ilheY_7SuJyi9V3BJbw9eg连接服务端success，当前已连接0个
2024-04-10 15:16:32.603 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 15:16:32.604 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 15:16:32.982 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:16:32.984 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 15:16:32.985 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 15:16:32.998 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:32.998 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:16:33.002 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 15:16:33.003 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.4052ms
2024-04-10 15:16:33.003 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:33.314 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:33.315 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:16:33.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:16:33.327 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:16:33.329 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 15:16:33.408 +08:00 [INF] 2024/4/10 15:16:33：cc,Lyl9CsYrRcUUpo7TcboIsQ连接服务端success，当前已连接0个
2024-04-10 15:16:33.459 +08:00 [DBG] =========Yi-SQL耗时132.9984毫秒=====
2024-04-10 15:16:33.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 15:16:33.464 +08:00 [DBG] =========Yi-SQL耗时2.4557毫秒=====
2024-04-10 15:16:33.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 15:16:33.468 +08:00 [DBG] =========Yi-SQL耗时2.8334毫秒=====
2024-04-10 15:16:33.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:16:33.481 +08:00 [DBG] =========Yi-SQL耗时9.7413毫秒=====
2024-04-10 15:16:33.483 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:16:33.484 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 169.0703ms
2024-04-10 15:16:33.484 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:33.911 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:33.912 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 15:16:33.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 15:16:33.917 +08:00 [DBG] =========Yi-SQL耗时2.992毫秒=====
2024-04-10 15:16:33.919 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 15:16:33.921 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.7888ms
2024-04-10 15:16:33.921 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:33.930 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:16:33.931 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:33.931 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:16:33.931 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 15:16:33.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:16:33.939 +08:00 [DBG] =========Yi-SQL耗时5.7123毫秒=====
2024-04-10 15:16:33.943 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:16:33.943 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.5718ms
2024-04-10 15:16:33.943 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:33.948 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:16:33.953 +08:00 [DBG] =========Yi-SQL耗时4.6284毫秒=====
2024-04-10 15:16:33.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:16:33.958 +08:00 [DBG] =========Yi-SQL耗时1.2742毫秒=====
2024-04-10 15:16:33.963 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:16:33.965 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 33.9274ms
2024-04-10 15:16:33.965 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:16:47.976 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 15:16:47.977 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 15:16:48.788 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:16:48.792 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 15:16:48.793 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 15:16:48.810 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:48.811 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:16:48.812 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 15:16:48.813 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.0426ms
2024-04-10 15:16:48.813 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:49.080 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:49.080 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:16:49.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:16:49.086 +08:00 [DBG] =========Yi-SQL耗时2.5267毫秒=====
2024-04-10 15:16:49.088 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:16:49.092 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 15:16:49.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 15:16:49.094 +08:00 [DBG] =========Yi-SQL耗时0.9988毫秒=====
2024-04-10 15:16:49.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 15:16:49.097 +08:00 [DBG] =========Yi-SQL耗时0.6272毫秒=====
2024-04-10 15:16:49.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:16:49.098 +08:00 [DBG] =========Yi-SQL耗时0.6652毫秒=====
2024-04-10 15:16:49.099 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:16:49.099 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 18.6027ms
2024-04-10 15:16:49.099 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:49.179 +08:00 [INF] 2024/4/10 15:16:49：cc,gXfaYT4vv6ArYGKwGnLdkw连接服务端success，当前已连接0个
2024-04-10 15:16:49.454 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:49.454 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 15:16:49.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 15:16:49.458 +08:00 [DBG] =========Yi-SQL耗时1.1797毫秒=====
2024-04-10 15:16:49.461 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 15:16:49.461 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.0815ms
2024-04-10 15:16:49.461 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:49.473 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:16:49.473 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:49.474 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:16:49.474 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 15:16:49.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:16:49.479 +08:00 [DBG] =========Yi-SQL耗时2.6951毫秒=====
2024-04-10 15:16:49.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:16:49.533 +08:00 [DBG] =========Yi-SQL耗时3.5602毫秒=====
2024-04-10 15:16:49.533 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:16:49.534 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 59.7688ms
2024-04-10 15:16:49.534 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:16:49.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:16:49.538 +08:00 [DBG] =========Yi-SQL耗时3.122毫秒=====
2024-04-10 15:16:49.548 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:16:49.549 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 74.8911ms
2024-04-10 15:16:49.549 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:18:08.015 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:18:08.016 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:18:08.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:18:08.020 +08:00 [DBG] =========Yi-SQL耗时1.0686毫秒=====
2024-04-10 15:18:08.022 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:18:08.023 +08:00 [DBG] =========Yi-SQL耗时0.8539毫秒=====
2024-04-10 15:18:08.025 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:18:08.026 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.8143ms
2024-04-10 15:18:08.026 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:18:19.555 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 15:18:19.555 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 15:18:20.310 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:18:20.312 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 15:18:20.312 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 15:18:20.331 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:20.332 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:18:20.337 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 15:18:20.338 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.9509ms
2024-04-10 15:18:20.338 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:20.591 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:20.592 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:18:20.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:18:20.597 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:18:20.599 +08:00 [DBG] =========Yi-SQL耗时1.7519毫秒=====
2024-04-10 15:18:20.602 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 15:18:20.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 15:18:20.603 +08:00 [DBG] =========Yi-SQL耗时0.837毫秒=====
2024-04-10 15:18:20.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 15:18:20.605 +08:00 [DBG] =========Yi-SQL耗时0.6039毫秒=====
2024-04-10 15:18:20.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:18:20.607 +08:00 [DBG] =========Yi-SQL耗时0.795毫秒=====
2024-04-10 15:18:20.609 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:18:20.610 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 18.5401ms
2024-04-10 15:18:20.610 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:20.660 +08:00 [INF] 2024/4/10 15:18:20：cc,tz837AMSTaFBjeNsVKTiaw连接服务端success，当前已连接0个
2024-04-10 15:18:20.894 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:20.894 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 15:18:20.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 15:18:20.898 +08:00 [DBG] =========Yi-SQL耗时1.5814毫秒=====
2024-04-10 15:18:20.901 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 15:18:20.902 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.5056ms
2024-04-10 15:18:20.902 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:20.913 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:20.913 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:18:20.914 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:18:20.914 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 15:18:20.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:18:20.925 +08:00 [DBG] =========Yi-SQL耗时1.3324毫秒=====
2024-04-10 15:18:20.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:18:20.928 +08:00 [DBG] =========Yi-SQL耗时0.7631毫秒=====
2024-04-10 15:18:20.931 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:18:20.931 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 17.1355ms
2024-04-10 15:18:20.931 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:20.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:18:20.936 +08:00 [DBG] =========Yi-SQL耗时2.6372毫秒=====
2024-04-10 15:18:20.939 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:18:20.939 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 25.3207ms
2024-04-10 15:18:20.939 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:18:54.111 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:18:54.111 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:18:54.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:18:54.115 +08:00 [DBG] =========Yi-SQL耗时1.7494毫秒=====
2024-04-10 15:18:54.123 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:18:54.124 +08:00 [DBG] =========Yi-SQL耗时0.7954毫秒=====
2024-04-10 15:18:54.126 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:18:54.127 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.3852ms
2024-04-10 15:18:54.127 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:18:55.464 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 15:18:55.464 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 15:18:56.161 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:18:56.163 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 15:18:56.164 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 15:18:56.175 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:56.177 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:18:56.181 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 15:18:56.182 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.0832ms
2024-04-10 15:18:56.182 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:56.464 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:56.464 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:18:56.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:18:56.475 +08:00 [DBG] =========Yi-SQL耗时8.6291毫秒=====
2024-04-10 15:18:56.482 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:18:56.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 15:18:56.484 +08:00 [DBG] =========Yi-SQL耗时0.4236毫秒=====
2024-04-10 15:18:56.485 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 15:18:56.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 15:18:56.488 +08:00 [DBG] =========Yi-SQL耗时2.2475毫秒=====
2024-04-10 15:18:56.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:18:56.492 +08:00 [DBG] =========Yi-SQL耗时1.4666毫秒=====
2024-04-10 15:18:56.494 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:18:56.494 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 29.7444ms
2024-04-10 15:18:56.494 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:56.577 +08:00 [INF] 2024/4/10 15:18:56：cc,QHFmc5vHlChEMeUyojeFNw连接服务端success，当前已连接0个
2024-04-10 15:18:56.802 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:56.802 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 15:18:56.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 15:18:56.806 +08:00 [DBG] =========Yi-SQL耗时1.9973毫秒=====
2024-04-10 15:18:56.808 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 15:18:56.809 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.7146ms
2024-04-10 15:18:56.809 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:56.816 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:56.817 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 15:18:56.818 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:18:56.818 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:18:56.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:18:56.820 +08:00 [DBG] =========Yi-SQL耗时1.2214毫秒=====
2024-04-10 15:18:56.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:18:56.826 +08:00 [DBG] =========Yi-SQL耗时1.6666毫秒=====
2024-04-10 15:18:56.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:18:56.829 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:18:56.829 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.3715ms
2024-04-10 15:18:56.829 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:18:56.830 +08:00 [DBG] =========Yi-SQL耗时1.3227毫秒=====
2024-04-10 15:18:56.833 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:18:56.833 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.831ms
2024-04-10 15:18:56.833 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:20:10.257 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:20:10.257 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:20:10.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:20:10.262 +08:00 [DBG] =========Yi-SQL耗时3.1329毫秒=====
2024-04-10 15:20:10.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:20:10.266 +08:00 [DBG] =========Yi-SQL耗时0.7801毫秒=====
2024-04-10 15:20:10.278 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:20:10.280 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 22.5853ms
2024-04-10 15:20:10.280 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:26:04.197 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 15:26:04.198 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 15:26:05.047 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:26:05.050 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 15:26:05.050 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 15:26:05.070 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:26:05.070 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:26:05.073 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 15:26:05.074 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.9426ms
2024-04-10 15:26:05.074 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:26:05.396 +08:00 [INF] CORS policy execution successful.
2024-04-10 15:26:05.397 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 15:26:05.397 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:26:05.398 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 15:26:05.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:26:05.486 +08:00 [INF] 2024/4/10 15:26:05：cc,cwu4gPAqCvBuspzEOcxw6g连接服务端success，当前已连接0个
2024-04-10 15:26:05.529 +08:00 [DBG] =========Yi-SQL耗时125.4337毫秒=====
2024-04-10 15:26:05.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 15:26:05.534 +08:00 [DBG] =========Yi-SQL耗时2.5053毫秒=====
2024-04-10 15:26:05.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 15:26:05.538 +08:00 [DBG] =========Yi-SQL耗时2.9743毫秒=====
2024-04-10 15:26:05.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:26:05.542 +08:00 [DBG] =========Yi-SQL耗时2.5612毫秒=====
2024-04-10 15:26:05.543 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:26:05.544 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 146.3136ms
2024-04-10 15:26:05.544 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 15:26:05.892 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:26:05.892 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 15:26:05.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 15:26:05.897 +08:00 [DBG] =========Yi-SQL耗时2.5769毫秒=====
2024-04-10 15:26:05.899 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 15:26:05.899 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.071ms
2024-04-10 15:26:05.899 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 15:26:05.911 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:26:05.916 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 15:26:05.916 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:26:05.919 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 15:26:05.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 15:26:05.932 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 15:26:05.935 +08:00 [DBG] =========Yi-SQL耗时12.448毫秒=====
2024-04-10 15:26:05.937 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:26:05.938 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 21.9116ms
2024-04-10 15:26:05.938 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 15:26:06.059 +08:00 [DBG] =========Yi-SQL耗时126.8279毫秒=====
2024-04-10 15:26:06.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 15:26:06.060 +08:00 [DBG] =========Yi-SQL耗时1.0412毫秒=====
2024-04-10 15:26:06.062 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 15:26:06.062 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 143.3187ms
2024-04-10 15:26:06.062 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 15:59:19.640 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 15:59:19.646 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:27:57.419 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-10 16:27:57.440 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-10 16:28:03.479 +08:00 [INF] Loaded ABP modules:
2024-04-10 16:28:03.479 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-10 16:28:03.479 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-10 16:28:03.479 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-10 16:28:03.479 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-10 16:28:03.479 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-10 16:28:03.479 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-10 16:28:03.479 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-10 16:28:03.479 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-10 16:28:03.479 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-10 16:28:03.479 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-10 16:28:03.479 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-10 16:28:03.479 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-10 16:28:03.479 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-10 16:28:03.479 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-10 16:28:03.479 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-10 16:28:03.479 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-10 16:28:03.479 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-10 16:28:03.479 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-10 16:28:03.479 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-10 16:28:03.479 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-10 16:28:03.479 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-10 16:28:03.479 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-10 16:28:03.479 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-10 16:28:03.479 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-10 16:28:03.479 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-10 16:28:03.479 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-10 16:28:03.479 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-10 16:28:03.479 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-10 16:28:03.479 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-10 16:28:03.479 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-10 16:28:03.479 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-10 16:28:03.479 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-10 16:28:03.479 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-10 16:28:03.479 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-10 16:28:03.479 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-10 16:28:03.479 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-10 16:28:03.479 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-10 16:28:03.479 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-10 16:28:03.479 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-10 16:28:03.479 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-10 16:28:03.479 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-10 16:28:03.480 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-10 16:28:03.480 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-10 16:28:03.480 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-10 16:28:03.480 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-10 16:28:03.480 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-10 16:28:03.480 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-10 16:28:03.480 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-10 16:28:03.480 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-10 16:28:03.480 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-10 16:28:03.480 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-10 16:28:03.480 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-10 16:28:03.480 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-10 16:28:03.480 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-10 16:28:03.480 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-10 16:28:03.480 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-10 16:28:03.480 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-10 16:28:03.480 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-10 16:28:03.480 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-10 16:28:03.480 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-10 16:28:03.480 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-10 16:28:03.480 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-10 16:28:03.480 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-10 16:28:03.480 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-10 16:28:03.480 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-10 16:28:03.480 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-10 16:28:03.480 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-10 16:28:03.480 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-10 16:28:03.480 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-10 16:28:03.486 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-10 16:28:03.490 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-10 16:28:04.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-10 16:28:04.477 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.498 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.498 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-10 16:28:04.500 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-10 16:28:04.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.524 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-10 16:28:04.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-10 16:28:04.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-10 16:28:04.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-10 16:28:04.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-10 16:28:04.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-10 16:28:04.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-10 16:28:04.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-10 16:28:04.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-10 16:28:04.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-10 16:28:04.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-10 16:28:04.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.543 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-10 16:28:04.552 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.552 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-10 16:28:04.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-10 16:28:04.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-10 16:28:04.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-10 16:28:04.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-10 16:28:04.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-10 16:28:04.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-10 16:28:04.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-10 16:28:04.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.572 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.572 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-10 16:28:04.574 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-10 16:28:04.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-10 16:28:04.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.575 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-10 16:28:04.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-10 16:28:04.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 16:28:04.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 16:28:04.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-10 16:28:04.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-10 16:28:04.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-10 16:28:04.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-10 16:28:04.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-10 16:28:04.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-10 16:28:04.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-10 16:28:04.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-10 16:28:04.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-10 16:28:04.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-10 16:28:04.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-10 16:28:04.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-10 16:28:04.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-10 16:28:04.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-10 16:28:04.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-10 16:28:04.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-10 16:28:04.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-10 16:28:04.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-10 16:28:04.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-10 16:28:04.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-10 16:28:04.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-10 16:28:04.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-10 16:28:04.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.616 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-10 16:28:04.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.625 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-10 16:28:04.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-10 16:28:04.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-10 16:28:04.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-10 16:28:04.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-10 16:28:04.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-10 16:28:04.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-10 16:28:04.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.633 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-10 16:28:04.634 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-10 16:28:04.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-10 16:28:04.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-10 16:28:04.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-10 16:28:04.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-10 16:28:04.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-10 16:28:04.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-10 16:28:04.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-10 16:28:04.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-10 16:28:04.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-10 16:28:04.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-10 16:28:04.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-10 16:28:04.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:04.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-10 16:28:04.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-10 16:28:04.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-10 16:28:04.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-10 16:28:04.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-10 16:28:04.709 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-10 16:28:04.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 16:28:04.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 16:28:04.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-10 16:28:04.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-10 16:28:04.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.710 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-10 16:28:04.710 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-10 16:28:04.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-10 16:28:04.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-10 16:28:04.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-10 16:28:04.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-10 16:28:04.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-10 16:28:04.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-10 16:28:04.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-10 16:28:04.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-10 16:28:04.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-10 16:28:04.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-10 16:28:04.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-10 16:28:04.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-10 16:28:04.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-10 16:28:04.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-10 16:28:04.747 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.751 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.758 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-10 16:28:04.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-10 16:28:04.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-10 16:28:04.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-10 16:28:04.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-10 16:28:04.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 16:28:04.762 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 16:28:04.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-10 16:28:04.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-10 16:28:04.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-10 16:28:04.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-10 16:28:04.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-10 16:28:04.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-10 16:28:04.764 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.771 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-10 16:28:04.774 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.779 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-10 16:28:04.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-10 16:28:04.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-10 16:28:04.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-10 16:28:04.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-10 16:28:04.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.792 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-10 16:28:04.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.801 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-10 16:28:04.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-10 16:28:04.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-10 16:28:04.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-10 16:28:04.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-10 16:28:04.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 16:28:04.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 16:28:04.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-10 16:28:04.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.809 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-10 16:28:04.809 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-10 16:28:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-10 16:28:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-10 16:28:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-10 16:28:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-10 16:28:04.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.816 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-10 16:28:04.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.821 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-10 16:28:04.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-10 16:28:04.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.829 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-10 16:28:04.830 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-10 16:28:04.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.843 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-10 16:28:04.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-10 16:28:04.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-10 16:28:04.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-10 16:28:04.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-10 16:28:04.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-10 16:28:04.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-10 16:28:04.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-10 16:28:04.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-10 16:28:04.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-10 16:28:04.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-10 16:28:04.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-10 16:28:04.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-10 16:28:04.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-10 16:28:04.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-10 16:28:04.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-10 16:28:04.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-10 16:28:04.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-10 16:28:04.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-10 16:28:04.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-10 16:28:04.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-10 16:28:04.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-10 16:28:04.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-10 16:28:04.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-10 16:28:04.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-10 16:28:04.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:04.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.862 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-10 16:28:04.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.868 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.873 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.873 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-10 16:28:04.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-10 16:28:04.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-10 16:28:04.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-10 16:28:04.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-10 16:28:04.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.882 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-10 16:28:04.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.888 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.889 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.889 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.894 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-10 16:28:04.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-10 16:28:04.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-10 16:28:04.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-10 16:28:04.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-10 16:28:04.897 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-10 16:28:04.904 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-10 16:28:04.918 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-10 16:28:04.918 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-10 16:28:04.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.932 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.932 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-10 16:28:04.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-10 16:28:04.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.950 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-10 16:28:04.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-10 16:28:04.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-10 16:28:04.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-10 16:28:04.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-10 16:28:04.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-10 16:28:04.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-10 16:28:04.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-10 16:28:04.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-10 16:28:04.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-10 16:28:04.960 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.960 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:04.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.966 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-10 16:28:04.968 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.973 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.978 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.978 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-10 16:28:04.980 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:04.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-10 16:28:04.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:04.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:04.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.016 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-10 16:28:05.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-10 16:28:05.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-10 16:28:05.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-10 16:28:05.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-10 16:28:05.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-10 16:28:05.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-10 16:28:05.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-10 16:28:05.027 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.031 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.031 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.037 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-10 16:28:05.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-10 16:28:05.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-10 16:28:05.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-10 16:28:05.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.040 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.046 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-10 16:28:05.048 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.051 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-10 16:28:05.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-10 16:28:05.060 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.060 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-10 16:28:05.061 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.061 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.062 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.062 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.066 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.067 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-10 16:28:05.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-10 16:28:05.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-10 16:28:05.083 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.084 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.084 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.086 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.086 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-10 16:28:05.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.105 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-10 16:28:05.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-10 16:28:05.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.126 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.126 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.132 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.132 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-10 16:28:05.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-10 16:28:05.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-10 16:28:05.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.142 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.142 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-10 16:28:05.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-10 16:28:05.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-10 16:28:05.163 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-10 16:28:05.163 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-10 16:28:05.164 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-10 16:28:05.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-10 16:28:05.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.202 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-10 16:28:05.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.224 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-10 16:28:05.227 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-10 16:28:05.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.229 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.237 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.238 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-10 16:28:05.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.250 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-10 16:28:05.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-10 16:28:05.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-10 16:28:05.307 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-10 16:28:05.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-10 16:28:05.325 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-10 16:28:05.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-10 16:28:05.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-10 16:28:05.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-10 16:28:05.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-10 16:28:05.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-10 16:28:05.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-10 16:28:05.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-10 16:28:05.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-10 16:28:05.362 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-10 16:28:05.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-10 16:28:05.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-10 16:28:05.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-10 16:28:05.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-10 16:28:05.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-10 16:28:05.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-10 16:28:05.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-10 16:28:05.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-10 16:28:05.475 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.604 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-10 16:28:05.610 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.617 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-10 16:28:05.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-10 16:28:05.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.668 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.673 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.686 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-10 16:28:05.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.718 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-10 16:28:05.723 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-10 16:28:05.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.738 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-10 16:28:05.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.757 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.770 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-10 16:28:05.775 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "question" is '实体'
===============================

2024-04-10 16:28:05.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.789 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-10 16:28:05.793 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-10 16:28:05.821 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-10 16:28:05.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-10 16:28:05.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-10 16:28:05.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-10 16:28:05.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-10 16:28:05.823 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-10 16:28:05.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.864 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-10 16:28:05.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-10 16:28:05.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-10 16:28:05.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.880 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-10 16:28:05.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-10 16:28:05.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-10 16:28:05.910 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-10 16:28:05.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-10 16:28:05.912 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-10 16:28:05.912 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-10 16:28:05.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-10 16:28:05.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:05.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-10 16:28:05.929 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-10 16:28:06.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.189 +08:00 [DBG] =========Yi-SQL耗时17.0249毫秒=====
2024-04-10 16:28:06.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.218 +08:00 [DBG] =========Yi-SQL耗时1.4897毫秒=====
2024-04-10 16:28:06.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.226 +08:00 [DBG] =========Yi-SQL耗时2.4588毫秒=====
2024-04-10 16:28:06.234 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.239 +08:00 [DBG] =========Yi-SQL耗时4.1724毫秒=====
2024-04-10 16:28:06.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.255 +08:00 [DBG] =========Yi-SQL耗时2.5696毫秒=====
2024-04-10 16:28:06.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.264 +08:00 [DBG] =========Yi-SQL耗时1.5177毫秒=====
2024-04-10 16:28:06.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.278 +08:00 [DBG] =========Yi-SQL耗时4.0837毫秒=====
2024-04-10 16:28:06.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.287 +08:00 [DBG] =========Yi-SQL耗时1.6252毫秒=====
2024-04-10 16:28:06.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.293 +08:00 [DBG] =========Yi-SQL耗时2.1601毫秒=====
2024-04-10 16:28:06.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.297 +08:00 [DBG] =========Yi-SQL耗时0.8832毫秒=====
2024-04-10 16:28:06.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.304 +08:00 [DBG] =========Yi-SQL耗时2.781毫秒=====
2024-04-10 16:28:06.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.317 +08:00 [DBG] =========Yi-SQL耗时2.7698毫秒=====
2024-04-10 16:28:06.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.327 +08:00 [DBG] =========Yi-SQL耗时3.3451毫秒=====
2024-04-10 16:28:06.334 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-10 16:28:06.335 +08:00 [DBG] =========Yi-SQL耗时1.4366毫秒=====
2024-04-10 16:28:06.354 +08:00 [DBG] 耗时-2867ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-10 16:28:06.358 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-10 16:28:06.493 +08:00 [DBG] 耗时-134ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-10 16:28:06.501 +08:00 [DBG] 耗时-7ms,已加载模块-Volo.Abp.EventBus
2024-04-10 16:28:06.536 +08:00 [DBG] 耗时-35ms,已加载模块-Volo.Abp.AspNetCore
2024-04-10 16:28:06.559 +08:00 [DBG] 耗时-22ms,已加载模块-Volo.Abp.Quartz
2024-04-10 16:28:06.623 +08:00 [DBG] 耗时-63ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-10 16:28:06.628 +08:00 [DBG] 耗时-3ms,已加载模块-Yi.Framework.Rbac.Application
2024-04-10 16:28:06.634 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-10 16:28:06.977 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-10 16:28:07.069 +08:00 [DBG] 耗时-435ms,已加载模块-Yi.Abp.Web
2024-04-10 16:28:07.078 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-10 16:28:07.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-10 16:28:07.089 +08:00 [DBG] =========Yi-SQL耗时0.9951毫秒=====
2024-04-10 16:28:07.174 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-10 16:28:07.174 +08:00 [DBG] 耗时-104ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-10 16:28:07.175 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【3678ms】==========
2024-04-10 16:28:07.278 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-10 16:28:07.278 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-10 16:28:07.278 +08:00 [INF] Hosting environment: Development
2024-04-10 16:28:07.278 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-10 16:28:11.716 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:28:11.795 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:28:11.795 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:28:11.803 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:28:11.818 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:28:11.820 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:28:11.823 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:28:11.939 +08:00 [INF] 2024/4/10 16:28:11：cc,PfodvBNMsKw0RJR53Eh3Hg连接服务端success，当前已连接0个
2024-04-10 16:28:11.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:28:11.945 +08:00 [DBG] =========Yi-SQL耗时2.316毫秒=====
2024-04-10 16:28:11.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:28:11.973 +08:00 [DBG] =========Yi-SQL耗时1.2432毫秒=====
2024-04-10 16:28:11.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:28:11.982 +08:00 [DBG] =========Yi-SQL耗时0.5076毫秒=====
2024-04-10 16:28:12.026 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:28:12.098 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 272.104ms
2024-04-10 16:28:12.098 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:28:12.105 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:28:12.107 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:28:12.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:28:12.111 +08:00 [DBG] =========Yi-SQL耗时0.9604毫秒=====
2024-04-10 16:28:12.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:28:12.114 +08:00 [DBG] =========Yi-SQL耗时0.3026毫秒=====
2024-04-10 16:28:12.114 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:28:12.115 +08:00 [DBG] =========Yi-SQL耗时0.2932毫秒=====
2024-04-10 16:28:12.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:28:12.117 +08:00 [DBG] =========Yi-SQL耗时0.6972毫秒=====
2024-04-10 16:28:12.139 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:28:12.143 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 35.6357ms
2024-04-10 16:28:12.143 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:28:12.281 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:28:12.289 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:28:12.308 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:28:12.313 +08:00 [DBG] =========Yi-SQL耗时4.6905毫秒=====
2024-04-10 16:28:12.321 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:28:12.324 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 34.0051ms
2024-04-10 16:28:12.324 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:28:14.562 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:28:14.562 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:28:14.565 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:28:14.567 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:28:14.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:28:14.580 +08:00 [DBG] =========Yi-SQL耗时1.1214毫秒=====
2024-04-10 16:28:14.601 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:28:14.604 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 39.0551ms
2024-04-10 16:28:14.604 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:28:14.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:28:14.627 +08:00 [DBG] =========Yi-SQL耗时3.1678毫秒=====
2024-04-10 16:28:14.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:28:14.637 +08:00 [DBG] =========Yi-SQL耗时0.5734毫秒=====
2024-04-10 16:28:14.646 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:28:14.649 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 81.997ms
2024-04-10 16:28:14.649 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:28:56.616 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:28:56.617 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:28:56.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:28:56.622 +08:00 [DBG] =========Yi-SQL耗时0.8396毫秒=====
2024-04-10 16:28:56.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:28:56.628 +08:00 [DBG] =========Yi-SQL耗时0.7743毫秒=====
2024-04-10 16:28:56.633 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:28:56.634 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 16.9797ms
2024-04-10 16:28:56.634 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:32:03.240 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:32:03.258 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:32:03.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:32:03.365 +08:00 [DBG] =========Yi-SQL耗时10.7036毫秒=====
2024-04-10 16:32:03.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:32:03.369 +08:00 [DBG] =========Yi-SQL耗时1.3901毫秒=====
2024-04-10 16:32:03.389 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:32:03.394 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 136.4791ms
2024-04-10 16:32:03.395 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:33:16.732 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:33:16.740 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:33:17.490 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:33:17.504 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:33:17.510 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:33:17.526 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:17.529 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:33:17.656 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:33:17.663 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 133.528ms
2024-04-10 16:33:17.663 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:17.757 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:33:17.760 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:17.761 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:33:17.761 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:33:17.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:33:17.890 +08:00 [DBG] =========Yi-SQL耗时115.278毫秒=====
2024-04-10 16:33:17.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:33:17.899 +08:00 [DBG] =========Yi-SQL耗时1.718毫秒=====
2024-04-10 16:33:17.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:33:17.904 +08:00 [INF] 2024/4/10 16:33:17：cc,cpZnpKVGRwcH8lbGQPVpRg连接服务端success，当前已连接0个
2024-04-10 16:33:17.905 +08:00 [DBG] =========Yi-SQL耗时2.2493毫秒=====
2024-04-10 16:33:17.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:33:17.910 +08:00 [DBG] =========Yi-SQL耗时2.1021毫秒=====
2024-04-10 16:33:17.914 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:33:17.915 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 154.2018ms
2024-04-10 16:33:17.915 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:18.265 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:18.267 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:33:18.316 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:33:18.316 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:18.317 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:33:18.317 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:33:18.317 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:33:18.319 +08:00 [DBG] =========Yi-SQL耗时2.6413毫秒=====
2024-04-10 16:33:18.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:33:18.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:33:18.325 +08:00 [DBG] =========Yi-SQL耗时1.934毫秒=====
2024-04-10 16:33:18.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:33:18.331 +08:00 [DBG] =========Yi-SQL耗时2.0874毫秒=====
2024-04-10 16:33:18.336 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:33:18.340 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 72.9487ms
2024-04-10 16:33:18.340 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:18.340 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:33:18.342 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 25.2412ms
2024-04-10 16:33:18.342 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:33:18.550 +08:00 [DBG] =========Yi-SQL耗时226.5696毫秒=====
2024-04-10 16:33:18.555 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:33:18.556 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 239.378ms
2024-04-10 16:33:18.556 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:24.315 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:33:24.315 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:33:24.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:33:24.319 +08:00 [DBG] =========Yi-SQL耗时0.8789毫秒=====
2024-04-10 16:33:24.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:33:24.323 +08:00 [DBG] =========Yi-SQL耗时1.3886毫秒=====
2024-04-10 16:33:24.326 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:33:24.326 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 10.289ms
2024-04-10 16:33:24.326 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:33:26.461 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:33:26.466 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:33:27.230 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:33:27.235 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:33:27.236 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:33:27.258 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:27.259 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:33:27.262 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:33:27.262 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.9304ms
2024-04-10 16:33:27.262 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:27.518 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:27.521 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:33:27.525 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:33:27.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:33:27.528 +08:00 [DBG] =========Yi-SQL耗时2.3479毫秒=====
2024-04-10 16:33:27.530 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:33:27.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:33:27.533 +08:00 [DBG] =========Yi-SQL耗时2.3754毫秒=====
2024-04-10 16:33:27.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:33:27.535 +08:00 [DBG] =========Yi-SQL耗时0.7361毫秒=====
2024-04-10 16:33:27.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:33:27.541 +08:00 [DBG] =========Yi-SQL耗时2.9198毫秒=====
2024-04-10 16:33:27.544 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:33:27.545 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 23.1374ms
2024-04-10 16:33:27.545 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:27.622 +08:00 [INF] 2024/4/10 16:33:27：cc,bQx-yqGeqYu6ephuFOvsgg连接服务端success，当前已连接0个
2024-04-10 16:33:27.721 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:27.721 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:33:27.723 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:33:27.728 +08:00 [DBG] =========Yi-SQL耗时4.7859毫秒=====
2024-04-10 16:33:27.729 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:33:27.730 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 8.9434ms
2024-04-10 16:33:27.730 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:27.876 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:33:27.876 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:27.877 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:33:27.877 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:33:27.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:33:27.881 +08:00 [DBG] =========Yi-SQL耗时1.8495毫秒=====
2024-04-10 16:33:27.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:33:27.890 +08:00 [DBG] =========Yi-SQL耗时5.1682毫秒=====
2024-04-10 16:33:27.890 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:33:27.892 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 14.9375ms
2024-04-10 16:33:27.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:33:27.892 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:33:27.894 +08:00 [DBG] =========Yi-SQL耗时1.6947毫秒=====
2024-04-10 16:33:27.898 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:33:27.898 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 20.8735ms
2024-04-10 16:33:27.898 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:35:13.607 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:35:13.609 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:35:14.214 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:35:14.232 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:35:14.235 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:35:14.236 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:35:14.236 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:35:14.247 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:35:14.249 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 12.6121ms
2024-04-10 16:35:14.249 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:35:14.588 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:35:14.589 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:35:14.589 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:35:14.594 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:35:14.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:35:14.597 +08:00 [DBG] =========Yi-SQL耗时1.608毫秒=====
2024-04-10 16:35:14.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:35:14.604 +08:00 [DBG] =========Yi-SQL耗时4.4969毫秒=====
2024-04-10 16:35:14.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:35:14.607 +08:00 [DBG] =========Yi-SQL耗时1.7682毫秒=====
2024-04-10 16:35:14.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:35:14.609 +08:00 [DBG] =========Yi-SQL耗时1.0787毫秒=====
2024-04-10 16:35:14.612 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:35:14.616 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 26.8818ms
2024-04-10 16:35:14.616 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:35:14.705 +08:00 [INF] 2024/4/10 16:35:14：cc,DkGLIeAFeMhinoBR1HXX9A连接服务端success，当前已连接0个
2024-04-10 16:35:15.008 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:35:15.009 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:35:15.009 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:35:15.009 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:35:15.009 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:35:15.009 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:35:15.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:35:15.016 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:35:15.017 +08:00 [DBG] =========Yi-SQL耗时1.3955毫秒=====
2024-04-10 16:35:15.017 +08:00 [DBG] =========Yi-SQL耗时1.1308毫秒=====
2024-04-10 16:35:15.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:35:15.027 +08:00 [DBG] =========Yi-SQL耗时1.4029毫秒=====
2024-04-10 16:35:15.035 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:35:15.036 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:35:15.036 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 26.9133ms
2024-04-10 16:35:15.036 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 26.9884ms
2024-04-10 16:35:15.036 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:35:15.036 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:35:15.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:35:15.054 +08:00 [DBG] =========Yi-SQL耗时13.9847毫秒=====
2024-04-10 16:35:15.060 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:35:15.061 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 51.9496ms
2024-04-10 16:35:15.061 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:36:43.687 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:36:43.687 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:36:43.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:36:43.693 +08:00 [DBG] =========Yi-SQL耗时1.9178毫秒=====
2024-04-10 16:36:43.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:36:43.700 +08:00 [DBG] =========Yi-SQL耗时0.6863毫秒=====
2024-04-10 16:36:43.702 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:36:43.702 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 13.962ms
2024-04-10 16:36:43.703 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:36:46.850 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:36:46.850 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:36:47.592 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:36:47.595 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:36:47.596 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:36:47.615 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:36:47.615 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:36:47.618 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:36:47.618 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.6165ms
2024-04-10 16:36:47.618 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:36:47.885 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:36:47.886 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:36:47.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:36:47.893 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:36:47.896 +08:00 [DBG] =========Yi-SQL耗时3.9983毫秒=====
2024-04-10 16:36:47.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:36:47.902 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:36:47.902 +08:00 [DBG] =========Yi-SQL耗时1.9819毫秒=====
2024-04-10 16:36:47.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:36:47.905 +08:00 [DBG] =========Yi-SQL耗时1.051毫秒=====
2024-04-10 16:36:47.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:36:47.907 +08:00 [DBG] =========Yi-SQL耗时1.0239毫秒=====
2024-04-10 16:36:47.909 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:36:47.910 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 24.2179ms
2024-04-10 16:36:47.910 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:36:47.974 +08:00 [INF] 2024/4/10 16:36:47：cc,bLdUzIKdGnODXWdQRzFsVQ连接服务端success，当前已连接0个
2024-04-10 16:36:48.261 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:36:48.261 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:36:48.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:36:48.265 +08:00 [DBG] =========Yi-SQL耗时1.8143毫秒=====
2024-04-10 16:36:48.268 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:36:48.268 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.7101ms
2024-04-10 16:36:48.268 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:36:48.275 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:36:48.277 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:36:48.277 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:36:48.278 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:36:48.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:36:48.280 +08:00 [DBG] =========Yi-SQL耗时1.6279毫秒=====
2024-04-10 16:36:48.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:36:48.284 +08:00 [DBG] =========Yi-SQL耗时1.9704毫秒=====
2024-04-10 16:36:48.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:36:48.291 +08:00 [DBG] =========Yi-SQL耗时3.4224毫秒=====
2024-04-10 16:36:48.333 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:36:48.333 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:36:48.333 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 56.5732ms
2024-04-10 16:36:48.333 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 55.518ms
2024-04-10 16:36:48.333 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:36:48.333 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:37:00.679 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:37:00.684 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:37:00.988 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:37:00.990 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:37:00.993 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:37:01.016 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:37:01.017 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:37:01.019 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:37:01.019 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.2746ms
2024-04-10 16:37:01.019 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:37:01.265 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:37:01.266 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:37:01.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:37:01.276 +08:00 [DBG] =========Yi-SQL耗时4.0245毫秒=====
2024-04-10 16:37:01.277 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:37:01.279 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:37:01.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:37:01.280 +08:00 [DBG] =========Yi-SQL耗时0.8414毫秒=====
2024-04-10 16:37:01.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:37:01.282 +08:00 [DBG] =========Yi-SQL耗时0.491毫秒=====
2024-04-10 16:37:01.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:37:01.284 +08:00 [DBG] =========Yi-SQL耗时0.7767毫秒=====
2024-04-10 16:37:01.285 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:37:01.285 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 19.1492ms
2024-04-10 16:37:01.285 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:37:01.330 +08:00 [INF] 2024/4/10 16:37:01：cc,kODzvEdfaQo7Ab4TzPvkaw连接服务端success，当前已连接0个
2024-04-10 16:37:01.589 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:37:01.590 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:37:01.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:37:01.592 +08:00 [DBG] =========Yi-SQL耗时1.0606毫秒=====
2024-04-10 16:37:01.594 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:37:01.595 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.9838ms
2024-04-10 16:37:01.595 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:37:01.602 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:37:01.602 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:37:01.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:37:01.606 +08:00 [DBG] =========Yi-SQL耗时1.1564毫秒=====
2024-04-10 16:37:01.608 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:37:01.609 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:37:01.609 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:37:01.610 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.2956ms
2024-04-10 16:37:01.610 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:37:01.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:37:01.616 +08:00 [DBG] =========Yi-SQL耗时2.035毫秒=====
2024-04-10 16:37:01.618 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:37:01.619 +08:00 [DBG] =========Yi-SQL耗时0.5671毫秒=====
2024-04-10 16:37:01.620 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:37:01.621 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.9387ms
2024-04-10 16:37:01.621 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:39:57.164 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:39:57.165 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:39:57.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:39:57.221 +08:00 [DBG] =========Yi-SQL耗时54.1256毫秒=====
2024-04-10 16:39:57.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:39:57.223 +08:00 [DBG] =========Yi-SQL耗时0.5224毫秒=====
2024-04-10 16:39:57.225 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:39:57.226 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 61.0422ms
2024-04-10 16:39:57.226 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:40:00.296 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:40:00.297 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:40:01.040 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:40:01.068 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:40:01.068 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:40:01.070 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:40:01.071 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:40:01.078 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:40:01.078 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 8.7041ms
2024-04-10 16:40:01.079 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:40:01.391 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:40:01.401 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:40:01.422 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:40:01.422 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:40:01.427 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:40:01.436 +08:00 [DBG] =========Yi-SQL耗时9.4069毫秒=====
2024-04-10 16:40:01.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:40:01.441 +08:00 [DBG] =========Yi-SQL耗时1.393毫秒=====
2024-04-10 16:40:01.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:40:01.447 +08:00 [DBG] =========Yi-SQL耗时4.1924毫秒=====
2024-04-10 16:40:01.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:40:01.457 +08:00 [DBG] =========Yi-SQL耗时8.4584毫秒=====
2024-04-10 16:40:01.465 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:40:01.465 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 42.81ms
2024-04-10 16:40:01.465 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:40:01.561 +08:00 [INF] 2024/4/10 16:40:01：cc,Q0x6HXz8BH6URIZMj6AhUw连接服务端success，当前已连接0个
2024-04-10 16:40:01.784 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:40:01.784 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:40:01.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:40:01.790 +08:00 [DBG] =========Yi-SQL耗时2.3242毫秒=====
2024-04-10 16:40:01.798 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:40:01.798 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 14.0075ms
2024-04-10 16:40:01.798 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:40:01.801 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:40:01.801 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:40:01.803 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:40:01.842 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:40:01.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:40:01.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:40:01.864 +08:00 [DBG] =========Yi-SQL耗时15.4839毫秒=====
2024-04-10 16:40:01.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:40:01.869 +08:00 [DBG] =========Yi-SQL耗时0.9015毫秒=====
2024-04-10 16:40:01.873 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:40:01.873 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 71.9758ms
2024-04-10 16:40:01.873 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:40:01.964 +08:00 [DBG] =========Yi-SQL耗时101.2565毫秒=====
2024-04-10 16:40:01.969 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:40:01.970 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 127.5475ms
2024-04-10 16:40:01.970 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:40:08.145 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:40:08.148 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:40:08.172 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:40:08.404 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 16:40:08.405 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 16:40:08.450 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 16:40:08.468 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 296.2047ms
2024-04-10 16:40:08.468 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:12.202 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:42:12.205 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:12.205 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:42:12.276 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 16:42:12.276 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 16:42:12.276 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 16:42:12.277 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 71.1264ms
2024-04-10 16:42:12.277 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:17.115 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:42:17.122 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:42:17.582 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:42:17.586 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:42:17.587 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:42:17.592 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:17.593 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:42:17.615 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:42:17.616 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 22.8404ms
2024-04-10 16:42:17.616 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:17.979 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:17.980 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:42:17.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:42:17.989 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:42:17.989 +08:00 [DBG] =========Yi-SQL耗时4.6971毫秒=====
2024-04-10 16:42:17.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:42:17.994 +08:00 [DBG] =========Yi-SQL耗时3.0408毫秒=====
2024-04-10 16:42:17.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:42:17.997 +08:00 [DBG] =========Yi-SQL耗时0.6284毫秒=====
2024-04-10 16:42:17.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:42:17.998 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:42:18.002 +08:00 [DBG] =========Yi-SQL耗时3.7283毫秒=====
2024-04-10 16:42:18.005 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:42:18.007 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 26.8399ms
2024-04-10 16:42:18.007 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:18.160 +08:00 [INF] 2024/4/10 16:42:18：cc,liGl6GBlq8gZ4yjOKiFAZg连接服务端success，当前已连接0个
2024-04-10 16:42:18.310 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:18.311 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:42:18.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:42:18.313 +08:00 [DBG] =========Yi-SQL耗时0.8555毫秒=====
2024-04-10 16:42:18.316 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:42:18.317 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.0564ms
2024-04-10 16:42:18.317 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:18.449 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:42:18.452 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:18.452 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:42:18.452 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:42:18.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:42:18.456 +08:00 [DBG] =========Yi-SQL耗时1.6511毫秒=====
2024-04-10 16:42:18.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:42:18.458 +08:00 [DBG] =========Yi-SQL耗时1.2198毫秒=====
2024-04-10 16:42:18.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:42:18.465 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:42:18.466 +08:00 [DBG] =========Yi-SQL耗时2.8724毫秒=====
2024-04-10 16:42:18.468 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 16.1495ms
2024-04-10 16:42:18.468 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:18.471 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:42:18.471 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 19.549ms
2024-04-10 16:42:18.471 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:42:47.084 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:42:47.084 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:42:53.108 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:42:53.110 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:42:53.110 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:42:53.138 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:42:53.140 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:42:53.212 +08:00 [INF] 2024/4/10 16:42:53：cc,IzIkG2u14KyuL1nuXHSn-A连接服务端success，当前已连接0个
2024-04-10 16:42:53.458 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:42:53.459 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:42:55.983 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:42:55.988 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:42:55.990 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:42:55.993 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:55.993 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:42:55.998 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:42:55.999 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.4916ms
2024-04-10 16:42:55.999 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:56.203 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:56.204 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:42:56.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:42:56.222 +08:00 [DBG] =========Yi-SQL耗时1.7298毫秒=====
2024-04-10 16:42:56.226 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:42:56.227 +08:00 [DBG] =========Yi-SQL耗时1.2628毫秒=====
2024-04-10 16:42:56.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:42:56.229 +08:00 [DBG] =========Yi-SQL耗时0.6888毫秒=====
2024-04-10 16:42:56.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:42:56.233 +08:00 [DBG] =========Yi-SQL耗时2.0805毫秒=====
2024-04-10 16:42:56.235 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:42:56.237 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 33.5823ms
2024-04-10 16:42:56.237 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:56.290 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:42:56.292 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:42:56.366 +08:00 [INF] 2024/4/10 16:42:56：cc,g8y4bxUJYdp7WiFUNPW6fg连接服务端success，当前已连接0个
2024-04-10 16:42:56.442 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:42:56.443 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:42:56.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:42:56.447 +08:00 [DBG] =========Yi-SQL耗时0.8836毫秒=====
2024-04-10 16:42:56.449 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:42:56.453 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 10.5632ms
2024-04-10 16:42:56.453 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:01.884 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:01.884 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:43:01.885 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:43:01.885 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:43:01.886 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:43:01.887 +08:00 [DBG] =========Yi-SQL耗时1.346毫秒=====
2024-04-10 16:43:01.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:43:01.892 +08:00 [DBG] =========Yi-SQL耗时1.1094毫秒=====
2024-04-10 16:43:01.892 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:43:01.892 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.0236ms
2024-04-10 16:43:01.892 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:01.893 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:43:01.895 +08:00 [DBG] =========Yi-SQL耗时1.4229毫秒=====
2024-04-10 16:43:01.900 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:43:01.900 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 14.6923ms
2024-04-10 16:43:01.900 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:43:15.761 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:43:15.765 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:15.765 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:43:15.812 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 16:43:15.812 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 16:43:15.812 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 16:43:15.814 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 48.6531ms
2024-04-10 16:43:15.814 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:37.099 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 16:43:37.112 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-10 16:43:37.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:43:37.180 +08:00 [DBG] =========Yi-SQL耗时8.4774毫秒=====
2024-04-10 16:43:37.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-10 16:43:37.187 +08:00 [DBG] =========Yi-SQL耗时1.6291毫秒=====
2024-04-10 16:43:37.196 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:43:37.205 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 93.4234ms
2024-04-10 16:43:37.205 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 16:43:38.305 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:38.305 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:38.305 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:38.306 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:43:38.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:43:38.310 +08:00 [DBG] =========Yi-SQL耗时2.3919毫秒=====
2024-04-10 16:43:38.320 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-10 16:43:38.320 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-10 16:43:38.321 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:43:38.322 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 16.1565ms
2024-04-10 16:43:38.322 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:38.380 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-10 16:43:38.392 +08:00 [DBG] =========Yi-SQL耗时11.9006毫秒=====
2024-04-10 16:43:38.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-10 16:43:38.396 +08:00 [DBG] =========Yi-SQL耗时2.7811毫秒=====
2024-04-10 16:43:38.418 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:43:38.422 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 101.5255ms
2024-04-10 16:43:38.422 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:38.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-10 16:43:38.466 +08:00 [DBG] =========Yi-SQL耗时4.8344毫秒=====
2024-04-10 16:43:38.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-10 16:43:38.470 +08:00 [DBG] =========Yi-SQL耗时2.5431毫秒=====
2024-04-10 16:43:38.473 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:43:38.477 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 156.9903ms
2024-04-10 16:43:38.477 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:39.633 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:39.638 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-10 16:43:39.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:43:39.651 +08:00 [DBG] =========Yi-SQL耗时4.1077毫秒=====
2024-04-10 16:43:39.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-10 16:43:39.661 +08:00 [DBG] =========Yi-SQL耗时1.0196毫秒=====
2024-04-10 16:43:39.680 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:43:39.686 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 48.3924ms
2024-04-10 16:43:39.686 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:40.892 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:40.892 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:40.892 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:43:40.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:43:40.895 +08:00 [DBG] =========Yi-SQL耗时0.917毫秒=====
2024-04-10 16:43:40.900 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-10 16:43:40.903 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:43:40.903 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.7656ms
2024-04-10 16:43:40.903 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:40.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-10 16:43:40.910 +08:00 [DBG] =========Yi-SQL耗时0.8084毫秒=====
2024-04-10 16:43:40.953 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:43:40.976 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 75.1522ms
2024-04-10 16:43:40.976 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:43:58.454 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 16:43:58.454 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-10 16:43:58.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:43:58.458 +08:00 [DBG] =========Yi-SQL耗时0.8025毫秒=====
2024-04-10 16:43:58.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-10 16:43:58.461 +08:00 [DBG] =========Yi-SQL耗时1.0674毫秒=====
2024-04-10 16:43:58.462 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:43:58.462 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 8.5404ms
2024-04-10 16:43:58.462 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-10 16:44:11.624 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:44:11.624 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:44:11.950 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:44:11.953 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:44:11.953 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:44:11.958 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:11.959 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:44:11.965 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:44:11.967 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 7.772ms
2024-04-10 16:44:11.967 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.259 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.259 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:44:12.262 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:44:12.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:44:12.265 +08:00 [DBG] =========Yi-SQL耗时1.3392毫秒=====
2024-04-10 16:44:12.270 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:44:12.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:44:12.273 +08:00 [DBG] =========Yi-SQL耗时0.9576毫秒=====
2024-04-10 16:44:12.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:44:12.277 +08:00 [DBG] =========Yi-SQL耗时1.348毫秒=====
2024-04-10 16:44:12.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:44:12.283 +08:00 [DBG] =========Yi-SQL耗时3.2948毫秒=====
2024-04-10 16:44:12.284 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:44:12.285 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 25.9982ms
2024-04-10 16:44:12.285 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.356 +08:00 [INF] 2024/4/10 16:44:12：cc,GHO2MxpHNS-B09vkF619Xg连接服务端success，当前已连接0个
2024-04-10 16:44:12.653 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.653 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:44:12.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:44:12.658 +08:00 [DBG] =========Yi-SQL耗时2.701毫秒=====
2024-04-10 16:44:12.660 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:44:12.661 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 7.4876ms
2024-04-10 16:44:12.661 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.675 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.677 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.677 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-10 16:44:12.677 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:44:12.678 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.678 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-10 16:44:12.678 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:44:12.684 +08:00 [DBG] =========Yi-SQL耗时6.0238毫秒=====
2024-04-10 16:44:12.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-10 16:44:12.718 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:44:12.719 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.719 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 41.9458ms
2024-04-10 16:44:12.719 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.719 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:44:12.726 +08:00 [DBG] =========Yi-SQL耗时8.4966毫秒=====
2024-04-10 16:44:12.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-10 16:44:12.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-10 16:44:12.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:44:12.729 +08:00 [DBG] =========Yi-SQL耗时2.7704毫秒=====
2024-04-10 16:44:12.729 +08:00 [DBG] =========Yi-SQL耗时1.8897毫秒=====
2024-04-10 16:44:12.736 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-10 16:44:12.737 +08:00 [DBG] =========Yi-SQL耗时1.4761毫秒=====
2024-04-10 16:44:12.738 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:44:12.739 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 61.5547ms
2024-04-10 16:44:12.739 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.744 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:44:12.744 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 66.0367ms
2024-04-10 16:44:12.744 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-10 16:44:12.869 +08:00 [DBG] =========Yi-SQL耗时141.8218毫秒=====
2024-04-10 16:44:12.873 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:44:12.874 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 154.083ms
2024-04-10 16:44:12.874 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:45:07.822 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:45:07.822 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:45:07.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:45:07.827 +08:00 [DBG] =========Yi-SQL耗时2.609毫秒=====
2024-04-10 16:45:07.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:45:07.832 +08:00 [DBG] =========Yi-SQL耗时0.5498毫秒=====
2024-04-10 16:45:07.837 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:45:07.838 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.6027ms
2024-04-10 16:45:07.838 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:48:22.844 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:48:22.844 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:48:22.846 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:48:22.847 +08:00 [DBG] =========Yi-SQL耗时1.3288毫秒=====
2024-04-10 16:48:22.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:48:22.854 +08:00 [DBG] =========Yi-SQL耗时1.0765毫秒=====
2024-04-10 16:48:22.856 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:48:22.856 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.9303ms
2024-04-10 16:48:22.856 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:48:23.779 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:48:23.779 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:48:24.332 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:48:24.336 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:48:24.345 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:48:24.345 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:48:24.345 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:48:24.347 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:48:24.347 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.5596ms
2024-04-10 16:48:24.347 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:48:24.477 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:48:24.477 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:48:24.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:48:24.480 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:48:24.483 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:48:24.483 +08:00 [DBG] =========Yi-SQL耗时3.8361毫秒=====
2024-04-10 16:48:24.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:48:24.486 +08:00 [DBG] =========Yi-SQL耗时1.5575毫秒=====
2024-04-10 16:48:24.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:48:24.488 +08:00 [DBG] =========Yi-SQL耗时1.6969毫秒=====
2024-04-10 16:48:24.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:48:24.491 +08:00 [DBG] =========Yi-SQL耗时1.701毫秒=====
2024-04-10 16:48:24.492 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:48:24.492 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 14.4837ms
2024-04-10 16:48:24.492 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:48:24.521 +08:00 [INF] 2024/4/10 16:48:24：cc,T0irLejno-ct9ug6CX7Hhg连接服务端success，当前已连接0个
2024-04-10 16:48:24.697 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:48:24.697 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:48:24.698 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:48:24.700 +08:00 [DBG] =========Yi-SQL耗时1.5573毫秒=====
2024-04-10 16:48:24.702 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:48:24.702 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.6342ms
2024-04-10 16:48:24.702 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:48:24.706 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:48:24.707 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:48:24.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:48:24.708 +08:00 [DBG] =========Yi-SQL耗时0.7092毫秒=====
2024-04-10 16:48:24.710 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:48:24.711 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:48:24.715 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:48:24.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:48:24.715 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.7745ms
2024-04-10 16:48:24.716 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:48:24.716 +08:00 [DBG] =========Yi-SQL耗时0.8681毫秒=====
2024-04-10 16:48:24.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:48:24.729 +08:00 [DBG] =========Yi-SQL耗时6.2085毫秒=====
2024-04-10 16:48:24.732 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:48:24.733 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 21.849ms
2024-04-10 16:48:24.733 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:49:00.794 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:49:00.794 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:49:00.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:49:00.801 +08:00 [DBG] =========Yi-SQL耗时2.8463毫秒=====
2024-04-10 16:49:00.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:49:00.816 +08:00 [DBG] =========Yi-SQL耗时0.8492毫秒=====
2024-04-10 16:49:00.818 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:49:00.818 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 24.1226ms
2024-04-10 16:49:00.818 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:49:13.243 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:49:13.251 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:49:13.251 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:49:13.309 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 16:49:13.309 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 16:49:13.310 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 16:49:13.310 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 58.4704ms
2024-04-10 16:49:13.310 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:50:21.591 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:50:21.592 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:50:21.592 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:50:21.623 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 16:50:21.623 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 16:50:21.623 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 16:50:21.624 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 31.4148ms
2024-04-10 16:50:21.624 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:51:20.678 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:51:20.678 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:51:20.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:51:20.750 +08:00 [DBG] =========Yi-SQL耗时70.6016毫秒=====
2024-04-10 16:51:20.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:51:20.752 +08:00 [DBG] =========Yi-SQL耗时0.4452毫秒=====
2024-04-10 16:51:20.754 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:51:20.754 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 75.9556ms
2024-04-10 16:51:20.754 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:51:23.536 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:51:23.537 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:51:24.288 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:51:24.291 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:51:24.291 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:51:24.314 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:51:24.315 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:51:24.318 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:51:24.319 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.8948ms
2024-04-10 16:51:24.319 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:51:24.515 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:51:24.516 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:51:24.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:51:24.522 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:51:24.523 +08:00 [DBG] =========Yi-SQL耗时2.6458毫秒=====
2024-04-10 16:51:24.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:51:24.527 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:51:24.528 +08:00 [DBG] =========Yi-SQL耗时2.3536毫秒=====
2024-04-10 16:51:24.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:51:24.531 +08:00 [DBG] =========Yi-SQL耗时0.947毫秒=====
2024-04-10 16:51:24.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:51:24.533 +08:00 [DBG] =========Yi-SQL耗时0.8849毫秒=====
2024-04-10 16:51:24.534 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:51:24.534 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 18.6688ms
2024-04-10 16:51:24.535 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:51:24.606 +08:00 [INF] 2024/4/10 16:51:24：cc,M8jg5b46Fm78Kni6vX3c2Q连接服务端success，当前已连接0个
2024-04-10 16:51:24.875 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:51:24.875 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:51:24.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:51:24.878 +08:00 [DBG] =========Yi-SQL耗时2.1156毫秒=====
2024-04-10 16:51:24.881 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:51:24.882 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.9531ms
2024-04-10 16:51:24.882 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:51:24.894 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:51:24.894 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:51:24.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:51:24.899 +08:00 [DBG] =========Yi-SQL耗时2.6289毫秒=====
2024-04-10 16:51:24.901 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:51:24.901 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.1338ms
2024-04-10 16:51:24.901 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:51:24.908 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:51:24.911 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:51:24.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:51:24.914 +08:00 [DBG] =========Yi-SQL耗时0.8187毫秒=====
2024-04-10 16:51:24.919 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:51:24.920 +08:00 [DBG] =========Yi-SQL耗时1.1438毫秒=====
2024-04-10 16:51:24.921 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:51:24.921 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 9.9353ms
2024-04-10 16:51:24.921 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:51:29.367 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:51:29.369 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:51:29.369 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:51:29.402 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 16:51:29.402 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 16:51:29.402 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 16:51:29.402 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 33.5749ms
2024-04-10 16:51:29.403 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:53:07.610 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:53:07.611 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:53:07.613 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:53:07.615 +08:00 [DBG] =========Yi-SQL耗时1.8666毫秒=====
2024-04-10 16:53:07.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:53:07.624 +08:00 [DBG] =========Yi-SQL耗时0.5528毫秒=====
2024-04-10 16:53:07.625 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:53:07.626 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 15.0768ms
2024-04-10 16:53:07.626 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:53:10.498 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:53:10.498 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:53:11.144 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:53:11.147 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:53:11.147 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:53:11.164 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:53:11.165 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:53:11.171 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:53:11.172 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.5079ms
2024-04-10 16:53:11.172 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:53:11.406 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:53:11.407 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:53:11.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:53:11.413 +08:00 [DBG] =========Yi-SQL耗时2.0364毫秒=====
2024-04-10 16:53:11.414 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:53:11.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:53:11.431 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:53:11.431 +08:00 [DBG] =========Yi-SQL耗时2.0395毫秒=====
2024-04-10 16:53:11.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:53:11.434 +08:00 [DBG] =========Yi-SQL耗时0.574毫秒=====
2024-04-10 16:53:11.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:53:11.435 +08:00 [DBG] =========Yi-SQL耗时0.7079毫秒=====
2024-04-10 16:53:11.436 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:53:11.436 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 28.9621ms
2024-04-10 16:53:11.437 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:53:11.500 +08:00 [INF] 2024/4/10 16:53:11：cc,LfpMXnuAf-Y3MQcE71q-tQ连接服务端success，当前已连接0个
2024-04-10 16:53:11.717 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:53:11.717 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:53:11.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:53:11.719 +08:00 [DBG] =========Yi-SQL耗时0.8804毫秒=====
2024-04-10 16:53:11.721 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:53:11.722 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 4.6545ms
2024-04-10 16:53:11.722 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:53:11.733 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:53:11.733 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:53:11.733 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:53:11.734 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:53:11.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:53:11.736 +08:00 [DBG] =========Yi-SQL耗时1.473毫秒=====
2024-04-10 16:53:11.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:53:11.740 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:53:11.740 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.9812ms
2024-04-10 16:53:11.740 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:53:11.743 +08:00 [DBG] =========Yi-SQL耗时3.3897毫秒=====
2024-04-10 16:53:11.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:53:11.747 +08:00 [DBG] =========Yi-SQL耗时1.1121毫秒=====
2024-04-10 16:53:11.751 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:53:11.752 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 18.0501ms
2024-04-10 16:53:11.752 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:53:16.374 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:53:16.376 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:53:16.377 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:53:16.408 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 16:53:16.408 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 16:53:16.408 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 16:53:16.408 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 31.369ms
2024-04-10 16:53:16.408 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:54:23.120 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 16:54:23.126 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 16:54:23.815 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:54:23.817 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 16:54:23.818 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 16:54:23.838 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:54:23.839 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:54:23.842 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 16:54:23.843 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.7426ms
2024-04-10 16:54:23.843 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:54:24.197 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:54:24.198 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 16:54:24.198 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:54:24.198 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 16:54:24.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:54:24.217 +08:00 [DBG] =========Yi-SQL耗时1.8916毫秒=====
2024-04-10 16:54:24.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 16:54:24.221 +08:00 [DBG] =========Yi-SQL耗时0.4515毫秒=====
2024-04-10 16:54:24.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 16:54:24.222 +08:00 [DBG] =========Yi-SQL耗时0.5065毫秒=====
2024-04-10 16:54:24.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:54:24.223 +08:00 [DBG] =========Yi-SQL耗时0.6541毫秒=====
2024-04-10 16:54:24.224 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:54:24.224 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 25.5087ms
2024-04-10 16:54:24.224 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 16:54:24.279 +08:00 [INF] 2024/4/10 16:54:24：cc,OXWAsJfDfgnsx2ARdo9nOg连接服务端success，当前已连接0个
2024-04-10 16:54:24.524 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:54:24.524 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:54:24.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 16:54:24.526 +08:00 [DBG] =========Yi-SQL耗时1.18毫秒=====
2024-04-10 16:54:24.530 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 16:54:24.530 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.3417ms
2024-04-10 16:54:24.530 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 16:54:24.539 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:54:24.543 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 16:54:24.547 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:54:24.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 16:54:24.547 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:54:24.550 +08:00 [DBG] =========Yi-SQL耗时2.075毫秒=====
2024-04-10 16:54:24.551 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:54:24.552 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.806ms
2024-04-10 16:54:24.552 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 16:54:24.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:54:24.557 +08:00 [DBG] =========Yi-SQL耗时1.4161毫秒=====
2024-04-10 16:54:24.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:54:24.564 +08:00 [DBG] =========Yi-SQL耗时0.6841毫秒=====
2024-04-10 16:54:24.567 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:54:24.568 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 20.0095ms
2024-04-10 16:54:24.568 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:54:35.007 +08:00 [INF] CORS policy execution successful.
2024-04-10 16:54:35.009 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:54:35.009 +08:00 [INF] Route matched with {action = "Post", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.FileManager.FileGetListOutputDto]] Post(Microsoft.AspNetCore.Http.IFormFileCollection) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 16:54:35.038 +08:00 [ERR] ---------- RemoteServiceErrorInfo ----------
{
  "code": null,
  "message": "对不起，在处理您的请求期间产生了一个服务器内部错误！！",
  "details": null,
  "data": {},
  "validationErrors": null
}

2024-04-10 16:54:35.038 +08:00 [ERR] 文件上传为空！
System.ArgumentException: 文件上传为空！
   at Yi.Framework.Rbac.Application.Services.FileService.Post(IFormFileCollection file) in D:\vs_space\Yi\Yi.Abp.Net8\module\rbac\Yi.Framework.Rbac.Application\Services\FileService.cs:line 81
   at lambda_method1651(Closure, Object)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
2024-04-10 16:54:35.038 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Http.RemoteServiceErrorResponse'.
2024-04-10 16:54:35.038 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application) in 29.4627ms
2024-04-10 16:54:35.038 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Post (Yi.Framework.Rbac.Application)'
2024-04-10 16:59:21.257 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 16:59:21.257 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 16:59:21.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 16:59:21.351 +08:00 [DBG] =========Yi-SQL耗时86.4474毫秒=====
2024-04-10 16:59:21.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 16:59:21.357 +08:00 [DBG] =========Yi-SQL耗时2.457毫秒=====
2024-04-10 16:59:21.361 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 16:59:21.361 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 104.1988ms
2024-04-10 16:59:21.361 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:00:00.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-10 17:00:00.107 +08:00 [DBG] =========Yi-SQL耗时27.3578毫秒=====
2024-04-10 17:00:00.622 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-10 17:00:00.624 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-10 17:00:34.224 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:00:34.224 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 17:00:34.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 17:00:34.230 +08:00 [DBG] =========Yi-SQL耗时2.0744毫秒=====
2024-04-10 17:00:34.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 17:00:34.243 +08:00 [DBG] =========Yi-SQL耗时0.8262毫秒=====
2024-04-10 17:00:34.245 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:00:34.245 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 20.7474ms
2024-04-10 17:00:34.245 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:00:47.594 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 17:00:47.596 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 17:00:48.384 +08:00 [INF] CORS policy execution successful.
2024-04-10 17:00:48.387 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 17:00:48.388 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 17:00:48.406 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:00:48.408 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 17:00:48.409 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 17:00:48.410 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 2.127ms
2024-04-10 17:00:48.410 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:00:48.667 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 17:00:48.667 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 17:00:48.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 17:00:48.673 +08:00 [INF] CORS policy execution successful.
2024-04-10 17:00:48.675 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 17:00:48.683 +08:00 [DBG] =========Yi-SQL耗时10.5906毫秒=====
2024-04-10 17:00:48.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 17:00:48.689 +08:00 [DBG] =========Yi-SQL耗时4.0688毫秒=====
2024-04-10 17:00:48.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 17:00:48.692 +08:00 [DBG] =========Yi-SQL耗时2.0956毫秒=====
2024-04-10 17:00:48.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 17:00:48.695 +08:00 [DBG] =========Yi-SQL耗时2.1791毫秒=====
2024-04-10 17:00:48.696 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:00:48.696 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 29.4678ms
2024-04-10 17:00:48.696 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 17:00:48.742 +08:00 [INF] 2024/4/10 17:00:48：cc,AkYi6cMkg9ENLT7p9DQtUw连接服务端success，当前已连接0个
2024-04-10 17:00:49.037 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:00:49.037 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 17:00:49.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 17:00:49.041 +08:00 [DBG] =========Yi-SQL耗时2.5818毫秒=====
2024-04-10 17:00:49.043 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 17:00:49.043 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.2948ms
2024-04-10 17:00:49.044 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:00:49.054 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 17:00:49.054 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 17:00:49.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 17:00:49.059 +08:00 [DBG] =========Yi-SQL耗时3.5224毫秒=====
2024-04-10 17:00:49.061 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:00:49.061 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 17:00:49.063 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:00:49.064 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.8018ms
2024-04-10 17:00:49.064 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 17:00:49.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 17:00:49.067 +08:00 [DBG] =========Yi-SQL耗时2.8281毫秒=====
2024-04-10 17:00:49.069 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 17:00:49.070 +08:00 [DBG] =========Yi-SQL耗时1.0295毫秒=====
2024-04-10 17:00:49.072 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:00:49.073 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 11.653ms
2024-04-10 17:00:49.073 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:01:28.556 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 17:01:28.560 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 17:01:29.341 +08:00 [INF] CORS policy execution successful.
2024-04-10 17:01:29.343 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 17:01:29.344 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 17:01:29.392 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:01:29.393 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 17:01:29.396 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 17:01:29.397 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.6965ms
2024-04-10 17:01:29.397 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:01:29.688 +08:00 [INF] CORS policy execution successful.
2024-04-10 17:01:29.690 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 17:01:29.690 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 17:01:29.691 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 17:01:29.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 17:01:29.707 +08:00 [DBG] =========Yi-SQL耗时2.2556毫秒=====
2024-04-10 17:01:29.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 17:01:29.741 +08:00 [DBG] =========Yi-SQL耗时0.8807毫秒=====
2024-04-10 17:01:29.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 17:01:29.742 +08:00 [DBG] =========Yi-SQL耗时0.5498毫秒=====
2024-04-10 17:01:29.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 17:01:29.744 +08:00 [DBG] =========Yi-SQL耗时0.9989毫秒=====
2024-04-10 17:01:29.745 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:01:29.745 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 54.8301ms
2024-04-10 17:01:29.746 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 17:01:29.778 +08:00 [INF] 2024/4/10 17:01:29：cc,E_9PjagF1vjt3tPgMTiiYw连接服务端success，当前已连接0个
2024-04-10 17:01:30.119 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:01:30.119 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 17:01:30.120 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 17:01:30.121 +08:00 [DBG] =========Yi-SQL耗时1.0464毫秒=====
2024-04-10 17:01:30.124 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 17:01:30.126 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 6.8978ms
2024-04-10 17:01:30.126 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:01:30.145 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 17:01:30.145 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:01:30.145 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 17:01:30.146 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 17:01:30.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 17:01:30.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 17:01:30.151 +08:00 [DBG] =========Yi-SQL耗时3.4565毫秒=====
2024-04-10 17:01:30.156 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:01:30.157 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 11.404ms
2024-04-10 17:01:30.157 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 17:01:30.272 +08:00 [DBG] =========Yi-SQL耗时122.193毫秒=====
2024-04-10 17:01:30.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 17:01:30.284 +08:00 [DBG] =========Yi-SQL耗时5.4461毫秒=====
2024-04-10 17:01:30.286 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:01:30.286 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 140.6998ms
2024-04-10 17:01:30.286 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:01:55.014 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:01:55.014 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 17:01:55.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 17:01:55.017 +08:00 [DBG] =========Yi-SQL耗时1.6643毫秒=====
2024-04-10 17:01:55.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 17:01:55.025 +08:00 [DBG] =========Yi-SQL耗时0.6389毫秒=====
2024-04-10 17:01:55.028 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:01:55.028 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 13.9963ms
2024-04-10 17:01:55.028 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:05:41.553 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 17:05:41.556 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-10 17:05:42.373 +08:00 [INF] CORS policy execution successful.
2024-04-10 17:05:42.377 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-10 17:05:42.377 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-10 17:05:42.383 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:05:42.383 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 17:05:42.387 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-10 17:05:42.388 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.3951ms
2024-04-10 17:05:42.388 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:05:42.605 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 17:05:42.608 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-10 17:05:42.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 17:05:42.613 +08:00 [INF] CORS policy execution successful.
2024-04-10 17:05:42.615 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-10 17:05:42.758 +08:00 [DBG] =========Yi-SQL耗时146.8451毫秒=====
2024-04-10 17:05:42.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-10 17:05:42.762 +08:00 [DBG] =========Yi-SQL耗时1.6631毫秒=====
2024-04-10 17:05:42.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-10 17:05:42.765 +08:00 [DBG] =========Yi-SQL耗时1.8085毫秒=====
2024-04-10 17:05:42.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-10 17:05:42.770 +08:00 [INF] 2024/4/10 17:05:42：cc,orax9H-Mt_wAzTmO7sJuIQ连接服务端success，当前已连接0个
2024-04-10 17:05:42.771 +08:00 [DBG] =========Yi-SQL耗时2.915毫秒=====
2024-04-10 17:05:42.772 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:05:42.773 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 165.0728ms
2024-04-10 17:05:42.773 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-10 17:05:43.172 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:05:43.172 +08:00 [INF] Route matched with {action = "Get", controller = "File", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(System.Guid, System.Nullable`1[System.Boolean]) on controller Yi.Framework.Rbac.Application.Services.FileService (Yi.Framework.Rbac.Application).
2024-04-10 17:05:43.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","filesize","filename","filepath","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "file"   WHERE ( "id" = N'ab0bdda9-f700-bb50-c72f-3a11d8a0c103' )   LIMIT 1 offset 0
===============================

2024-04-10 17:05:43.174 +08:00 [DBG] =========Yi-SQL耗时1.3234毫秒=====
2024-04-10 17:05:43.177 +08:00 [INF] Executing FileContentResult, sending file with download name '' ...
2024-04-10 17:05:43.177 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application) in 5.0076ms
2024-04-10 17:05:43.177 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.FileService.Get (Yi.Framework.Rbac.Application)'
2024-04-10 17:05:43.190 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:05:43.190 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 17:05:43.194 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-10 17:05:43.195 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListInput) on controller Yi.Framework.Rbac.Application.Services.QuestionService (Yi.Abp.Application).
2024-04-10 17:05:43.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-10 17:05:43.200 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-10 17:05:43.201 +08:00 [DBG] =========Yi-SQL耗时3.2525毫秒=====
2024-04-10 17:05:43.205 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:05:43.205 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 11.2434ms
2024-04-10 17:05:43.205 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-10 17:05:43.310 +08:00 [DBG] =========Yi-SQL耗时109.3611毫秒=====
2024-04-10 17:05:43.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-10 17:05:43.313 +08:00 [DBG] =========Yi-SQL耗时1.023毫秒=====
2024-04-10 17:05:43.316 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Question.QuestionGetListOutputDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-10 17:05:43.316 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application) in 120.6309ms
2024-04-10 17:05:43.316 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.QuestionService.GetListAsync (Yi.Abp.Application)'
2024-04-10 17:10:34.177 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-10 17:10:34.178 +08:00 [INF] Executed endpoint '/hub/main'
