2024-04-09 11:53:51.597 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-09 11:53:51.613 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-09 11:53:57.764 +08:00 [INF] Loaded ABP modules:
2024-04-09 11:53:57.764 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-09 11:53:57.764 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-09 11:53:57.764 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-09 11:53:57.764 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-09 11:53:57.764 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-09 11:53:57.764 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-09 11:53:57.764 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-09 11:53:57.764 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-09 11:53:57.764 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-09 11:53:57.764 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-09 11:53:57.764 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-09 11:53:57.764 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-09 11:53:57.764 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-09 11:53:57.764 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-09 11:53:57.764 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-09 11:53:57.764 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-09 11:53:57.764 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-09 11:53:57.764 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-09 11:53:57.764 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-09 11:53:57.764 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-09 11:53:57.764 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-09 11:53:57.764 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-09 11:53:57.764 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-09 11:53:57.764 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-09 11:53:57.764 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-09 11:53:57.764 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-09 11:53:57.764 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-09 11:53:57.765 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-09 11:53:57.765 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-09 11:53:57.765 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-09 11:53:57.765 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-09 11:53:57.765 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-09 11:53:57.765 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-09 11:53:57.765 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-09 11:53:57.765 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-09 11:53:57.771 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-09 11:53:57.777 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-09 11:53:58.796 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:58.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:58.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-09 11:53:58.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:58.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-09 11:53:58.871 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.882 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:58.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:58.892 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.893 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-09 11:53:58.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-09 11:53:58.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-09 11:53:58.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-09 11:53:58.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-09 11:53:58.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-09 11:53:58.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-09 11:53:58.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-09 11:53:58.902 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-09 11:53:58.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-09 11:53:58.903 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-09 11:53:58.904 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:58.912 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.912 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-09 11:53:58.914 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.921 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:58.923 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:58.930 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.930 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-09 11:53:58.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-09 11:53:58.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-09 11:53:58.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-09 11:53:58.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-09 11:53:58.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-09 11:53:58.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-09 11:53:58.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-09 11:53:58.936 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:58.941 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-09 11:53:58.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:58.949 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.949 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:58.955 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-09 11:53:58.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-09 11:53:58.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-09 11:53:58.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-09 11:53:58.957 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-09 11:53:58.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 11:53:58.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 11:53:58.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-09 11:53:58.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-09 11:53:58.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-09 11:53:58.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-09 11:53:58.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-09 11:53:58.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-09 11:53:58.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-09 11:53:58.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-09 11:53:58.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:58.965 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-09 11:53:58.967 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:58.973 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:58.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.980 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-09 11:53:58.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-09 11:53:58.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-09 11:53:58.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-09 11:53:58.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-09 11:53:58.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-09 11:53:58.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-09 11:53:58.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-09 11:53:58.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-09 11:53:58.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-09 11:53:58.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-09 11:53:58.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-09 11:53:58.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:58.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-09 11:53:58.991 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:58.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:58.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.004 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-09 11:53:59.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-09 11:53:59.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-09 11:53:59.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-09 11:53:59.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-09 11:53:59.006 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-09 11:53:59.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-09 11:53:59.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-09 11:53:59.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-09 11:53:59.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.021 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-09 11:53:59.029 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-09 11:53:59.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-09 11:53:59.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-09 11:53:59.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-09 11:53:59.038 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.044 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.046 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.047 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.052 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-09 11:53:59.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-09 11:53:59.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-09 11:53:59.054 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.054 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-09 11:53:59.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-09 11:53:59.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-09 11:53:59.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-09 11:53:59.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-09 11:53:59.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.087 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.087 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-09 11:53:59.089 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-09 11:53:59.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-09 11:53:59.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-09 11:53:59.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-09 11:53:59.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-09 11:53:59.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-09 11:53:59.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-09 11:53:59.092 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-09 11:53:59.093 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-09 11:53:59.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-09 11:53:59.121 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.121 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-09 11:53:59.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-09 11:53:59.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-09 11:53:59.122 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-09 11:53:59.130 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-09 11:53:59.143 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-09 11:53:59.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-09 11:53:59.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-09 11:53:59.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-09 11:53:59.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 11:53:59.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 11:53:59.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-09 11:53:59.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-09 11:53:59.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-09 11:53:59.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-09 11:53:59.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-09 11:53:59.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-09 11:53:59.145 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-09 11:53:59.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.158 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.164 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-09 11:53:59.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-09 11:53:59.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-09 11:53:59.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-09 11:53:59.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-09 11:53:59.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-09 11:53:59.177 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.183 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.190 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-09 11:53:59.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-09 11:53:59.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-09 11:53:59.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-09 11:53:59.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-09 11:53:59.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 11:53:59.194 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 11:53:59.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-09 11:53:59.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-09 11:53:59.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-09 11:53:59.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-09 11:53:59.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-09 11:53:59.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-09 11:53:59.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-09 11:53:59.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.195 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.201 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-09 11:53:59.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.208 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.213 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-09 11:53:59.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-09 11:53:59.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-09 11:53:59.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-09 11:53:59.224 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-09 11:53:59.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-09 11:53:59.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-09 11:53:59.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-09 11:53:59.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-09 11:53:59.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-09 11:53:59.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-09 11:53:59.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-09 11:53:59.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-09 11:53:59.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-09 11:53:59.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-09 11:53:59.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-09 11:53:59.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-09 11:53:59.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-09 11:53:59.240 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-09 11:53:59.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-09 11:53:59.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-09 11:53:59.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-09 11:53:59.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-09 11:53:59.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-09 11:53:59.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 11:53:59.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 11:53:59.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-09 11:53:59.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.241 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-09 11:53:59.242 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-09 11:53:59.242 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.242 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.243 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.249 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-09 11:53:59.251 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-09 11:53:59.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-09 11:53:59.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-09 11:53:59.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-09 11:53:59.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-09 11:53:59.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.270 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-09 11:53:59.272 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.282 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.282 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-09 11:53:59.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-09 11:53:59.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-09 11:53:59.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-09 11:53:59.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-09 11:53:59.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.289 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-09 11:53:59.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.296 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.298 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.303 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-09 11:53:59.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-09 11:53:59.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.314 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-09 11:53:59.317 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.322 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-09 11:53:59.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.336 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-09 11:53:59.339 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.342 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.350 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.350 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-09 11:53:59.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.352 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-09 11:53:59.352 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-09 11:53:59.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-09 11:53:59.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-09 11:53:59.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-09 11:53:59.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-09 11:53:59.353 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-09 11:53:59.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-09 11:53:59.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-09 11:53:59.354 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-09 11:53:59.363 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.369 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.374 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-09 11:53:59.377 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-09 11:53:59.384 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.389 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.395 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-09 11:53:59.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-09 11:53:59.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-09 11:53:59.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-09 11:53:59.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-09 11:53:59.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-09 11:53:59.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-09 11:53:59.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-09 11:53:59.406 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.413 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-09 11:53:59.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-09 11:53:59.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-09 11:53:59.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-09 11:53:59.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.422 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.422 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.428 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.428 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-09 11:53:59.430 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.440 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-09 11:53:59.442 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.442 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-09 11:53:59.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-09 11:53:59.443 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.443 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.444 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.449 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.449 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-09 11:53:59.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.457 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.463 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.463 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-09 11:53:59.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-09 11:53:59.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.467 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.468 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.474 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.474 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-09 11:53:59.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-09 11:53:59.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-09 11:53:59.496 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.500 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-09 11:53:59.509 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-09 11:53:59.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-09 11:53:59.510 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.510 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.517 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-09 11:53:59.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.526 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.532 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-09 11:53:59.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-09 11:53:59.535 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-09 11:53:59.535 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-09 11:53:59.535 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.544 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.544 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-09 11:53:59.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.551 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.557 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-09 11:53:59.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.559 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-09 11:53:59.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.576 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-09 11:53:59.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-09 11:53:59.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.585 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-09 11:53:59.587 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.597 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-09 11:53:59.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.606 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-09 11:53:59.608 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.620 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-09 11:53:59.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-09 11:53:59.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-09 11:53:59.632 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.637 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-09 11:53:59.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-09 11:53:59.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-09 11:53:59.645 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.645 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-09 11:53:59.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-09 11:53:59.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-09 11:53:59.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-09 11:53:59.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-09 11:53:59.646 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-09 11:53:59.647 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.647 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-09 11:53:59.657 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.667 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.667 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-09 11:53:59.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-09 11:53:59.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-09 11:53:59.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-09 11:53:59.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-09 11:53:59.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-09 11:53:59.678 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-09 11:53:59.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.692 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.693 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.698 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.699 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-09 11:53:59.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.708 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.708 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.715 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-09 11:53:59.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-09 11:53:59.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.734 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-09 11:53:59.743 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.745 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.746 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-09 11:53:59.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-09 11:53:59.767 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 11:53:59.768 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-09 11:53:59.789 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-09 11:53:59.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."id" is '主键'
===============================

2024-04-09 11:53:59.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."project" is '项目'
===============================

2024-04-09 11:53:59.803 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."status" is '状态'
===============================

2024-04-09 11:53:59.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."category" is '类别'
===============================

2024-04-09 11:53:59.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."impact" is '影响'
===============================

2024-04-09 11:53:59.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."priority" is '优先级'
===============================

2024-04-09 11:53:59.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."title" is '标题'
===============================

2024-04-09 11:53:59.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."description" is '详情'
===============================

2024-04-09 11:53:59.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."solve_user" is '对应人'
===============================

2024-04-09 11:53:59.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."creationtime" is '创建时间'
===============================

2024-04-09 11:53:59.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-09 11:53:59.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.818 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.818 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.824 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-09 11:53:59.826 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-09 11:53:59.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-09 11:53:59.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-09 11:53:59.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-09 11:53:59.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-09 11:53:59.828 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.833 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.833 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-09 11:53:59.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.841 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-09 11:53:59.848 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-09 11:53:59.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-09 11:53:59.849 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-09 11:53:59.857 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 11:53:59.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.861 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-09 11:53:59.868 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-09 11:53:59.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-09 11:53:59.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-09 11:53:59.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-09 11:53:59.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 11:53:59.874 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-09 11:53:59.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 11:53:59.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.016 +08:00 [DBG] =========Yi-SQL耗时23.0271毫秒=====
2024-04-09 11:54:00.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.066 +08:00 [DBG] =========Yi-SQL耗时2.7517毫秒=====
2024-04-09 11:54:00.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.078 +08:00 [DBG] =========Yi-SQL耗时2.8217毫秒=====
2024-04-09 11:54:00.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.093 +08:00 [DBG] =========Yi-SQL耗时4.0307毫秒=====
2024-04-09 11:54:00.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.098 +08:00 [DBG] =========Yi-SQL耗时1.6726毫秒=====
2024-04-09 11:54:00.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.103 +08:00 [DBG] =========Yi-SQL耗时2.22毫秒=====
2024-04-09 11:54:00.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.110 +08:00 [DBG] =========Yi-SQL耗时2.0148毫秒=====
2024-04-09 11:54:00.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.114 +08:00 [DBG] =========Yi-SQL耗时1.4975毫秒=====
2024-04-09 11:54:00.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.117 +08:00 [DBG] =========Yi-SQL耗时0.5406毫秒=====
2024-04-09 11:54:00.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.120 +08:00 [DBG] =========Yi-SQL耗时0.6195毫秒=====
2024-04-09 11:54:00.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.124 +08:00 [DBG] =========Yi-SQL耗时1.7176毫秒=====
2024-04-09 11:54:00.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.129 +08:00 [DBG] =========Yi-SQL耗时1.4264毫秒=====
2024-04-09 11:54:00.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.133 +08:00 [DBG] =========Yi-SQL耗时1.3768毫秒=====
2024-04-09 11:54:00.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.137 +08:00 [DBG] =========Yi-SQL耗时1.8418毫秒=====
2024-04-09 11:54:00.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 11:54:00.142 +08:00 [DBG] =========Yi-SQL耗时1.3219毫秒=====
2024-04-09 11:54:00.151 +08:00 [DBG] 耗时-2379ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-09 11:54:00.297 +08:00 [DBG] 耗时-143ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-09 11:54:00.303 +08:00 [DBG] 耗时-6ms,已加载模块-Volo.Abp.EventBus
2024-04-09 11:54:00.342 +08:00 [DBG] 耗时-38ms,已加载模块-Volo.Abp.AspNetCore
2024-04-09 11:54:00.351 +08:00 [DBG] 耗时-8ms,已加载模块-Volo.Abp.Quartz
2024-04-09 11:54:00.375 +08:00 [DBG] 耗时-23ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-09 11:54:00.379 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-09 11:54:00.736 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-09 11:54:00.870 +08:00 [DBG] 耗时-490ms,已加载模块-Yi.Abp.Web
2024-04-09 11:54:00.881 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-09 11:54:00.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-09 11:54:00.901 +08:00 [DBG] =========Yi-SQL耗时1.9946毫秒=====
2024-04-09 11:54:01.054 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-09 11:54:01.055 +08:00 [DBG] 耗时-184ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-09 11:54:01.056 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【3275ms】==========
2024-04-09 11:54:01.191 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-09 11:54:01.191 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-09 11:54:01.191 +08:00 [INF] Hosting environment: Development
2024-04-09 11:54:01.191 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-09 11:54:02.726 +08:00 [INF] Sending file. Request path: '/swagger-ui.css'. Physical path: 'N/A'
2024-04-09 11:54:02.723 +08:00 [INF] Sending file. Request path: '/swagger-ui-standalone-preset.js'. Physical path: 'N/A'
2024-04-09 11:54:02.737 +08:00 [INF] Sending file. Request path: '/swagger-ui-bundle.js'. Physical path: 'N/A'
2024-04-09 11:57:54.316 +08:00 [INF] CORS policy execution successful.
2024-04-09 11:57:54.414 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 11:57:54.414 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 11:57:54.421 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 11:57:54.446 +08:00 [INF] CORS policy execution successful.
2024-04-09 11:57:54.453 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 11:57:54.453 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 11:57:54.629 +08:00 [INF] 2024/4/9 11:57:54：cc,ppXsOK-8WRb8N1bJvepETg连接服务端success，当前已连接0个
2024-04-09 11:57:54.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:57:54.678 +08:00 [DBG] =========Yi-SQL耗时12.0678毫秒=====
2024-04-09 11:57:54.703 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 11:57:54.708 +08:00 [DBG] =========Yi-SQL耗时4.3978毫秒=====
2024-04-09 11:57:54.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 11:57:54.720 +08:00 [DBG] =========Yi-SQL耗时0.5643毫秒=====
2024-04-09 11:57:54.760 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 11:57:54.850 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 391.6588ms
2024-04-09 11:57:54.851 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 11:57:54.859 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 11:57:54.861 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 11:57:54.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:57:54.864 +08:00 [DBG] =========Yi-SQL耗时0.7273毫秒=====
2024-04-09 11:57:54.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 11:57:54.868 +08:00 [DBG] =========Yi-SQL耗时0.4769毫秒=====
2024-04-09 11:57:54.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 11:57:54.869 +08:00 [DBG] =========Yi-SQL耗时0.5612毫秒=====
2024-04-09 11:57:54.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:57:54.871 +08:00 [DBG] =========Yi-SQL耗时0.9536毫秒=====
2024-04-09 11:57:54.896 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:57:54.900 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 39.2375ms
2024-04-09 11:57:54.901 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:01.782 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:01.782 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:01.782 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:01.792 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 11:58:01.792 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 11:58:01.792 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:58:01.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:58:01.815 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:58:01.817 +08:00 [DBG] =========Yi-SQL耗时1.6408毫秒=====
2024-04-09 11:58:01.859 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:58:01.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 11:58:01.863 +08:00 [DBG] =========Yi-SQL耗时2.5509毫秒=====
2024-04-09 11:58:01.865 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 72.3653ms
2024-04-09 11:58:01.865 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:01.894 +08:00 [DBG] =========Yi-SQL耗时78.7297毫秒=====
2024-04-09 11:58:01.895 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:58:01.895 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 102.9274ms
2024-04-09 11:58:01.895 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:01.897 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:58:01.914 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 121.0895ms
2024-04-09 11:58:01.914 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:09.573 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:09.574 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:58:09.575 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:09.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 11:58:09.579 +08:00 [DBG] =========Yi-SQL耗时1.8233毫秒=====
2024-04-09 11:58:09.579 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:58:09.596 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:58:09.623 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 49.3895ms
2024-04-09 11:58:09.623 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:09.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:58:09.660 +08:00 [DBG] =========Yi-SQL耗时1.3764毫秒=====
2024-04-09 11:58:09.672 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 11:58:09.675 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 95.7483ms
2024-04-09 11:58:09.675 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:13.365 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:13.365 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:58:13.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 11:58:13.369 +08:00 [DBG] =========Yi-SQL耗时1.0167毫秒=====
2024-04-09 11:58:13.385 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:58:13.392 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 27.2264ms
2024-04-09 11:58:13.392 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:27.131 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:58:27.131 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:58:27.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 11:58:27.134 +08:00 [DBG] =========Yi-SQL耗时1.5909毫秒=====
2024-04-09 11:58:27.148 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:58:27.160 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 29.118ms
2024-04-09 11:58:27.160 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:05.744 +08:00 [INF] CORS policy execution successful.
2024-04-09 11:59:05.745 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:05.748 +08:00 [INF] Route matched with {action = "Create", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:05.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "menu"  
           ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query")
     VALUES
           (N'da046a5f-e94d-adec-43c8-3a11d32f463e',0,CAST('2024-04-09 11:59:05.761' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,100,1,N'问题查询',2,N'question:list:query',N'6799560e-c779-66bf-d6aa-3a11ce1e28dd',null,null,0,0,1,null,null,null) ;
===============================

2024-04-09 11:59:05.825 +08:00 [DBG] =========Yi-SQL耗时8.996毫秒=====
2024-04-09 11:59:05.828 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 11:59:05.828 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application) in 80.5685ms
2024-04-09 11:59:05.829 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:05.855 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:05.855 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:05.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 11:59:05.858 +08:00 [DBG] =========Yi-SQL耗时0.7753毫秒=====
2024-04-09 11:59:05.871 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:59:05.887 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 31.9811ms
2024-04-09 11:59:05.888 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:32.194 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:32.195 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:32.197 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:32.197 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:32.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 11:59:32.200 +08:00 [DBG] =========Yi-SQL耗时1.7725毫秒=====
2024-04-09 11:59:32.206 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:59:32.206 +08:00 [DBG] =========Yi-SQL耗时0.7661毫秒=====
2024-04-09 11:59:32.212 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 11:59:32.212 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 15.0343ms
2024-04-09 11:59:32.212 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:32.219 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:59:32.227 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 32.4327ms
2024-04-09 11:59:32.227 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:37.937 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:37.938 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:37.938 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:37.938 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:37.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'da046a5f-e94d-adec-43c8-3a11d32f463e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:59:37.941 +08:00 [DBG] =========Yi-SQL耗时1.6117毫秒=====
2024-04-09 11:59:37.945 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 11:59:37.945 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 7.2068ms
2024-04-09 11:59:37.945 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:37.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 11:59:37.953 +08:00 [DBG] =========Yi-SQL耗时0.8621毫秒=====
2024-04-09 11:59:37.965 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:59:37.969 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 31.644ms
2024-04-09 11:59:37.969 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:41.254 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:41.254 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:41.254 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:41.255 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:41.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 11:59:41.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:59:41.258 +08:00 [DBG] =========Yi-SQL耗时1.2504毫秒=====
2024-04-09 11:59:41.281 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:59:41.289 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 34.7171ms
2024-04-09 11:59:41.289 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:41.319 +08:00 [DBG] =========Yi-SQL耗时62.0928毫秒=====
2024-04-09 11:59:41.321 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 11:59:41.322 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 66.8408ms
2024-04-09 11:59:41.322 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:47.824 +08:00 [INF] CORS policy execution successful.
2024-04-09 11:59:47.826 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:47.829 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:47.842 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:59:47.843 +08:00 [DBG] =========Yi-SQL耗时0.8046毫秒=====
2024-04-09 11:59:47.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-09 11:59:47.866' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=null,"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'question',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/question/list/index',"query"=N'question:list:list'  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-09 11:59:47.879 +08:00 [DBG] =========Yi-SQL耗时1.1449毫秒=====
2024-04-09 11:59:47.880 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 11:59:47.880 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 51.3555ms
2024-04-09 11:59:47.880 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:47.907 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:47.907 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:47.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 11:59:47.912 +08:00 [DBG] =========Yi-SQL耗时1.1781毫秒=====
2024-04-09 11:59:47.926 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:59:47.935 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 26.6113ms
2024-04-09 11:59:47.935 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:54.128 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:54.134 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:54.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 11:59:54.167 +08:00 [DBG] =========Yi-SQL耗时5.3321毫秒=====
2024-04-09 11:59:54.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 11:59:54.172 +08:00 [DBG] =========Yi-SQL耗时1.1755毫秒=====
2024-04-09 11:59:54.182 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:59:54.193 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 58.1377ms
2024-04-09 11:59:54.193 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:57.253 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:57.253 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:57.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 11:59:57.257 +08:00 [DBG] =========Yi-SQL耗时1.3484毫秒=====
2024-04-09 11:59:57.261 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:57.262 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 11:59:57.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 11:59:57.264 +08:00 [DBG] =========Yi-SQL耗时0.8963毫秒=====
2024-04-09 11:59:57.268 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 11:59:57.268 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 6.7415ms
2024-04-09 11:59:57.269 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 11:59:57.277 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 11:59:57.281 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 27.2266ms
2024-04-09 11:59:57.281 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:00.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-09 12:00:00.032 +08:00 [DBG] =========Yi-SQL耗时3.441毫秒=====
2024-04-09 12:00:00.448 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-09 12:00:00.449 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-09 12:00:01.790 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:00:01.792 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:01.792 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:01.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:00:01.800 +08:00 [DBG] =========Yi-SQL耗时1.9722毫秒=====
2024-04-09 12:00:01.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-09 12:00:01.810' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=N'question:list:list',"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'question',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/question/list/index',"query"=N''  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-09 12:00:01.812 +08:00 [DBG] =========Yi-SQL耗时1.3946毫秒=====
2024-04-09 12:00:01.813 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:00:01.813 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 20.9117ms
2024-04-09 12:00:01.813 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:01.855 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:01.855 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:01.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:00:01.858 +08:00 [DBG] =========Yi-SQL耗时1.1766毫秒=====
2024-04-09 12:00:01.875 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:00:01.880 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 24.743ms
2024-04-09 12:00:01.880 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:10.872 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:10.873 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:10.873 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:10.873 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:10.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:00:10.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:00:10.876 +08:00 [DBG] =========Yi-SQL耗时1.3313毫秒=====
2024-04-09 12:00:10.876 +08:00 [DBG] =========Yi-SQL耗时1.5688毫秒=====
2024-04-09 12:00:10.881 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:00:10.883 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 9.7318ms
2024-04-09 12:00:10.883 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:10.893 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:00:10.897 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 23.7958ms
2024-04-09 12:00:10.897 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:29.558 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:29.559 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:29.559 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:29.560 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:29.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:00:29.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:00:29.562 +08:00 [DBG] =========Yi-SQL耗时1.0293毫秒=====
2024-04-09 12:00:29.564 +08:00 [DBG] =========Yi-SQL耗时2.4279毫秒=====
2024-04-09 12:00:29.567 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:00:29.571 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 11.7945ms
2024-04-09 12:00:29.572 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:29.582 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:00:29.586 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 26.8933ms
2024-04-09 12:00:29.586 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:41.656 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:00:41.657 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:41.657 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:41.659 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:00:41.660 +08:00 [DBG] =========Yi-SQL耗时0.8949毫秒=====
2024-04-09 12:00:41.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-09 12:00:41.664' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=N'question:questiones:list',"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'question',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/question/questiones/index',"query"=N''  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-09 12:00:41.665 +08:00 [DBG] =========Yi-SQL耗时0.7904毫秒=====
2024-04-09 12:00:41.666 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:00:41.666 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 8.7341ms
2024-04-09 12:00:41.666 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:41.691 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:41.691 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:41.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:00:41.693 +08:00 [DBG] =========Yi-SQL耗时0.7449毫秒=====
2024-04-09 12:00:41.707 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:00:41.715 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 23.9836ms
2024-04-09 12:00:41.716 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:45.397 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:45.398 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:45.401 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:45.402 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:45.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'da046a5f-e94d-adec-43c8-3a11d32f463e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:00:45.407 +08:00 [DBG] =========Yi-SQL耗时3.6331毫秒=====
2024-04-09 12:00:45.408 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:00:45.409 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 7.1147ms
2024-04-09 12:00:45.409 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:45.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:00:45.410 +08:00 [DBG] =========Yi-SQL耗时1.5447毫秒=====
2024-04-09 12:00:45.427 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:00:45.431 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 33.182ms
2024-04-09 12:00:45.431 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:50.782 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:00:50.783 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:50.784 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:50.788 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'da046a5f-e94d-adec-43c8-3a11d32f463e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:00:50.789 +08:00 [DBG] =========Yi-SQL耗时1.0329毫秒=====
2024-04-09 12:00:50.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-09 11:59:05.761' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-09 12:00:50.792' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题查询',"menutype"=2,"permissioncode"=N'question:questiones:query',"parentid"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd',"menuicon"=null,"router"=null,"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=null,"query"=null  WHERE "id"=N'da046a5f-e94d-adec-43c8-3a11d32f463e'
===============================

2024-04-09 12:00:50.794 +08:00 [DBG] =========Yi-SQL耗时1.1026毫秒=====
2024-04-09 12:00:50.795 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:00:50.795 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 10.8688ms
2024-04-09 12:00:50.795 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:50.818 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:50.818 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:50.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:00:50.821 +08:00 [DBG] =========Yi-SQL耗时0.921毫秒=====
2024-04-09 12:00:50.833 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:00:50.843 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 24.612ms
2024-04-09 12:00:50.843 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:52.154 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:52.154 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:52.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:00:52.185 +08:00 [DBG] =========Yi-SQL耗时26.3071毫秒=====
2024-04-09 12:00:52.187 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:52.187 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:52.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'da046a5f-e94d-adec-43c8-3a11d32f463e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:00:52.191 +08:00 [DBG] =========Yi-SQL耗时1.6798毫秒=====
2024-04-09 12:00:52.205 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:00:52.206 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 18.9571ms
2024-04-09 12:00:52.206 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:52.213 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:00:52.218 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 63.5264ms
2024-04-09 12:00:52.218 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:55.983 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:00:55.983 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:00:55.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:00:55.988 +08:00 [DBG] =========Yi-SQL耗时1.637毫秒=====
2024-04-09 12:00:56.001 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:00:56.009 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 25.9317ms
2024-04-09 12:00:56.010 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:11.885 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:01:11.887 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:11.887 +08:00 [INF] Route matched with {action = "Create", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:11.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "menu"  
           ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query")
     VALUES
           (N'35bbc251-5003-8302-93dd-3a11d33132d3',0,CAST('2024-04-09 12:01:11.887' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,0,1,N'问题添加',2,N'question:questiones:add',N'6799560e-c779-66bf-d6aa-3a11ce1e28dd',null,null,0,0,1,null,null,null) ;
===============================

2024-04-09 12:01:11.894 +08:00 [DBG] =========Yi-SQL耗时1.3594毫秒=====
2024-04-09 12:01:11.896 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:01:11.896 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application) in 9.2152ms
2024-04-09 12:01:11.896 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:11.919 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:11.919 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:11.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:01:11.921 +08:00 [DBG] =========Yi-SQL耗时0.9194毫秒=====
2024-04-09 12:01:11.936 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:01:11.947 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 27.4245ms
2024-04-09 12:01:11.947 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:17.467 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:17.467 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:17.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:01:17.470 +08:00 [DBG] =========Yi-SQL耗时1.0446毫秒=====
2024-04-09 12:01:17.485 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:01:17.493 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 25.3641ms
2024-04-09 12:01:17.493 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:30.472 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:01:30.473 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:30.473 +08:00 [INF] Route matched with {action = "Create", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:30.476 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "menu"  
           ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query")
     VALUES
           (N'43f6bd54-25bc-ec37-2a99-3a11d3317b6b',0,CAST('2024-04-09 12:01:30.473' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,100,1,N'问题修改',2,N'question:questiones:edit',N'6799560e-c779-66bf-d6aa-3a11ce1e28dd',null,null,0,0,1,null,null,null) ;
===============================

2024-04-09 12:01:30.477 +08:00 [DBG] =========Yi-SQL耗时0.9576毫秒=====
2024-04-09 12:01:30.480 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:01:30.480 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application) in 7.2021ms
2024-04-09 12:01:30.480 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:30.506 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:30.506 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:30.507 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:01:30.508 +08:00 [DBG] =========Yi-SQL耗时0.7665毫秒=====
2024-04-09 12:01:30.520 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:01:30.530 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 23.7596ms
2024-04-09 12:01:30.530 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:32.069 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:32.069 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:32.072 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:32.072 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:32.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:01:32.073 +08:00 [DBG] =========Yi-SQL耗时1.081毫秒=====
2024-04-09 12:01:32.077 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'35bbc251-5003-8302-93dd-3a11d33132d3'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:01:32.077 +08:00 [DBG] =========Yi-SQL耗时0.8472毫秒=====
2024-04-09 12:01:32.080 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:01:32.080 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 7.8789ms
2024-04-09 12:01:32.080 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:32.093 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:01:32.096 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 27.1296ms
2024-04-09 12:01:32.096 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:35.319 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:01:35.320 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:35.320 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:35.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'35bbc251-5003-8302-93dd-3a11d33132d3'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:01:35.323 +08:00 [DBG] =========Yi-SQL耗时0.912毫秒=====
2024-04-09 12:01:35.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-09 12:01:11.887' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-09 12:01:35.327' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题添加',"menutype"=2,"permissioncode"=N'question:questiones:add',"parentid"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd',"menuicon"=null,"router"=null,"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=null,"query"=null  WHERE "id"=N'35bbc251-5003-8302-93dd-3a11d33132d3'
===============================

2024-04-09 12:01:35.328 +08:00 [DBG] =========Yi-SQL耗时0.7762毫秒=====
2024-04-09 12:01:35.329 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:01:35.329 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 8.7633ms
2024-04-09 12:01:35.329 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:35.353 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:35.354 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:35.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:01:35.356 +08:00 [DBG] =========Yi-SQL耗时0.7933毫秒=====
2024-04-09 12:01:35.378 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:01:35.383 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 29.0202ms
2024-04-09 12:01:35.383 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:38.334 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:38.334 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:38.335 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:01:38.336 +08:00 [DBG] =========Yi-SQL耗时1.0536毫秒=====
2024-04-09 12:01:38.354 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:01:38.363 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 29.0154ms
2024-04-09 12:01:38.363 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:55.247 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:01:55.248 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:55.249 +08:00 [INF] Route matched with {action = "Create", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] CreateAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuCreateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:55.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "menu"  
           ("id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query")
     VALUES
           (N'6bc38bdf-d34d-3225-c3d1-3a11d331dc32',0,CAST('2024-04-09 12:01:55.249' AS DATETIME),N'e94b7363-80d1-10a3-eb2c-3a119a976151',null,null,100,1,N'问题删除',2,N'question:questiones:delete',N'6799560e-c779-66bf-d6aa-3a11ce1e28dd',null,null,0,0,1,null,null,null) ;
===============================

2024-04-09 12:01:55.252 +08:00 [DBG] =========Yi-SQL耗时1.0811毫秒=====
2024-04-09 12:01:55.257 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:01:55.257 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application) in 8.3412ms
2024-04-09 12:01:55.257 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.CreateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:55.282 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:01:55.282 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:01:55.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:01:55.285 +08:00 [DBG] =========Yi-SQL耗时0.8848毫秒=====
2024-04-09 12:01:55.298 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:01:55.306 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 23.5463ms
2024-04-09 12:01:55.306 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:01.515 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:01.515 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:02:01.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6bc38bdf-d34d-3225-c3d1-3a11d331dc32'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:02:01.520 +08:00 [DBG] =========Yi-SQL耗时2.4485毫秒=====
2024-04-09 12:02:01.521 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:02:01.521 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 5.2679ms
2024-04-09 12:02:01.521 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:01.539 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:01.539 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:02:01.540 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:02:01.541 +08:00 [DBG] =========Yi-SQL耗时0.7551毫秒=====
2024-04-09 12:02:01.556 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:02:01.564 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 24.6787ms
2024-04-09 12:02:01.564 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:06.792 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:02:06.793 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:06.793 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:02:06.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6bc38bdf-d34d-3225-c3d1-3a11d331dc32'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:02:06.796 +08:00 [DBG] =========Yi-SQL耗时0.9338毫秒=====
2024-04-09 12:02:06.801 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-09 12:01:55.249' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-09 12:02:06.800' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题删除',"menutype"=2,"permissioncode"=N'question:questiones:remove',"parentid"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd',"menuicon"=null,"router"=null,"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=null,"query"=null  WHERE "id"=N'6bc38bdf-d34d-3225-c3d1-3a11d331dc32'
===============================

2024-04-09 12:02:06.801 +08:00 [DBG] =========Yi-SQL耗时0.7104毫秒=====
2024-04-09 12:02:06.802 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:02:06.802 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 8.846ms
2024-04-09 12:02:06.802 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:06.827 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:06.827 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:02:06.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:02:06.829 +08:00 [DBG] =========Yi-SQL耗时0.9678毫秒=====
2024-04-09 12:02:06.851 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:02:06.860 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 33.0828ms
2024-04-09 12:02:06.860 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:19.128 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 12:02:19.131 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 12:02:20.332 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:02:20.334 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 12:02:20.334 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 12:02:20.342 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:20.342 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:02:20.368 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 12:02:20.368 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 25.6452ms
2024-04-09 12:02:20.368 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:20.567 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:20.567 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:02:20.569 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:02:20.576 +08:00 [DBG] =========Yi-SQL耗时6.3466毫秒=====
2024-04-09 12:02:20.577 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:02:20.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 12:02:20.578 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 12:02:20.579 +08:00 [DBG] =========Yi-SQL耗时1.8918毫秒=====
2024-04-09 12:02:20.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 12:02:20.582 +08:00 [DBG] =========Yi-SQL耗时1.3694毫秒=====
2024-04-09 12:02:20.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:02:20.584 +08:00 [DBG] =========Yi-SQL耗时0.9376毫秒=====
2024-04-09 12:02:20.584 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:02:20.585 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 17.5692ms
2024-04-09 12:02:20.585 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:20.644 +08:00 [INF] 2024/4/9 12:02:20：cc,UVYrtXJxbSU7RSCrnUALmg连接服务端success，当前已连接0个
2024-04-09 12:02:20.819 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:20.820 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:20.820 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:02:20.820 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:20.820 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:02:20.820 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:02:20.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:02:20.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:02:20.823 +08:00 [DBG] =========Yi-SQL耗时0.9711毫秒=====
2024-04-09 12:02:20.824 +08:00 [DBG] =========Yi-SQL耗时2.056毫秒=====
2024-04-09 12:02:20.827 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:02:20.827 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:02:20.828 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.1104ms
2024-04-09 12:02:20.828 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 8.0516ms
2024-04-09 12:02:20.828 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:20.828 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:02:20.828 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:02:20.829 +08:00 [DBG] =========Yi-SQL耗时1.1145毫秒=====
2024-04-09 12:02:20.847 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:02:20.851 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 31.2499ms
2024-04-09 12:02:20.851 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:03:13.380 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:03:13.383 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 12:03:13.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:03:13.397 +08:00 [DBG] =========Yi-SQL耗时0.7671毫秒=====
2024-04-09 12:03:13.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:03:13.408 +08:00 [DBG] =========Yi-SQL耗时1.0938毫秒=====
2024-04-09 12:03:13.415 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:03:13.418 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 34.9868ms
2024-04-09 12:03:13.418 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:03:15.278 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:03:15.278 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:03:15.279 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:03:15.279 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 12:03:15.280 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:03:15.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 12:03:15.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:03:15.286 +08:00 [DBG] =========Yi-SQL耗时1.3514毫秒=====
2024-04-09 12:03:15.286 +08:00 [DBG] =========Yi-SQL耗时1.0698毫秒=====
2024-04-09 12:03:15.287 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 12:03:15.292 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 12:03:15.296 +08:00 [DBG] =========Yi-SQL耗时8.096毫秒=====
2024-04-09 12:03:15.301 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:03:15.302 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 22.8246ms
2024-04-09 12:03:15.302 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:03:15.302 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:03:15.302 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 23.6018ms
2024-04-09 12:03:15.303 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:03:15.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 12:03:15.383 +08:00 [DBG] =========Yi-SQL耗时2.0547毫秒=====
2024-04-09 12:03:15.386 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 12:03:15.387 +08:00 [DBG] =========Yi-SQL耗时1毫秒=====
2024-04-09 12:03:15.392 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:03:15.395 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 103.4842ms
2024-04-09 12:03:15.395 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:03:16.556 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 12:03:16.560 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 12:03:16.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:03:16.575 +08:00 [DBG] =========Yi-SQL耗时1.5347毫秒=====
2024-04-09 12:03:16.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:03:16.579 +08:00 [DBG] =========Yi-SQL耗时1.3488毫秒=====
2024-04-09 12:03:16.582 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:03:16.583 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 23.5274ms
2024-04-09 12:03:16.583 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 12:04:43.063 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:04:43.064 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:04:43.064 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:04:43.064 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:04:43.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:04:43.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'35bbc251-5003-8302-93dd-3a11d33132d3'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:04:43.130 +08:00 [DBG] =========Yi-SQL耗时64.0881毫秒=====
2024-04-09 12:04:43.135 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:04:43.136 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 71.6582ms
2024-04-09 12:04:43.136 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:04:43.137 +08:00 [DBG] =========Yi-SQL耗时71.6187毫秒=====
2024-04-09 12:04:43.153 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:04:43.157 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 93.2936ms
2024-04-09 12:04:43.157 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:11.981 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 12:12:11.982 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 12:12:12.568 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:12:12.569 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 12:12:12.570 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 12:12:12.583 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:12.584 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:12:12.585 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 12:12:12.585 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.2182ms
2024-04-09 12:12:12.585 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:12.648 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:12.648 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:12:12.652 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:12:12.653 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:12:12.654 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 12:12:12.696 +08:00 [INF] 2024/4/9 12:12:12：cc,w7mpe2sXO8dgU2Xc52B1IA连接服务端success，当前已连接0个
2024-04-09 12:12:12.720 +08:00 [DBG] =========Yi-SQL耗时68.0366毫秒=====
2024-04-09 12:12:12.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 12:12:12.722 +08:00 [DBG] =========Yi-SQL耗时0.6254毫秒=====
2024-04-09 12:12:12.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 12:12:12.723 +08:00 [DBG] =========Yi-SQL耗时0.6032毫秒=====
2024-04-09 12:12:12.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:12:12.725 +08:00 [DBG] =========Yi-SQL耗时1.1583毫秒=====
2024-04-09 12:12:12.725 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:12:12.726 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 77.2924ms
2024-04-09 12:12:12.726 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:12.924 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:12.924 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:12:12.925 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:12.925 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 12:12:12.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:12:12.927 +08:00 [DBG] =========Yi-SQL耗时1.706毫秒=====
2024-04-09 12:12:12.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:12:12.929 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:12:12.930 +08:00 [DBG] =========Yi-SQL耗时1.0081毫秒=====
2024-04-09 12:12:12.931 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.1465ms
2024-04-09 12:12:12.932 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:12.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:12:12.938 +08:00 [DBG] =========Yi-SQL耗时2.0248毫秒=====
2024-04-09 12:12:12.940 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:12:12.941 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 15.9255ms
2024-04-09 12:12:12.941 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:18.539 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 12:12:18.540 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 12:12:18.664 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:12:18.664 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 12:12:18.665 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 12:12:18.669 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:18.670 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:12:18.681 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 12:12:18.682 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 11.6924ms
2024-04-09 12:12:18.682 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:18.721 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:18.722 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:12:18.722 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:12:18.723 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 12:12:18.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:12:18.725 +08:00 [DBG] =========Yi-SQL耗时1.3113毫秒=====
2024-04-09 12:12:18.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 12:12:18.727 +08:00 [DBG] =========Yi-SQL耗时0.503毫秒=====
2024-04-09 12:12:18.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 12:12:18.728 +08:00 [DBG] =========Yi-SQL耗时0.4618毫秒=====
2024-04-09 12:12:18.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:12:18.730 +08:00 [DBG] =========Yi-SQL耗时0.7881毫秒=====
2024-04-09 12:12:18.731 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:12:18.731 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 9.1738ms
2024-04-09 12:12:18.731 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 12:12:18.753 +08:00 [INF] 2024/4/9 12:12:18：cc,GAUeYma6E6vV0XJPvEC21g连接服务端success，当前已连接0个
2024-04-09 12:14:04.903 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:14:04.903 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:14:04.903 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:14:04.903 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:14:04.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:14:04.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:14:04.914 +08:00 [DBG] =========Yi-SQL耗时8.7591毫秒=====
2024-04-09 12:14:04.920 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:14:04.920 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 12:14:04.922 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:14:04.928 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:14:04.928 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 12:14:04.929 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 12:14:04.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 12:14:04.938 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 24.4718ms
2024-04-09 12:14:04.938 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:14:04.938 +08:00 [DBG] =========Yi-SQL耗时9.3682毫秒=====
2024-04-09 12:14:04.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 12:14:04.942 +08:00 [DBG] =========Yi-SQL耗时1.0657毫秒=====
2024-04-09 12:14:04.947 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:14:04.947 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 26.9354ms
2024-04-09 12:14:04.947 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:14:04.991 +08:00 [DBG] =========Yi-SQL耗时86.0268毫秒=====
2024-04-09 12:14:04.992 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:14:04.992 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 89.1038ms
2024-04-09 12:14:04.992 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:14:05.009 +08:00 [DBG] =========Yi-SQL耗时74.2172毫秒=====
2024-04-09 12:14:05.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 12:14:05.012 +08:00 [DBG] =========Yi-SQL耗时1.2578毫秒=====
2024-04-09 12:14:05.012 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:14:05.013 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 84.2214ms
2024-04-09 12:14:05.013 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:15:38.466 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 12:15:38.466 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 12:15:38.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:15:38.476 +08:00 [DBG] =========Yi-SQL耗时4.6937毫秒=====
2024-04-09 12:15:38.478 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:15:38.479 +08:00 [DBG] =========Yi-SQL耗时1.0497毫秒=====
2024-04-09 12:15:38.480 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:15:38.480 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 13.9402ms
2024-04-09 12:15:38.480 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 12:15:42.485 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:15:42.485 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 12:15:42.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:15:42.488 +08:00 [DBG] =========Yi-SQL耗时1.0151毫秒=====
2024-04-09 12:15:42.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:15:42.491 +08:00 [DBG] =========Yi-SQL耗时1.1825毫秒=====
2024-04-09 12:15:42.491 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:15:42.492 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 6.5767ms
2024-04-09 12:15:42.492 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:15:45.185 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:15:45.186 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:15:45.187 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:15:45.187 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:15:45.191 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:15:45.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:15:45.193 +08:00 [DBG] =========Yi-SQL耗时1.1722毫秒=====
2024-04-09 12:15:45.193 +08:00 [DBG] =========Yi-SQL耗时2.0871毫秒=====
2024-04-09 12:15:45.203 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:15:45.203 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 15.8366ms
2024-04-09 12:15:45.203 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:15:45.216 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:15:45.221 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 33.4473ms
2024-04-09 12:15:45.221 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:15:53.584 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:15:53.584 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:15:53.585 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:15:53.585 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:15:53.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:15:53.589 +08:00 [DBG] =========Yi-SQL耗时2.8559毫秒=====
2024-04-09 12:15:53.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:15:53.593 +08:00 [DBG] =========Yi-SQL耗时1.8962毫秒=====
2024-04-09 12:15:53.596 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:15:53.596 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 11.061ms
2024-04-09 12:15:53.596 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:15:53.606 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:15:53.611 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 26.5378ms
2024-04-09 12:15:53.611 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:16:13.405 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:16:13.405 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:16:13.406 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:16:13.406 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:16:13.407 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:16:13.408 +08:00 [DBG] =========Yi-SQL耗时0.9967毫秒=====
2024-04-09 12:16:13.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:16:13.412 +08:00 [DBG] =========Yi-SQL耗时0.8699毫秒=====
2024-04-09 12:16:13.415 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:16:13.415 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 8.6379ms
2024-04-09 12:16:13.415 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:16:13.425 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:16:13.429 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 24.2583ms
2024-04-09 12:16:13.430 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:16:16.962 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:16:16.963 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:16:16.963 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:16:16.965 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:16:16.966 +08:00 [DBG] =========Yi-SQL耗时0.9742毫秒=====
2024-04-09 12:16:16.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-09 12:16:16.971' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=N'question:questiones:list',"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'questiones',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'/question/questiones/index',"query"=N''  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-09 12:16:16.974 +08:00 [DBG] =========Yi-SQL耗时2.9565毫秒=====
2024-04-09 12:16:16.975 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 12:16:16.975 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 11.6244ms
2024-04-09 12:16:16.975 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:16:16.996 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:16:16.997 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:16:16.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:16:16.999 +08:00 [DBG] =========Yi-SQL耗时0.8182毫秒=====
2024-04-09 12:16:17.015 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:16:17.024 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 27.2253ms
2024-04-09 12:16:17.024 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:18:14.475 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:18:14.479 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-09 12:18:14.489 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:18:14.540 +08:00 [DBG] =========Yi-SQL耗时51.0605毫秒=====
2024-04-09 12:18:14.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:18:14.546 +08:00 [DBG] =========Yi-SQL耗时0.8836毫秒=====
2024-04-09 12:18:14.558 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:18:14.561 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 81.133ms
2024-04-09 12:18:14.561 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:18:26.037 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 12:18:26.037 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 12:18:26.193 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:18:26.194 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 12:18:26.195 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 12:18:26.210 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:18:26.210 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:18:26.211 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 12:18:26.211 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.2241ms
2024-04-09 12:18:26.211 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:18:26.281 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:18:26.282 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 12:18:26.282 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:18:26.283 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 12:18:26.286 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:18:26.289 +08:00 [DBG] =========Yi-SQL耗时2.7695毫秒=====
2024-04-09 12:18:26.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 12:18:26.294 +08:00 [DBG] =========Yi-SQL耗时1.7643毫秒=====
2024-04-09 12:18:26.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 12:18:26.300 +08:00 [DBG] =========Yi-SQL耗时1.924毫秒=====
2024-04-09 12:18:26.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:18:26.302 +08:00 [DBG] =========Yi-SQL耗时1.2024毫秒=====
2024-04-09 12:18:26.303 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:18:26.303 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 20.8832ms
2024-04-09 12:18:26.303 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 12:18:26.327 +08:00 [INF] 2024/4/9 12:18:26：cc,Q9ALoMKcPvpSRW5UAbA7Cg连接服务端success，当前已连接0个
2024-04-09 12:18:43.174 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:18:43.175 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:18:43.175 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-09 12:18:43.175 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:18:43.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:18:43.187 +08:00 [DBG] =========Yi-SQL耗时10.8888毫秒=====
2024-04-09 12:18:43.189 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:18:43.190 +08:00 [DBG] =========Yi-SQL耗时0.9102毫秒=====
2024-04-09 12:18:43.193 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:18:43.193 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 17.6489ms
2024-04-09 12:18:43.193 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:18:43.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:18:43.195 +08:00 [DBG] =========Yi-SQL耗时1.0517毫秒=====
2024-04-09 12:18:43.198 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:18:43.199 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 24.4169ms
2024-04-09 12:18:43.199 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:19.160 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:19.160 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:19.161 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:19.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:19:19.162 +08:00 [DBG] =========Yi-SQL耗时0.861毫秒=====
2024-04-09 12:19:19.169 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:19:19.170 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.7156ms
2024-04-09 12:19:19.170 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:19.171 +08:00 [INF] Route matched with {action = "GetList", controller = "Config", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.ConfigService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:19.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "config"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:19:19.183 +08:00 [DBG] =========Yi-SQL耗时2.8431毫秒=====
2024-04-09 12:19:19.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","configname","configkey","configvalue","configtype","ordernum","remark","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "config"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:19:19.186 +08:00 [DBG] =========Yi-SQL耗时0.6117毫秒=====
2024-04-09 12:19:19.194 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Config.ConfigGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:19:19.196 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application) in 25.1603ms
2024-04-09 12:19:19.196 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.ConfigService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:27.701 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:27.704 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:27.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:19:27.713 +08:00 [DBG] =========Yi-SQL耗时1.2266毫秒=====
2024-04-09 12:19:27.714 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:19:27.715 +08:00 [DBG] =========Yi-SQL耗时0.9881毫秒=====
2024-04-09 12:19:27.722 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:19:27.724 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 19.5117ms
2024-04-09 12:19:27.724 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:29.457 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:29.457 +08:00 [INF] Route matched with {action = "GetList", controller = "DictionaryType", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.DictionaryTypeService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:29.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "dictionarytype"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:19:29.460 +08:00 [DBG] =========Yi-SQL耗时0.8243毫秒=====
2024-04-09 12:19:29.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","dictname","dicttype","remark","creationtime","creatorid","lastmodifierid","lastmodificationtime","concurrencystamp" FROM "dictionarytype"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:19:29.463 +08:00 [DBG] =========Yi-SQL耗时1.0022毫秒=====
2024-04-09 12:19:29.465 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.DictionaryType.DictionaryTypeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:19:29.465 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application) in 7.6078ms
2024-04-09 12:19:29.465 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryTypeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:31.230 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:19:37.197 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:37.198 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:37.202 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 12:19:37.202 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 3.9414ms
2024-04-09 12:19:37.202 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:51.797 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:51.797 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:51.797 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:51.797 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:51.797 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:51.797 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:51.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:19:51.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 12:19:51.811 +08:00 [DBG] =========Yi-SQL耗时3.2988毫秒=====
2024-04-09 12:19:51.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 12:19:51.820 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:19:51.820 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 23.0544ms
2024-04-09 12:19:51.821 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:51.823 +08:00 [DBG] =========Yi-SQL耗时9.711毫秒=====
2024-04-09 12:19:51.826 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 12:19:51.828 +08:00 [DBG] =========Yi-SQL耗时1.6296毫秒=====
2024-04-09 12:19:51.829 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:19:51.830 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 32.7689ms
2024-04-09 12:19:51.830 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:51.875 +08:00 [DBG] =========Yi-SQL耗时67.4251毫秒=====
2024-04-09 12:19:51.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 12:19:51.877 +08:00 [DBG] =========Yi-SQL耗时0.5151毫秒=====
2024-04-09 12:19:51.879 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:19:51.879 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 81.2819ms
2024-04-09 12:19:51.879 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:58.628 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:58.628 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:58.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:19:58.631 +08:00 [DBG] =========Yi-SQL耗时1.4744毫秒=====
2024-04-09 12:19:58.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 12:19:58.636 +08:00 [DBG] =========Yi-SQL耗时0.8743毫秒=====
2024-04-09 12:19:58.637 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:19:58.637 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 9.2343ms
2024-04-09 12:19:58.637 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:59.089 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:59.089 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:59.089 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:59.089 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 12:19:59.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 12:19:59.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:19:59.094 +08:00 [DBG] =========Yi-SQL耗时1.3454毫秒=====
2024-04-09 12:19:59.095 +08:00 [DBG] =========Yi-SQL耗时2.8145毫秒=====
2024-04-09 12:19:59.104 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:19:59.104 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 14.3136ms
2024-04-09 12:19:59.104 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 12:19:59.116 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:19:59.122 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 32.2309ms
2024-04-09 12:19:59.122 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 12:23:12.348 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 12:23:12.349 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 12:23:12.754 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:23:12.763 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 12:23:12.763 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 12:23:12.766 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:23:12.767 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:23:12.772 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 12:23:12.773 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 4.2425ms
2024-04-09 12:23:12.773 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 12:23:12.971 +08:00 [INF] CORS policy execution successful.
2024-04-09 12:23:12.982 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 12:23:12.985 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 12:23:12.986 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 12:23:12.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:23:12.993 +08:00 [DBG] =========Yi-SQL耗时1.2115毫秒=====
2024-04-09 12:23:12.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 12:23:12.996 +08:00 [DBG] =========Yi-SQL耗时1.5537毫秒=====
2024-04-09 12:23:12.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 12:23:12.998 +08:00 [DBG] =========Yi-SQL耗时0.6416毫秒=====
2024-04-09 12:23:12.999 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 12:23:13.000 +08:00 [DBG] =========Yi-SQL耗时0.9263毫秒=====
2024-04-09 12:23:13.001 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 12:23:13.002 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 15.5149ms
2024-04-09 12:23:13.002 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 12:23:13.042 +08:00 [INF] 2024/4/9 12:23:13：cc,6pQTBpsSa1yA8nOCNcOKeg连接服务端success，当前已连接0个
2024-04-09 13:00:00.202 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-09 13:00:00.324 +08:00 [DBG] =========Yi-SQL耗时122.2274毫秒=====
2024-04-09 13:00:00.717 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-09 13:00:00.717 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-09 13:31:20.818 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-09 13:31:20.845 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-09 13:31:27.194 +08:00 [INF] Loaded ABP modules:
2024-04-09 13:31:27.195 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-09 13:31:27.195 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-09 13:31:27.195 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-09 13:31:27.195 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-09 13:31:27.195 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-09 13:31:27.195 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-09 13:31:27.195 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-09 13:31:27.195 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-09 13:31:27.195 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-09 13:31:27.195 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-09 13:31:27.195 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-09 13:31:27.195 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-09 13:31:27.195 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-09 13:31:27.195 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-09 13:31:27.195 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-09 13:31:27.195 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-09 13:31:27.195 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-09 13:31:27.195 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-09 13:31:27.195 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-09 13:31:27.195 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-09 13:31:27.195 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-09 13:31:27.195 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-09 13:31:27.195 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-09 13:31:27.195 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-09 13:31:27.195 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-09 13:31:27.195 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-09 13:31:27.195 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-09 13:31:27.195 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-09 13:31:27.195 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-09 13:31:27.195 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-09 13:31:27.195 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-09 13:31:27.202 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-09 13:31:27.207 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-09 13:31:28.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.016 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-09 13:31:28.053 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.068 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-09 13:31:28.070 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-09 13:31:28.091 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-09 13:31:28.093 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-09 13:31:28.093 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-09 13:31:28.093 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-09 13:31:28.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-09 13:31:28.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-09 13:31:28.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-09 13:31:28.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-09 13:31:28.094 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.094 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-09 13:31:28.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-09 13:31:28.095 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-09 13:31:28.103 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.107 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.109 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.110 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.115 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-09 13:31:28.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-09 13:31:28.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-09 13:31:28.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-09 13:31:28.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-09 13:31:28.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-09 13:31:28.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-09 13:31:28.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-09 13:31:28.119 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.124 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-09 13:31:28.126 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.131 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-09 13:31:28.138 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.138 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-09 13:31:28.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-09 13:31:28.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-09 13:31:28.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-09 13:31:28.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 13:31:28.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 13:31:28.139 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-09 13:31:28.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-09 13:31:28.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-09 13:31:28.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-09 13:31:28.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-09 13:31:28.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-09 13:31:28.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-09 13:31:28.140 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-09 13:31:28.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.146 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-09 13:31:28.148 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.153 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.153 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-09 13:31:28.161 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.161 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-09 13:31:28.161 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-09 13:31:28.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-09 13:31:28.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-09 13:31:28.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-09 13:31:28.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-09 13:31:28.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-09 13:31:28.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-09 13:31:28.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-09 13:31:28.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-09 13:31:28.162 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-09 13:31:28.163 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.168 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.168 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-09 13:31:28.170 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.176 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.182 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-09 13:31:28.183 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-09 13:31:28.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-09 13:31:28.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-09 13:31:28.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-09 13:31:28.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-09 13:31:28.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-09 13:31:28.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-09 13:31:28.185 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.191 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-09 13:31:28.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.198 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.199 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.205 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-09 13:31:28.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-09 13:31:28.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-09 13:31:28.207 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.207 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-09 13:31:28.208 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.213 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-09 13:31:28.215 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-09 13:31:28.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-09 13:31:28.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-09 13:31:28.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-09 13:31:28.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-09 13:31:28.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-09 13:31:28.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-09 13:31:28.231 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.232 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.245 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.245 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-09 13:31:28.247 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.252 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-09 13:31:28.261 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-09 13:31:28.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-09 13:31:28.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-09 13:31:28.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-09 13:31:28.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 13:31:28.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 13:31:28.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-09 13:31:28.262 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-09 13:31:28.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-09 13:31:28.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-09 13:31:28.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-09 13:31:28.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-09 13:31:28.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-09 13:31:28.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-09 13:31:28.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-09 13:31:28.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-09 13:31:28.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-09 13:31:28.263 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.263 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-09 13:31:28.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.269 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-09 13:31:28.272 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.280 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.285 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-09 13:31:28.287 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.287 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-09 13:31:28.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-09 13:31:28.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-09 13:31:28.288 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.288 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.293 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.293 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-09 13:31:28.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.307 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-09 13:31:28.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-09 13:31:28.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-09 13:31:28.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-09 13:31:28.309 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.309 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-09 13:31:28.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 13:31:28.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 13:31:28.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-09 13:31:28.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-09 13:31:28.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-09 13:31:28.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-09 13:31:28.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-09 13:31:28.310 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.310 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-09 13:31:28.311 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.316 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-09 13:31:28.318 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.321 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.323 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.329 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.329 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-09 13:31:28.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-09 13:31:28.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-09 13:31:28.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-09 13:31:28.331 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-09 13:31:28.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.337 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.337 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-09 13:31:28.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.356 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.356 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-09 13:31:28.358 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-09 13:31:28.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-09 13:31:28.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-09 13:31:28.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-09 13:31:28.359 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.359 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 13:31:28.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 13:31:28.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-09 13:31:28.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-09 13:31:28.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-09 13:31:28.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-09 13:31:28.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-09 13:31:28.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-09 13:31:28.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.360 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-09 13:31:28.360 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.366 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.366 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-09 13:31:28.368 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.373 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.374 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.379 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-09 13:31:28.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-09 13:31:28.381 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.381 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-09 13:31:28.382 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.382 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.387 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-09 13:31:28.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.395 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.397 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.397 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.404 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-09 13:31:28.407 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-09 13:31:28.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-09 13:31:28.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-09 13:31:28.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-09 13:31:28.408 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.408 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-09 13:31:28.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-09 13:31:28.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-09 13:31:28.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-09 13:31:28.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-09 13:31:28.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-09 13:31:28.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-09 13:31:28.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-09 13:31:28.409 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.409 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-09 13:31:28.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-09 13:31:28.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-09 13:31:28.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-09 13:31:28.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-09 13:31:28.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-09 13:31:28.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-09 13:31:28.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 13:31:28.410 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.410 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 13:31:28.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-09 13:31:28.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-09 13:31:28.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-09 13:31:28.411 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.411 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-09 13:31:28.420 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-09 13:31:28.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-09 13:31:28.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-09 13:31:28.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-09 13:31:28.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-09 13:31:28.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-09 13:31:28.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.445 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-09 13:31:28.455 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-09 13:31:28.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-09 13:31:28.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-09 13:31:28.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-09 13:31:28.456 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.456 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.462 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.462 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-09 13:31:28.464 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.469 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.476 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.477 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-09 13:31:28.479 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-09 13:31:28.479 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.480 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.485 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-09 13:31:28.487 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-09 13:31:28.505 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.505 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.511 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-09 13:31:28.514 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.517 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.519 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.525 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-09 13:31:28.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-09 13:31:28.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-09 13:31:28.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-09 13:31:28.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-09 13:31:28.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-09 13:31:28.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-09 13:31:28.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-09 13:31:28.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-09 13:31:28.528 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-09 13:31:28.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.530 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.535 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.535 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-09 13:31:28.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.543 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.543 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.548 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-09 13:31:28.550 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.556 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.556 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-09 13:31:28.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.562 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.568 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-09 13:31:28.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-09 13:31:28.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-09 13:31:28.570 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.570 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-09 13:31:28.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-09 13:31:28.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-09 13:31:28.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-09 13:31:28.571 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.577 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.577 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-09 13:31:28.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.583 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.589 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.590 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-09 13:31:28.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-09 13:31:28.592 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-09 13:31:28.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-09 13:31:28.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.594 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.599 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.599 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-09 13:31:28.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.607 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.612 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-09 13:31:28.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-09 13:31:28.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-09 13:31:28.614 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.614 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.615 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.621 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-09 13:31:28.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-09 13:31:28.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-09 13:31:28.640 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.640 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.642 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.644 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-09 13:31:28.654 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.660 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.660 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-09 13:31:28.668 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.669 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-09 13:31:28.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.680 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.687 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.687 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-09 13:31:28.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-09 13:31:28.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-09 13:31:28.689 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-09 13:31:28.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-09 13:31:28.715 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-09 13:31:28.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-09 13:31:28.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-09 13:31:28.716 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.718 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.719 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.720 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.720 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.726 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-09 13:31:28.728 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.737 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.737 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-09 13:31:28.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.744 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-09 13:31:28.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.751 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.757 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-09 13:31:28.759 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-09 13:31:28.760 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.765 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.765 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-09 13:31:28.767 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.771 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.778 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.778 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-09 13:31:28.780 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-09 13:31:28.787 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.793 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.795 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.802 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-09 13:31:28.805 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.806 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-09 13:31:28.807 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.807 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.813 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-09 13:31:28.816 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.820 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.822 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.822 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-09 13:31:28.834 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.834 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-09 13:31:28.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-09 13:31:28.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-09 13:31:28.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-09 13:31:28.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-09 13:31:28.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-09 13:31:28.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.835 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-09 13:31:28.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-09 13:31:28.836 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-09 13:31:28.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.851 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-09 13:31:28.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-09 13:31:28.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-09 13:31:28.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-09 13:31:28.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-09 13:31:28.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.863 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.863 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-09 13:31:28.865 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.870 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-09 13:31:28.876 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.885 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-09 13:31:28.887 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.901 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-09 13:31:28.904 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.905 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.906 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-09 13:31:28.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.918 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.924 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.924 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-09 13:31:28.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.927 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.928 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.933 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-09 13:31:28.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-09 13:31:28.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 13:31:28.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.952 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.952 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-09 13:31:28.954 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.961 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.967 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.967 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-09 13:31:28.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."id" is '主键'
===============================

2024-04-09 13:31:28.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."project" is '项目'
===============================

2024-04-09 13:31:28.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."status" is '状态'
===============================

2024-04-09 13:31:28.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."category" is '类别'
===============================

2024-04-09 13:31:28.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."impact" is '影响'
===============================

2024-04-09 13:31:28.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."priority" is '优先级'
===============================

2024-04-09 13:31:28.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."title" is '标题'
===============================

2024-04-09 13:31:28.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."description" is '详情'
===============================

2024-04-09 13:31:28.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."solve_user" is '对应人'
===============================

2024-04-09 13:31:28.970 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."creationtime" is '创建时间'
===============================

2024-04-09 13:31:28.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.971 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.977 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-09 13:31:28.979 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.983 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:28.984 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.984 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-09 13:31:28.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-09 13:31:28.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-09 13:31:28.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-09 13:31:28.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-09 13:31:28.992 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-09 13:31:28.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:28.998 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:28.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-09 13:31:29.000 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.004 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:29.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:29.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-09 13:31:29.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-09 13:31:29.013 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-09 13:31:29.014 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:29.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-09 13:31:29.020 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 13:31:29.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:29.030 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-09 13:31:29.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-09 13:31:29.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-09 13:31:29.033 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-09 13:31:29.033 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-09 13:31:29.033 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 13:31:29.039 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-09 13:31:29.041 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 13:31:29.131 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.142 +08:00 [DBG] =========Yi-SQL耗时10.9032毫秒=====
2024-04-09 13:31:29.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.160 +08:00 [DBG] =========Yi-SQL耗时1.7307毫秒=====
2024-04-09 13:31:29.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.166 +08:00 [DBG] =========Yi-SQL耗时1.7418毫秒=====
2024-04-09 13:31:29.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.173 +08:00 [DBG] =========Yi-SQL耗时3.0872毫秒=====
2024-04-09 13:31:29.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.178 +08:00 [DBG] =========Yi-SQL耗时1.5617毫秒=====
2024-04-09 13:31:29.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.182 +08:00 [DBG] =========Yi-SQL耗时1.036毫秒=====
2024-04-09 13:31:29.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.189 +08:00 [DBG] =========Yi-SQL耗时2.4376毫秒=====
2024-04-09 13:31:29.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.195 +08:00 [DBG] =========Yi-SQL耗时1.764毫秒=====
2024-04-09 13:31:29.197 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.197 +08:00 [DBG] =========Yi-SQL耗时0.4941毫秒=====
2024-04-09 13:31:29.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.220 +08:00 [DBG] =========Yi-SQL耗时20.5418毫秒=====
2024-04-09 13:31:29.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.225 +08:00 [DBG] =========Yi-SQL耗时1.9689毫秒=====
2024-04-09 13:31:29.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.229 +08:00 [DBG] =========Yi-SQL耗时1.1721毫秒=====
2024-04-09 13:31:29.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.233 +08:00 [DBG] =========Yi-SQL耗时1.8496毫秒=====
2024-04-09 13:31:29.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.237 +08:00 [DBG] =========Yi-SQL耗时1.3798毫秒=====
2024-04-09 13:31:29.240 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 13:31:29.242 +08:00 [DBG] =========Yi-SQL耗时1.5191毫秒=====
2024-04-09 13:31:29.251 +08:00 [DBG] 耗时-2047ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-09 13:31:29.253 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-09 13:31:29.319 +08:00 [DBG] 耗时-65ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-09 13:31:29.322 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-09 13:31:29.338 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-04-09 13:31:29.345 +08:00 [DBG] 耗时-6ms,已加载模块-Volo.Abp.Quartz
2024-04-09 13:31:29.375 +08:00 [DBG] 耗时-30ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-09 13:31:29.379 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-09 13:31:29.667 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-09 13:31:29.752 +08:00 [DBG] 耗时-373ms,已加载模块-Yi.Abp.Web
2024-04-09 13:31:29.760 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-09 13:31:29.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-09 13:31:29.770 +08:00 [DBG] =========Yi-SQL耗时1.104毫秒=====
2024-04-09 13:31:29.853 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-09 13:31:29.853 +08:00 [DBG] 耗时-100ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-09 13:31:29.854 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2643ms】==========
2024-04-09 13:31:30.065 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-09 13:31:30.065 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-09 13:31:30.065 +08:00 [INF] Hosting environment: Development
2024-04-09 13:31:30.065 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-09 13:31:34.007 +08:00 [INF] Sending file. Request path: '/swagger-ui.css'. Physical path: 'N/A'
2024-04-09 13:31:34.007 +08:00 [INF] Sending file. Request path: '/swagger-ui-standalone-preset.js'. Physical path: 'N/A'
2024-04-09 13:31:34.014 +08:00 [INF] Sending file. Request path: '/swagger-ui-bundle.js'. Physical path: 'N/A'
2024-04-09 13:32:53.037 +08:00 [INF] CORS policy execution successful.
2024-04-09 13:32:53.114 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 13:32:53.121 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 13:32:53.129 +08:00 [INF] CORS policy execution successful.
2024-04-09 13:32:53.131 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 13:32:53.208 +08:00 [INF] 2024/4/9 13:32:53：cc,lbhZ63R1KNsMFYDi71JPEQ连接服务端success，当前已连接0个
2024-04-09 13:58:10.047 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 13:58:10.051 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 13:58:10.201 +08:00 [INF] CORS policy execution successful.
2024-04-09 13:58:10.204 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 13:58:10.205 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 13:58:10.228 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:10.247 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 13:58:10.297 +08:00 [INF] CORS policy execution successful.
2024-04-09 13:58:10.299 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 13:58:10.343 +08:00 [INF] 2024/4/9 13:58:10：cc,9e0fql6DzpjEXUR-MFkW6Q连接服务端success，当前已连接0个
2024-04-09 13:58:10.379 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 13:58:10.459 +08:00 [DBG] =========Yi-SQL耗时80.4783毫秒=====
2024-04-09 13:58:10.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 13:58:10.483 +08:00 [DBG] =========Yi-SQL耗时2.2567毫秒=====
2024-04-09 13:58:10.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 13:58:10.492 +08:00 [DBG] =========Yi-SQL耗时1.6382毫秒=====
2024-04-09 13:58:10.531 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 13:58:10.593 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 342.3598ms
2024-04-09 13:58:10.593 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:10.599 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:10.601 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 13:58:10.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 13:58:10.604 +08:00 [DBG] =========Yi-SQL耗时0.6887毫秒=====
2024-04-09 13:58:10.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 13:58:10.606 +08:00 [DBG] =========Yi-SQL耗时0.3076毫秒=====
2024-04-09 13:58:10.606 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 13:58:10.607 +08:00 [DBG] =========Yi-SQL耗时0.2485毫秒=====
2024-04-09 13:58:10.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 13:58:10.610 +08:00 [DBG] =========Yi-SQL耗时1.8617毫秒=====
2024-04-09 13:58:10.633 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:10.636 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 34.7488ms
2024-04-09 13:58:10.636 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:16.331 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:16.331 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:16.332 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:16.340 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 13:58:16.340 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 13:58:16.340 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 13:58:16.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 13:58:16.359 +08:00 [DBG] =========Yi-SQL耗时2.1062毫秒=====
2024-04-09 13:58:16.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 13:58:16.369 +08:00 [DBG] =========Yi-SQL耗时0.9194毫秒=====
2024-04-09 13:58:16.376 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:16.376 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:16.377 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 13:58:16.379 +08:00 [DBG] =========Yi-SQL耗时1.834毫秒=====
2024-04-09 13:58:16.381 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 40.9355ms
2024-04-09 13:58:16.381 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 40.9021ms
2024-04-09 13:58:16.381 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:16.381 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:16.410 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:16.425 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 85.218ms
2024-04-09 13:58:16.425 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:24.079 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:24.082 +08:00 [INF] Route matched with {action = "GetList", controller = "Online", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel]] GetListAsync(Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel) on controller Yi.Framework.Rbac.Application.Services.Monitor.OnlineService (Yi.Framework.Rbac.Application).
2024-04-09 13:58:24.089 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Domain.Shared.Model.OnlineUserModel, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:24.091 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application) in 8.9894ms
2024-04-09 13:58:24.091 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.Monitor.OnlineService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:28.599 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:28.599 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:28.600 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:28.600 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:28.600 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:28.600 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 13:58:28.602 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 13:58:28.603 +08:00 [DBG] =========Yi-SQL耗时0.8734毫秒=====
2024-04-09 13:58:28.604 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:28.610 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:28.610 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:28.611 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:28.612 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 11.2643ms
2024-04-09 13:58:28.612 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 13:58:28.617 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 16.9568ms
2024-04-09 13:58:28.617 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:28.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:28.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-09 13:58:28.660 +08:00 [DBG] =========Yi-SQL耗时4.4769毫秒=====
2024-04-09 13:58:28.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 13:58:28.671 +08:00 [DBG] =========Yi-SQL耗时1.0212毫秒=====
2024-04-09 13:58:28.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:28.675 +08:00 [DBG] =========Yi-SQL耗时0.6266毫秒=====
2024-04-09 13:58:28.689 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:28.691 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 81.4916ms
2024-04-09 13:58:28.691 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:28.710 +08:00 [DBG] =========Yi-SQL耗时54.4686毫秒=====
2024-04-09 13:58:28.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-09 13:58:28.712 +08:00 [DBG] =========Yi-SQL耗时0.6744毫秒=====
2024-04-09 13:58:28.719 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:28.722 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 112.6855ms
2024-04-09 13:58:28.722 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:33.736 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:33.737 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:33.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:33.740 +08:00 [DBG] =========Yi-SQL耗时1.2017毫秒=====
2024-04-09 13:58:33.759 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 13:58:33.761 +08:00 [DBG] =========Yi-SQL耗时1.7875毫秒=====
2024-04-09 13:58:33.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:33.764 +08:00 [DBG] =========Yi-SQL耗时1.4917毫秒=====
2024-04-09 13:58:33.772 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:33.772 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 35.326ms
2024-04-09 13:58:33.772 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:37.216 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:37.216 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:37.218 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:37.218 +08:00 [DBG] =========Yi-SQL耗时0.6075毫秒=====
2024-04-09 13:58:37.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 40
===============================

2024-04-09 13:58:37.221 +08:00 [DBG] =========Yi-SQL耗时1.0186毫秒=====
2024-04-09 13:58:37.223 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:37.223 +08:00 [DBG] =========Yi-SQL耗时0.6327毫秒=====
2024-04-09 13:58:37.224 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:37.225 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 8.0785ms
2024-04-09 13:58:37.225 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:38.654 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:38.654 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:38.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:38.656 +08:00 [DBG] =========Yi-SQL耗时0.6613毫秒=====
2024-04-09 13:58:38.658 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 30
===============================

2024-04-09 13:58:38.659 +08:00 [DBG] =========Yi-SQL耗时1.1171毫秒=====
2024-04-09 13:58:38.661 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:38.662 +08:00 [DBG] =========Yi-SQL耗时0.8956毫秒=====
2024-04-09 13:58:38.663 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:38.664 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 9.4953ms
2024-04-09 13:58:38.664 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:40.808 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:40.809 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:40.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:40.812 +08:00 [DBG] =========Yi-SQL耗时0.7658毫秒=====
2024-04-09 13:58:40.813 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 20
===============================

2024-04-09 13:58:40.814 +08:00 [DBG] =========Yi-SQL耗时1.0245毫秒=====
2024-04-09 13:58:40.816 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:40.817 +08:00 [DBG] =========Yi-SQL耗时0.5582毫秒=====
2024-04-09 13:58:40.820 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:40.820 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 11.69ms
2024-04-09 13:58:40.820 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:45.448 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:45.448 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:45.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:45.451 +08:00 [DBG] =========Yi-SQL耗时0.8083毫秒=====
2024-04-09 13:58:45.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 13:58:45.455 +08:00 [DBG] =========Yi-SQL耗时1.4116毫秒=====
2024-04-09 13:58:45.455 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:45.456 +08:00 [DBG] =========Yi-SQL耗时0.4602毫秒=====
2024-04-09 13:58:45.457 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:45.458 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 9.6329ms
2024-04-09 13:58:45.458 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:48.856 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:48.857 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:48.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:48.861 +08:00 [DBG] =========Yi-SQL耗时1.2085毫秒=====
2024-04-09 13:58:48.864 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 10
===============================

2024-04-09 13:58:48.865 +08:00 [DBG] =========Yi-SQL耗时1.2147毫秒=====
2024-04-09 13:58:48.865 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:48.866 +08:00 [DBG] =========Yi-SQL耗时0.3629毫秒=====
2024-04-09 13:58:48.867 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:48.868 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 10.7541ms
2024-04-09 13:58:48.868 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:57.824 +08:00 [INF] CORS policy execution successful.
2024-04-09 13:58:57.826 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:57.829 +08:00 [INF] Route matched with {action = "PostCodeBuildWeb", controller = "CodeGen", area = ""}. Executing controller action with signature System.Threading.Tasks.Task PostCodeBuildWebAsync() on controller Yi.Framework.CodeGen.Application.Services.CodeGenService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:57.847 +08:00 [DBG] 
==========Yi-SQL执行:==========
TRUNCATE TABLE "yitable"
===============================

2024-04-09 13:58:57.857 +08:00 [DBG] =========Yi-SQL耗时10.3494毫秒=====
2024-04-09 13:58:57.857 +08:00 [DBG] 
==========Yi-SQL执行:==========
TRUNCATE TABLE "yifield"
===============================

2024-04-09 13:58:57.861 +08:00 [DBG] =========Yi-SQL耗时3.6957毫秒=====
2024-04-09 13:58:57.897 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-09 13:58:57.898 +08:00 [DBG] =========Yi-SQL耗时0.9162毫秒=====
2024-04-09 13:58:57.925 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "yitable"  ("id","name","description","concurrencystamp") VALUES 
 (  '41e8f234-ebf1-4715-9b30-50adc21182af' , 'YiTenant' , NULL , '24ecfe4db04c426eb2ee15a499d03e2c' ),
 (  'def40798-7560-4a22-85e9-20eb0f19e420' , 'OperationLog' , NULL , 'fdeb9f3ad8d74a32bbc64931c065bbfc' ),
 (  '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'Config' , NULL , 'cbe0bf5e64a849228101cd1228f98348' ),
 (  'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'Dept' , NULL , '24da4c6ca4a2413685076ea1c6598e2b' ),
 (  'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'Dictionary' , NULL , '12c5f75da5554ae4a5d9fa3881eb9067' ),
 (  '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'DictionaryType' , NULL , '239d2bbf0243405ab01ee84582324e4a' ),
 (  '07678a02-2921-46f1-bd07-e9a48c262f74' , 'File' , NULL , '71358de1ce094abf9e7fbeb81e7eb1fa' ),
 (  '4993b781-4671-48cd-968c-f4dde1051c3e' , 'LoginLog' , NULL , 'ff5bb0db9bdb44ba894380b75bbd29c3' ),
 (  'fd46277a-d24a-4026-9e27-bbca036811a2' , 'Menu' , NULL , 'fddd219cd2504207bf4c830dab0ea72d' ),
 (  '0895b219-48ac-415d-b64f-41acae72f8b4' , 'Notice' , NULL , '89eb1f2ea4b84da0a92a26fd95931b7c' ),
 (  '5c798465-387e-41e5-a92a-a4beb9c94448' , 'Post' , NULL , '3b839b4ae73b4910a796ce5d924062f5' ),
 (  'b5da8ebd-f994-4444-9115-81fa8808a8bb' , 'RoleDept' , NULL , '9d0ab6bd878545fe8720d68a813e0698' ),
 (  '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'Role' , NULL , '4270a024e0cf4c87af33a877b5235f40' ),
 (  '54264e05-4c9b-48a1-9017-5bb9097bcd26' , 'RoleMenu' , NULL , 'cbdf34f639344d0c9c3472de6f80d336' ),
 (  '73e70577-dea0-4bc7-8471-40112a4317a3' , 'User' , NULL , 'a239efbe057b47baa996bd17ce47811b' ),
 (  '447c58be-6a24-47c2-84a9-c8ee68784181' , 'UserPost' , NULL , 'e0ef90ac20fe4bc5bf9983c137c3fe1f' ),
 (  'e2c2da81-f68e-4e41-8282-d858d788899e' , 'UserRole' , NULL , '3c510402a3a74bcbac2737ef367c91ea' ),
 (  '71551c4a-4adb-48ea-b2ba-33495a80705f' , 'Auth' , NULL , '7b7da5bdcbf146abaf1c99ef9024661e' ),
 (  '7e5bfbd0-5afa-4dde-828f-9b3526df25a0' , 'AccessLog' , NULL , '884d4372b3304409991128c9da7ec0f9' ),
 (  'e7691fc8-ab3b-4e19-91fd-022c64aad53e' , 'BbsUserExtraInfo' , NULL , '73208e69ba274f7db9cf7edf8c6b4d5f' ),
 (  'ac065e6e-9459-467f-861f-28d815556a1c' , 'Setting' , NULL , '5472392f4f934efbbde565e7929268bd' ),
 (  '4d92fd02-fda5-42be-a65b-ad4bb211fdd6' , 'Level' , NULL , '4b984986692243a2b1680fa1f18c5abe' ),
 (  'bad2e953-b53c-4671-b7da-36704bab3bd8' , 'SignIn' , NULL , '591442c2fde748e7aac1417694528ba7' ),
 (  'e5ff7df0-10ee-4bbd-a359-d1c9193d69b9' , 'Agree' , NULL , '6de6ace0aa8a4a83941bbc57bd5f35f2' ),
 (  'aa41c86a-9239-4703-86ff-2e48152107aa' , 'Article' , NULL , '3505e3061d6c4ec9b2aac0196ad44f9f' ),
 (  '85f7d0cb-d982-4f73-8019-7313430631d1' , 'Banner' , NULL , '7291768f3e8141a7b4ed202dd43d5032' ),
 (  '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'Comment' , NULL , '321ab109c366419e87479cfdb61ae086' ),
 (  '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'Discuss' , NULL , 'd3b2894bb5ed46f2993a4ac1851ff392' ),
 (  '13b607db-05fb-464b-bfb1-cbc2d5f3e5f5' , 'DiscussMyType' , NULL , '634190eede1d4d9ca368814c6641c0d3' ),
 (  'ad886fcd-07b4-43b0-bc23-a21183eb67ff' , 'DiscussTop' , NULL , 'd7a21258ee0248ca8f9b668abb213f9f' ),
 (  'a1cf6f33-01a7-430f-910f-7cbf61721c47' , 'MyType' , NULL , '7fd70a5e51f740f28f1a2db60344e95d' ),
 (  'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'Plate' , NULL , '1aa84c012fb845df9af2ef1465bed9db' ),
 (  '0ff1ffa4-4754-4e0f-b5e7-e37757048b97' , 'BankCard' , NULL , '3262eb7d413945c09f028cebbee7fe42' ),
 (  '65ad21a6-5501-4ee6-99ac-7bf566062ff0' , 'InterestRecords' , NULL , '0639723d7e784bf6b607389d34bd7f87' ),
 (  '637eefd7-aec3-4fa5-80cf-5903e5aaa5b5' , 'YiAuditLogAction' , NULL , '254cdfe5e0cf4846bc3d69097b4e4b5c' ),
 (  '7905053f-e508-419a-bff6-66069fdf535d' , 'YiAuditLog' , NULL , 'a2d925c330ff40f78d0385c06b03f4d0' ),
 (  '1632a14c-6dca-4c10-8315-a865212170b7' , 'YiEntityChange' , NULL , '0fd6a2e4d48c40fb8e731e423468b0a7' ),
 (  '20e44087-b57c-4abc-a539-48824b267387' , 'YiEntityPropertyChange' , NULL , '4d9466b0168f4ab7a923400928fab106' ),
 (  'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'Question' , NULL , 'b3f082b4024147d6b212cdb2de9c767c' ),
 (  '309289a6-1735-473e-81da-5d4db18e8666' , 'YiField' , NULL , '9970ed687a404be8aabcfbd841f36b15' ),
 (  '918f60df-7737-4496-825c-b6318bc08fa6' , 'YiTable' , NULL , '12365249fcad403e9ac45320c2debaa7' ),
 (  'fe0d1dbd-ceeb-422d-802b-44c28a0ff2e0' , 'YiTemplate' , NULL , '97da3b27df5c445395b5dd8516a2990f' )
;

===============================

2024-04-09 13:58:57.930 +08:00 [DBG] =========Yi-SQL耗时4.411毫秒=====
2024-04-09 13:58:57.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-09 13:58:57.938 +08:00 [DBG] =========Yi-SQL耗时2.7335毫秒=====
2024-04-09 13:58:57.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-09 13:58:57.942 +08:00 [DBG] =========Yi-SQL耗时1.9299毫秒=====
2024-04-09 13:58:57.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-09 13:58:57.943 +08:00 [DBG] =========Yi-SQL耗时0.3264毫秒=====
2024-04-09 13:58:57.970 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "yifield"  ("id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic") VALUES 
 (  '544cfed4-b81e-40d9-ab58-eea4d92ac73c' , 'Id' , NULL , '0' , '0' , '6' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'True' , 'True' , 'False' , 'False' ),
 (  '380a43d4-1f36-41bf-a8ee-f2c55a9ba894' , 'Name' , NULL , '0' , '0' , '0' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'True' , 'False' , 'False' , 'False' ),
 (  'ef822c79-beff-49ee-ad87-032787865e5e' , 'EntityVersion' , NULL , '0' , '0' , '1' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'True' , 'False' , 'False' , 'False' ),
 (  'eac47556-ac5e-470b-bd0d-43350944856b' , 'TenantConnectionString' , NULL , '0' , '0' , '0' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'True' , 'False' , 'False' , 'False' ),
 (  '3cb45d5f-d399-4150-a895-8333161fe02d' , 'DbType' , NULL , '0' , '0' , '0' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'True' , 'False' , 'False' , 'False' ),
 (  '3370d8d2-0cfb-4d65-b195-f8b5b09fa100' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'True' , 'False' , 'False' , 'False' ),
 (  '50738f28-91b1-44d1-82e2-b0a95b0c6804' , 'IsDeleted' , NULL , '0' , '0' , '3' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'True' , 'False' , 'False' , 'False' ),
 (  'a7ea8c19-bde3-48d8-9c66-5e3b1d23acee' , 'DeleterId' , NULL , '0' , '0' , '6' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'False' , 'False' , 'False' , 'False' ),
 (  'e6c5a620-5665-42f3-ad0c-6b17d0f32551' , 'DeletionTime' , NULL , '0' , '0' , '5' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'False' , 'False' , 'False' , 'False' ),
 (  '485f37d3-db40-4117-b535-0e9fa5a606b3' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'False' , 'False' , 'False' , 'False' ),
 (  'b022fe59-b373-44a5-8c76-c1f57c050b07' , 'LastModifierId' , NULL , '0' , '0' , '6' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'False' , 'False' , 'False' , 'False' ),
 (  '487005b4-bd92-42e7-909c-7f2bdba7e239' , 'CreationTime' , NULL , '0' , '0' , '5' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'True' , 'False' , 'False' , 'False' ),
 (  '9fd03372-9e4c-49ad-b594-46029aa4ee02' , 'CreatorId' , NULL , '0' , '0' , '6' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'False' , 'False' , 'False' , 'False' ),
 (  '5fc7b9b0-9f7a-4cb6-a4ff-1b02d42fa9e1' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '41e8f234-ebf1-4715-9b30-50adc21182af' , 'True' , 'False' , 'False' , 'False' ),
 (  'a0467bfd-87a7-405d-b546-b945e5a8858e' , 'Id' , NULL , '0' , '0' , '6' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'True' , 'False' , 'False' ),
 (  '237d9484-abfe-4001-9df5-fe5bcf6861ed' , 'Title' , NULL , '0' , '0' , '0' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'False' , 'False' , 'False' ),
 (  '7bb2a04c-1f19-43d5-947b-094a3ee11337' , 'OperType' , NULL , '0' , '0' , '0' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'False' , 'False' , 'False' ),
 (  '6f3262a2-9701-4ee9-8a4a-748f8b0bfe18' , 'RequestMethod' , NULL , '0' , '0' , '0' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'False' , 'False' , 'False' ),
 (  '3a8311b9-c232-4c83-8960-eb1325db4e2d' , 'OperUser' , NULL , '0' , '0' , '0' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'False' , 'False' , 'False' ),
 (  'ddf2572d-632a-41d3-b41f-15608d8b074a' , 'OperIp' , NULL , '0' , '0' , '0' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'False' , 'False' , 'False' ),
 (  'f65d8cf1-a652-4ea9-ab3c-40df872a4260' , 'OperLocation' , NULL , '0' , '0' , '0' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'False' , 'False' , 'False' ),
 (  'feab176f-e7f1-4f9b-9524-ca23cd786490' , 'Method' , NULL , '0' , '0' , '0' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'False' , 'False' , 'False' ),
 (  'a7994c8a-648f-40bc-b51c-895365677d99' , 'RequestParam' , NULL , '0' , '0' , '0' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'False' , 'False' , 'False' ),
 (  'eab82822-94e8-4c1a-8b22-1d5b8444f54c' , 'RequestResult' , NULL , '0' , '9999' , '0' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'False' , 'False' , 'False' ),
 (  'c90a82b9-62b3-4366-b224-06e23a5603ea' , 'CreationTime' , NULL , '0' , '0' , '5' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'True' , 'False' , 'False' , 'False' ),
 (  '79a18344-d471-48ff-a330-16820052ccbd' , 'CreatorId' , NULL , '0' , '0' , '6' , 'def40798-7560-4a22-85e9-20eb0f19e420' , 'False' , 'False' , 'False' , 'False' ),
 (  'a5f7bcf9-6db2-4213-a99e-fd5d18014d65' , 'Id' , NULL , '0' , '0' , '6' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'True' , 'True' , 'False' , 'False' ),
 (  'ebf0d6d6-d973-46f9-8d18-f70f71acfe94' , 'ConfigName' , NULL , '0' , '0' , '0' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'True' , 'False' , 'False' , 'False' ),
 (  '1ee3c24b-17e8-4643-b98c-a03e39512836' , 'ConfigKey' , NULL , '0' , '0' , '0' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'True' , 'False' , 'False' , 'False' ),
 (  'f0fee378-d17b-4da8-8fb6-196529e626fb' , 'ConfigValue' , NULL , '0' , '0' , '0' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'True' , 'False' , 'False' , 'False' ),
 (  'f373a977-1300-44df-879c-20a815be3f55' , 'ConfigType' , NULL , '0' , '0' , '0' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'True' , 'False' , 'False' , 'False' ),
 (  'caead2f5-ddab-4443-81b1-2263d77460cb' , 'OrderNum' , NULL , '0' , '0' , '1' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'True' , 'False' , 'False' , 'False' ),
 (  '893af653-e8ac-4b92-9ed1-afef96ea1e94' , 'Remark' , NULL , '0' , '0' , '0' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'True' , 'False' , 'False' , 'False' ),
 (  '3a21c4e3-be4b-4072-8da6-2480970b47e3' , 'IsDeleted' , NULL , '0' , '0' , '3' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'True' , 'False' , 'False' , 'False' ),
 (  '6b88c096-b528-4a4c-8152-1217a0d61e97' , 'CreationTime' , NULL , '0' , '0' , '5' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'True' , 'False' , 'False' , 'False' ),
 (  '4344ea12-179e-4d77-9bd7-2268913c5dde' , 'CreatorId' , NULL , '0' , '0' , '6' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'False' , 'False' , 'False' , 'False' ),
 (  '10a47430-a98e-4806-8f98-9a5d489e334f' , 'LastModifierId' , NULL , '0' , '0' , '6' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'False' , 'False' , 'False' , 'False' ),
 (  '5bd7fbdd-de4e-46d6-bc5d-0171c83c2ef7' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '326c1e69-a7b8-41ff-87a1-e13e896b4846' , 'False' , 'False' , 'False' , 'False' ),
 (  '02372b55-e966-405d-a86c-b10ecc93eafd' , 'Id' , NULL , '0' , '0' , '6' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'True' , 'True' , 'False' , 'False' ),
 (  '74f1d37e-b8fd-4052-82c4-04b2f1d033c5' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'True' , 'False' , 'False' , 'False' ),
 (  '4f1db232-138e-4b9f-8537-adecfc64693b' , 'CreationTime' , NULL , '0' , '0' , '5' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'True' , 'False' , 'False' , 'False' ),
 (  'ec24a480-8615-48a6-a678-1f4e0e107916' , 'CreatorId' , NULL , '0' , '0' , '6' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'False' , 'False' , 'False' , 'False' ),
 (  '15fbaae1-83fb-4c88-b973-6329c9f3b5c6' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'False' , 'False' , 'False' , 'False' ),
 (  '530f181c-3779-4394-9521-e72852338efd' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'False' , 'False' , 'False' , 'False' ),
 (  '03776655-88d3-47d3-b2e3-256a79eb4efc' , 'OrderNum' , NULL , '0' , '0' , '1' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'True' , 'False' , 'False' , 'False' ),
 (  '01608975-0df5-4cdf-9300-509bf5137dc8' , 'State' , NULL , '0' , '0' , '3' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'True' , 'False' , 'False' , 'False' ),
 (  '5af76809-a2ad-4743-b109-fbcaec6b8c74' , 'DeptName' , NULL , '0' , '0' , '0' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'True' , 'False' , 'False' , 'False' ),
 (  'd15db560-c4cf-4388-aec3-95f13fbb42e5' , 'DeptCode' , NULL , '0' , '0' , '0' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'True' , 'False' , 'False' , 'False' ),
 (  '4c7041f3-b7fd-4f3a-a53e-4104038bf4ce' , 'Leader' , NULL , '0' , '0' , '0' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'True' , 'False' , 'False' , 'False' ),
 (  '9661db0b-4920-4bed-8931-1a296cf48391' , 'ParentId' , NULL , '0' , '0' , '6' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'True' , 'False' , 'False' , 'False' ),
 (  '350f6bb5-ae7c-47a0-9882-853b2f5deaf6' , 'Remark' , NULL , '0' , '0' , '0' , 'd59c8925-65b5-4eb8-abe1-8b7389674562' , 'True' , 'False' , 'False' , 'False' ),
 (  'ebd49325-4eae-40b1-b64c-5911be1a0a03' , 'Id' , NULL , '0' , '0' , '6' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'True' , 'False' , 'False' ),
 (  '85737de9-bc59-4ca7-9bd7-00a47cb877e2' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  '282d7301-6ef9-4fc6-9049-bebdb73432d0' , 'OrderNum' , NULL , '0' , '0' , '1' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  'e4fa1a0f-e7dd-4947-978b-514f3a413d4b' , 'State' , NULL , '0' , '0' , '3' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  'd2d7f537-f2a2-4d2c-b1f4-05e8660aa05a' , 'Remark' , NULL , '0' , '0' , '0' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  '79624911-4092-41db-b3ea-b5028211b6ee' , 'ListClass' , NULL , '0' , '0' , '0' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  '4419dc16-86a5-4bc4-908a-46f8fd49e0b0' , 'CssClass' , NULL , '0' , '0' , '0' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  'cb8c5258-ad90-4d80-a7d5-c9a4e17c014c' , 'DictType' , NULL , '0' , '0' , '0' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  '782ea77d-07d5-434a-a28b-5b4abfb6326b' , 'DictLabel' , NULL , '0' , '0' , '0' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  '833b9847-b056-481c-a9be-9a3da6bbec39' , 'DictValue' , NULL , '0' , '0' , '0' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  '8315430a-541a-439a-8d1c-d1572379734d' , 'IsDefault' , NULL , '0' , '0' , '3' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  '96d2af0c-0f0b-44e4-92ae-301fb58ee006' , 'CreationTime' , NULL , '0' , '0' , '5' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'True' , 'False' , 'False' , 'False' ),
 (  '19193649-cd02-42f7-929f-1d697f2b5edc' , 'CreatorId' , NULL , '0' , '0' , '6' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'False' , 'False' , 'False' , 'False' ),
 (  'f0796feb-3d80-4dd9-9e70-8957a981d2a4' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'False' , 'False' , 'False' , 'False' ),
 (  '9da31dbf-c322-4b7b-b3f5-d5c2bf777472' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'bd39c224-7728-4546-ae02-a48e27eb2f9d' , 'False' , 'False' , 'False' , 'False' ),
 (  '0791ff21-dd18-4517-8b54-afa7ca8c0340' , 'Id' , NULL , '0' , '0' , '6' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'True' , 'True' , 'False' , 'False' ),
 (  'f2e71e79-f721-4877-9e83-90864cb6dd5c' , 'IsDeleted' , NULL , '0' , '0' , '3' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'True' , 'False' , 'False' , 'False' ),
 (  '0ddf5a2b-9c62-4aa6-94e5-759a12787cda' , 'OrderNum' , NULL , '0' , '0' , '1' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'True' , 'False' , 'False' , 'False' ),
 (  '688bd998-115b-4c4f-b9d0-fb8877aebc62' , 'State' , NULL , '0' , '0' , '3' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'False' , 'False' , 'False' , 'False' ),
 (  '5da1aad8-bc64-43c5-b2e6-4363f2f70a32' , 'DictName' , NULL , '0' , '0' , '0' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'True' , 'False' , 'False' , 'False' ),
 (  '065e3c77-3ae8-48be-bfba-729322cb071f' , 'DictType' , NULL , '0' , '0' , '0' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'True' , 'False' , 'False' , 'False' ),
 (  '009ae5b2-fd52-4b2a-a5fe-49d920a20d1f' , 'Remark' , NULL , '0' , '0' , '0' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'True' , 'False' , 'False' , 'False' ),
 (  '8c8ea144-6848-475f-9db3-4ecc4935d1ef' , 'CreationTime' , NULL , '0' , '0' , '5' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'True' , 'False' , 'False' , 'False' ),
 (  'f0fdd881-90fe-4832-bd80-06446442fd7f' , 'CreatorId' , NULL , '0' , '0' , '6' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'False' , 'False' , 'False' , 'False' ),
 (  'f366800a-1674-4522-b618-4a2c625037df' , 'LastModifierId' , NULL , '0' , '0' , '6' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'False' , 'False' , 'False' , 'False' ),
 (  'd3038c48-5656-4bc0-b0fe-684259864a13' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'False' , 'False' , 'False' , 'False' ),
 (  '0deb8068-6823-4a7f-91fc-46823b3450de' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'True' , 'False' , 'False' , 'False' ),
 (  '9fcce242-43d3-43fa-bbf8-24502697b332' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '52435bad-d53e-4972-9cd5-cf7cf9647196' , 'True' , 'False' , 'False' , 'False' ),
 (  '47f54170-792c-4354-be3a-249e1d2fc166' , 'Id' , NULL , '0' , '0' , '6' , '07678a02-2921-46f1-bd07-e9a48c262f74' , 'True' , 'True' , 'False' , 'False' ),
 (  'e8f8f890-de6b-4784-a3fd-2a49204c30be' , 'FileSize' , NULL , '0' , '0' , '4' , '07678a02-2921-46f1-bd07-e9a48c262f74' , 'True' , 'False' , 'False' , 'False' ),
 (  '9b8ac20c-11a4-4cd1-8f6e-3f6191b2bc64' , 'FileName' , NULL , '0' , '0' , '0' , '07678a02-2921-46f1-bd07-e9a48c262f74' , 'True' , 'False' , 'False' , 'False' ),
 (  'af22fa94-c352-41cf-8250-4a63c8f70b54' , 'FilePath' , NULL , '0' , '0' , '0' , '07678a02-2921-46f1-bd07-e9a48c262f74' , 'True' , 'False' , 'False' , 'False' ),
 (  '6e84dae4-7fad-4ca8-8926-a288601e86ed' , 'CreationTime' , NULL , '0' , '0' , '5' , '07678a02-2921-46f1-bd07-e9a48c262f74' , 'True' , 'False' , 'False' , 'False' ),
 (  'c7d61993-849a-463d-8149-50d5bcacd7e0' , 'CreatorId' , NULL , '0' , '0' , '6' , '07678a02-2921-46f1-bd07-e9a48c262f74' , 'False' , 'False' , 'False' , 'False' ),
 (  '0921173d-d705-4fd8-8818-835261385bd1' , 'LastModifierId' , NULL , '0' , '0' , '6' , '07678a02-2921-46f1-bd07-e9a48c262f74' , 'False' , 'False' , 'False' , 'False' ),
 (  '541c7fa2-7e34-4c6b-b21a-f9a3c68e7063' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '07678a02-2921-46f1-bd07-e9a48c262f74' , 'False' , 'False' , 'False' , 'False' ),
 (  'cf29ca99-6b61-4eb0-9d7e-9fb3f16e6ff2' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '07678a02-2921-46f1-bd07-e9a48c262f74' , 'True' , 'False' , 'False' , 'False' ),
 (  '4675803f-c58d-4e42-92ef-7e3f542b69b2' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '07678a02-2921-46f1-bd07-e9a48c262f74' , 'True' , 'False' , 'False' , 'False' ),
 (  'b6ca96a9-11f8-4d24-ae3e-7ada2f482f3a' , 'Id' , NULL , '0' , '0' , '6' , '4993b781-4671-48cd-968c-f4dde1051c3e' , 'True' , 'True' , 'False' , 'False' ),
 (  '13b7bef9-499a-46c3-83cc-ef9d879882d2' , 'CreationTime' , NULL , '0' , '0' , '5' , '4993b781-4671-48cd-968c-f4dde1051c3e' , 'True' , 'False' , 'False' , 'False' ),
 (  '8e18235f-30ca-42b0-8988-ca815d4d667e' , 'LoginUser' , NULL , '0' , '0' , '0' , '4993b781-4671-48cd-968c-f4dde1051c3e' , 'True' , 'False' , 'False' , 'False' ),
 (  '0642c026-59db-4c70-b86d-7a40803f3774' , 'LoginLocation' , NULL , '0' , '0' , '0' , '4993b781-4671-48cd-968c-f4dde1051c3e' , 'True' , 'False' , 'False' , 'False' ),
 (  '0ca91682-d7a3-4bfe-b0a3-3d9a8e982660' , 'LoginIp' , NULL , '0' , '0' , '0' , '4993b781-4671-48cd-968c-f4dde1051c3e' , 'True' , 'False' , 'False' , 'False' ),
 (  '89f4aff8-b433-4866-b425-9cd9a58ff9dd' , 'Browser' , NULL , '0' , '0' , '0' , '4993b781-4671-48cd-968c-f4dde1051c3e' , 'True' , 'False' , 'False' , 'False' ),
 (  '4d3cd165-c35b-4aeb-8120-9eb8e40d1483' , 'Os' , NULL , '0' , '0' , '0' , '4993b781-4671-48cd-968c-f4dde1051c3e' , 'True' , 'False' , 'False' , 'False' ),
 (  '9113e7a2-933a-48ff-91e2-d12ca2072383' , 'LogMsg' , NULL , '0' , '0' , '0' , '4993b781-4671-48cd-968c-f4dde1051c3e' , 'True' , 'False' , 'False' , 'False' ),
 (  'd41c6b79-a88c-47d3-a497-569f50cad71e' , 'CreatorId' , NULL , '0' , '0' , '6' , '4993b781-4671-48cd-968c-f4dde1051c3e' , 'False' , 'False' , 'False' , 'False' ),
 (  'a9a889ad-52a7-46ac-8768-24d804c6065e' , 'Id' , NULL , '0' , '0' , '6' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'True' , 'False' , 'False' ),
 (  '4c1e93b1-f2ea-42a8-888b-d863a823abd1' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  'd7a7c774-b554-4e99-9c39-2c3b22091849' , 'CreationTime' , NULL , '0' , '0' , '5' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  'cc06293d-1a0c-4897-8297-08f19e1a5613' , 'CreatorId' , NULL , '0' , '0' , '6' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'False' , 'False' , 'False' , 'False' ),
 (  '358cc259-9c2b-47d4-a6f8-744cf7cf06bc' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'False' , 'False' , 'False' , 'False' ),
 (  '6a35401a-66c3-4f60-851c-0cf4b501b73d' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'False' , 'False' , 'False' , 'False' ),
 (  'acc76ee4-35c5-4e21-8f6c-4aae0f1dfb24' , 'OrderNum' , NULL , '0' , '0' , '1' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  '3020bd12-d9d8-44f1-b035-6e07f379352b' , 'State' , NULL , '0' , '0' , '3' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  '5219ca7c-812b-499e-9383-887762fc5ce5' , 'MenuName' , NULL , '0' , '0' , '0' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  '0b5c8543-be29-4bea-85f4-d022466e1fd5' , 'MenuType' , NULL , '0' , '0' , '0' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  '9c9f5c01-ebb8-4206-b17f-5465d9479e04' , 'PermissionCode' , NULL , '0' , '0' , '0' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  'f6600996-2c54-4add-afa1-d9c818eb240c' , 'ParentId' , NULL , '0' , '0' , '6' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  '02f4c68b-a138-4ff4-ad27-e2c1eba57d54' , 'MenuIcon' , NULL , '0' , '0' , '0' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  '728a3df4-4a61-4002-8def-dc0a83774256' , 'Router' , NULL , '0' , '0' , '0' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  'bf904b67-7d7c-4725-8153-969a7f7703cf' , 'IsLink' , NULL , '0' , '0' , '3' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  '29516dc9-6c6e-4c7e-9005-716a189b36ce' , 'IsCache' , NULL , '0' , '0' , '3' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  '5c3c7913-8a91-46ac-9b87-6fc376d7e645' , 'IsShow' , NULL , '0' , '0' , '3' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  '640a2e27-dea6-4d5c-ab3c-e5e890e40235' , 'Remark' , NULL , '0' , '0' , '0' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  '881cff6e-867d-4a41-b175-94ac5b8f5477' , 'Component' , NULL , '0' , '0' , '0' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  'b17d67c6-16a1-49f3-bbd7-f7f26e655057' , 'Query' , NULL , '0' , '0' , '0' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  'b6570a97-78ee-493b-b94b-b2c20e0aab2e' , 'Children' , NULL , '0' , '0' , '0' , 'fd46277a-d24a-4026-9e27-bbca036811a2' , 'True' , 'False' , 'False' , 'False' ),
 (  'fdae2981-61cd-478a-936e-9aec797d8e61' , 'Id' , NULL , '0' , '0' , '6' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'True' , 'True' , 'False' , 'False' ),
 (  '84b8dfc8-cf8d-4090-be11-f97d46c77700' , 'Title' , NULL , '0' , '0' , '0' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'True' , 'False' , 'False' , 'False' ),
 (  'b6e270f8-81a8-4824-8cb6-0aee278abadd' , 'Type' , NULL , '0' , '0' , '0' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'True' , 'False' , 'False' , 'False' ),
 (  '59867802-d75c-4b71-80ef-da4a72b88c79' , 'Content' , NULL , '0' , '0' , '0' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'True' , 'False' , 'False' , 'False' ),
 (  '9eaf1164-b92d-4486-af34-47da37f029b2' , 'IsDeleted' , NULL , '0' , '0' , '3' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'True' , 'False' , 'False' , 'False' ),
 (  'd9b3ddb5-b784-40eb-bd0a-2b3dc5cc3bd2' , 'CreationTime' , NULL , '0' , '0' , '5' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'True' , 'False' , 'False' , 'False' ),
 (  'a67b76b7-44d9-42c5-b891-3a248a9fa949' , 'CreatorId' , NULL , '0' , '0' , '6' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'False' , 'False' , 'False' , 'False' ),
 (  '23566e5d-8c65-4294-8acd-63d072a5095c' , 'LastModifierId' , NULL , '0' , '0' , '6' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'False' , 'False' , 'False' , 'False' ),
 (  '216734be-63ad-4f25-b7b6-f9c639c15f26' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'False' , 'False' , 'False' , 'False' ),
 (  '59338e95-43ee-4f91-ad81-12a6b85f3da1' , 'OrderNum' , NULL , '0' , '0' , '1' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'True' , 'False' , 'False' , 'False' ),
 (  '04c2a9b3-9949-409b-8de4-b706d8b53484' , 'State' , NULL , '0' , '0' , '3' , '0895b219-48ac-415d-b64f-41acae72f8b4' , 'True' , 'False' , 'False' , 'False' ),
 (  '7dcc6dcd-990f-403a-832f-cad36b22cff1' , 'Id' , NULL , '0' , '0' , '6' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'True' , 'True' , 'False' , 'False' ),
 (  '95b27dfb-bd6a-4c6a-8c70-27a40b094016' , 'IsDeleted' , NULL , '0' , '0' , '3' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'True' , 'False' , 'False' , 'False' ),
 (  'e3fec698-8bd4-408c-b637-1e0f04b41e59' , 'CreationTime' , NULL , '0' , '0' , '5' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'True' , 'False' , 'False' , 'False' ),
 (  'c671bc73-1bbc-4b73-93de-3cc62a5538bc' , 'CreatorId' , NULL , '0' , '0' , '6' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'False' , 'False' , 'False' , 'False' ),
 (  '317bd057-4536-408e-9265-dc9af511e3d1' , 'LastModifierId' , NULL , '0' , '0' , '6' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'False' , 'False' , 'False' , 'False' ),
 (  '5c91ffa9-450f-4175-b65f-1898e0be9ab2' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'False' , 'False' , 'False' , 'False' ),
 (  'dfc30a5c-1aa9-4882-a2d7-a400de321df3' , 'OrderNum' , NULL , '0' , '0' , '1' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'True' , 'False' , 'False' , 'False' ),
 (  '004393dc-268a-422b-b054-d8f6c4ed0a61' , 'State' , NULL , '0' , '0' , '3' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'True' , 'False' , 'False' , 'False' ),
 (  '07e942fa-e96e-49ca-9027-32b9915fe692' , 'PostCode' , NULL , '0' , '0' , '0' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'True' , 'False' , 'False' , 'False' ),
 (  'b844d83d-1305-417d-8028-f931d7e48887' , 'PostName' , NULL , '0' , '0' , '0' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'True' , 'False' , 'False' , 'False' ),
 (  'b4ccea6f-a0dd-4a5f-9c41-0d29a226ee1c' , 'Remark' , NULL , '0' , '0' , '0' , '5c798465-387e-41e5-a92a-a4beb9c94448' , 'True' , 'False' , 'False' , 'False' ),
 (  '9df5ebfb-51b1-47a9-9b90-74ca460cd035' , 'Id' , NULL , '0' , '0' , '6' , 'b5da8ebd-f994-4444-9115-81fa8808a8bb' , 'True' , 'True' , 'False' , 'False' ),
 (  '192c7761-f1fb-406d-99ae-06c6b0dd2cf8' , 'RoleId' , NULL , '0' , '0' , '6' , 'b5da8ebd-f994-4444-9115-81fa8808a8bb' , 'True' , 'False' , 'False' , 'False' ),
 (  '162f0182-d74c-46b7-b6fe-2d9e9da7ae71' , 'DeptId' , NULL , '0' , '0' , '6' , 'b5da8ebd-f994-4444-9115-81fa8808a8bb' , 'True' , 'False' , 'False' , 'False' ),
 (  'f44a31d8-e198-495f-8c1f-fef9771fa458' , 'Id' , NULL , '0' , '0' , '6' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'True' , 'False' , 'False' ),
 (  '972697da-f044-470b-a70b-6e6a917d3d6e' , 'IsDeleted' , NULL , '0' , '0' , '3' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'False' , 'False' , 'False' ),
 (  'b3848bb5-edb5-4140-8431-daa54da0539d' , 'CreationTime' , NULL , '0' , '0' , '5' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'False' , 'False' , 'False' ),
 (  '94eacf50-e704-44ca-8cbd-198085c2e215' , 'CreatorId' , NULL , '0' , '0' , '6' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'False' , 'False' , 'False' , 'False' ),
 (  'c9ced208-821a-4d10-b962-e9468dd1bf2d' , 'LastModifierId' , NULL , '0' , '0' , '6' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'False' , 'False' , 'False' , 'False' ),
 (  '8682aa79-b28f-4a31-9f61-4875f433185b' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'False' , 'False' , 'False' , 'False' ),
 (  '381294b8-63ab-4359-ad73-a08f3dea8679' , 'OrderNum' , NULL , '0' , '0' , '1' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'False' , 'False' , 'False' ),
 (  '765bdafe-1d89-45cc-a496-8e1672c4b51e' , 'RoleName' , NULL , '0' , '0' , '0' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'False' , 'False' , 'False' ),
 (  '5a92cbd2-7223-40e8-a206-28ebc12bc6b9' , 'RoleCode' , NULL , '0' , '0' , '0' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'False' , 'False' , 'False' ),
 (  '83943e51-b184-4e40-8f4a-dd5e3c46d265' , 'Remark' , NULL , '0' , '0' , '0' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'False' , 'False' , 'False' ),
 (  'f8777d58-bb96-4785-ae02-cf6e9a314d6e' , 'DataScope' , NULL , '0' , '0' , '0' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'False' , 'False' , 'False' ),
 (  '92d32259-75bb-446a-8b3c-f8c493fc2dff' , 'State' , NULL , '0' , '0' , '3' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'False' , 'False' , 'False' ),
 (  '68b17e04-b512-40dd-8c23-5c527068ce00' , 'Menus' , NULL , '0' , '0' , '0' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'False' , 'False' , 'False' ),
 (  '9093fc79-454b-4f42-be13-017a89334b5a' , 'Depts' , NULL , '0' , '0' , '0' , '1db7c1db-a8bb-4440-b484-3d47fbcd2019' , 'True' , 'False' , 'False' , 'False' ),
 (  '9e9f8984-df79-49d8-8f61-f448a43d13fe' , 'Id' , NULL , '0' , '0' , '6' , '54264e05-4c9b-48a1-9017-5bb9097bcd26' , 'True' , 'True' , 'False' , 'False' ),
 (  '7cf669b4-91ff-4d1d-8b9f-7fe3b3c5d59e' , 'RoleId' , NULL , '0' , '0' , '6' , '54264e05-4c9b-48a1-9017-5bb9097bcd26' , 'True' , 'False' , 'False' , 'False' ),
 (  '9b744684-bc0c-454f-9972-543b9393b5f3' , 'MenuId' , NULL , '0' , '0' , '6' , '54264e05-4c9b-48a1-9017-5bb9097bcd26' , 'True' , 'False' , 'False' , 'False' ),
 (  'd8b0b032-4035-478e-ac7b-5b6f678afb8a' , 'Id' , NULL , '0' , '0' , '6' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'True' , 'False' , 'False' ),
 (  '537aa174-7f2b-4c16-abdd-0c7bacff7427' , 'IsDeleted' , NULL , '0' , '0' , '3' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  'e57c12bc-1c66-4fdc-8b02-1027722a57ec' , 'Name' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  'bc7e4cde-d94f-41d7-a11f-11d32b0f8211' , 'Age' , NULL , '0' , '0' , '1' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'False' , 'False' , 'False' , 'False' ),
 (  '83c95077-f6bc-4a66-a89d-3fae58a776d1' , 'UserName' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '25bef18f-317c-4f15-ae3d-9f1f3890896f' , 'Password' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '33e2a798-8127-4f2b-9421-3f8b8a4348ab' , 'Salt' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '16eaec69-ae3b-434d-961e-355c16cd1020' , 'Icon' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '2bac5ef4-91fb-4b6e-ba62-f1ad38a8b629' , 'Nick' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '11fd5b37-7881-4845-9bd8-81151515b4d9' , 'Email' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  'a7758a4c-58a7-414d-985c-936da57035a7' , 'Ip' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '33897024-7fc8-43e5-8fd3-216fabf9017e' , 'Address' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '21f0bcf0-1585-4463-90ab-bd6050ae9b63' , 'Phone' , NULL , '0' , '0' , '2' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'False' , 'False' , 'False' , 'False' ),
 (  '9097c6e9-1fd3-4969-8911-c4e9da7a5731' , 'Introduction' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '142b26a8-8ea1-45cf-8ead-daf40b35e32f' , 'Remark' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  'b3f57c1f-5218-475b-a5ac-5e4c6e0e970e' , 'Sex' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '4872401b-9248-4a52-a308-48e6aa60bba3' , 'DeptId' , NULL , '0' , '0' , '6' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'False' , 'False' , 'False' , 'False' ),
 (  '7a280799-2ef5-418b-9a94-85873cb5663e' , 'CreationTime' , NULL , '0' , '0' , '5' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '48bdc28f-1ba5-4850-9c09-31ed72ba58cc' , 'CreatorId' , NULL , '0' , '0' , '6' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'False' , 'False' , 'False' , 'False' ),
 (  '85cb676d-7ab9-4635-a127-e3af832a3196' , 'LastModifierId' , NULL , '0' , '0' , '6' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'False' , 'False' , 'False' , 'False' ),
 (  '1e207c70-445c-4004-8c5f-963882071c3b' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'False' , 'False' , 'False' , 'False' ),
 (  'b561b866-e728-46f5-8544-9e8b282a86b2' , 'OrderNum' , NULL , '0' , '0' , '1' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '3ceda9d0-e657-4a12-aa01-709d53e5f657' , 'State' , NULL , '0' , '0' , '3' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '67427dfe-683a-45a7-9c11-bb7a1d8e5802' , 'Roles' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  'cbc85169-129f-49cd-9e20-c6caf483ce1a' , 'Posts' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  '2302e5a7-5e13-4e9b-a88a-de2332018661' , 'Dept' , NULL , '0' , '0' , '0' , '73e70577-dea0-4bc7-8471-40112a4317a3' , 'True' , 'False' , 'False' , 'False' ),
 (  'ef2b44fb-d2ce-4c9b-b156-45121ddb1444' , 'Id' , NULL , '0' , '0' , '6' , '447c58be-6a24-47c2-84a9-c8ee68784181' , 'True' , 'True' , 'False' , 'False' ),
 (  '0ebcf428-e999-47de-8e8a-d8d828b7f2ad' , 'UserId' , NULL , '0' , '0' , '6' , '447c58be-6a24-47c2-84a9-c8ee68784181' , 'True' , 'False' , 'False' , 'False' ),
 (  '2eb4e44f-700a-4f54-a261-e21c0ba06c70' , 'PostId' , NULL , '0' , '0' , '6' , '447c58be-6a24-47c2-84a9-c8ee68784181' , 'True' , 'False' , 'False' , 'False' ),
 (  'c53e5544-4c6d-4f91-9274-a4afc6e157f2' , 'Id' , NULL , '0' , '0' , '6' , 'e2c2da81-f68e-4e41-8282-d858d788899e' , 'True' , 'True' , 'False' , 'False' ),
 (  '22fc3489-1eca-42d0-96a5-cdb0268ab8b4' , 'RoleId' , NULL , '0' , '0' , '6' , 'e2c2da81-f68e-4e41-8282-d858d788899e' , 'True' , 'False' , 'False' , 'False' ),
 (  'a3cbd867-c897-44cc-a0b9-f0a08f181e36' , 'UserId' , NULL , '0' , '0' , '6' , 'e2c2da81-f68e-4e41-8282-d858d788899e' , 'True' , 'False' , 'False' , 'False' ),
 (  'f7ffd6e4-62b3-4c97-b336-da71d2a3cd82' , 'Id' , NULL , '0' , '0' , '6' , '71551c4a-4adb-48ea-b2ba-33495a80705f' , 'True' , 'True' , 'False' , 'False' ),
 (  '937a6ab5-e386-4998-8a0f-c9280b2b1a33' , 'UserId' , NULL , '0' , '0' , '6' , '71551c4a-4adb-48ea-b2ba-33495a80705f' , 'True' , 'False' , 'False' , 'False' ),
 (  'f9daf351-f508-4b04-b064-ade68de30e85' , 'OpenId' , NULL , '0' , '0' , '0' , '71551c4a-4adb-48ea-b2ba-33495a80705f' , 'True' , 'False' , 'False' , 'False' ),
 (  '0afdf561-be93-49b3-b718-8890de27c94a' , 'Name' , NULL , '0' , '0' , '0' , '71551c4a-4adb-48ea-b2ba-33495a80705f' , 'True' , 'False' , 'False' , 'False' ),
 (  '0e5743fc-bb51-4eb0-96ad-3044e62e450e' , 'AuthType' , NULL , '0' , '0' , '0' , '71551c4a-4adb-48ea-b2ba-33495a80705f' , 'True' , 'False' , 'False' , 'False' ),
 (  '17c1e96d-7103-45b7-80d5-4a57921fd229' , 'IsDeleted' , NULL , '0' , '0' , '3' , '71551c4a-4adb-48ea-b2ba-33495a80705f' , 'True' , 'False' , 'False' , 'False' ),
 (  '119de032-70b4-46b7-be3b-40981b2ce0dd' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '71551c4a-4adb-48ea-b2ba-33495a80705f' , 'True' , 'False' , 'False' , 'False' )
;
INSERT INTO "yifield"  ("id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic") VALUES 
 (  '35cc3d21-864e-4c91-8b90-84ad273994f2' , 'CreationTime' , NULL , '0' , '0' , '5' , '71551c4a-4adb-48ea-b2ba-33495a80705f' , 'True' , 'False' , 'False' , 'False' ),
 (  '1afaf555-7824-4f0b-869c-9dea4d762dfc' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '71551c4a-4adb-48ea-b2ba-33495a80705f' , 'True' , 'False' , 'False' , 'False' ),
 (  'f5a2fed4-0ec4-4bc8-93ce-b11e2215dc30' , 'Id' , NULL , '0' , '0' , '6' , '7e5bfbd0-5afa-4dde-828f-9b3526df25a0' , 'True' , 'True' , 'False' , 'False' ),
 (  '5fef5a4a-5456-4121-9b4a-0df760fa48e0' , 'Number' , NULL , '0' , '0' , '2' , '7e5bfbd0-5afa-4dde-828f-9b3526df25a0' , 'True' , 'False' , 'False' , 'False' ),
 (  'afee1027-4606-48d0-86b7-b77a1596ed5f' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '7e5bfbd0-5afa-4dde-828f-9b3526df25a0' , 'False' , 'False' , 'False' , 'False' ),
 (  'f8fde629-ff78-4992-b1d4-997329a7009b' , 'CreationTime' , NULL , '0' , '0' , '5' , '7e5bfbd0-5afa-4dde-828f-9b3526df25a0' , 'True' , 'False' , 'False' , 'False' ),
 (  '0fab1ac1-9bd9-4ffb-84a1-b9dbc9f315c6' , 'Id' , NULL , '0' , '0' , '6' , 'e7691fc8-ab3b-4e19-91fd-022c64aad53e' , 'True' , 'True' , 'False' , 'False' ),
 (  'a8bd57bd-3475-4836-8300-37d0dc7327ac' , 'UserId' , NULL , '0' , '0' , '6' , 'e7691fc8-ab3b-4e19-91fd-022c64aad53e' , 'True' , 'False' , 'False' , 'False' ),
 (  '33e72cf4-311a-4ea8-8fa6-717907f51ce4' , 'UserLimit' , NULL , '0' , '0' , '0' , 'e7691fc8-ab3b-4e19-91fd-022c64aad53e' , 'True' , 'False' , 'False' , 'False' ),
 (  'bb1ac8e9-eccb-4688-ab31-b6964970ea1c' , 'Level' , NULL , '0' , '0' , '1' , 'e7691fc8-ab3b-4e19-91fd-022c64aad53e' , 'True' , 'False' , 'False' , 'False' ),
 (  'a365bc0d-8ec3-4b26-9e95-c5e0e61725ed' , 'Money' , NULL , '0' , '0' , '4' , 'e7691fc8-ab3b-4e19-91fd-022c64aad53e' , 'True' , 'False' , 'False' , 'False' ),
 (  'cd811e1c-3512-4abb-9dcb-adc22f13190c' , 'Experience' , NULL , '0' , '0' , '2' , 'e7691fc8-ab3b-4e19-91fd-022c64aad53e' , 'True' , 'False' , 'False' , 'False' ),
 (  '27f527a5-6fc2-49ff-b968-2a3423266102' , 'DiscussNumber' , NULL , '0' , '0' , '1' , 'e7691fc8-ab3b-4e19-91fd-022c64aad53e' , 'True' , 'False' , 'False' , 'False' ),
 (  '81237eb0-4d51-49b8-9d66-6fb6b749a101' , 'CommentNumber' , NULL , '0' , '0' , '1' , 'e7691fc8-ab3b-4e19-91fd-022c64aad53e' , 'True' , 'False' , 'False' , 'False' ),
 (  '4c841fa4-9bf8-4bd5-adc9-653838b580cd' , 'AgreeNumber' , NULL , '0' , '0' , '1' , 'e7691fc8-ab3b-4e19-91fd-022c64aad53e' , 'True' , 'False' , 'False' , 'False' ),
 (  '4c46ffee-7312-460f-8b24-c9b4d001c017' , 'Id' , NULL , '0' , '0' , '6' , 'ac065e6e-9459-467f-861f-28d815556a1c' , 'True' , 'True' , 'False' , 'False' ),
 (  'c36cdcb0-0704-4f5f-881e-72a7ac2145cf' , 'CommentPage' , NULL , '0' , '0' , '1' , 'ac065e6e-9459-467f-861f-28d815556a1c' , 'True' , 'False' , 'False' , 'False' ),
 (  '3f43ff17-588f-45a3-a54a-97117a5a0e6e' , 'DiscussPage' , NULL , '0' , '0' , '1' , 'ac065e6e-9459-467f-861f-28d815556a1c' , 'True' , 'False' , 'False' , 'False' ),
 (  '37b73de2-d92e-43d6-998e-fbf77b1d2fc5' , 'CommentExperience' , NULL , '0' , '0' , '1' , 'ac065e6e-9459-467f-861f-28d815556a1c' , 'True' , 'False' , 'False' , 'False' ),
 (  'cffa4db9-a02c-4c6c-8304-286a5898addf' , 'DiscussExperience' , NULL , '0' , '0' , '1' , 'ac065e6e-9459-467f-861f-28d815556a1c' , 'True' , 'False' , 'False' , 'False' ),
 (  '16f66bc9-2345-42fb-b7ba-1e5d8e4d9964' , 'Title' , NULL , '0' , '0' , '0' , 'ac065e6e-9459-467f-861f-28d815556a1c' , 'True' , 'False' , 'False' , 'False' ),
 (  'f3f282ed-a36f-45ef-9c78-6c48ced31cfb' , 'Id' , NULL , '0' , '0' , '6' , '4d92fd02-fda5-42be-a65b-ad4bb211fdd6' , 'True' , 'True' , 'False' , 'False' ),
 (  '1ac80bd8-327f-4783-9025-0af574431602' , 'CurrentLevel' , NULL , '0' , '0' , '1' , '4d92fd02-fda5-42be-a65b-ad4bb211fdd6' , 'True' , 'False' , 'False' , 'False' ),
 (  'e4c66e8d-7c69-4604-8d55-fb570b7252e8' , 'MinExperience' , NULL , '0' , '0' , '4' , '4d92fd02-fda5-42be-a65b-ad4bb211fdd6' , 'True' , 'False' , 'False' , 'False' ),
 (  '9e86c99a-a609-46a8-81b8-1c872c0ad9c1' , 'Name' , NULL , '0' , '0' , '0' , '4d92fd02-fda5-42be-a65b-ad4bb211fdd6' , 'True' , 'False' , 'False' , 'False' ),
 (  'e135b39d-527c-457b-964a-39a23c06d279' , 'Nick' , NULL , '0' , '0' , '0' , '4d92fd02-fda5-42be-a65b-ad4bb211fdd6' , 'True' , 'False' , 'False' , 'False' ),
 (  'd862299f-a029-4dcc-bdaf-5339cc3181b9' , 'Logo' , NULL , '0' , '0' , '0' , '4d92fd02-fda5-42be-a65b-ad4bb211fdd6' , 'True' , 'False' , 'False' , 'False' ),
 (  '8854003d-1709-4894-9db8-82bf0bc2205d' , 'Id' , NULL , '0' , '0' , '6' , 'bad2e953-b53c-4671-b7da-36704bab3bd8' , 'True' , 'True' , 'False' , 'False' ),
 (  'd7764f4d-c94e-4c75-b1f1-a58f28f8583c' , 'CreationTime' , NULL , '0' , '0' , '5' , 'bad2e953-b53c-4671-b7da-36704bab3bd8' , 'True' , 'False' , 'False' , 'False' ),
 (  'a42ef57e-7d9d-4235-8a81-7fe1138c99ff' , 'CreatorId' , NULL , '0' , '0' , '6' , 'bad2e953-b53c-4671-b7da-36704bab3bd8' , 'False' , 'False' , 'False' , 'False' ),
 (  'ffb36812-ef6e-4ea5-a327-e1541f52c9e6' , 'ContinuousNumber' , NULL , '0' , '0' , '1' , 'bad2e953-b53c-4671-b7da-36704bab3bd8' , 'True' , 'False' , 'False' , 'False' ),
 (  'cc298c2c-bcdf-4432-a6ea-6191dd299954' , 'Id' , NULL , '0' , '0' , '6' , 'e5ff7df0-10ee-4bbd-a359-d1c9193d69b9' , 'True' , 'True' , 'False' , 'False' ),
 (  'bcb8fd7b-709e-4ab9-a120-935079d9919c' , 'CreationTime' , NULL , '0' , '0' , '5' , 'e5ff7df0-10ee-4bbd-a359-d1c9193d69b9' , 'True' , 'False' , 'False' , 'False' ),
 (  'e7761c1e-4b6a-4e57-be61-20e86194bade' , 'DiscussId' , NULL , '0' , '0' , '6' , 'e5ff7df0-10ee-4bbd-a359-d1c9193d69b9' , 'True' , 'False' , 'False' , 'False' ),
 (  'ee08497d-3938-4b2f-a49c-e893cdd9ecb4' , 'CreatorId' , NULL , '0' , '0' , '6' , 'e5ff7df0-10ee-4bbd-a359-d1c9193d69b9' , 'False' , 'False' , 'False' , 'False' ),
 (  'bdcb1389-7a05-4858-9c22-1417d9ec8b1c' , 'Id' , NULL , '0' , '0' , '6' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'True' , 'True' , 'False' , 'False' ),
 (  '70a660f3-8b39-4345-8052-b2bc89d2014f' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'True' , 'False' , 'False' , 'False' ),
 (  '2e665ecb-0a5a-4dab-aa0e-4a37fbdcb0d3' , 'Content' , NULL , '0' , '0' , '0' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'True' , 'False' , 'False' , 'False' ),
 (  'f72e944e-9c0d-4a80-8dc8-f6494b6b7418' , 'Name' , NULL , '0' , '0' , '0' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'True' , 'False' , 'False' , 'False' ),
 (  'd19c27e1-d88c-4334-be5b-c53a4a146949' , 'DiscussId' , NULL , '0' , '0' , '6' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'True' , 'False' , 'False' , 'False' ),
 (  'b8cdf3ba-65ef-44a1-a801-dd9ed27135cb' , 'ParentId' , NULL , '0' , '0' , '6' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'True' , 'False' , 'False' , 'False' ),
 (  'b4921588-4864-43c5-a384-e8e4a795b7d5' , 'Children' , NULL , '0' , '0' , '0' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'True' , 'False' , 'False' , 'False' ),
 (  '2c933aca-491e-43d0-bb9f-80a21f3a751a' , 'CreationTime' , NULL , '0' , '0' , '5' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'True' , 'False' , 'False' , 'False' ),
 (  'c401eaf1-9f3e-4f48-a7c1-07ac8266ea41' , 'CreatorId' , NULL , '0' , '0' , '6' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'False' , 'False' , 'False' , 'False' ),
 (  '929db66f-b592-463c-bae1-293979414fea' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'False' , 'False' , 'False' , 'False' ),
 (  '9c814f0f-fab7-4cf4-998b-4380ec1f7410' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'False' , 'False' , 'False' , 'False' ),
 (  'c63a51f8-91e7-4d0b-942e-3344c5a6f89e' , 'OrderNum' , NULL , '0' , '0' , '1' , 'aa41c86a-9239-4703-86ff-2e48152107aa' , 'True' , 'False' , 'False' , 'False' ),
 (  'cea74728-1f58-430b-9fb5-eb8fb4d38224' , 'Id' , NULL , '0' , '0' , '6' , '85f7d0cb-d982-4f73-8019-7313430631d1' , 'True' , 'True' , 'False' , 'False' ),
 (  '67690054-3ff4-43b0-9ef3-35ae0d67be4c' , 'Name' , NULL , '0' , '0' , '0' , '85f7d0cb-d982-4f73-8019-7313430631d1' , 'True' , 'False' , 'False' , 'False' ),
 (  '49f8e9ff-607b-42a9-8273-e86529d54714' , 'Logo' , NULL , '0' , '0' , '0' , '85f7d0cb-d982-4f73-8019-7313430631d1' , 'True' , 'False' , 'False' , 'False' ),
 (  'c43441d6-abbd-4c05-929f-e3109580d339' , 'Color' , NULL , '0' , '0' , '0' , '85f7d0cb-d982-4f73-8019-7313430631d1' , 'True' , 'False' , 'False' , 'False' ),
 (  'd5a03beb-06b7-4ab8-b2c8-d427b9fe1cf7' , 'IsDeleted' , NULL , '0' , '0' , '3' , '85f7d0cb-d982-4f73-8019-7313430631d1' , 'True' , 'False' , 'False' , 'False' ),
 (  '4e9290a9-eeb8-4ad1-9cc0-088cb2f45ea1' , 'CreationTime' , NULL , '0' , '0' , '5' , '85f7d0cb-d982-4f73-8019-7313430631d1' , 'True' , 'False' , 'False' , 'False' ),
 (  '0ec36c1d-756a-43e8-bc21-214c607d87ac' , 'CreatorId' , NULL , '0' , '0' , '6' , '85f7d0cb-d982-4f73-8019-7313430631d1' , 'False' , 'False' , 'False' , 'False' ),
 (  'bc220153-c610-4201-ae93-32b524f4091a' , 'LastModifierId' , NULL , '0' , '0' , '6' , '85f7d0cb-d982-4f73-8019-7313430631d1' , 'False' , 'False' , 'False' , 'False' ),
 (  'db3f6a1f-2ea3-4177-9923-4d0ba834b224' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '85f7d0cb-d982-4f73-8019-7313430631d1' , 'False' , 'False' , 'False' , 'False' ),
 (  'c25ad9bf-3691-4ecc-8e28-d85a9661617d' , 'Id' , NULL , '0' , '0' , '6' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'True' , 'True' , 'False' , 'False' ),
 (  'ffe1d1fb-4f51-4275-84a9-40da5301587d' , 'IsDeleted' , NULL , '0' , '0' , '3' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'True' , 'False' , 'False' , 'False' ),
 (  '1209b1ba-fb73-4ce7-bf2f-336e199cecf6' , 'Content' , NULL , '0' , '500' , '0' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'True' , 'False' , 'False' , 'False' ),
 (  '8359233c-d69f-41fb-820e-2e1f0f52e243' , 'DiscussId' , NULL , '0' , '0' , '6' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'True' , 'False' , 'False' , 'False' ),
 (  '0ce38dd9-f4a9-4afa-9388-fe83c695d921' , 'ParentId' , NULL , '0' , '0' , '6' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'True' , 'False' , 'False' , 'False' ),
 (  'c731231a-82d1-4014-92d7-3e73a14e6ad3' , 'CreationTime' , NULL , '0' , '0' , '5' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'True' , 'False' , 'False' , 'False' ),
 (  'f83c7ec2-9320-4e2d-a284-dfba611bb11d' , 'RootId' , NULL , '0' , '0' , '6' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'True' , 'False' , 'False' , 'False' ),
 (  'bdc3bcdb-b05a-4039-8278-bdee6f669ae0' , 'Children' , NULL , '0' , '0' , '0' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'True' , 'False' , 'False' , 'False' ),
 (  '8f687acb-d866-47a8-98e1-88c444217a09' , 'CreateUser' , NULL , '0' , '0' , '0' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'True' , 'False' , 'False' , 'False' ),
 (  '1645ac6b-d904-49ff-bd79-d60d7fea44d8' , 'CommentedUser' , NULL , '0' , '0' , '0' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'True' , 'False' , 'False' , 'False' ),
 (  'f4657dd2-ac92-4b7f-9c96-8bf08c889deb' , 'CreatorId' , NULL , '0' , '0' , '6' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'False' , 'False' , 'False' , 'False' ),
 (  'd5f02e68-ff70-414f-9881-ea6d0b71c4ff' , 'LastModifierId' , NULL , '0' , '0' , '6' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'False' , 'False' , 'False' , 'False' ),
 (  'a51ca650-85d8-4a6b-91c5-eab087e973de' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '13d9d586-cbaa-4a75-b76a-cf12710834fe' , 'False' , 'False' , 'False' , 'False' ),
 (  'fd04e5ef-fe41-4ea9-a1cb-c97426a40b4e' , 'Id' , NULL , '0' , '0' , '6' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'True' , 'False' , 'False' ),
 (  '30344fd9-c136-4e1d-9ac1-f91b9aa1b3ff' , 'Title' , NULL , '0' , '0' , '0' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '4c431d3a-6fbb-4dff-a197-1965d30ea134' , 'Types' , NULL , '0' , '0' , '0' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '84d2da8a-0b59-41d4-813d-178af935f28e' , 'Introduction' , NULL , '0' , '0' , '0' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '855581da-6127-449a-b443-a2f4bb268634' , 'AgreeNum' , NULL , '0' , '0' , '1' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  'fcdbf2c9-fd53-4da6-bc73-5fe47d56245b' , 'SeeNum' , NULL , '0' , '0' , '1' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '1f35ef1d-c5cb-49db-82ab-11cb722c3a55' , 'Cover' , NULL , '0' , '0' , '0' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '3d6e915d-59b9-48d2-b7a0-6d2e17002abb' , 'Content' , NULL , '0' , '0' , '0' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '516dfcc7-6407-46d4-809f-5e8f4bf84941' , 'Color' , NULL , '0' , '0' , '0' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '3779095f-e690-4db0-860f-03d37cbd23f3' , 'IsDeleted' , NULL , '0' , '0' , '3' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '40e53267-8522-4c82-bd49-45596c8c9d3b' , 'IsTop' , NULL , '0' , '0' , '3' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '2b854502-e4ba-4958-8794-fd36e14614ad' , 'OrderNum' , NULL , '0' , '0' , '1' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  'b5f97e00-c6d9-4eaf-b319-e149308d0ed1' , 'PermissionType' , NULL , '0' , '0' , '0' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  'be5ec324-35b3-4c67-941c-f42db1f6e418' , 'PlateId' , NULL , '0' , '0' , '6' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '62140e7e-613d-4a34-b091-073f930ace45' , 'CreationTime' , NULL , '0' , '0' , '5' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '0adc38fc-7c72-478c-a782-c6f96b889d20' , 'CreatorId' , NULL , '0' , '0' , '6' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'False' , 'False' , 'False' , 'False' ),
 (  '45d2f7c7-50ad-4448-bd69-77eeaa2336da' , 'LastModifierId' , NULL , '0' , '0' , '6' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'False' , 'False' , 'False' , 'False' ),
 (  '6b916757-7155-47ab-b643-ef7bfdcf31f3' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'False' , 'False' , 'False' , 'False' ),
 (  '20f77ec1-267e-480c-9708-0a2166492bcd' , 'PermissionUserIds' , NULL , '0' , '0' , '0' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '6fb49eab-5c76-4b25-a3fa-5f9d4a8f0847' , 'IsDisableCreateComment' , NULL , '0' , '0' , '3' , '18f9f92a-54e1-41c8-b97b-16f80a562dd4' , 'True' , 'False' , 'False' , 'False' ),
 (  '64450feb-2f64-41f2-8677-f9f202bbee41' , 'Id' , NULL , '0' , '0' , '6' , '13b607db-05fb-464b-bfb1-cbc2d5f3e5f5' , 'True' , 'True' , 'False' , 'False' ),
 (  'e83a6e32-fad4-4209-afc4-b0a310023b0a' , 'DiscussId' , NULL , '0' , '0' , '6' , '13b607db-05fb-464b-bfb1-cbc2d5f3e5f5' , 'True' , 'False' , 'False' , 'False' ),
 (  '01c6625f-367d-40b8-b3c9-077fee512ff9' , 'MyTypeId' , NULL , '0' , '0' , '6' , '13b607db-05fb-464b-bfb1-cbc2d5f3e5f5' , 'True' , 'False' , 'False' , 'False' ),
 (  '16997472-b7f1-49da-996c-9209ac2efdc0' , 'Id' , NULL , '0' , '0' , '6' , 'ad886fcd-07b4-43b0-bc23-a21183eb67ff' , 'True' , 'True' , 'False' , 'False' ),
 (  'f94516be-47d1-4b1f-a9ad-4a2097fc1fbd' , 'OrderNum' , NULL , '0' , '0' , '1' , 'ad886fcd-07b4-43b0-bc23-a21183eb67ff' , 'True' , 'False' , 'False' , 'False' ),
 (  'ba96c6e9-6d60-4266-a8c5-6aa8364f18de' , 'DiscussId' , NULL , '0' , '0' , '6' , 'ad886fcd-07b4-43b0-bc23-a21183eb67ff' , 'True' , 'False' , 'False' , 'False' ),
 (  'd5062e39-df9b-403c-8de1-437312d02738' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'ad886fcd-07b4-43b0-bc23-a21183eb67ff' , 'False' , 'False' , 'False' , 'False' ),
 (  '738fb763-01f7-417c-b9bf-d36a72561da3' , 'Id' , NULL , '0' , '0' , '6' , 'a1cf6f33-01a7-430f-910f-7cbf61721c47' , 'True' , 'True' , 'False' , 'False' ),
 (  'e2366aa8-de69-4473-b017-04c54b0c8da8' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'a1cf6f33-01a7-430f-910f-7cbf61721c47' , 'True' , 'False' , 'False' , 'False' ),
 (  '8121dcef-f7ce-41b2-b1bc-100724e1c7bd' , 'Name' , NULL , '0' , '0' , '0' , 'a1cf6f33-01a7-430f-910f-7cbf61721c47' , 'True' , 'False' , 'False' , 'False' ),
 (  'e5a55d21-804a-4e4a-9411-ad643f93375d' , 'Color' , NULL , '0' , '0' , '0' , 'a1cf6f33-01a7-430f-910f-7cbf61721c47' , 'True' , 'False' , 'False' , 'False' ),
 (  '7c38be35-38bc-41bd-811c-fa9a5af08483' , 'BackgroundColor' , NULL , '0' , '0' , '0' , 'a1cf6f33-01a7-430f-910f-7cbf61721c47' , 'True' , 'False' , 'False' , 'False' ),
 (  '6fb7a27e-b303-41c2-b6ea-76acebd58753' , 'UserId' , NULL , '0' , '0' , '6' , 'a1cf6f33-01a7-430f-910f-7cbf61721c47' , 'True' , 'False' , 'False' , 'False' ),
 (  'efe1e57d-2aa5-444a-af19-bf101897535c' , 'Id' , NULL , '0' , '0' , '6' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'True' , 'True' , 'False' , 'False' ),
 (  'dc3742c2-dec2-4a7b-a51d-7a15fdbf141e' , 'Code' , NULL , '0' , '0' , '0' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'True' , 'False' , 'False' , 'False' ),
 (  '3d9f80d6-2432-4021-9cb6-56f8c8ed80cc' , 'Name' , NULL , '0' , '0' , '0' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'True' , 'False' , 'False' , 'False' ),
 (  '51301cf6-3406-49d2-bedd-197efe6cc0e7' , 'Logo' , NULL , '0' , '0' , '0' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'True' , 'False' , 'False' , 'False' ),
 (  'bb9c54d5-756f-4cbe-9d4f-7e131aa4e197' , 'Introduction' , NULL , '0' , '0' , '0' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'True' , 'False' , 'False' , 'False' ),
 (  '3423d596-b7cc-4209-acda-4bc27b708277' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'True' , 'False' , 'False' , 'False' ),
 (  '3febb9fb-6836-428d-a32d-88117db1f46f' , 'CreationTime' , NULL , '0' , '0' , '5' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'True' , 'False' , 'False' , 'False' ),
 (  'd3488c9d-27cd-4167-816a-45b11b0529fd' , 'CreatorId' , NULL , '0' , '0' , '6' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'False' , 'False' , 'False' , 'False' ),
 (  'a46cc437-d343-4766-919b-e0f3596aeb34' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'False' , 'False' , 'False' , 'False' ),
 (  '47b9bba9-c549-4e7e-afe0-51b1069e684b' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'False' , 'False' , 'False' , 'False' ),
 (  '12eac43a-27a0-4430-8a44-55821600560d' , 'OrderNum' , NULL , '0' , '0' , '1' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'True' , 'False' , 'False' , 'False' ),
 (  'd6d69111-e651-4e7e-ae8b-b509b46d8dc3' , 'IsDisableCreateDiscuss' , NULL , '0' , '0' , '3' , 'ffd345b8-75ac-42e9-87e6-4a373683c520' , 'True' , 'False' , 'False' , 'False' ),
 (  '4d5e395a-8183-419c-97ad-3bc75c0e1283' , 'Id' , NULL , '0' , '0' , '6' , '0ff1ffa4-4754-4e0f-b5e7-e37757048b97' , 'True' , 'True' , 'False' , 'False' ),
 (  '39d38fe3-7f61-45f2-9d31-42cca4774ca2' , 'CreationTime' , NULL , '0' , '0' , '5' , '0ff1ffa4-4754-4e0f-b5e7-e37757048b97' , 'True' , 'False' , 'False' , 'False' ),
 (  '3d3c405d-749f-4701-bf8b-b7f933740056' , 'LastDepositTime' , NULL , '0' , '0' , '5' , '0ff1ffa4-4754-4e0f-b5e7-e37757048b97' , 'False' , 'False' , 'False' , 'False' ),
 (  '8be3888c-b320-4d71-a1f9-3df159b3628a' , 'LastDrawTime' , NULL , '0' , '0' , '5' , '0ff1ffa4-4754-4e0f-b5e7-e37757048b97' , 'False' , 'False' , 'False' , 'False' ),
 (  'af2cfd12-6853-4a10-842e-ead46988da32' , 'UserId' , NULL , '0' , '0' , '6' , '0ff1ffa4-4754-4e0f-b5e7-e37757048b97' , 'True' , 'False' , 'False' , 'False' ),
 (  '7ef9555d-db06-4035-9040-b7d6e544a8aa' , 'StorageMoney' , NULL , '0' , '0' , '4' , '0ff1ffa4-4754-4e0f-b5e7-e37757048b97' , 'True' , 'False' , 'False' , 'False' ),
 (  '87cb3bec-07a5-4b96-b360-70cbc6e25838' , 'MaxStorageMoney' , NULL , '0' , '0' , '4' , '0ff1ffa4-4754-4e0f-b5e7-e37757048b97' , 'True' , 'False' , 'False' , 'False' ),
 (  '692250b4-9118-47bd-bd6a-b94b168fa3d8' , 'FulltermTime' , NULL , '0' , '0' , '5' , '0ff1ffa4-4754-4e0f-b5e7-e37757048b97' , 'False' , 'False' , 'False' , 'False' ),
 (  'd1cd5a62-9c88-4247-999e-5036d1e5159d' , 'BankCardState' , NULL , '0' , '0' , '0' , '0ff1ffa4-4754-4e0f-b5e7-e37757048b97' , 'True' , 'False' , 'False' , 'False' ),
 (  '7167fe32-6cbe-4a3e-8f44-1705abe6f5f7' , 'Id' , NULL , '0' , '0' , '6' , '65ad21a6-5501-4ee6-99ac-7bf566062ff0' , 'True' , 'True' , 'False' , 'False' ),
 (  '17b4c5a1-6bd8-4d94-9d27-2b55ff00e310' , 'CreationTime' , NULL , '0' , '0' , '5' , '65ad21a6-5501-4ee6-99ac-7bf566062ff0' , 'True' , 'False' , 'False' , 'False' ),
 (  '5e1b8e57-4058-4296-8a9e-86ca10f944d4' , 'ComparisonValue' , NULL , '0' , '0' , '4' , '65ad21a6-5501-4ee6-99ac-7bf566062ff0' , 'True' , 'False' , 'False' , 'False' ),
 (  'c2ee1f9c-901a-4c59-86c9-a51f1889b702' , 'Value' , NULL , '0' , '0' , '4' , '65ad21a6-5501-4ee6-99ac-7bf566062ff0' , 'True' , 'False' , 'False' , 'False' ),
 (  'ed845bd3-1027-4f84-8a68-097e632b68b1' , 'IsFluctuate' , NULL , '0' , '0' , '3' , '65ad21a6-5501-4ee6-99ac-7bf566062ff0' , 'True' , 'False' , 'False' , 'False' ),
 (  'cb273a80-c302-493b-9b06-78c1ff937653' , 'TenantId' , NULL , '0' , '0' , '6' , '637eefd7-aec3-4fa5-80cf-5903e5aaa5b5' , 'False' , 'False' , 'False' , 'False' ),
 (  '36594285-8e07-4ece-98ce-f2780791f71d' , 'AuditLogId' , NULL , '0' , '0' , '6' , '637eefd7-aec3-4fa5-80cf-5903e5aaa5b5' , 'True' , 'False' , 'False' , 'False' ),
 (  '81945879-3e5e-44df-a16c-e651d953eed4' , 'ServiceName' , NULL , '0' , '0' , '0' , '637eefd7-aec3-4fa5-80cf-5903e5aaa5b5' , 'True' , 'False' , 'False' , 'False' ),
 (  '7d39a46c-846c-4b58-80e5-fa68151402f1' , 'MethodName' , NULL , '0' , '0' , '0' , '637eefd7-aec3-4fa5-80cf-5903e5aaa5b5' , 'True' , 'False' , 'False' , 'False' ),
 (  'f01aa451-ec89-469b-8171-d1f478b88d44' , 'Parameters' , NULL , '0' , '0' , '0' , '637eefd7-aec3-4fa5-80cf-5903e5aaa5b5' , 'True' , 'False' , 'False' , 'False' ),
 (  '50af0ea5-29e5-4217-8192-6276244236ad' , 'ExecutionTime' , NULL , '0' , '0' , '5' , '637eefd7-aec3-4fa5-80cf-5903e5aaa5b5' , 'False' , 'False' , 'False' , 'False' ),
 (  '86c9307d-1978-4f9d-9354-4758d3eb68a4' , 'ExecutionDuration' , NULL , '0' , '0' , '1' , '637eefd7-aec3-4fa5-80cf-5903e5aaa5b5' , 'False' , 'False' , 'False' , 'False' ),
 (  '3051a549-7b41-44f9-9079-8d3f9f69a2e7' , 'Id' , NULL , '0' , '0' , '6' , '637eefd7-aec3-4fa5-80cf-5903e5aaa5b5' , 'True' , 'True' , 'False' , 'False' ),
 (  '861b3645-7086-4bbd-a200-db14d86e1731' , 'Id' , NULL , '0' , '0' , '6' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'True' , 'False' , 'False' ),
 (  '946642a0-c1cb-46e0-b973-ccd6b8dc773a' , 'ApplicationName' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  'b22f33ab-179c-49a2-9c0a-d52d858e0ba9' , 'UserId' , NULL , '0' , '0' , '6' , '7905053f-e508-419a-bff6-66069fdf535d' , 'False' , 'False' , 'False' , 'False' ),
 (  '5f986afb-0b13-4ddf-99d5-4e4c58bbff6a' , 'UserName' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '83c0ed97-3e58-479d-a254-c30eea090919' , 'TenantName' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '7c50888a-150f-4eb2-a663-faeab19ab1a9' , 'ImpersonatorUserId' , NULL , '0' , '0' , '6' , '7905053f-e508-419a-bff6-66069fdf535d' , 'False' , 'False' , 'False' , 'False' ),
 (  '02027cda-2781-4522-9700-cff7489501c7' , 'ImpersonatorUserName' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '62cab6a4-fe50-4bd9-a077-eb176b8a66cd' , 'ImpersonatorTenantId' , NULL , '0' , '0' , '6' , '7905053f-e508-419a-bff6-66069fdf535d' , 'False' , 'False' , 'False' , 'False' ),
 (  '6b2ae055-49f0-4e63-9233-bd927bc7c795' , 'ImpersonatorTenantName' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  'd0ab6533-a907-4817-9224-0f3196a1756e' , 'ExecutionTime' , NULL , '0' , '0' , '5' , '7905053f-e508-419a-bff6-66069fdf535d' , 'False' , 'False' , 'False' , 'False' ),
 (  '25dd3377-8808-4cc2-915c-1c8efa75da77' , 'ExecutionDuration' , NULL , '0' , '0' , '1' , '7905053f-e508-419a-bff6-66069fdf535d' , 'False' , 'False' , 'False' , 'False' ),
 (  '7595ae6e-d5c0-4f52-ad0c-b6a4bfcc48f9' , 'ClientIpAddress' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  'f922f7da-4d8e-4f3f-bf65-b392c2691d29' , 'ClientName' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '413a6e29-88e2-48b8-99dd-1543c157e63a' , 'ClientId' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '49de3422-a7bb-4887-822c-4c419bda3617' , 'CorrelationId' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  'ba15ae05-f27f-4a79-b9ae-70ece3a69782' , 'BrowserInfo' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '1ac4b56d-685f-4669-ab6b-7a2c42592670' , 'HttpMethod' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  'bc61b528-9490-4a8d-bd1a-d86103ec8cc0' , 'Url' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '255f8ac5-4c5f-4f40-ac71-8c2ab9bbd047' , 'Exceptions' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  'f3cbfb65-90bc-4bfd-9fa2-1d8387ef8e72' , 'Comments' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '1ba86d0e-191f-43cb-97b2-cff993342a07' , 'HttpStatusCode' , NULL , '0' , '0' , '1' , '7905053f-e508-419a-bff6-66069fdf535d' , 'False' , 'False' , 'False' , 'False' ),
 (  '20d8516e-6117-45e2-8f15-eb2a8d3886c9' , 'TenantId' , NULL , '0' , '0' , '6' , '7905053f-e508-419a-bff6-66069fdf535d' , 'False' , 'False' , 'False' , 'False' ),
 (  'f2303cc6-19dd-49d4-828f-bde789f6e3fa' , 'EntityChanges' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '9b702f83-7ca4-4eba-9e23-611357e6947f' , 'Actions' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  'c6b7953f-1eb0-4684-b4be-2b52c539c92c' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '6c3d356e-2c78-477f-9cfc-bb744d5ef6f1' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '7905053f-e508-419a-bff6-66069fdf535d' , 'True' , 'False' , 'False' , 'False' ),
 (  '2ce6a4d3-75b8-4744-8f7a-160da38d1ba5' , 'Id' , NULL , '0' , '0' , '6' , '1632a14c-6dca-4c10-8315-a865212170b7' , 'True' , 'True' , 'False' , 'False' ),
 (  '4fa63f9b-57bd-405d-ade0-929c7ca45ba1' , 'AuditLogId' , NULL , '0' , '0' , '6' , '1632a14c-6dca-4c10-8315-a865212170b7' , 'True' , 'False' , 'False' , 'False' ),
 (  '0ffaa786-2d99-4244-956d-ab921a97a655' , 'TenantId' , NULL , '0' , '0' , '6' , '1632a14c-6dca-4c10-8315-a865212170b7' , 'False' , 'False' , 'False' , 'False' ),
 (  '516bee78-5571-41f6-b772-901b43176911' , 'ChangeTime' , NULL , '0' , '0' , '5' , '1632a14c-6dca-4c10-8315-a865212170b7' , 'False' , 'False' , 'False' , 'False' ),
 (  'abbd16fa-bf33-4df7-8724-ebdb3d177baa' , 'ChangeType' , NULL , '0' , '0' , '0' , '1632a14c-6dca-4c10-8315-a865212170b7' , 'False' , 'False' , 'False' , 'False' ),
 (  '9557cd16-0e3b-421a-91f4-4f813920d11f' , 'EntityTenantId' , NULL , '0' , '0' , '6' , '1632a14c-6dca-4c10-8315-a865212170b7' , 'False' , 'False' , 'False' , 'False' ),
 (  'ee2d261d-656a-4e2a-803e-a741195b2389' , 'EntityId' , NULL , '0' , '0' , '0' , '1632a14c-6dca-4c10-8315-a865212170b7' , 'True' , 'False' , 'False' , 'False' ),
 (  '8e10dc68-f251-4efd-9951-d8444764ed6d' , 'EntityTypeFullName' , NULL , '0' , '0' , '0' , '1632a14c-6dca-4c10-8315-a865212170b7' , 'True' , 'False' , 'False' , 'False' ),
 (  '09784182-a0aa-475f-bcca-6257a48c2107' , 'PropertyChanges' , NULL , '0' , '0' , '0' , '1632a14c-6dca-4c10-8315-a865212170b7' , 'True' , 'False' , 'False' , 'False' ),
 (  '56bcd0b4-e393-4091-8e73-c81f4ec0f6ed' , 'Id' , NULL , '0' , '0' , '6' , '20e44087-b57c-4abc-a539-48824b267387' , 'True' , 'True' , 'False' , 'False' ),
 (  '2f0796eb-0de3-480a-b512-215e963e2f89' , 'TenantId' , NULL , '0' , '0' , '6' , '20e44087-b57c-4abc-a539-48824b267387' , 'False' , 'False' , 'False' , 'False' ),
 (  '4dc9dd93-461f-46cb-ab14-7bd4e6faee24' , 'EntityChangeId' , NULL , '0' , '0' , '6' , '20e44087-b57c-4abc-a539-48824b267387' , 'False' , 'False' , 'False' , 'False' ),
 (  '1d043f35-e473-4d42-9960-b5a7ce7bcbb6' , 'NewValue' , NULL , '0' , '0' , '0' , '20e44087-b57c-4abc-a539-48824b267387' , 'True' , 'False' , 'False' , 'False' ),
 (  'c03c7e7e-ece1-420c-bcc6-db7c9078b7d5' , 'OriginalValue' , NULL , '0' , '0' , '0' , '20e44087-b57c-4abc-a539-48824b267387' , 'True' , 'False' , 'False' , 'False' ),
 (  'd5471930-4c9c-4f2f-a305-761f507a9b64' , 'PropertyName' , NULL , '0' , '0' , '0' , '20e44087-b57c-4abc-a539-48824b267387' , 'True' , 'False' , 'False' , 'False' ),
 (  'c6c53537-54ee-4f77-9701-4a5a6a2a899d' , 'PropertyTypeFullName' , NULL , '0' , '0' , '0' , '20e44087-b57c-4abc-a539-48824b267387' , 'True' , 'False' , 'False' , 'False' ),
 (  'b92e3e82-9964-4206-8cfd-5cbda1fbbc30' , 'Id' , NULL , '0' , '0' , '6' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'True' , 'False' , 'False' ),
 (  'eb282e08-bf3a-40d5-aeac-03159d69668d' , 'project' , NULL , '0' , '0' , '0' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  '0a703ae7-5308-470c-8636-1be7bb6ce277' , 'status' , NULL , '0' , '0' , '0' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  'ef3301b3-bc37-41a9-a9d1-110054709454' , 'category' , NULL , '0' , '0' , '0' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  '701562e8-d72a-48c6-b593-356101368965' , 'impact' , NULL , '0' , '0' , '0' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  '13b69870-fe86-4992-961f-9b3b41133689' , 'priority' , NULL , '0' , '0' , '0' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  '5b6e70f7-7e6b-41b9-a53d-7f090e09bc85' , 'title' , NULL , '0' , '0' , '0' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  '19a5ee3e-fd48-487a-9d80-41a914cd44c1' , 'description' , NULL , '0' , '0' , '0' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  '6dfb58c4-bb8f-41f3-b025-f750703a0889' , 'solve_user' , NULL , '0' , '0' , '0' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  'dd159eca-4464-4e44-b2f2-f00cde921ba1' , 'CreationTime' , NULL , '0' , '0' , '5' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  '7ca90410-c5b8-40ab-be67-13b56dd869c5' , 'ExtraProperties' , NULL , '0' , '0' , '0' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  '8e9c926d-9db2-4786-a5b1-977982acd408' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'False' , 'False' , 'False' , 'False' ),
 (  'd693ff81-719d-444f-9697-bef477c5440c' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'False' , 'False' , 'False' , 'False' ),
 (  '541c6a19-2b0b-456c-9594-bb1a980ea428' , 'CreatorId' , NULL , '0' , '0' , '6' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'False' , 'False' , 'False' , 'False' ),
 (  '637090f5-0aed-46c3-9a3e-a185e40914f3' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , 'c97ec8a4-51d5-483f-8b78-48eab20cba16' , 'True' , 'False' , 'False' , 'False' ),
 (  'b8ac1e64-c38c-4047-a46f-5d228a303af3' , 'Id' , NULL , '0' , '0' , '6' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'True' , 'False' , 'False' ),
 (  '70b2267c-e68a-449c-b5be-5c01ab1c4166' , 'Name' , NULL , '0' , '0' , '0' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'False' , 'False' , 'False' ),
 (  'c5291ba7-1367-4d65-a505-7425b14e7f39' , 'Description' , NULL , '0' , '0' , '0' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'False' , 'False' , 'False' ),
 (  '10f3f149-9c28-4389-8cd5-41498cbb1cc5' , 'OrderNum' , NULL , '0' , '0' , '1' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'False' , 'False' , 'False' ),
 (  '30e6a969-c14c-4924-ab25-29b3420fd1f4' , 'Length' , NULL , '0' , '0' , '1' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'False' , 'False' , 'False' ),
 (  'e59cc1ec-3b05-46a6-83f8-1730258d8256' , 'FieldType' , NULL , '0' , '0' , '0' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'False' , 'False' , 'False' ),
 (  '1da0b7de-dd24-4281-9d25-1c2e84a86fd2' , 'TableId' , NULL , '0' , '0' , '6' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'False' , 'False' , 'False' )
;
INSERT INTO "yifield"  ("id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic") VALUES 
 (  '94e26b2e-2513-4fc3-9fb0-05e54c0e079a' , 'IsRequired' , NULL , '0' , '0' , '3' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'False' , 'False' , 'False' ),
 (  '21d737e1-d197-4b67-a569-d79c606dc005' , 'IsKey' , NULL , '0' , '0' , '3' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'False' , 'False' , 'False' ),
 (  'f49d2b9f-b3dc-4e4e-bb2a-0a8ebca0e4b7' , 'IsAutoAdd' , NULL , '0' , '0' , '3' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'False' , 'False' , 'False' ),
 (  '1ac1c10c-ce5e-4934-952c-170584de7fcb' , 'IsPublic' , NULL , '0' , '0' , '3' , '309289a6-1735-473e-81da-5d4db18e8666' , 'True' , 'False' , 'False' , 'False' ),
 (  '303b834f-1b53-455d-8082-94f7c04c46dc' , 'Id' , NULL , '0' , '0' , '6' , '918f60df-7737-4496-825c-b6318bc08fa6' , 'True' , 'True' , 'False' , 'False' ),
 (  'a42b0e04-efba-4122-8c94-2757c909b157' , 'Name' , NULL , '0' , '0' , '0' , '918f60df-7737-4496-825c-b6318bc08fa6' , 'True' , 'False' , 'False' , 'False' ),
 (  'fcaa9132-0f34-4b20-b9fb-6023966dd40e' , 'Description' , NULL , '0' , '0' , '0' , '918f60df-7737-4496-825c-b6318bc08fa6' , 'True' , 'False' , 'False' , 'False' ),
 (  'f4231dac-0a13-4832-b189-a66bb3f6b1ba' , 'Fields' , NULL , '0' , '0' , '0' , '918f60df-7737-4496-825c-b6318bc08fa6' , 'True' , 'False' , 'False' , 'False' ),
 (  '4d8ede4f-eb85-4473-8aa8-4d380d8ebe9c' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '918f60df-7737-4496-825c-b6318bc08fa6' , 'True' , 'False' , 'False' , 'False' ),
 (  '77045232-dbf6-4611-8c41-ecb993a7aa3a' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '918f60df-7737-4496-825c-b6318bc08fa6' , 'True' , 'False' , 'False' , 'False' ),
 (  'e72e637f-d99b-4546-a40c-3c94d4a6547e' , 'Id' , NULL , '0' , '0' , '6' , 'fe0d1dbd-ceeb-422d-802b-44c28a0ff2e0' , 'True' , 'True' , 'False' , 'False' ),
 (  'f9be66de-bf4c-4f57-90cd-a471325c0428' , 'TemplateStr' , NULL , '0' , '0' , '0' , 'fe0d1dbd-ceeb-422d-802b-44c28a0ff2e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '8b2cc533-593f-4c77-885c-fa3ec61a67d2' , 'BuildPath' , NULL , '0' , '0' , '0' , 'fe0d1dbd-ceeb-422d-802b-44c28a0ff2e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '1cc58e5f-74ab-4ca8-a54f-be5d0c15e7ec' , 'Name' , NULL , '0' , '0' , '0' , 'fe0d1dbd-ceeb-422d-802b-44c28a0ff2e0' , 'True' , 'False' , 'False' , 'False' ),
 (  'ecdf7227-d432-43e6-b562-0038b6fe0bf0' , 'Remarks' , NULL , '0' , '0' , '0' , 'fe0d1dbd-ceeb-422d-802b-44c28a0ff2e0' , 'True' , 'False' , 'False' , 'False' )
;

===============================

2024-04-09 13:58:57.979 +08:00 [DBG] =========Yi-SQL耗时9.3077毫秒=====
2024-04-09 13:58:57.981 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application) in 151.8668ms
2024-04-09 13:58:57.981 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:58.013 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:58.013 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:58.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:58.016 +08:00 [DBG] =========Yi-SQL耗时1.623毫秒=====
2024-04-09 13:58:58.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 10
===============================

2024-04-09 13:58:58.024 +08:00 [DBG] =========Yi-SQL耗时5.8149毫秒=====
2024-04-09 13:58:58.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:58.026 +08:00 [DBG] =========Yi-SQL耗时0.9654毫秒=====
2024-04-09 13:58:58.028 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:58.028 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 15.1187ms
2024-04-09 13:58:58.028 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:59.935 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:58:59.935 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:58:59.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:59.938 +08:00 [DBG] =========Yi-SQL耗时0.7817毫秒=====
2024-04-09 13:58:59.940 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 40
===============================

2024-04-09 13:58:59.942 +08:00 [DBG] =========Yi-SQL耗时1.2363毫秒=====
2024-04-09 13:58:59.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:58:59.944 +08:00 [DBG] =========Yi-SQL耗时0.8414毫秒=====
2024-04-09 13:58:59.948 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:58:59.948 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 12.2637ms
2024-04-09 13:58:59.948 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:59:01.872 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:59:01.872 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:59:01.874 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:59:01.875 +08:00 [DBG] =========Yi-SQL耗时0.6542毫秒=====
2024-04-09 13:59:01.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 30
===============================

2024-04-09 13:59:01.877 +08:00 [DBG] =========Yi-SQL耗时0.8935毫秒=====
2024-04-09 13:59:01.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:59:01.879 +08:00 [DBG] =========Yi-SQL耗时0.4899毫秒=====
2024-04-09 13:59:01.880 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:59:01.881 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 8.0813ms
2024-04-09 13:59:01.881 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:59:04.678 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 13:59:04.678 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 13:59:04.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:59:04.681 +08:00 [DBG] =========Yi-SQL耗时0.9942毫秒=====
2024-04-09 13:59:04.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 13:59:04.684 +08:00 [DBG] =========Yi-SQL耗时1.1798毫秒=====
2024-04-09 13:59:04.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 13:59:04.685 +08:00 [DBG] =========Yi-SQL耗时0.5316毫秒=====
2024-04-09 13:59:04.688 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 13:59:04.688 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 10.3944ms
2024-04-09 13:59:04.688 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 14:00:00.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-09 14:00:00.017 +08:00 [DBG] =========Yi-SQL耗时5.0313毫秒=====
2024-04-09 14:00:00.339 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-09 14:00:00.340 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-09 14:30:55.592 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 14:30:55.592 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 14:37:18.672 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:37:18.674 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 14:37:18.675 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 14:37:18.920 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:37:18.921 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 14:37:19.025 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 14:37:19.430 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:37:19.431 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 14:37:19.432 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 14:37:19.436 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 14:37:19.436 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 14:37:19.456 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 14:37:19.457 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 20.6137ms
2024-04-09 14:37:19.457 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 14:37:19.562 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 14:37:19.563 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 14:37:19.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:37:19.566 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:37:19.569 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 14:37:19.603 +08:00 [INF] 2024/4/9 14:37:19：cc,16nirRNjDvIIDS2TugXkAA连接服务端success，当前已连接0个
2024-04-09 14:37:19.680 +08:00 [DBG] =========Yi-SQL耗时114.8994毫秒=====
2024-04-09 14:37:19.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 14:37:19.685 +08:00 [DBG] =========Yi-SQL耗时2.8189毫秒=====
2024-04-09 14:37:19.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 14:37:19.688 +08:00 [DBG] =========Yi-SQL耗时1.5957毫秒=====
2024-04-09 14:37:19.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:37:19.692 +08:00 [DBG] =========Yi-SQL耗时2.4063毫秒=====
2024-04-09 14:37:19.693 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:37:19.693 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 130.8077ms
2024-04-09 14:37:19.694 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 14:37:19.966 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:37:19.966 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 14:37:19.967 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 14:37:19.967 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 14:37:19.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:37:19.968 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 14:37:19.970 +08:00 [DBG] =========Yi-SQL耗时1.6115毫秒=====
2024-04-09 14:37:19.972 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:37:19.972 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.7626ms
2024-04-09 14:37:19.973 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:37:20.028 +08:00 [DBG] =========Yi-SQL耗时59.2599毫秒=====
2024-04-09 14:37:20.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 14:37:20.030 +08:00 [DBG] =========Yi-SQL耗时0.6887毫秒=====
2024-04-09 14:37:20.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 14:37:20.031 +08:00 [DBG] =========Yi-SQL耗时0.3772毫秒=====
2024-04-09 14:37:20.032 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:37:20.032 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 65.5373ms
2024-04-09 14:37:20.032 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 14:54:29.661 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-09 14:54:29.691 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-09 14:54:34.191 +08:00 [INF] Loaded ABP modules:
2024-04-09 14:54:34.192 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-09 14:54:34.192 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-09 14:54:34.192 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-09 14:54:34.192 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-09 14:54:34.192 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-09 14:54:34.192 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-09 14:54:34.192 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-09 14:54:34.192 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-09 14:54:34.192 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-09 14:54:34.192 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-09 14:54:34.192 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-09 14:54:34.192 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-09 14:54:34.192 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-09 14:54:34.192 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-09 14:54:34.192 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-09 14:54:34.192 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-09 14:54:34.192 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-09 14:54:34.192 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-09 14:54:34.192 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-09 14:54:34.192 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-09 14:54:34.192 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-09 14:54:34.192 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-09 14:54:34.192 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-09 14:54:34.192 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-09 14:54:34.192 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-09 14:54:34.192 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-09 14:54:34.192 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-09 14:54:34.192 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-09 14:54:34.192 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-09 14:54:34.192 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-09 14:54:34.192 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-09 14:54:34.197 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-09 14:54:34.202 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-09 14:54:34.851 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:34.858 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:34.888 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.892 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-09 14:54:34.895 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.901 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:34.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-09 14:54:34.913 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.923 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:34.925 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:34.932 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.932 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-09 14:54:34.935 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.936 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-09 14:54:34.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-09 14:54:34.937 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-09 14:54:34.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-09 14:54:34.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-09 14:54:34.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-09 14:54:34.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-09 14:54:34.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-09 14:54:34.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-09 14:54:34.938 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-09 14:54:34.939 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:34.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-09 14:54:34.947 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:34.953 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.953 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:34.959 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-09 14:54:34.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-09 14:54:34.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-09 14:54:34.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-09 14:54:34.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-09 14:54:34.962 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-09 14:54:34.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-09 14:54:34.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-09 14:54:34.963 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:34.969 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-09 14:54:34.971 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:34.976 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:34.982 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-09 14:54:34.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-09 14:54:34.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-09 14:54:34.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-09 14:54:34.985 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.985 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-09 14:54:34.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 14:54:34.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 14:54:34.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-09 14:54:34.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-09 14:54:34.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-09 14:54:34.986 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-09 14:54:34.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-09 14:54:34.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-09 14:54:34.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-09 14:54:34.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-09 14:54:34.987 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:34.993 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:34.993 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-09 14:54:34.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.000 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.002 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.007 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-09 14:54:35.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-09 14:54:35.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-09 14:54:35.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-09 14:54:35.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-09 14:54:35.010 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.010 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-09 14:54:35.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-09 14:54:35.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-09 14:54:35.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-09 14:54:35.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-09 14:54:35.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-09 14:54:35.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-09 14:54:35.011 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.017 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-09 14:54:35.019 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.026 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.032 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.033 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-09 14:54:35.034 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-09 14:54:35.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-09 14:54:35.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-09 14:54:35.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-09 14:54:35.035 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.035 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-09 14:54:35.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-09 14:54:35.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-09 14:54:35.036 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.041 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-09 14:54:35.044 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.049 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.055 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.055 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-09 14:54:35.057 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.057 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-09 14:54:35.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-09 14:54:35.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-09 14:54:35.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.063 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.064 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-09 14:54:35.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.078 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-09 14:54:35.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-09 14:54:35.080 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.080 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-09 14:54:35.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-09 14:54:35.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-09 14:54:35.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-09 14:54:35.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.081 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-09 14:54:35.081 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.088 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.097 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-09 14:54:35.099 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.104 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.106 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.106 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.113 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-09 14:54:35.115 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-09 14:54:35.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-09 14:54:35.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-09 14:54:35.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-09 14:54:35.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 14:54:35.116 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 14:54:35.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-09 14:54:35.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-09 14:54:35.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-09 14:54:35.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-09 14:54:35.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-09 14:54:35.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-09 14:54:35.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-09 14:54:35.117 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.117 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-09 14:54:35.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-09 14:54:35.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-09 14:54:35.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-09 14:54:35.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-09 14:54:35.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.124 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.125 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-09 14:54:35.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.133 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.135 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-09 14:54:35.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-09 14:54:35.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-09 14:54:35.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-09 14:54:35.144 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.145 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.150 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-09 14:54:35.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.158 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.163 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-09 14:54:35.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-09 14:54:35.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-09 14:54:35.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-09 14:54:35.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-09 14:54:35.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 14:54:35.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 14:54:35.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-09 14:54:35.166 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-09 14:54:35.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-09 14:54:35.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-09 14:54:35.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-09 14:54:35.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-09 14:54:35.167 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.167 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-09 14:54:35.175 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.184 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-09 14:54:35.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-09 14:54:35.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-09 14:54:35.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-09 14:54:35.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-09 14:54:35.188 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.188 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-09 14:54:35.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.200 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.206 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.206 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-09 14:54:35.208 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.208 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-09 14:54:35.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-09 14:54:35.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-09 14:54:35.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-09 14:54:35.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 14:54:35.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 14:54:35.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.209 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-09 14:54:35.209 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-09 14:54:35.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-09 14:54:35.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-09 14:54:35.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-09 14:54:35.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-09 14:54:35.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-09 14:54:35.210 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.216 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-09 14:54:35.218 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.228 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-09 14:54:35.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-09 14:54:35.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-09 14:54:35.230 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.230 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.236 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.236 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-09 14:54:35.238 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.243 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.244 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.244 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.250 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-09 14:54:35.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-09 14:54:35.253 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-09 14:54:35.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-09 14:54:35.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-09 14:54:35.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-09 14:54:35.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-09 14:54:35.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-09 14:54:35.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-09 14:54:35.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.254 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-09 14:54:35.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-09 14:54:35.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-09 14:54:35.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-09 14:54:35.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-09 14:54:35.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-09 14:54:35.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-09 14:54:35.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-09 14:54:35.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-09 14:54:35.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-09 14:54:35.255 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-09 14:54:35.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 14:54:35.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 14:54:35.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-09 14:54:35.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-09 14:54:35.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-09 14:54:35.256 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.264 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-09 14:54:35.266 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.271 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-09 14:54:35.278 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-09 14:54:35.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-09 14:54:35.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-09 14:54:35.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-09 14:54:35.279 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.285 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-09 14:54:35.287 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.290 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.291 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.291 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.297 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-09 14:54:35.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-09 14:54:35.300 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.300 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-09 14:54:35.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-09 14:54:35.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-09 14:54:35.301 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.301 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-09 14:54:35.308 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.313 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.320 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.320 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-09 14:54:35.322 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.322 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-09 14:54:35.322 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.323 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.328 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-09 14:54:35.330 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.334 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.336 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.341 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-09 14:54:35.344 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.349 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-09 14:54:35.351 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.355 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.355 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.361 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-09 14:54:35.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-09 14:54:35.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-09 14:54:35.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-09 14:54:35.364 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-09 14:54:35.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-09 14:54:35.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-09 14:54:35.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-09 14:54:35.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-09 14:54:35.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-09 14:54:35.365 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.365 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.366 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-09 14:54:35.394 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.399 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-09 14:54:35.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-09 14:54:35.421 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.426 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.426 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.431 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.431 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-09 14:54:35.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.433 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-09 14:54:35.433 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-09 14:54:35.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-09 14:54:35.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-09 14:54:35.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-09 14:54:35.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-09 14:54:35.434 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.434 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.440 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-09 14:54:35.441 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.444 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.446 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.451 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.451 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-09 14:54:35.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-09 14:54:35.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-09 14:54:35.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-09 14:54:35.453 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.453 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.454 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.454 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.459 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.459 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-09 14:54:35.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.465 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.465 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.470 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.470 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-09 14:54:35.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-09 14:54:35.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-09 14:54:35.472 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.478 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-09 14:54:35.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.485 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.491 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.491 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-09 14:54:35.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-09 14:54:35.493 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.495 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.496 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.496 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.502 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.502 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-09 14:54:35.503 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.507 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.508 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.513 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-09 14:54:35.515 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.516 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-09 14:54:35.523 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.529 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-09 14:54:35.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-09 14:54:35.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-09 14:54:35.536 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.536 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.537 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.537 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.538 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.545 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-09 14:54:35.547 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.554 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.554 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-09 14:54:35.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-09 14:54:35.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-09 14:54:35.563 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.563 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-09 14:54:35.564 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.564 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.565 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.565 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.567 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.567 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.572 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-09 14:54:35.575 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.579 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.579 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.584 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.584 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-09 14:54:35.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.586 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.591 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-09 14:54:35.594 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.603 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-09 14:54:35.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-09 14:54:35.605 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.605 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.610 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-09 14:54:35.612 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.621 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-09 14:54:35.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.624 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.629 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-09 14:54:35.631 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.635 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.635 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.641 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-09 14:54:35.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-09 14:54:35.644 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.644 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.649 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.649 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-09 14:54:35.651 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.654 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.655 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.662 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-09 14:54:35.663 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-09 14:54:35.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-09 14:54:35.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-09 14:54:35.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-09 14:54:35.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-09 14:54:35.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-09 14:54:35.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-09 14:54:35.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-09 14:54:35.665 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.665 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.670 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-09 14:54:35.672 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.677 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.682 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.682 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-09 14:54:35.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-09 14:54:35.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-09 14:54:35.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-09 14:54:35.684 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.684 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-09 14:54:35.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.690 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-09 14:54:35.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.696 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-09 14:54:35.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.706 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.706 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.712 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-09 14:54:35.714 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.719 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.721 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.727 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.727 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-09 14:54:35.730 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.731 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.732 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.733 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.739 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.739 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-09 14:54:35.741 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.745 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.746 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.747 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.752 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.752 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-09 14:54:35.753 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.754 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-09 14:54:35.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.766 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.767 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-09 14:54:35.774 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 14:54:35.776 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.776 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.781 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-09 14:54:35.783 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.787 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.788 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.789 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-09 14:54:35.797 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."id" is '主键'
===============================

2024-04-09 14:54:35.797 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.797 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."project" is '项目'
===============================

2024-04-09 14:54:35.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."status" is '状态'
===============================

2024-04-09 14:54:35.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."category" is '类别'
===============================

2024-04-09 14:54:35.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."impact" is '影响'
===============================

2024-04-09 14:54:35.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."priority" is '优先级'
===============================

2024-04-09 14:54:35.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."title" is '标题'
===============================

2024-04-09 14:54:35.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."description" is '详情'
===============================

2024-04-09 14:54:35.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."solve_user" is '对应人'
===============================

2024-04-09 14:54:35.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."creationtime" is '创建时间'
===============================

2024-04-09 14:54:35.798 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.804 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.804 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-09 14:54:35.806 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-09 14:54:35.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-09 14:54:35.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-09 14:54:35.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-09 14:54:35.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-09 14:54:35.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-09 14:54:35.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.819 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-09 14:54:35.827 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.831 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.835 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.836 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-09 14:54:35.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-09 14:54:35.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.838 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-09 14:54:35.838 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.839 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.844 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-09 14:54:35.846 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.849 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 14:54:35.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.856 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.856 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-09 14:54:35.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-09 14:54:35.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-09 14:54:35.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-09 14:54:35.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-09 14:54:35.860 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 14:54:35.866 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.866 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-09 14:54:35.867 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 14:54:35.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:35.967 +08:00 [DBG] =========Yi-SQL耗时9.619毫秒=====
2024-04-09 14:54:35.982 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:35.983 +08:00 [DBG] =========Yi-SQL耗时0.9517毫秒=====
2024-04-09 14:54:35.986 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:35.987 +08:00 [DBG] =========Yi-SQL耗时0.9659毫秒=====
2024-04-09 14:54:35.992 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:35.995 +08:00 [DBG] =========Yi-SQL耗时3.2573毫秒=====
2024-04-09 14:54:35.998 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:35.999 +08:00 [DBG] =========Yi-SQL耗时1.2031毫秒=====
2024-04-09 14:54:36.002 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:36.003 +08:00 [DBG] =========Yi-SQL耗时0.8503毫秒=====
2024-04-09 14:54:36.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:36.010 +08:00 [DBG] =========Yi-SQL耗时1.9545毫秒=====
2024-04-09 14:54:36.013 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:36.013 +08:00 [DBG] =========Yi-SQL耗时0.7735毫秒=====
2024-04-09 14:54:36.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:36.016 +08:00 [DBG] =========Yi-SQL耗时0.4613毫秒=====
2024-04-09 14:54:36.017 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:36.018 +08:00 [DBG] =========Yi-SQL耗时0.4675毫秒=====
2024-04-09 14:54:36.020 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 14:54:36.021 +08:00 [DBG] =========Yi-SQL耗时0.9832毫秒=====
2024-04-09 14:54:36.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:36.026 +08:00 [DBG] =========Yi-SQL耗时2.3745毫秒=====
2024-04-09 14:54:36.029 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 14:54:36.030 +08:00 [DBG] =========Yi-SQL耗时0.8584毫秒=====
2024-04-09 14:54:36.032 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 14:54:36.033 +08:00 [DBG] =========Yi-SQL耗时0.65毫秒=====
2024-04-09 14:54:36.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 14:54:36.037 +08:00 [DBG] =========Yi-SQL耗时0.8565毫秒=====
2024-04-09 14:54:36.049 +08:00 [DBG] 耗时-1851ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-09 14:54:36.110 +08:00 [DBG] 耗时-58ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-09 14:54:36.114 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-09 14:54:36.129 +08:00 [DBG] 耗时-15ms,已加载模块-Volo.Abp.AspNetCore
2024-04-09 14:54:36.135 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-09 14:54:36.158 +08:00 [DBG] 耗时-23ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-09 14:54:36.161 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-09 14:54:36.422 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-09 14:54:36.496 +08:00 [DBG] 耗时-334ms,已加载模块-Yi.Abp.Web
2024-04-09 14:54:36.504 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-09 14:54:36.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-09 14:54:36.517 +08:00 [DBG] =========Yi-SQL耗时3.5703毫秒=====
2024-04-09 14:54:36.590 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-09 14:54:36.590 +08:00 [DBG] 耗时-93ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-09 14:54:36.591 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2385ms】==========
2024-04-09 14:54:36.674 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-09 14:54:36.674 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-09 14:54:36.674 +08:00 [INF] Hosting environment: Development
2024-04-09 14:54:36.674 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-09 14:54:39.582 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:54:39.634 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-09 14:54:39.648 +08:00 [INF] Route matched with {action = "PostLogout", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Boolean] PostLogout() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 14:54:39.737 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Boolean'.
2024-04-09 14:54:39.770 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application) in 118.1371ms
2024-04-09 14:54:39.770 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLogout (Yi.Framework.Rbac.Application)'
2024-04-09 14:54:39.776 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:54:39.781 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-09 14:54:39.781 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-09 14:54:39.783 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 14:54:39.791 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 14:54:39.846 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:54:39.847 +08:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
 ---> Microsoft.IdentityModel.Tokens.SecurityTokenMalformedException: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(String encodedJson)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebToken..ctor(String jwtEncodedString)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(String token, TokenValidationParameters validationParameters)
   --- End of inner exception stack trace ---
2024-04-09 14:54:39.847 +08:00 [INF] Bearer was not authenticated. Failure message: IDX14100: JWT is not well formed, there are no dots (.).
The token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EndcodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.
2024-04-09 14:54:39.849 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 14:54:39.891 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 14:54:39.892 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:54:39.896 +08:00 [INF] Route matched with {action = "GetSelect", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto]] GetSelectAsync() on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 14:54:39.896 +08:00 [INF] Route matched with {action = "GetCaptchaImage", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto] GetCaptchaImageAsync() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 14:54:39.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:54:39.912 +08:00 [DBG] =========Yi-SQL耗时4.2178毫秒=====
2024-04-09 14:54:39.933 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantSelectOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:54:39.966 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application) in 70.0616ms
2024-04-09 14:54:39.966 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetSelectAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 14:54:39.972 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Account.CaptchaImageDto'.
2024-04-09 14:54:39.980 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application) in 83.634ms
2024-04-09 14:54:39.980 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetCaptchaImageAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:54:43.989 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:54:43.990 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:54:43.998 +08:00 [INF] Route matched with {action = "PostLogin", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Object] PostLoginAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Account.LoginInputVo) on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 14:54:44.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"   WHERE (( "username" = N'cc' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 14:54:44.039 +08:00 [DBG] =========Yi-SQL耗时2.192毫秒=====
2024-04-09 14:54:44.053 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:54:44.054 +08:00 [DBG] =========Yi-SQL耗时1.3549毫秒=====
2024-04-09 14:54:44.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 14:54:44.071 +08:00 [DBG] =========Yi-SQL耗时0.8228毫秒=====
2024-04-09 14:54:44.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 14:54:44.078 +08:00 [DBG] =========Yi-SQL耗时0.4332毫秒=====
2024-04-09 14:54:44.126 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-04-09 14:54:44.130 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application) in 132.8422ms
2024-04-09 14:54:44.131 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.PostLoginAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:54:44.135 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:54:44.137 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 14:54:44.138 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 14:54:44.144 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:54:44.145 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 14:54:44.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 14:54:44.149 +08:00 [INF] 用户【e94b7363-80d1-10a3-eb2c-3a119a976151:cc】登入系统
2024-04-09 14:54:44.149 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 14:54:44.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:54:44.171 +08:00 [INF] 2024/4/9 14:54:44：cc,5Csc9kqQXCMpznFh0yNGkg连接服务端success，当前已连接1个
2024-04-09 14:54:44.184 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "loginlog"  
           ("id","creationtime","loginuser","loginlocation","loginip","browser","os","logmsg","creatorid")
     VALUES
           (N'763b2427-b0d4-d220-6ffd-3a11d3d013c3',CAST('2024-04-09 14:54:44.167' AS DATETIME),N'cc',N'本地-本机',N'127.0.0.1',N'Other',N'Windows 10',N'cc登录系统',N'e94b7363-80d1-10a3-eb2c-3a119a976151') ;
===============================

2024-04-09 14:54:44.190 +08:00 [DBG] =========Yi-SQL耗时6.9232毫秒=====
2024-04-09 14:54:44.215 +08:00 [DBG] =========Yi-SQL耗时62.4926毫秒=====
2024-04-09 14:54:44.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 14:54:44.217 +08:00 [DBG] =========Yi-SQL耗时0.3436毫秒=====
2024-04-09 14:54:44.217 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 14:54:44.218 +08:00 [DBG] =========Yi-SQL耗时0.8397毫秒=====
2024-04-09 14:54:44.244 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 14:54:44.253 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 103.9679ms
2024-04-09 14:54:44.253 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 14:54:44.265 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 14:54:44.267 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 14:54:44.269 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:54:44.270 +08:00 [DBG] =========Yi-SQL耗时0.8187毫秒=====
2024-04-09 14:54:44.272 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 14:54:44.272 +08:00 [DBG] =========Yi-SQL耗时0.861毫秒=====
2024-04-09 14:54:44.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 14:54:44.273 +08:00 [DBG] =========Yi-SQL耗时0.3318毫秒=====
2024-04-09 14:54:44.275 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:54:44.277 +08:00 [DBG] =========Yi-SQL耗时1.5341毫秒=====
2024-04-09 14:54:44.306 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:54:44.309 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 42.0312ms
2024-04-09 14:54:44.309 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:31.068 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:31.068 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 14:55:31.078 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 14:55:31.083 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:31.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:55:31.101 +08:00 [DBG] =========Yi-SQL耗时0.9527毫秒=====
2024-04-09 14:55:31.131 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:31.134 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 50.6068ms
2024-04-09 14:55:31.134 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:31.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:55:31.149 +08:00 [DBG] =========Yi-SQL耗时2.0095毫秒=====
2024-04-09 14:55:31.159 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 14:55:31.159 +08:00 [DBG] =========Yi-SQL耗时0.6535毫秒=====
2024-04-09 14:55:31.165 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:31.168 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 89.8443ms
2024-04-09 14:55:31.168 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 14:55:33.223 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:33.223 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:33.223 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:33.223 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:33.225 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:55:33.227 +08:00 [DBG] =========Yi-SQL耗时2.2793毫秒=====
2024-04-09 14:55:33.229 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:33.229 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:33.230 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:33.230 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.6459ms
2024-04-09 14:55:33.230 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:33.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 14:55:33.268 +08:00 [DBG] =========Yi-SQL耗时2.9238毫秒=====
2024-04-09 14:55:33.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 14:55:33.272 +08:00 [DBG] =========Yi-SQL耗时1.5851毫秒=====
2024-04-09 14:55:33.280 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:33.284 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 53.9887ms
2024-04-09 14:55:33.284 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:33.303 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 14:55:33.304 +08:00 [DBG] =========Yi-SQL耗时1.5848毫秒=====
2024-04-09 14:55:33.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 14:55:33.309 +08:00 [DBG] =========Yi-SQL耗时1.5056毫秒=====
2024-04-09 14:55:33.312 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:33.316 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 86.8027ms
2024-04-09 14:55:33.316 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:35.421 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:35.423 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:35.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:55:35.433 +08:00 [DBG] =========Yi-SQL耗时0.7307毫秒=====
2024-04-09 14:55:35.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 14:55:35.436 +08:00 [DBG] =========Yi-SQL耗时0.9835毫秒=====
2024-04-09 14:55:35.445 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:35.448 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 24.5675ms
2024-04-09 14:55:35.448 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:36.594 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:36.594 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:36.594 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:36.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:55:36.597 +08:00 [DBG] =========Yi-SQL耗时1.0526毫秒=====
2024-04-09 14:55:36.598 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:36.599 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:36.599 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.4003ms
2024-04-09 14:55:36.600 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:36.607 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 14:55:36.608 +08:00 [DBG] =========Yi-SQL耗时0.8531毫秒=====
2024-04-09 14:55:36.631 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:36.654 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 55.3397ms
2024-04-09 14:55:36.654 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:40.766 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:40.766 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:40.766 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:40.767 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:40.767 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:40.768 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_common_status' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:55:40.769 +08:00 [DBG] =========Yi-SQL耗时1.1075毫秒=====
2024-04-09 14:55:40.772 +08:00 [INF] Route matched with {action = "GetList", controller = "OperationLog", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:40.773 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:40.773 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.4677ms
2024-04-09 14:55:40.773 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:40.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_oper_type' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:55:40.784 +08:00 [DBG] =========Yi-SQL耗时0.9157毫秒=====
2024-04-09 14:55:40.787 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:40.787 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 20.2522ms
2024-04-09 14:55:40.787 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:40.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "operationlog"  
===============================

2024-04-09 14:55:40.794 +08:00 [DBG] =========Yi-SQL耗时2.3898毫秒=====
2024-04-09 14:55:40.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","opertype","requestmethod","operuser","operip","operlocation","method","requestparam","requestresult","creationtime","creatorid" FROM "operationlog"     LIMIT 10 offset 0
===============================

2024-04-09 14:55:40.796 +08:00 [DBG] =========Yi-SQL耗时0.8415毫秒=====
2024-04-09 14:55:40.807 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.OperLog.OperationLogGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:40.811 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application) in 38.2651ms
2024-04-09 14:55:40.811 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.RecordLog.OperationLogService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:44.161 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:55:44.164 +08:00 [INF] Route matched with {action = "GetList", controller = "Notice", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListInput) on controller Yi.Framework.Rbac.Application.Services.NoticeService (Yi.Framework.Rbac.Application).
2024-04-09 14:55:44.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "notice"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:55:44.173 +08:00 [DBG] =========Yi-SQL耗时2.2331毫秒=====
2024-04-09 14:55:44.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","title","type","content","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "notice"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 14:55:44.177 +08:00 [DBG] =========Yi-SQL耗时1.8495毫秒=====
2024-04-09 14:55:44.183 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Notice.NoticeGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:55:44.185 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application) in 20.8909ms
2024-04-09 14:55:44.185 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.NoticeService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:28.020 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:28.020 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 14:58:28.021 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:28.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 14:58:28.025 +08:00 [DBG] =========Yi-SQL耗时1.4393毫秒=====
2024-04-09 14:58:28.029 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 14:58:28.038 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:58:28.062 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 41.7037ms
2024-04-09 14:58:28.062 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:28.095 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'e6bf52fd-b827-33d0-b83c-3a119a97612e'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:58:28.096 +08:00 [DBG] =========Yi-SQL耗时0.7394毫秒=====
2024-04-09 14:58:28.107 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 14:58:28.109 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 80.3964ms
2024-04-09 14:58:28.109 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:39.002 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:39.002 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 14:58:39.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 14:58:39.006 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:39.007 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 14:58:39.007 +08:00 [DBG] =========Yi-SQL耗时1.1785毫秒=====
2024-04-09 14:58:39.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'7e4f4c22-9927-da88-9330-3a11cdb2f701'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:58:39.012 +08:00 [DBG] =========Yi-SQL耗时0.7228毫秒=====
2024-04-09 14:58:39.018 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 14:58:39.018 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 10.977ms
2024-04-09 14:58:39.018 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:39.025 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:58:39.029 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 26.5149ms
2024-04-09 14:58:39.029 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:43.258 +08:00 [INF] CORS policy execution successful.
2024-04-09 14:58:43.259 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:43.262 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 14:58:43.307 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'7e4f4c22-9927-da88-9330-3a11cdb2f701'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 14:58:43.308 +08:00 [DBG] =========Yi-SQL耗时1.3156毫秒=====
2024-04-09 14:58:43.338 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 10:25:12.937' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-09 14:58:43.327' AS DATETIME),"ordernum"=101,"state"=1,"menuname"=N'问题管理',"menutype"=0,"permissioncode"=null,"parentid"=N'00000000-0000-0000-0000-000000000000',"menuicon"=N'bug',"router"=N'/question',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=null,"query"=null  WHERE "id"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701'
===============================

2024-04-09 14:58:43.340 +08:00 [DBG] =========Yi-SQL耗时2.2875毫秒=====
2024-04-09 14:58:43.341 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 14:58:43.342 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 80.0545ms
2024-04-09 14:58:43.342 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:43.366 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 14:58:43.366 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 14:58:43.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 14:58:43.369 +08:00 [DBG] =========Yi-SQL耗时0.7567毫秒=====
2024-04-09 14:58:43.382 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 14:58:43.390 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 23.7264ms
2024-04-09 14:58:43.390 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:00.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-09 15:00:00.075 +08:00 [DBG] =========Yi-SQL耗时60.3859毫秒=====
2024-04-09 15:00:00.309 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-09 15:00:00.310 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-09 15:00:14.894 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:14.894 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 15:00:14.896 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:14.896 +08:00 [INF] Route matched with {action = "Get", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 15:00:14.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 15:00:14.899 +08:00 [DBG] =========Yi-SQL耗时2.1236毫秒=====
2024-04-09 15:00:14.906 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:00:14.907 +08:00 [DBG] =========Yi-SQL耗时0.8241毫秒=====
2024-04-09 15:00:14.910 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 15:00:14.910 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application) in 14.1668ms
2024-04-09 15:00:14.910 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:14.924 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:00:14.931 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 37.3307ms
2024-04-09 15:00:14.931 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:19.427 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:00:19.428 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:19.429 +08:00 [INF] Route matched with {action = "Update", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto] UpdateAsync(System.Guid, Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuUpdateInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 15:00:19.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE "id" = N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:00:19.434 +08:00 [DBG] =========Yi-SQL耗时1.5086毫秒=====
2024-04-09 15:00:19.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
UPDATE "menu"  SET
           "isdeleted"=0,"creationtime"=CAST('2024-04-08 12:22:18.071' AS DATETIME),"creatorid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodifierid"=N'e94b7363-80d1-10a3-eb2c-3a119a976151',"lastmodificationtime"=CAST('2024-04-09 15:00:19.438' AS DATETIME),"ordernum"=100,"state"=1,"menuname"=N'问题列表',"menutype"=1,"permissioncode"=N'question:questiones:list',"parentid"=N'7e4f4c22-9927-da88-9330-3a11cdb2f701',"menuicon"=N'list',"router"=N'questiones',"islink"=0,"iscache"=0,"isshow"=1,"remark"=null,"component"=N'question/questiones/index',"query"=N''  WHERE "id"=N'6799560e-c779-66bf-d6aa-3a11ce1e28dd'
===============================

2024-04-09 15:00:19.439 +08:00 [DBG] =========Yi-SQL耗时0.686毫秒=====
2024-04-09 15:00:19.440 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetOutputDto'.
2024-04-09 15:00:19.440 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application) in 11.5448ms
2024-04-09 15:00:19.440 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.UpdateAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:19.465 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:19.465 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 15:00:19.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 15:00:19.467 +08:00 [DBG] =========Yi-SQL耗时0.6933毫秒=====
2024-04-09 15:00:19.480 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:00:19.490 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 25.054ms
2024-04-09 15:00:19.490 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:23.557 +08:00 [INF] 用户cc离开了，当前已连接1个
2024-04-09 15:00:23.562 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 15:00:23.562 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 15:00:23.700 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:00:23.701 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 15:00:23.701 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 15:00:23.716 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:23.716 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:00:23.733 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 15:00:23.733 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 17.0053ms
2024-04-09 15:00:23.733 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:23.783 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:23.783 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:00:23.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:00:23.789 +08:00 [DBG] =========Yi-SQL耗时2.9276毫秒=====
2024-04-09 15:00:23.789 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:00:23.790 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 15:00:23.791 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 15:00:23.791 +08:00 [DBG] =========Yi-SQL耗时0.6789毫秒=====
2024-04-09 15:00:23.792 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 15:00:23.793 +08:00 [DBG] =========Yi-SQL耗时0.9378毫秒=====
2024-04-09 15:00:23.794 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:00:23.795 +08:00 [DBG] =========Yi-SQL耗时0.8081毫秒=====
2024-04-09 15:00:23.796 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:00:23.796 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 12.5751ms
2024-04-09 15:00:23.796 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:23.817 +08:00 [INF] 2024/4/9 15:00:23：cc,hB0JyYTBeFGJ46VVOQBL4A连接服务端success，当前已连接0个
2024-04-09 15:00:24.081 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:00:24.081 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:24.081 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 15:00:24.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:00:24.084 +08:00 [DBG] =========Yi-SQL耗时1.8889毫秒=====
2024-04-09 15:00:24.086 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:00:24.086 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:00:24.087 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.7335ms
2024-04-09 15:00:24.087 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:00:24.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:00:24.101 +08:00 [DBG] =========Yi-SQL耗时1.8618毫秒=====
2024-04-09 15:00:24.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 15:00:24.106 +08:00 [DBG] =========Yi-SQL耗时1.365毫秒=====
2024-04-09 15:00:24.113 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:00:24.116 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 30.2905ms
2024-04-09 15:00:24.116 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:00:33.611 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 15:00:33.614 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:00:33.620 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"  WHERE "id" = N'899a62f0-18f0-ce50-41ec-3a11ce979d96'   
===============================

2024-04-09 15:00:33.621 +08:00 [DBG] =========Yi-SQL耗时0.9893毫秒=====
2024-04-09 15:00:33.625 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.QuestionDto'.
2024-04-09 15:00:33.625 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application) in 11.3536ms
2024-04-09 15:00:33.625 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 15:02:52.668 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:02:52.668 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:02:52.671 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:02:52.672 +08:00 [DBG] =========Yi-SQL耗时1.1159毫秒=====
2024-04-09 15:02:52.687 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 15:02:52.690 +08:00 [DBG] =========Yi-SQL耗时2.4256毫秒=====
2024-04-09 15:02:52.692 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:02:52.693 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 24.8245ms
2024-04-09 15:02:52.693 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:02:55.915 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:02:55.915 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:02:55.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:02:55.918 +08:00 [DBG] =========Yi-SQL耗时0.9072毫秒=====
2024-04-09 15:02:55.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 20 offset 0
===============================

2024-04-09 15:02:55.921 +08:00 [DBG] =========Yi-SQL耗时0.5546毫秒=====
2024-04-09 15:02:55.922 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:02:55.922 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 7.561ms
2024-04-09 15:02:55.922 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:02:56.901 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:02:56.902 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:02:56.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:02:56.905 +08:00 [DBG] =========Yi-SQL耗时0.7865毫秒=====
2024-04-09 15:02:56.907 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 15:02:56.908 +08:00 [DBG] =========Yi-SQL耗时0.6756毫秒=====
2024-04-09 15:02:56.909 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:02:56.909 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 7.296ms
2024-04-09 15:02:56.909 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:04:17.760 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:04:17.760 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 15:04:17.762 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:04:17.764 +08:00 [DBG] =========Yi-SQL耗时1.701毫秒=====
2024-04-09 15:04:17.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:04:17.771 +08:00 [DBG] =========Yi-SQL耗时0.7721毫秒=====
2024-04-09 15:04:17.772 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:04:17.773 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 12.3726ms
2024-04-09 15:04:17.773 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:04:26.963 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:04:26.964 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:04:26.966 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:04:26.967 +08:00 [DBG] =========Yi-SQL耗时0.8378毫秒=====
2024-04-09 15:04:26.969 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 15:04:26.970 +08:00 [DBG] =========Yi-SQL耗时1.102毫秒=====
2024-04-09 15:04:26.975 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:04:26.975 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 11.6078ms
2024-04-09 15:04:26.975 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:10:28.013 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 15:10:28.014 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 15:10:28.661 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:10:28.671 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 15:10:28.674 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 15:10:28.679 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:10:28.680 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:10:28.685 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 15:10:28.686 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 6.0982ms
2024-04-09 15:10:28.686 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:10:28.750 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 15:10:28.750 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:10:28.755 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:10:28.756 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 15:10:28.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:10:28.835 +08:00 [INF] 2024/4/9 15:10:28：cc,vaKZxoxc6qe0FJZbQgY3VA连接服务端success，当前已连接0个
2024-04-09 15:10:28.930 +08:00 [DBG] =========Yi-SQL耗时171.7432毫秒=====
2024-04-09 15:10:28.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 15:10:28.934 +08:00 [DBG] =========Yi-SQL耗时1.1484毫秒=====
2024-04-09 15:10:28.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 15:10:28.936 +08:00 [DBG] =========Yi-SQL耗时1.1228毫秒=====
2024-04-09 15:10:28.937 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:10:28.938 +08:00 [DBG] =========Yi-SQL耗时1.0805毫秒=====
2024-04-09 15:10:28.940 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:10:28.941 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 190.5368ms
2024-04-09 15:10:28.941 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 15:10:29.036 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:10:29.036 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:10:29.036 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:10:29.040 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 15:10:29.040 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:10:29.042 +08:00 [DBG] =========Yi-SQL耗时1.6526毫秒=====
2024-04-09 15:10:29.043 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 15:10:29.044 +08:00 [DBG] =========Yi-SQL耗时1.0069毫秒=====
2024-04-09 15:10:29.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:10:29.045 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:10:29.046 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 9.6533ms
2024-04-09 15:10:29.046 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:10:29.048 +08:00 [DBG] =========Yi-SQL耗时3.2644毫秒=====
2024-04-09 15:10:29.050 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:10:29.050 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 10.6452ms
2024-04-09 15:10:29.051 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:11:03.363 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 15:11:03.364 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:11:03.366 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"  WHERE "id" = N'899a62f0-18f0-ce50-41ec-3a11ce979d96'   
===============================

2024-04-09 15:11:03.367 +08:00 [DBG] =========Yi-SQL耗时0.7878毫秒=====
2024-04-09 15:11:03.373 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.QuestionDto'.
2024-04-09 15:11:03.374 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application) in 10.1966ms
2024-04-09 15:11:03.374 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 15:11:10.374 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 15:11:10.374 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 15:11:11.363 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:11:11.365 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 15:11:11.366 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 15:11:11.384 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:11:11.384 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:11:11.393 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 15:11:11.394 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 9.8809ms
2024-04-09 15:11:11.394 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:11:11.644 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 15:11:11.644 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:11:11.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:11:11.651 +08:00 [DBG] =========Yi-SQL耗时3.018毫秒=====
2024-04-09 15:11:11.654 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:11:11.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 15:11:11.661 +08:00 [DBG] =========Yi-SQL耗时4.7305毫秒=====
2024-04-09 15:11:11.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 15:11:11.663 +08:00 [DBG] =========Yi-SQL耗时0.7198毫秒=====
2024-04-09 15:11:11.664 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 15:11:11.664 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:11:11.666 +08:00 [DBG] =========Yi-SQL耗时1.0896毫秒=====
2024-04-09 15:11:11.672 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:11:11.675 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 30.2198ms
2024-04-09 15:11:11.675 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 15:11:11.730 +08:00 [INF] 2024/4/9 15:11:11：cc,gtlX59VEiHdFLytjLCL2uw连接服务端success，当前已连接0个
2024-04-09 15:11:12.022 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:11:12.022 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:11:12.022 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:11:12.022 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 15:11:12.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:11:12.023 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:11:12.024 +08:00 [DBG] =========Yi-SQL耗时1.033毫秒=====
2024-04-09 15:11:12.028 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:11:12.028 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.0642ms
2024-04-09 15:11:12.028 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:11:12.140 +08:00 [DBG] =========Yi-SQL耗时115.7949毫秒=====
2024-04-09 15:11:12.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 15:11:12.149 +08:00 [DBG] =========Yi-SQL耗时2.3283毫秒=====
2024-04-09 15:11:12.150 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:11:12.151 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 128.6518ms
2024-04-09 15:11:12.151 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:12:23.634 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 15:12:23.638 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 15:12:24.399 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:12:24.402 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 15:12:24.404 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 15:12:24.420 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:12:24.421 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:12:24.425 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 15:12:24.426 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 5.1674ms
2024-04-09 15:12:24.426 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:12:24.661 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 15:12:24.661 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:12:24.661 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:12:24.662 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 15:12:24.679 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:12:24.683 +08:00 [DBG] =========Yi-SQL耗时3.8347毫秒=====
2024-04-09 15:12:24.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 15:12:24.686 +08:00 [DBG] =========Yi-SQL耗时0.8526毫秒=====
2024-04-09 15:12:24.687 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 15:12:24.688 +08:00 [DBG] =========Yi-SQL耗时1.0267毫秒=====
2024-04-09 15:12:24.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:12:24.692 +08:00 [DBG] =========Yi-SQL耗时2.0979毫秒=====
2024-04-09 15:12:24.693 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:12:24.694 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 33.2313ms
2024-04-09 15:12:24.695 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 15:12:24.725 +08:00 [INF] 2024/4/9 15:12:24：cc,k5es-ccgwlBjWHC6IFE8xA连接服务端success，当前已连接0个
2024-04-09 15:12:25.023 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:12:25.024 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:12:25.024 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:12:25.024 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 15:12:25.025 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:12:25.029 +08:00 [DBG] =========Yi-SQL耗时3.1978毫秒=====
2024-04-09 15:12:25.030 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:12:25.031 +08:00 [DBG] =========Yi-SQL耗时1.2819毫秒=====
2024-04-09 15:12:25.039 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 15:12:25.042 +08:00 [DBG] =========Yi-SQL耗时3.178毫秒=====
2024-04-09 15:12:25.049 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:12:25.050 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 25.6037ms
2024-04-09 15:12:25.050 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:12:25.057 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:12:25.058 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 34.1994ms
2024-04-09 15:12:25.058 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:17:06.287 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:17:06.287 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:17:06.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:17:06.338 +08:00 [DBG] =========Yi-SQL耗时49.4501毫秒=====
2024-04-09 15:17:06.344 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 15:17:06.345 +08:00 [DBG] =========Yi-SQL耗时0.8456毫秒=====
2024-04-09 15:17:06.345 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:17:06.346 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 58.4185ms
2024-04-09 15:17:06.346 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:20:18.671 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetExportExcelAsync (Yi.Abp.Application)'
2024-04-09 15:20:18.686 +08:00 [INF] Route matched with {action = "GetExportExcel", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetExportExcelAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:20:18.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:20:18.746 +08:00 [DBG] =========Yi-SQL耗时1.8075毫秒=====
2024-04-09 15:20:18.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10000 offset 0
===============================

2024-04-09 15:20:18.751 +08:00 [DBG] =========Yi-SQL耗时0.7982毫秒=====
2024-04-09 15:20:18.882 +08:00 [INF] Executing PhysicalFileResult, sending file '/wwwroot/temp/QuestionAggregateRoot_2024-04-09_15-20-18_5ff14810-bfb1-4fdf-8065-d7a47a136028.xlsx' with download name '' ...
2024-04-09 15:20:18.910 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetExportExcelAsync (Yi.Abp.Application) in 224.7702ms
2024-04-09 15:20:18.911 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetExportExcelAsync (Yi.Abp.Application)'
2024-04-09 15:21:20.638 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 15:21:20.644 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 15:21:21.176 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:21:21.177 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 15:21:21.177 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 15:21:21.192 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:21.192 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:21:21.193 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 15:21:21.193 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 1.328ms
2024-04-09 15:21:21.193 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:21.314 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:21.314 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:21:21.316 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:21:21.321 +08:00 [DBG] =========Yi-SQL耗时4.0185毫秒=====
2024-04-09 15:21:21.322 +08:00 [INF] CORS policy execution successful.
2024-04-09 15:21:21.328 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 15:21:21.328 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 15:21:21.330 +08:00 [DBG] =========Yi-SQL耗时2.1728毫秒=====
2024-04-09 15:21:21.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 15:21:21.332 +08:00 [DBG] =========Yi-SQL耗时0.9686毫秒=====
2024-04-09 15:21:21.332 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:21:21.333 +08:00 [DBG] =========Yi-SQL耗时0.7718毫秒=====
2024-04-09 15:21:21.333 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:21:21.334 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 19.3231ms
2024-04-09 15:21:21.334 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:21.378 +08:00 [INF] 2024/4/9 15:21:21：cc,Qgz3wAZJqJkttwQ02F4qrg连接服务端success，当前已连接0个
2024-04-09 15:21:21.516 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:21.516 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:21.517 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 15:21:21.517 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 15:21:21.516 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:21.517 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 15:21:21.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:21:21.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:21:21.524 +08:00 [DBG] =========Yi-SQL耗时2.1072毫秒=====
2024-04-09 15:21:21.526 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:21:21.526 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 15:21:21.526 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 9.5979ms
2024-04-09 15:21:21.526 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:21.547 +08:00 [DBG] =========Yi-SQL耗时21.0143毫秒=====
2024-04-09 15:21:21.575 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:21:21.595 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 77.7874ms
2024-04-09 15:21:21.597 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:21.626 +08:00 [DBG] =========Yi-SQL耗时103.6935毫秒=====
2024-04-09 15:21:21.627 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:21:21.627 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 110.5884ms
2024-04-09 15:21:21.627 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:23.414 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:23.415 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 15:21:23.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:21:23.417 +08:00 [DBG] =========Yi-SQL耗时0.653毫秒=====
2024-04-09 15:21:23.421 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:21:23.422 +08:00 [DBG] =========Yi-SQL耗时1.4977毫秒=====
2024-04-09 15:21:23.423 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:21:23.424 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 9.0492ms
2024-04-09 15:21:23.424 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:24.588 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:24.588 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:24.588 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 15:21:24.588 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 15:21:24.589 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:24.589 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 15:21:24.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:21:24.590 +08:00 [DBG] =========Yi-SQL耗时0.889毫秒=====
2024-04-09 15:21:24.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 15:21:24.593 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:21:24.593 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.323ms
2024-04-09 15:21:24.594 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:24.598 +08:00 [DBG] =========Yi-SQL耗时4.7889毫秒=====
2024-04-09 15:21:24.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 15:21:24.599 +08:00 [DBG] =========Yi-SQL耗时1.0588毫秒=====
2024-04-09 15:21:24.602 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:21:24.602 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 14.129ms
2024-04-09 15:21:24.602 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:24.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 15:21:24.607 +08:00 [DBG] =========Yi-SQL耗时2.8918毫秒=====
2024-04-09 15:21:24.608 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 15:21:24.609 +08:00 [DBG] =========Yi-SQL耗时1.2344毫秒=====
2024-04-09 15:21:24.610 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:21:24.610 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 21.1789ms
2024-04-09 15:21:24.610 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:21:25.638 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 15:21:25.638 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 15:21:25.642 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:21:25.645 +08:00 [DBG] =========Yi-SQL耗时2.0773毫秒=====
2024-04-09 15:21:25.646 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:21:25.647 +08:00 [DBG] =========Yi-SQL耗时0.9448毫秒=====
2024-04-09 15:21:25.648 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:21:25.648 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 9.5172ms
2024-04-09 15:21:25.648 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 15:21:28.136 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:21:28.137 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:21:28.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:21:28.148 +08:00 [DBG] =========Yi-SQL耗时1.8256毫秒=====
2024-04-09 15:21:28.149 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 15:21:28.151 +08:00 [DBG] =========Yi-SQL耗时1.1088毫秒=====
2024-04-09 15:21:28.152 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:21:28.152 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 15.3308ms
2024-04-09 15:21:28.152 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:22:54.220 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 15:22:54.221 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:22:54.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"  WHERE "id" = N'899a62f0-18f0-ce50-41ec-3a11ce979d96'   
===============================

2024-04-09 15:22:54.224 +08:00 [DBG] =========Yi-SQL耗时1.5703毫秒=====
2024-04-09 15:22:54.231 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.QuestionDto'.
2024-04-09 15:22:54.231 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application) in 10.3819ms
2024-04-09 15:22:54.231 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 15:23:45.602 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 15:23:45.602 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 15:23:45.604 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:23:45.606 +08:00 [DBG] =========Yi-SQL耗时1.54毫秒=====
2024-04-09 15:23:45.611 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:23:45.612 +08:00 [DBG] =========Yi-SQL耗时2.4216毫秒=====
2024-04-09 15:23:45.613 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:23:45.613 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 10.6463ms
2024-04-09 15:23:45.613 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 15:23:48.763 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:48.765 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:48.765 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 15:23:48.827 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:23:48.827 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:48.834 +08:00 [DBG] =========Yi-SQL耗时5.7582毫秒=====
2024-04-09 15:23:48.840 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:23:48.849 +08:00 [DBG] =========Yi-SQL耗时9.0552毫秒=====
2024-04-09 15:23:48.860 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-09 15:23:48.860 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:23:48.861 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 95.729ms
2024-04-09 15:23:48.861 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:48.861 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 15:23:48.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:23:48.881 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:23:48.882 +08:00 [DBG] =========Yi-SQL耗时2.3721毫秒=====
2024-04-09 15:23:48.883 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:23:48.884 +08:00 [DBG] =========Yi-SQL耗时0.9413毫秒=====
2024-04-09 15:23:48.903 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:23:48.908 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 47.9852ms
2024-04-09 15:23:48.908 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:48.933 +08:00 [DBG] =========Yi-SQL耗时51.4681毫秒=====
2024-04-09 15:23:48.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-09 15:23:48.935 +08:00 [DBG] =========Yi-SQL耗时0.2661毫秒=====
2024-04-09 15:23:48.938 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-09 15:23:48.939 +08:00 [DBG] =========Yi-SQL耗时0.8602毫秒=====
2024-04-09 15:23:48.942 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"postid" as bid FROM "userpost"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-09 15:23:48.943 +08:00 [DBG] =========Yi-SQL耗时0.7862毫秒=====
2024-04-09 15:23:48.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","postcode" AS "postcode","postname" AS "postname","remark" AS "remark" FROM "post"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-04-09 15:23:48.943 +08:00 [DBG] =========Yi-SQL耗时0.4748毫秒=====
2024-04-09 15:23:48.950 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","deptname" AS "deptname","deptcode" AS "deptcode","leader" AS "leader","parentid" AS "parentid","remark" AS "remark" FROM "dept"  WHERE   "id" IN (null)    
===============================

2024-04-09 15:23:48.950 +08:00 [DBG] =========Yi-SQL耗时0.3379毫秒=====
2024-04-09 15:23:48.969 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-04-09 15:23:48.973 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 112.0298ms
2024-04-09 15:23:48.973 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:53.166 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:53.166 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 15:23:53.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'b8e9b346-a2d5-41e2-25c3-3a119a976153'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:23:53.172 +08:00 [DBG] =========Yi-SQL耗时3.1261毫秒=====
2024-04-09 15:23:53.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'b8e9b346-a2d5-41e2-25c3-3a119a976153'    
===============================

2024-04-09 15:23:53.175 +08:00 [DBG] =========Yi-SQL耗时1.0768毫秒=====
2024-04-09 15:23:53.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-04-09 15:23:53.178 +08:00 [DBG] =========Yi-SQL耗时0.6118毫秒=====
2024-04-09 15:23:53.178 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"postid" as bid FROM "userpost"  WHERE   "userid" = 'b8e9b346-a2d5-41e2-25c3-3a119a976153'    
===============================

2024-04-09 15:23:53.179 +08:00 [DBG] =========Yi-SQL耗时0.5291毫秒=====
2024-04-09 15:23:53.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","postcode" AS "postcode","postname" AS "postname","remark" AS "remark" FROM "post"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-04-09 15:23:53.180 +08:00 [DBG] =========Yi-SQL耗时0.3743毫秒=====
2024-04-09 15:23:53.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","deptname" AS "deptname","deptcode" AS "deptcode","leader" AS "leader","parentid" AS "parentid","remark" AS "remark" FROM "dept"  WHERE   "id" IN (null)    
===============================

2024-04-09 15:23:53.181 +08:00 [DBG] =========Yi-SQL耗时0.2979毫秒=====
2024-04-09 15:23:53.182 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-04-09 15:23:53.182 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 15.6709ms
2024-04-09 15:23:53.182 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:57.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:57.146 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:57.146 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 15:23:57.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 15:23:57.150 +08:00 [DBG] =========Yi-SQL耗时1.7488毫秒=====
2024-04-09 15:23:57.153 +08:00 [INF] Route matched with {action = "Get", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 15:23:57.166 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:23:57.171 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 24.8742ms
2024-04-09 15:23:57.171 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:57.176 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"  WHERE "id" = N'3476ed9f-ffd6-04f3-c9e2-3a119a976147'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:23:57.177 +08:00 [DBG] =========Yi-SQL耗时0.7619毫秒=====
2024-04-09 15:23:57.178 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:57.180 +08:00 [INF] Route matched with {action = "GetListRoleId", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListRoleIdAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 15:23:57.185 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetOutputDto'.
2024-04-09 15:23:57.187 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application) in 33.8599ms
2024-04-09 15:23:57.187 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:23:57.205 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu" "m"  WHERE (EXISTS ( SELECT * FROM "rolemenu" "rm"  WHERE (( "roleid" = N'3476ed9f-ffd6-04f3-c9e2-3a119a976147' ) AND ( "menuid" = "m"."id" )) ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:23:57.207 +08:00 [DBG] =========Yi-SQL耗时2.0125毫秒=====
2024-04-09 15:23:57.208 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:23:57.208 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application) in 28.0964ms
2024-04-09 15:23:57.208 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListRoleIdAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:02.213 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:02.214 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 15:24:02.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 15:24:02.217 +08:00 [DBG] =========Yi-SQL耗时1.0253毫秒=====
2024-04-09 15:24:02.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 15:24:02.221 +08:00 [DBG] =========Yi-SQL耗时1.3302毫秒=====
2024-04-09 15:24:02.224 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:24:02.225 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 11.1439ms
2024-04-09 15:24:02.225 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:04.145 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:04.145 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:04.145 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 15:24:04.147 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 15:24:04.148 +08:00 [DBG] =========Yi-SQL耗时0.9824毫秒=====
2024-04-09 15:24:04.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 15:24:04.153 +08:00 [DBG] =========Yi-SQL耗时0.827毫秒=====
2024-04-09 15:24:04.153 +08:00 [INF] Route matched with {action = "Get", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 15:24:04.156 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:24:04.156 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 10.6776ms
2024-04-09 15:24:04.156 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:04.163 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE "id" = N'e6ebca6a-f4a4-c5f6-2912-3a119a9760f2'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:24:04.164 +08:00 [DBG] =========Yi-SQL耗时0.7408毫秒=====
2024-04-09 15:24:04.171 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetOutputDto'.
2024-04-09 15:24:04.172 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetAsync (Yi.Framework.Rbac.Application) in 18.7794ms
2024-04-09 15:24:04.172 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:08.917 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:08.918 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 15:24:08.927 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:24:08.928 +08:00 [DBG] =========Yi-SQL耗时0.6741毫秒=====
2024-04-09 15:24:08.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('e6ebca6a-f4a4-c5f6-2912-3a119a9760f2','92ddd400-2bd6-a928-ac61-3a119a9760f3','8ca24824-ac24-e8dd-9d21-3a119a9760f3','310e3b0b-b741-5786-ffcc-3a119a9760f3','e0c47979-f00d-26c7-101f-3a119a9760f3','a5100d19-9ace-6dbb-a926-3a119a9760f3','0259b42a-8817-9c60-1b65-3a119a9760f3','3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3','38c6f3af-e240-a9bc-70bb-3a119a9760f3','25e0225d-3c6e-1ca6-74f9-3a119a9760f3'))   AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 15:24:08.958 +08:00 [DBG] =========Yi-SQL耗时1.4417毫秒=====
2024-04-09 15:24:08.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND  ((CASE WHEN  "deptid" IS NULL THEN  N'00000000-0000-0000-0000-000000000000' ELSE "deptid" END) IN ('e6ebca6a-f4a4-c5f6-2912-3a119a9760f2','92ddd400-2bd6-a928-ac61-3a119a9760f3','8ca24824-ac24-e8dd-9d21-3a119a9760f3','310e3b0b-b741-5786-ffcc-3a119a9760f3','e0c47979-f00d-26c7-101f-3a119a9760f3','a5100d19-9ace-6dbb-a926-3a119a9760f3','0259b42a-8817-9c60-1b65-3a119a9760f3','3f9ef02a-0f12-4ca5-0e4e-3a119a9760f3','38c6f3af-e240-a9bc-70bb-3a119a9760f3','25e0225d-3c6e-1ca6-74f9-3a119a9760f3'))   AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 15:24:08.959 +08:00 [DBG] =========Yi-SQL耗时1.1844毫秒=====
2024-04-09 15:24:08.960 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:24:08.960 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 42.2075ms
2024-04-09 15:24:08.960 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:12.682 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:12.682 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 15:24:12.685 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 15:24:12.687 +08:00 [DBG] =========Yi-SQL耗时1.6893毫秒=====
2024-04-09 15:24:12.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 15:24:12.691 +08:00 [DBG] =========Yi-SQL耗时0.9081毫秒=====
2024-04-09 15:24:12.691 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:24:12.691 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 9.0611ms
2024-04-09 15:24:12.691 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:34.491 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:24:34.491 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 15:24:34.492 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 15:24:34.492 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 0.922ms
2024-04-09 15:24:34.492 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 15:25:59.384 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:25:59.384 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 15:25:59.387 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 15:25:59.388 +08:00 [DBG] =========Yi-SQL耗时0.6934毫秒=====
2024-04-09 15:25:59.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 15:25:59.391 +08:00 [DBG] =========Yi-SQL耗时1.2352毫秒=====
2024-04-09 15:25:59.392 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:25:59.392 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 7.4619ms
2024-04-09 15:25:59.392 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 15:26:01.287 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 15:26:01.287 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 15:26:01.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:26:01.290 +08:00 [DBG] =========Yi-SQL耗时0.8063毫秒=====
2024-04-09 15:26:01.292 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:26:01.294 +08:00 [DBG] =========Yi-SQL耗时1.4966毫秒=====
2024-04-09 15:26:01.299 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:26:01.299 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 12.1367ms
2024-04-09 15:26:01.299 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 15:26:01.767 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:26:01.767 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 15:26:01.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:26:01.770 +08:00 [DBG] =========Yi-SQL耗时0.8219毫秒=====
2024-04-09 15:26:01.772 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:26:01.773 +08:00 [DBG] =========Yi-SQL耗时1.3293毫秒=====
2024-04-09 15:26:01.781 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:26:01.781 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 14.2913ms
2024-04-09 15:26:01.781 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:28:16.063 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:28:16.063 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:28:16.063 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 15:28:16.063 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 15:28:16.065 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 15:28:16.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 15:28:16.175 +08:00 [DBG] =========Yi-SQL耗时109.7487毫秒=====
2024-04-09 15:28:16.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 15:28:16.182 +08:00 [DBG] =========Yi-SQL耗时5.1407毫秒=====
2024-04-09 15:28:16.195 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:28:16.195 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 132.0433ms
2024-04-09 15:28:16.195 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:28:16.200 +08:00 [DBG] =========Yi-SQL耗时134.1752毫秒=====
2024-04-09 15:28:16.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 15:28:16.204 +08:00 [DBG] =========Yi-SQL耗时2.8187毫秒=====
2024-04-09 15:28:16.204 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:28:16.204 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 141.4868ms
2024-04-09 15:28:16.204 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:07.438 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:07.439 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-09 15:29:07.440 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:07.440 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 15:29:07.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:29:07.441 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:29:07.444 +08:00 [DBG] =========Yi-SQL耗时2.9273毫秒=====
2024-04-09 15:29:07.447 +08:00 [DBG] =========Yi-SQL耗时4.2328毫秒=====
2024-04-09 15:29:07.448 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:29:07.482 +08:00 [DBG] =========Yi-SQL耗时33.5506毫秒=====
2024-04-09 15:29:07.482 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:29:07.488 +08:00 [DBG] =========Yi-SQL耗时1.3211毫秒=====
2024-04-09 15:29:07.499 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:29:07.499 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 60.0105ms
2024-04-09 15:29:07.499 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:07.510 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:29:07.511 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 70.3794ms
2024-04-09 15:29:07.511 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:13.093 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 15:29:13.093 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 15:29:13.096 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:29:13.097 +08:00 [DBG] =========Yi-SQL耗时1.4138毫秒=====
2024-04-09 15:29:13.100 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 15:29:13.101 +08:00 [DBG] =========Yi-SQL耗时0.978毫秒=====
2024-04-09 15:29:13.101 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:29:13.101 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 8.1965ms
2024-04-09 15:29:13.101 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 15:29:15.679 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:15.680 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 15:29:15.681 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 15:29:15.682 +08:00 [DBG] =========Yi-SQL耗时1.4712毫秒=====
2024-04-09 15:29:15.695 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 15:29:15.699 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 19.4445ms
2024-04-09 15:29:15.699 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:22.254 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:22.254 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 15:29:22.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:29:22.257 +08:00 [DBG] =========Yi-SQL耗时0.8601毫秒=====
2024-04-09 15:29:22.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-09 15:29:22.261 +08:00 [DBG] =========Yi-SQL耗时0.9985毫秒=====
2024-04-09 15:29:22.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-09 15:29:22.262 +08:00 [DBG] =========Yi-SQL耗时0.4115毫秒=====
2024-04-09 15:29:22.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"postid" as bid FROM "userpost"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-09 15:29:22.263 +08:00 [DBG] =========Yi-SQL耗时0.7857毫秒=====
2024-04-09 15:29:22.264 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","postcode" AS "postcode","postname" AS "postname","remark" AS "remark" FROM "post"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-04-09 15:29:22.264 +08:00 [DBG] =========Yi-SQL耗时0.8247毫秒=====
2024-04-09 15:29:22.265 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","deptname" AS "deptname","deptcode" AS "deptcode","leader" AS "leader","parentid" AS "parentid","remark" AS "remark" FROM "dept"  WHERE   "id" IN (null)    
===============================

2024-04-09 15:29:22.265 +08:00 [DBG] =========Yi-SQL耗时0.2969毫秒=====
2024-04-09 15:29:22.266 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-04-09 15:29:22.266 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 12.2965ms
2024-04-09 15:29:22.266 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:32.271 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:32.271 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 15:29:32.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:29:32.275 +08:00 [DBG] =========Yi-SQL耗时1.5197毫秒=====
2024-04-09 15:29:32.278 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-09 15:29:32.278 +08:00 [DBG] =========Yi-SQL耗时0.5524毫秒=====
2024-04-09 15:29:32.279 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-09 15:29:32.279 +08:00 [DBG] =========Yi-SQL耗时0.3958毫秒=====
2024-04-09 15:29:32.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"postid" as bid FROM "userpost"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-09 15:29:32.280 +08:00 [DBG] =========Yi-SQL耗时0.2664毫秒=====
2024-04-09 15:29:32.280 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","postcode" AS "postcode","postname" AS "postname","remark" AS "remark" FROM "post"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-04-09 15:29:32.280 +08:00 [DBG] =========Yi-SQL耗时0.2199毫秒=====
2024-04-09 15:29:32.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","deptname" AS "deptname","deptcode" AS "deptcode","leader" AS "leader","parentid" AS "parentid","remark" AS "remark" FROM "dept"  WHERE   "id" IN (null)    
===============================

2024-04-09 15:29:32.281 +08:00 [DBG] =========Yi-SQL耗时0.2268毫秒=====
2024-04-09 15:29:32.281 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-04-09 15:29:32.282 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 10.1202ms
2024-04-09 15:29:32.282 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:40.543 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 15:29:40.544 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 15:29:40.545 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 15:29:40.546 +08:00 [DBG] =========Yi-SQL耗时0.7504毫秒=====
2024-04-09 15:29:40.548 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-09 15:29:40.549 +08:00 [DBG] =========Yi-SQL耗时0.3896毫秒=====
2024-04-09 15:29:40.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-09 15:29:40.549 +08:00 [DBG] =========Yi-SQL耗时0.2713毫秒=====
2024-04-09 15:29:40.549 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"postid" as bid FROM "userpost"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-09 15:29:40.550 +08:00 [DBG] =========Yi-SQL耗时0.1795毫秒=====
2024-04-09 15:29:40.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","postcode" AS "postcode","postname" AS "postname","remark" AS "remark" FROM "post"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-04-09 15:29:40.550 +08:00 [DBG] =========Yi-SQL耗时0.1867毫秒=====
2024-04-09 15:29:40.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","deptname" AS "deptname","deptcode" AS "deptcode","leader" AS "leader","parentid" AS "parentid","remark" AS "remark" FROM "dept"  WHERE   "id" IN (null)    
===============================

2024-04-09 15:29:40.550 +08:00 [DBG] =========Yi-SQL耗时0.1535毫秒=====
2024-04-09 15:29:40.551 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-04-09 15:29:40.551 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 7.2675ms
2024-04-09 15:29:40.551 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:00:29.547 +08:00 [INF] 
   __     ___   ______                                           _    
   \ \   / (_) |  ____|                                         | |   
    \ \_/ / _  | |__ _ __ __ _ _ __ ___   _____      _____  _ __| | __
     \   / | | |  __| '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
      | |  | | | |  | | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
      |_|  |_| |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\

2024-04-09 16:00:29.582 +08:00 [INF] Yi框架-Abp.vNext，启动！
2024-04-09 16:00:34.344 +08:00 [INF] Loaded ABP modules:
2024-04-09 16:00:34.344 +08:00 [INF] - Yi.Abp.Web.YiAbpWebModule
2024-04-09 16:00:34.344 +08:00 [INF]   - Yi.Abp.SqlsugarCore.YiAbpSqlSugarCoreModule
2024-04-09 16:00:34.344 +08:00 [INF]     - Yi.Abp.Domain.YiAbpDomainModule
2024-04-09 16:00:34.344 +08:00 [INF]       - Yi.Abp.Domain.Shared.YiAbpDomainSharedModule
2024-04-09 16:00:34.344 +08:00 [INF]         - Yi.Framework.Rbac.Domain.Shared.YiFrameworkRbacDomainSharedModule
2024-04-09 16:00:34.344 +08:00 [INF]           - Volo.Abp.Domain.AbpDddDomainSharedModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyAbstractionsModule
2024-04-09 16:00:34.344 +08:00 [INF]               - Volo.Abp.VirtualFileSystem.AbpVirtualFileSystemModule
2024-04-09 16:00:34.344 +08:00 [INF]               - Volo.Abp.Localization.AbpLocalizationModule
2024-04-09 16:00:34.344 +08:00 [INF]                 - Volo.Abp.Settings.AbpSettingsModule
2024-04-09 16:00:34.344 +08:00 [INF]                   - Volo.Abp.Localization.AbpLocalizationAbstractionsModule
2024-04-09 16:00:34.344 +08:00 [INF]                   - Volo.Abp.Security.AbpSecurityModule
2024-04-09 16:00:34.344 +08:00 [INF]                   - Volo.Abp.Data.AbpDataModule
2024-04-09 16:00:34.344 +08:00 [INF]                     - Volo.Abp.ObjectExtending.AbpObjectExtendingModule
2024-04-09 16:00:34.344 +08:00 [INF]                       - Volo.Abp.Validation.AbpValidationAbstractionsModule
2024-04-09 16:00:34.344 +08:00 [INF]                     - Volo.Abp.Uow.AbpUnitOfWorkModule
2024-04-09 16:00:34.344 +08:00 [INF]                     - Volo.Abp.EventBus.Abstractions.AbpEventBusAbstractionsModule
2024-04-09 16:00:34.344 +08:00 [INF]                 - Volo.Abp.Threading.AbpThreadingModule
2024-04-09 16:00:34.344 +08:00 [INF]           - Yi.Framework.Mapster.YiFrameworkMapsterModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Yi.Framework.Core.YiFrameworkCoreModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Volo.Abp.ObjectMapping.AbpObjectMappingModule
2024-04-09 16:00:34.344 +08:00 [INF]         - Yi.Framework.Bbs.Domain.Shared.YiFrameworkBbsDomainSharedModule
2024-04-09 16:00:34.344 +08:00 [INF]         - Yi.Framework.AuditLogging.Domain.Shared.YiFrameworkAuditLoggingDomainSharedModule
2024-04-09 16:00:34.344 +08:00 [INF]       - Yi.Framework.TenantManagement.Domain.YiFrameworkTenantManagementDomainModule
2024-04-09 16:00:34.344 +08:00 [INF]         - Volo.Abp.Domain.AbpDddDomainModule
2024-04-09 16:00:34.344 +08:00 [INF]           - Volo.Abp.Auditing.AbpAuditingModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Volo.Abp.Json.AbpJsonModule
2024-04-09 16:00:34.344 +08:00 [INF]               - Volo.Abp.Json.SystemTextJson.AbpJsonSystemTextJsonModule
2024-04-09 16:00:34.344 +08:00 [INF]                 - Volo.Abp.Json.AbpJsonAbstractionsModule
2024-04-09 16:00:34.344 +08:00 [INF]                 - Volo.Abp.Timing.AbpTimingModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Volo.Abp.MultiTenancy.AbpMultiTenancyModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Volo.Abp.Auditing.AbpAuditingContractsModule
2024-04-09 16:00:34.344 +08:00 [INF]           - Volo.Abp.EventBus.AbpEventBusModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Volo.Abp.Guids.AbpGuidsModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Volo.Abp.BackgroundWorkers.AbpBackgroundWorkersModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Volo.Abp.DistributedLocking.AbpDistributedLockingAbstractionsModule
2024-04-09 16:00:34.344 +08:00 [INF]           - Volo.Abp.ExceptionHandling.AbpExceptionHandlingModule
2024-04-09 16:00:34.344 +08:00 [INF]           - Volo.Abp.Specifications.AbpSpecificationsModule
2024-04-09 16:00:34.344 +08:00 [INF]           - Volo.Abp.Caching.AbpCachingModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Volo.Abp.Serialization.AbpSerializationModule
2024-04-09 16:00:34.344 +08:00 [INF]         - Volo.Abp.TenantManagement.AbpTenantManagementDomainSharedModule
2024-04-09 16:00:34.344 +08:00 [INF]           - Volo.Abp.Validation.AbpValidationModule
2024-04-09 16:00:34.344 +08:00 [INF]       - Yi.Framework.Rbac.Domain.YiFrameworkRbacDomainModule
2024-04-09 16:00:34.344 +08:00 [INF]         - Yi.Framework.Caching.FreeRedis.YiFrameworkCachingFreeRedisModule
2024-04-09 16:00:34.344 +08:00 [INF]         - Volo.Abp.AspNetCore.SignalR.AbpAspNetCoreSignalRModule
2024-04-09 16:00:34.344 +08:00 [INF]           - Volo.Abp.AspNetCore.AbpAspNetCoreModule
2024-04-09 16:00:34.344 +08:00 [INF]             - Volo.Abp.Http.AbpHttpModule
2024-04-09 16:00:34.344 +08:00 [INF]               - Volo.Abp.Http.AbpHttpAbstractionsModule
2024-04-09 16:00:34.345 +08:00 [INF]               - Volo.Abp.Minify.AbpMinifyModule
2024-04-09 16:00:34.345 +08:00 [INF]             - Volo.Abp.Authorization.AbpAuthorizationModule
2024-04-09 16:00:34.345 +08:00 [INF]               - Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Yi.Framework.Bbs.Domain.YiFrameworkBbsDomainModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Yi.Framework.AuditLogging.Domain.YiFrameworkAuditLoggingDomainModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Yi.Framework.Rbac.SqlSugarCore.YiFrameworkRbacSqlSugarCoreModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Yi.Framework.SqlSugarCore.YiFrameworkSqlSugarCoreModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Yi.Framework.Bbs.SqlSugarCore.YiFrameworkBbsSqlSugarCoreModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Yi.Framework.CodeGen.SqlSugarCore.YiFrameworkCodeGenSqlSugarCoreModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Yi.Framework.AuditLogging.SqlSugarCore.YiFrameworkAuditLoggingSqlSugarCoreModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Yi.Framework.TenantManagement.SqlSugarCore.YiFrameworkTenantManagementSqlSugarCoreModule
2024-04-09 16:00:34.345 +08:00 [INF]   - Yi.Abp.Application.YiAbpApplicationModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Yi.Abp.Application.Contracts.YiAbpApplicationContractsModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Yi.Framework.Rbac.Application.Contracts.YiFrameworkRbacApplicationContractsModule
2024-04-09 16:00:34.345 +08:00 [INF]         - Yi.Framework.Ddd.Application.Contracts.YiFrameworkDddApplicationContractsModule
2024-04-09 16:00:34.345 +08:00 [INF]           - Volo.Abp.Application.AbpDddApplicationContractsModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Yi.Framework.Bbs.Application.Contracts.YiFrameworkBbsApplicationContractsModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Yi.Framework.TenantManagement.Application.Contracts.YiFrameworkTenantManagementApplicationContractsModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Yi.Framework.Rbac.Application.YiFrameworkRbacApplicationModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Yi.Framework.Ddd.Application.YiFrameworkDddApplicationModule
2024-04-09 16:00:34.345 +08:00 [INF]         - Volo.Abp.Application.AbpDddApplicationModule
2024-04-09 16:00:34.345 +08:00 [INF]           - Volo.Abp.Features.AbpFeaturesModule
2024-04-09 16:00:34.345 +08:00 [INF]           - Volo.Abp.GlobalFeatures.AbpGlobalFeaturesModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Volo.Abp.BackgroundWorkers.Quartz.AbpBackgroundWorkersQuartzModule
2024-04-09 16:00:34.345 +08:00 [INF]         - Volo.Abp.Quartz.AbpQuartzModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Yi.Framework.Bbs.Application.YiFrameworkBbsApplicationModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Yi.Framework.TenantManagement.Application.YiFrameworkTenantManagementApplicationModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Yi.Framework.CodeGen.Application.YiFrameworkCodeGenApplicationModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Yi.Framework.CodeGen.Application.Contracts.YiFrameworkCodeGenApplicationContractsModule
2024-04-09 16:00:34.345 +08:00 [INF]         - Yi.Framework.CodeGen.Domain.Shared.YiFrameworkCodeGenDomainSharedModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Yi.Framework.CodeGen.Domain.YiFrameworkCodeGenDomainModule
2024-04-09 16:00:34.345 +08:00 [INF]         - Yi.Framework.SqlSugarCore.Abstractions.YiFrameworkSqlSugarCoreAbstractionsModule
2024-04-09 16:00:34.345 +08:00 [INF]   - Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule
2024-04-09 16:00:34.345 +08:00 [INF]   - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Volo.Abp.ApiVersioning.AbpApiVersioningAbstractionsModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Volo.Abp.AspNetCore.Mvc.AbpAspNetCoreMvcContractsModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Volo.Abp.UI.Navigation.AbpUiNavigationModule
2024-04-09 16:00:34.345 +08:00 [INF]       - Volo.Abp.UI.AbpUiModule
2024-04-09 16:00:34.345 +08:00 [INF]   - Volo.Abp.Autofac.AbpAutofacModule
2024-04-09 16:00:34.345 +08:00 [INF]     - Volo.Abp.Castle.AbpCastleCoreModule
2024-04-09 16:00:34.345 +08:00 [INF]   - Volo.Abp.Swashbuckle.AbpSwashbuckleModule
2024-04-09 16:00:34.345 +08:00 [INF]   - Volo.Abp.AspNetCore.Serilog.AbpAspNetCoreSerilogModule
2024-04-09 16:00:34.345 +08:00 [INF]   - Volo.Abp.AspNetCore.Authentication.JwtBearer.AbpAspNetCoreAuthenticationJwtBearerModule
2024-04-09 16:00:34.345 +08:00 [INF]   - Yi.Framework.AspNetCore.YiFrameworkAspNetCoreModule
2024-04-09 16:00:34.345 +08:00 [INF]   - Yi.Framework.AspNetCore.Authentication.OAuth.YiFrameworkAspNetCoreAuthenticationOAuthModule
2024-04-09 16:00:34.350 +08:00 [DBG] ==========模块Initialize初始化统计-跳过0ms模块==========
2024-04-09 16:00:34.354 +08:00 [INF] 
==========Yi-SQL配置:==========
数据库连接字符串：Host=localhost;User ID=postgres;Password=123456;Port=5432;Database=Yi
数据库类型：PostgreSQL
是否开启种子数据：True
是否开启CodeFirst：True
是否开启Saas多租户：False
===============================

2024-04-09 16:00:34.991 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:34.997 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.024 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.027 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-09 16:00:35.031 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.036 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitenant') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitenant')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.045 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.045 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTenant')
===============================

2024-04-09 16:00:35.047 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.056 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.058 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.058 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.065 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.066 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-09 16:00:35.068 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.070 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."title" is '操作模块'
===============================

2024-04-09 16:00:35.071 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."opertype" is '操作类型'
===============================

2024-04-09 16:00:35.071 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestmethod" is '请求方法'
===============================

2024-04-09 16:00:35.071 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operuser" is '操作人员'
===============================

2024-04-09 16:00:35.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operip" is '操作Ip'
===============================

2024-04-09 16:00:35.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."operlocation" is '操作地点'
===============================

2024-04-09 16:00:35.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."method" is '操作方法'
===============================

2024-04-09 16:00:35.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestparam" is '请求参数'
===============================

2024-04-09 16:00:35.072 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "operationlog"."requestresult" is '请求结果'
===============================

2024-04-09 16:00:35.073 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.073 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "operationlog" is '操作日志表'
===============================

2024-04-09 16:00:35.074 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.074 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('operationlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('operationlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.082 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.082 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('OperationLog')
===============================

2024-04-09 16:00:35.085 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.090 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.091 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.097 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.098 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-09 16:00:35.100 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configname" is '配置名称'
===============================

2024-04-09 16:00:35.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configkey" is '配置键'
===============================

2024-04-09 16:00:35.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configvalue" is '配置值'
===============================

2024-04-09 16:00:35.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."configtype" is '配置类别'
===============================

2024-04-09 16:00:35.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."ordernum" is '排序字段'
===============================

2024-04-09 16:00:35.101 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "config"."remark" is '描述'
===============================

2024-04-09 16:00:35.102 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "config" is '配置表'
===============================

2024-04-09 16:00:35.102 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('config') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('config')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.108 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Config')
===============================

2024-04-09 16:00:35.111 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.116 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.118 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.118 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.124 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.124 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-09 16:00:35.126 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.126 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."id" is '主键'
===============================

2024-04-09 16:00:35.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."isdeleted" is '逻辑删除'
===============================

2024-04-09 16:00:35.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creationtime" is '创建时间'
===============================

2024-04-09 16:00:35.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."creatorid" is '创建者'
===============================

2024-04-09 16:00:35.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 16:00:35.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 16:00:35.127 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.127 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."ordernum" is '排序'
===============================

2024-04-09 16:00:35.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."state" is '状态'
===============================

2024-04-09 16:00:35.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptname" is '部门名称'
===============================

2024-04-09 16:00:35.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."deptcode" is '部门编码'
===============================

2024-04-09 16:00:35.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."leader" is '负责人'
===============================

2024-04-09 16:00:35.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."parentid" is '父级id'
===============================

2024-04-09 16:00:35.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dept"."remark" is '描述'
===============================

2024-04-09 16:00:35.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "dept" is '部门表'
===============================

2024-04-09 16:00:35.128 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.134 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.134 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dept')
===============================

2024-04-09 16:00:35.136 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.140 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.141 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.148 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-09 16:00:35.150 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.150 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."id" is '主键'
===============================

2024-04-09 16:00:35.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdeleted" is '逻辑删除'
===============================

2024-04-09 16:00:35.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."ordernum" is '排序'
===============================

2024-04-09 16:00:35.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."state" is '状态'
===============================

2024-04-09 16:00:35.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."remark" is '描述'
===============================

2024-04-09 16:00:35.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."listclass" is 'tag类型'
===============================

2024-04-09 16:00:35.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."cssclass" is 'tagClass'
===============================

2024-04-09 16:00:35.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dicttype" is '字典类型'
===============================

2024-04-09 16:00:35.151 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictlabel" is '字典标签'
===============================

2024-04-09 16:00:35.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."dictvalue" is '字典值'
===============================

2024-04-09 16:00:35.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionary"."isdefault" is '是否为该类型的默认值'
===============================

2024-04-09 16:00:35.152 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionary') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionary')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.157 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Dictionary')
===============================

2024-04-09 16:00:35.159 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.165 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.165 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.171 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-09 16:00:35.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."id" is '主键'
===============================

2024-04-09 16:00:35.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."isdeleted" is '逻辑删除'
===============================

2024-04-09 16:00:35.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."ordernum" is '排序'
===============================

2024-04-09 16:00:35.173 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.173 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."state" is '状态'
===============================

2024-04-09 16:00:35.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dictname" is '字典名称'
===============================

2024-04-09 16:00:35.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."dicttype" is '字典类型'
===============================

2024-04-09 16:00:35.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "dictionarytype"."remark" is '描述'
===============================

2024-04-09 16:00:35.174 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('dictionarytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('dictionarytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.179 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DictionaryType')
===============================

2024-04-09 16:00:35.181 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.185 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.187 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.187 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.193 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.193 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-09 16:00:35.195 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filesize" is '文件大小'
===============================

2024-04-09 16:00:35.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filename" is '文件名'
===============================

2024-04-09 16:00:35.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "file"."filepath" is '文件路径'
===============================

2024-04-09 16:00:35.196 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('file') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('file')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.203 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.203 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('File')
===============================

2024-04-09 16:00:35.205 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.211 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.213 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.213 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.219 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.219 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-09 16:00:35.221 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.221 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginuser" is '登录用户'
===============================

2024-04-09 16:00:35.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginlocation" is '登录地点'
===============================

2024-04-09 16:00:35.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."loginip" is '登录Ip'
===============================

2024-04-09 16:00:35.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."browser" is '浏览器'
===============================

2024-04-09 16:00:35.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."os" is '操作系统'
===============================

2024-04-09 16:00:35.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.222 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "loginlog"."logmsg" is '登录信息'
===============================

2024-04-09 16:00:35.222 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_LoginUser') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.233 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.233 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('loginlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('loginlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.239 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.239 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('LoginLog')
===============================

2024-04-09 16:00:35.241 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.247 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.248 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.254 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.255 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-09 16:00:35.257 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."id" is '主键'
===============================

2024-04-09 16:00:35.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isdeleted" is '逻辑删除'
===============================

2024-04-09 16:00:35.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creationtime" is '创建时间'
===============================

2024-04-09 16:00:35.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."creatorid" is '创建者'
===============================

2024-04-09 16:00:35.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 16:00:35.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 16:00:35.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."ordernum" is '排序'
===============================

2024-04-09 16:00:35.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.258 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."state" is '状态'
===============================

2024-04-09 16:00:35.258 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuname" is '菜单名'
===============================

2024-04-09 16:00:35.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."menuicon" is '菜单图标'
===============================

2024-04-09 16:00:35.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."router" is '菜单组件路由'
===============================

2024-04-09 16:00:35.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."islink" is '是否为外部链接'
===============================

2024-04-09 16:00:35.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."iscache" is '是否缓存'
===============================

2024-04-09 16:00:35.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."isshow" is '是否显示'
===============================

2024-04-09 16:00:35.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."remark" is '描述'
===============================

2024-04-09 16:00:35.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."component" is '组件路径'
===============================

2024-04-09 16:00:35.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "menu"."query" is '路由参数'
===============================

2024-04-09 16:00:35.259 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.259 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "menu" is '菜单表'
===============================

2024-04-09 16:00:35.260 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('menu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('menu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.265 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.266 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Menu')
===============================

2024-04-09 16:00:35.268 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.274 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.276 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.281 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.281 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-09 16:00:35.283 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.283 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."title" is '公告标题'
===============================

2024-04-09 16:00:35.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."type" is '类型'
===============================

2024-04-09 16:00:35.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "notice"."content" is '内容'
===============================

2024-04-09 16:00:35.284 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('notice') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('notice')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.289 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.289 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Notice')
===============================

2024-04-09 16:00:35.292 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.295 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.296 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.297 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.302 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.302 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-09 16:00:35.304 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."id" is '主键'
===============================

2024-04-09 16:00:35.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."isdeleted" is '逻辑删除'
===============================

2024-04-09 16:00:35.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creationtime" is '创建时间'
===============================

2024-04-09 16:00:35.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."creatorid" is '创建者'
===============================

2024-04-09 16:00:35.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 16:00:35.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 16:00:35.305 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.305 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."ordernum" is '排序'
===============================

2024-04-09 16:00:35.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."state" is '状态'
===============================

2024-04-09 16:00:35.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postcode" is '岗位编码'
===============================

2024-04-09 16:00:35.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."postname" is '岗位名称'
===============================

2024-04-09 16:00:35.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "post"."remark" is '描述'
===============================

2024-04-09 16:00:35.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "post" is '岗位表'
===============================

2024-04-09 16:00:35.306 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.306 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('post') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('post')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.312 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.312 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Post')
===============================

2024-04-09 16:00:35.314 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.318 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.319 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.324 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.324 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-09 16:00:35.326 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.326 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."id" is '主键'
===============================

2024-04-09 16:00:35.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."roleid" is '角色id'
===============================

2024-04-09 16:00:35.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "roledept"."deptid" is '部门id'
===============================

2024-04-09 16:00:35.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "roledept" is '角色部门关系表'
===============================

2024-04-09 16:00:35.327 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('roledept') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('roledept')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.332 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.333 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleDept')
===============================

2024-04-09 16:00:35.335 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.339 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.340 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.346 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.368 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-09 16:00:35.370 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."id" is '主键'
===============================

2024-04-09 16:00:35.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."isdeleted" is '逻辑删除'
===============================

2024-04-09 16:00:35.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creationtime" is '创建时间'
===============================

2024-04-09 16:00:35.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."creatorid" is '创建者'
===============================

2024-04-09 16:00:35.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 16:00:35.371 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.371 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 16:00:35.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."ordernum" is '排序'
===============================

2024-04-09 16:00:35.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolename" is '角色名'
===============================

2024-04-09 16:00:35.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."rolecode" is '角色编码'
===============================

2024-04-09 16:00:35.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."remark" is '描述'
===============================

2024-04-09 16:00:35.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."datascope" is '角色数据范围'
===============================

2024-04-09 16:00:35.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "role"."state" is '状态'
===============================

2024-04-09 16:00:35.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "role" is '角色表'
===============================

2024-04-09 16:00:35.372 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.372 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('role') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('role')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.378 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.378 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Role')
===============================

2024-04-09 16:00:35.380 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.383 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.385 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.385 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.390 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.390 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-09 16:00:35.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "rolemenu"."id" is '主键'
===============================

2024-04-09 16:00:35.392 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.392 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "rolemenu" is '角色菜单关系表'
===============================

2024-04-09 16:00:35.393 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.393 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('rolemenu') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('rolemenu')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.398 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.398 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('RoleMenu')
===============================

2024-04-09 16:00:35.400 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.404 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.405 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.406 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.412 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.412 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-09 16:00:35.414 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."id" is '主键'
===============================

2024-04-09 16:00:35.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."isdeleted" is '逻辑删除'
===============================

2024-04-09 16:00:35.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."name" is '姓名'
===============================

2024-04-09 16:00:35.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."age" is '年龄'
===============================

2024-04-09 16:00:35.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."username" is '用户名'
===============================

2024-04-09 16:00:35.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.415 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."password" is '密码'
===============================

2024-04-09 16:00:35.415 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."salt" is '加密盐值'
===============================

2024-04-09 16:00:35.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."icon" is '头像'
===============================

2024-04-09 16:00:35.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."nick" is '昵称'
===============================

2024-04-09 16:00:35.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."email" is '邮箱'
===============================

2024-04-09 16:00:35.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ip" is 'Ip'
===============================

2024-04-09 16:00:35.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."address" is '地址'
===============================

2024-04-09 16:00:35.416 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.416 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."phone" is '电话'
===============================

2024-04-09 16:00:35.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."introduction" is '简介'
===============================

2024-04-09 16:00:35.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."remark" is '备注'
===============================

2024-04-09 16:00:35.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."sex" is '性别'
===============================

2024-04-09 16:00:35.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."deptid" is '部门id'
===============================

2024-04-09 16:00:35.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creationtime" is '创建时间'
===============================

2024-04-09 16:00:35.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."creatorid" is '创建者'
===============================

2024-04-09 16:00:35.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.417 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodifierid" is '最后修改者'
===============================

2024-04-09 16:00:35.417 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."lastmodificationtime" is '最后修改时间'
===============================

2024-04-09 16:00:35.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."ordernum" is '排序'
===============================

2024-04-09 16:00:35.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "user"."state" is '状态'
===============================

2024-04-09 16:00:35.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "user" is '用户表'
===============================

2024-04-09 16:00:35.418 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.418 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserName') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.419 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.419 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('user') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('user')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.425 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.425 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('User')
===============================

2024-04-09 16:00:35.427 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.430 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.432 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.432 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.437 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.437 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-09 16:00:35.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."id" is '主键'
===============================

2024-04-09 16:00:35.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."userid" is '用户id'
===============================

2024-04-09 16:00:35.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userpost"."postid" is '岗位id'
===============================

2024-04-09 16:00:35.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userpost" is '用户岗位表'
===============================

2024-04-09 16:00:35.439 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.439 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userpost') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userpost')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.445 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.446 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserPost')
===============================

2024-04-09 16:00:35.448 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.450 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.452 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.452 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.457 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.458 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-09 16:00:35.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."id" is '主键'
===============================

2024-04-09 16:00:35.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."roleid" is '角色id'
===============================

2024-04-09 16:00:35.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "userrole"."userid" is '用户id'
===============================

2024-04-09 16:00:35.460 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.460 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "userrole" is '用户角色关系表'
===============================

2024-04-09 16:00:35.461 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.461 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('userrole') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('userrole')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.466 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.466 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('UserRole')
===============================

2024-04-09 16:00:35.468 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.472 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.473 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.473 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.479 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.479 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-09 16:00:35.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "auth" is '第三方授权表'
===============================

2024-04-09 16:00:35.481 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.481 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('auth') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('auth')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.486 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.486 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Auth')
===============================

2024-04-09 16:00:35.488 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.492 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.494 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.494 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.499 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.499 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-09 16:00:35.501 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('accesslog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('accesslog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.506 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('AccessLog')
===============================

2024-04-09 16:00:35.508 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.511 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.512 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.513 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.518 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.518 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-09 16:00:35.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userid" is '用户id'
===============================

2024-04-09 16:00:35.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."userlimit" is '用户限制'
===============================

2024-04-09 16:00:35.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.520 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."level" is '用户等级'
===============================

2024-04-09 16:00:35.520 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."money" is '钱钱'
===============================

2024-04-09 16:00:35.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."experience" is '经验'
===============================

2024-04-09 16:00:35.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."discussnumber" is '发表主题数'
===============================

2024-04-09 16:00:35.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."commentnumber" is '发表主题数'
===============================

2024-04-09 16:00:35.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bbsuserextrainfo"."agreenumber" is '被点赞数'
===============================

2024-04-09 16:00:35.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bbsuserextrainfo" is '评论表'
===============================

2024-04-09 16:00:35.521 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.521 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.522 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.522 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bbsuserextrainfo') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bbsuserextrainfo')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.527 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.527 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BbsUserExtraInfo')
===============================

2024-04-09 16:00:35.529 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.532 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.534 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.534 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.539 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.539 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-09 16:00:35.541 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.541 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('setting') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('setting')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.546 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.546 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Setting')
===============================

2024-04-09 16:00:35.548 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.551 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.553 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.553 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.558 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.558 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-09 16:00:35.560 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."currentlevel" is '当前等级'
===============================

2024-04-09 16:00:35.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."minexperience" is '最小所需经验值'
===============================

2024-04-09 16:00:35.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."name" is '等级名称'
===============================

2024-04-09 16:00:35.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."nick" is '等级称号'
===============================

2024-04-09 16:00:35.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "level"."logo" is '等候logo'
===============================

2024-04-09 16:00:35.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "level" is '等级表'
===============================

2024-04-09 16:00:35.561 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.561 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('level') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('level')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.566 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.566 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Level')
===============================

2024-04-09 16:00:35.568 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.573 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.573 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.578 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.578 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-09 16:00:35.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."creationtime" is '签到时间'
===============================

2024-04-09 16:00:35.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "signin"."continuousnumber" is '连续签到次数'
===============================

2024-04-09 16:00:35.580 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "signin" is '签到表'
===============================

2024-04-09 16:00:35.581 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.582 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.582 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('signin') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('signin')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.586 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.587 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('SignIn')
===============================

2024-04-09 16:00:35.588 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.592 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.593 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.593 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.598 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.598 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-09 16:00:35.600 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.600 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."discussid" is '主题id'
===============================

2024-04-09 16:00:35.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "agree"."creatorid" is '创建者'
===============================

2024-04-09 16:00:35.601 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreatorId_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.602 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.603 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('agree') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('agree')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.609 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.609 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Agree')
===============================

2024-04-09 16:00:35.611 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.615 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.616 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.617 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.623 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.623 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-09 16:00:35.625 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "article"."ordernum" is '排序'
===============================

2024-04-09 16:00:35.626 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.626 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Name') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.627 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.627 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.628 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.629 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.630 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.630 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('article') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('article')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.636 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.636 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Article')
===============================

2024-04-09 16:00:35.638 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.643 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.643 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.648 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.648 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-09 16:00:35.650 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.651 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('banner') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('banner')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.656 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.656 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Banner')
===============================

2024-04-09 16:00:35.659 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.663 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.664 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.666 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.671 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-09 16:00:35.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "comment"."parentid" is '被回复的CommentId'
===============================

2024-04-09 16:00:35.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "comment" is '评论表'
===============================

2024-04-09 16:00:35.674 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.674 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_DiscussId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.675 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ParentId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.676 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.676 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('comment') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('comment')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.683 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.683 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Comment')
===============================

2024-04-09 16:00:35.685 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.690 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.691 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.697 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.697 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-09 16:00:35.699 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."cover" is '封面'
===============================

2024-04-09 16:00:35.700 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."permissionuserids" is '当PermissionType为部分用户时候，以下列表中的用户+创建者 代表拥有权限'
===============================

2024-04-09 16:00:35.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "discuss"."isdisablecreatecomment" is '是否禁止评论创建功能'
===============================

2024-04-09 16:00:35.701 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.701 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_Title') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.702 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.702 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_PlateId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.704 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.704 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_CreationTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.705 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.705 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discuss') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discuss')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.711 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.711 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Discuss')
===============================

2024-04-09 16:00:35.713 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.716 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.717 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.717 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.722 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.722 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-09 16:00:35.724 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discussmytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discussmytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.729 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.729 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussMyType')
===============================

2024-04-09 16:00:35.731 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.735 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.740 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.740 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-09 16:00:35.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.742 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "discusstop" is '首页置顶主题'
===============================

2024-04-09 16:00:35.742 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.743 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('discusstop') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('discusstop')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.748 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('DiscussTop')
===============================

2024-04-09 16:00:35.750 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.753 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.755 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.755 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.761 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.761 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-09 16:00:35.763 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('mytype') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('mytype')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.769 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.769 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('MyType')
===============================

2024-04-09 16:00:35.772 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.775 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.777 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.777 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.783 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.783 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-09 16:00:35.785 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.785 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "plate"."isdisablecreatediscuss" is '是否禁用创建主题，禁用后，只有管理员或者权限者能够发送'
===============================

2024-04-09 16:00:35.786 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.786 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('plate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('plate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.791 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.791 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Plate')
===============================

2024-04-09 16:00:35.794 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.799 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.800 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.808 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.808 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-09 16:00:35.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdeposittime" is '上一次存款日期'
===============================

2024-04-09 16:00:35.810 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.810 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."lastdrawtime" is '上一次取款日期'
===============================

2024-04-09 16:00:35.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."userid" is '用户id'
===============================

2024-04-09 16:00:35.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."storagemoney" is '当前存储的钱'
===============================

2024-04-09 16:00:35.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."maxstoragemoney" is '最大可存储的钱钱'
===============================

2024-04-09 16:00:35.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."fulltermtime" is '满期限时间，可空'
===============================

2024-04-09 16:00:35.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "bankcard"."bankcardstate" is '银行卡状态'
===============================

2024-04-09 16:00:35.811 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.811 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "bankcard" is '银行卡'
===============================

2024-04-09 16:00:35.812 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.812 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('bankcard') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('bankcard')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.817 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.817 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('BankCard')
===============================

2024-04-09 16:00:35.819 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.823 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.824 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.825 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.829 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-09 16:00:35.831 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."comparisonvalue" is '第三方的比较值'
===============================

2024-04-09 16:00:35.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."value" is '当前汇率值'
===============================

2024-04-09 16:00:35.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "interestrecords"."isfluctuate" is '是否波动期'
===============================

2024-04-09 16:00:35.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on table "interestrecords" is '利息记录'
===============================

2024-04-09 16:00:35.832 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.832 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('interestrecords') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('interestrecords')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.837 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.837 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('InterestRecords')
===============================

2024-04-09 16:00:35.839 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.843 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.844 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.845 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.850 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-09 16:00:35.852 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.852 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.853 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.853 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.854 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.854 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlogaction') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlogaction')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.859 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.860 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLogAction')
===============================

2024-04-09 16:00:35.861 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.867 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.869 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.869 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.875 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.875 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-09 16:00:35.877 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.878 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_ExecutionTime_UserId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.879 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yiauditlog') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yiauditlog')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.884 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.885 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiAuditLog')
===============================

2024-04-09 16:00:35.886 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.890 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.891 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.891 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.896 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.896 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-09 16:00:35.898 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.898 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_AuditLogId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.899 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_TenantId_EntityId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.900 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.900 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.905 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.905 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityChange')
===============================

2024-04-09 16:00:35.907 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.911 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.911 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.916 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.917 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-09 16:00:35.918 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.918 +08:00 [DBG] 
==========Yi-SQL执行:==========
  SELECT count(1) WHERE upper('index_EntityChangeId') IN ( SELECT upper(indexname) FROM pg_indexes )
===============================

2024-04-09 16:00:35.920 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.920 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yientitypropertychange') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yientitypropertychange')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.926 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiEntityPropertyChange')
===============================

2024-04-09 16:00:35.928 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.933 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.934 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.934 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.940 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.941 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-09 16:00:35.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.943 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."id" is '主键'
===============================

2024-04-09 16:00:35.943 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."project" is '项目'
===============================

2024-04-09 16:00:35.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."status" is '状态'
===============================

2024-04-09 16:00:35.944 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.944 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."category" is '类别'
===============================

2024-04-09 16:00:35.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."impact" is '影响'
===============================

2024-04-09 16:00:35.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."priority" is '优先级'
===============================

2024-04-09 16:00:35.945 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.945 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."title" is '标题'
===============================

2024-04-09 16:00:35.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."description" is '详情'
===============================

2024-04-09 16:00:35.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."solve_user" is '对应人'
===============================

2024-04-09 16:00:35.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.946 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "question"."creationtime" is '创建时间'
===============================

2024-04-09 16:00:35.946 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.947 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('question') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('question')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.956 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.956 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('Question')
===============================

2024-04-09 16:00:35.958 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.963 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.964 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.972 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.972 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-09 16:00:35.974 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."name" is '字段名称'
===============================

2024-04-09 16:00:35.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isrequired" is '是否必填'
===============================

2024-04-09 16:00:35.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."iskey" is '是否主键'
===============================

2024-04-09 16:00:35.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."isautoadd" is '是否自增'
===============================

2024-04-09 16:00:35.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.975 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yifield"."ispublic" is '是否公共'
===============================

2024-04-09 16:00:35.975 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yifield') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yifield')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.981 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.981 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiField')
===============================

2024-04-09 16:00:35.983 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.987 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:35.989 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.989 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:35.995 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-09 16:00:35.997 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."name" is '表名'
===============================

2024-04-09 16:00:35.997 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitable"."description" is '备注'
===============================

2024-04-09 16:00:35.997 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:35.997 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitable') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitable')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:36.003 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTable')
===============================

2024-04-09 16:00:36.005 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.008 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast(relname as varchar) as Name,
                        cast(obj_description(c.oid,'pg_class') as varchar) as Description from pg_class c 
                         inner join 
						 pg_namespace n on n.oid = c.relnamespace and nspname='public'
                         inner join 
                         pg_tables z on z.tablename=c.relname
                        where  relkind in('p', 'r') and relname not like 'pg\_%' and relname not like 'sql\_%' and schemaname='public' order by relname
===============================

2024-04-09 16:00:36.009 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.009 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:36.015 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-09 16:00:36.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."templatestr" is '模板字符串'
===============================

2024-04-09 16:00:36.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."buildpath" is '生成路径'
===============================

2024-04-09 16:00:36.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."name" is '模板名称'
===============================

2024-04-09 16:00:36.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.018 +08:00 [DBG] 
==========Yi-SQL执行:==========
comment on column "yitemplate"."remarks" is '备注'
===============================

2024-04-09 16:00:36.018 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.019 +08:00 [DBG] 
==========Yi-SQL执行:==========
select cast (pclass.oid as int4) as TableId,cast(ptables.tablename as varchar) as TableName,
                                pcolumn.column_name as DbColumnName,pcolumn.udt_name as DataType,
                                CASE WHEN pcolumn.numeric_scale >0 THEN pcolumn.numeric_precision ELSE pcolumn.character_maximum_length END   as Length,
                                pcolumn.column_default as DefaultValue,
                                pcolumn.numeric_scale as DecimalDigits,
                                pcolumn.numeric_scale as Scale,
                                col_description(pclass.oid, pcolumn.ordinal_position) as ColumnDescription,
                                case when pkey.colname = pcolumn.column_name
                                then true else false end as IsPrimaryKey,
                                case when pcolumn.column_default like 'nextval%'
                                then true else false end as IsIdentity,
                                case when pcolumn.is_nullable = 'YES'
                                then true else false end as IsNullable
                                 from (select * from pg_tables where upper(tablename) = upper('yitemplate') and schemaname='public') ptables inner join pg_class pclass
                                on ptables.tablename = pclass.relname inner join (SELECT *
                                FROM information_schema.columns where table_schema='public'
                                ) pcolumn on pcolumn.table_name = ptables.tablename and upper(pcolumn.table_name) = upper('yitemplate')
                                left join (
	                                select  pg_class.relname,pg_attribute.attname as colname from 
	                                pg_constraint  inner join pg_class 
	                                on pg_constraint.conrelid = pg_class.oid 
	                                inner join pg_attribute on pg_attribute.attrelid = pg_class.oid 
	                                and  pg_attribute.attnum = pg_constraint.conkey[1]
	                                inner join pg_type on pg_type.oid = pg_attribute.atttypid
	                                where pg_constraint.contype='p'
                                ) pkey on pcolumn.table_name = pkey.relname
                                order by table_catalog, table_schema, ordinal_position
===============================

2024-04-09 16:00:36.025 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.026 +08:00 [DBG] 
==========Yi-SQL执行:==========
select  
                               kcu.column_name as key_column
                               from information_schema.table_constraints tco
                               join information_schema.key_column_usage kcu 
                               on kcu.constraint_name = tco.constraint_name
                               and kcu.constraint_schema = tco.constraint_schema
                               and kcu.constraint_name = tco.constraint_name
                               where tco.constraint_type = 'PRIMARY KEY'
                               and kcu.table_schema='public' and 
                               upper(kcu.table_name)=upper('YiTemplate')
===============================

2024-04-09 16:00:36.028 +08:00 [DBG] =========Yi-SQL耗时0毫秒=====
2024-04-09 16:00:36.113 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dept"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.122 +08:00 [DBG] =========Yi-SQL耗时8.7229毫秒=====
2024-04-09 16:00:36.137 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionary"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.138 +08:00 [DBG] =========Yi-SQL耗时1.2204毫秒=====
2024-04-09 16:00:36.141 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.142 +08:00 [DBG] =========Yi-SQL耗时1.12毫秒=====
2024-04-09 16:00:36.146 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'系统管理' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.148 +08:00 [DBG] =========Yi-SQL耗时2.1295毫秒=====
2024-04-09 16:00:36.151 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "post"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.152 +08:00 [DBG] =========Yi-SQL耗时1.4925毫秒=====
2024-04-09 16:00:36.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "role"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.157 +08:00 [DBG] =========Yi-SQL耗时1.5857毫秒=====
2024-04-09 16:00:36.162 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "user"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.164 +08:00 [DBG] =========Yi-SQL耗时1.442毫秒=====
2024-04-09 16:00:36.166 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "banner"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.167 +08:00 [DBG] =========Yi-SQL耗时0.8592毫秒=====
2024-04-09 16:00:36.169 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "dictionarytype"   WHERE ( "dicttype" = N'bbs_type_lable' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.169 +08:00 [DBG] =========Yi-SQL耗时0.4794毫秒=====
2024-04-09 16:00:36.171 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "menu"   WHERE ( "menuname" = N'BBS' )  AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.172 +08:00 [DBG] =========Yi-SQL耗时0.5753毫秒=====
2024-04-09 16:00:36.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "bbsuserextrainfo"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.175 +08:00 [DBG] =========Yi-SQL耗时1.1973毫秒=====
2024-04-09 16:00:36.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "config"   WHERE ( 1 = 1 )   AND ( "isdeleted" = 0 )   LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.181 +08:00 [DBG] =========Yi-SQL耗时0.8115毫秒=====
2024-04-09 16:00:36.183 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "level"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.183 +08:00 [DBG] =========Yi-SQL耗时0.6637毫秒=====
2024-04-09 16:00:36.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "yitemplate"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.187 +08:00 [DBG] =========Yi-SQL耗时0.9509毫秒=====
2024-04-09 16:00:36.190 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT 1 FROM "question"   WHERE ( 1 = 1 )    LIMIT 1 offset 0
===============================

2024-04-09 16:00:36.190 +08:00 [DBG] =========Yi-SQL耗时0.8612毫秒=====
2024-04-09 16:00:36.199 +08:00 [DBG] 耗时-1848ms,已加载模块-Yi.Framework.SqlSugarCore
2024-04-09 16:00:36.256 +08:00 [DBG] 耗时-54ms,已加载模块-Volo.Abp.BackgroundWorkers
2024-04-09 16:00:36.260 +08:00 [DBG] 耗时-3ms,已加载模块-Volo.Abp.EventBus
2024-04-09 16:00:36.274 +08:00 [DBG] 耗时-13ms,已加载模块-Volo.Abp.AspNetCore
2024-04-09 16:00:36.279 +08:00 [DBG] 耗时-5ms,已加载模块-Volo.Abp.Quartz
2024-04-09 16:00:36.302 +08:00 [DBG] 耗时-22ms,已加载模块-Volo.Abp.BackgroundWorkers.Quartz
2024-04-09 16:00:36.305 +08:00 [DBG] 耗时-2ms,已加载模块-Volo.Abp.AspNetCore.Mvc
2024-04-09 16:00:36.545 +08:00 [INF] User profile is available. Using 'C:\Users\cm006238\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-04-09 16:00:36.624 +08:00 [DBG] 耗时-319ms,已加载模块-Yi.Abp.Web
2024-04-09 16:00:36.631 +08:00 [INF] 正在初始化【BBS-等级数据】......
2024-04-09 16:00:36.639 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","currentlevel","minexperience","name","nick","logo" FROM "level"  
===============================

2024-04-09 16:00:36.641 +08:00 [DBG] =========Yi-SQL耗时1.1965毫秒=====
2024-04-09 16:00:36.713 +08:00 [INF] 已完成初始化【BBS-等级数据】
2024-04-09 16:00:36.713 +08:00 [DBG] 耗时-88ms,已加载模块-Yi.Framework.Bbs.Domain
2024-04-09 16:00:36.714 +08:00 [INF] ==========【372】个模块初始化执行完毕，总耗时【2355ms】==========
2024-04-09 16:00:36.796 +08:00 [INF] Now listening on: http://[::]:19001
2024-04-09 16:00:36.797 +08:00 [INF] Application started. Press Ctrl+C to shut down.
2024-04-09 16:00:36.797 +08:00 [INF] Hosting environment: Development
2024-04-09 16:00:36.797 +08:00 [INF] Content root path: D:\vs_space\Yi\Yi.Abp.Net8\src\Yi.Abp.Web
2024-04-09 16:00:52.323 +08:00 [INF] CORS policy execution successful.
2024-04-09 16:00:52.390 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 16:00:52.390 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 16:00:52.396 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 16:00:52.409 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 16:00:52.478 +08:00 [INF] CORS policy execution successful.
2024-04-09 16:00:52.480 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 16:00:52.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:00:52.534 +08:00 [DBG] =========Yi-SQL耗时3.7448毫秒=====
2024-04-09 16:00:52.560 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 16:00:52.562 +08:00 [DBG] =========Yi-SQL耗时2.1343毫秒=====
2024-04-09 16:00:52.571 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 16:00:52.571 +08:00 [DBG] =========Yi-SQL耗时0.6618毫秒=====
2024-04-09 16:00:52.576 +08:00 [INF] 2024/4/9 16:00:52：cc,ntODr9tKVOSmvzA1utbfZg连接服务端success，当前已连接0个
2024-04-09 16:00:52.616 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 16:00:52.678 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 266.7669ms
2024-04-09 16:00:52.679 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 16:00:52.685 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 16:00:52.687 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 16:00:52.689 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:00:52.690 +08:00 [DBG] =========Yi-SQL耗时0.717毫秒=====
2024-04-09 16:00:52.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 16:00:52.692 +08:00 [DBG] =========Yi-SQL耗时0.3051毫秒=====
2024-04-09 16:00:52.693 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 16:00:52.693 +08:00 [DBG] =========Yi-SQL耗时0.2858毫秒=====
2024-04-09 16:00:52.694 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:00:52.695 +08:00 [DBG] =========Yi-SQL耗时0.6042毫秒=====
2024-04-09 16:00:52.716 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:00:52.719 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 32.1867ms
2024-04-09 16:00:52.719 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:02.110 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:02.110 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 16:01:02.117 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 16:01:02.118 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 16:01:02.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:01:02.137 +08:00 [DBG] =========Yi-SQL耗时0.8245毫秒=====
2024-04-09 16:01:02.152 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:01:02.155 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 37.2901ms
2024-04-09 16:01:02.155 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:02.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:01:02.177 +08:00 [DBG] =========Yi-SQL耗时2.1573毫秒=====
2024-04-09 16:01:02.186 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:01:02.186 +08:00 [DBG] =========Yi-SQL耗时0.5907毫秒=====
2024-04-09 16:01:02.190 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:01:02.192 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 74.0738ms
2024-04-09 16:01:02.192 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 16:01:03.839 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:03.839 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:03.839 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:03.839 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 16:01:03.841 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:01:03.842 +08:00 [DBG] =========Yi-SQL耗时1.2921毫秒=====
2024-04-09 16:01:03.844 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:01:03.845 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:01:03.845 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 16:01:03.845 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 5.6791ms
2024-04-09 16:01:03.845 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:03.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:01:03.886 +08:00 [DBG] =========Yi-SQL耗时7.641毫秒=====
2024-04-09 16:01:03.894 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 16:01:03.894 +08:00 [DBG] =========Yi-SQL耗时1.9456毫秒=====
2024-04-09 16:01:03.905 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:01:03.911 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 66.0991ms
2024-04-09 16:01:03.911 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:03.935 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:01:03.936 +08:00 [DBG] =========Yi-SQL耗时1.2239毫秒=====
2024-04-09 16:01:03.939 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:01:03.940 +08:00 [DBG] =========Yi-SQL耗时1.2605毫秒=====
2024-04-09 16:01:03.944 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:01:03.949 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 104.6898ms
2024-04-09 16:01:03.949 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:32.333 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:32.333 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:32.333 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:32.341 +08:00 [INF] Route matched with {action = "Get", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto] GetAsync(System.Guid) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:01:32.341 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:01:32.341 +08:00 [INF] Route matched with {action = "GetList", controller = "Post", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.PostService (Yi.Framework.Rbac.Application).
2024-04-09 16:01:32.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'14034830-d11c-db5d-ea3e-3a11a05c01b1'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:01:32.350 +08:00 [DBG] =========Yi-SQL耗时1.1001毫秒=====
2024-04-09 16:01:32.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-09 16:01:32.355 +08:00 [DBG] =========Yi-SQL耗时0.6691毫秒=====
2024-04-09 16:01:32.357 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "post"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:01:32.358 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" = '3580f6ed-3e5e-0cb3-ee9a-3a119a976148'    
===============================

2024-04-09 16:01:32.359 +08:00 [DBG] =========Yi-SQL耗时0.909毫秒=====
2024-04-09 16:01:32.361 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"postid" as bid FROM "userpost"  WHERE   "userid" = '14034830-d11c-db5d-ea3e-3a11a05c01b1'    
===============================

2024-04-09 16:01:32.362 +08:00 [DBG] =========Yi-SQL耗时0.6952毫秒=====
2024-04-09 16:01:32.362 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","postcode" AS "postcode","postname" AS "postname","remark" AS "remark" FROM "post"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)    
===============================

2024-04-09 16:01:32.362 +08:00 [DBG] =========Yi-SQL耗时0.3171毫秒=====
2024-04-09 16:01:32.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:01:32.365 +08:00 [DBG] =========Yi-SQL耗时0.9552毫秒=====
2024-04-09 16:01:32.367 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:01:32.369 +08:00 [DBG] =========Yi-SQL耗时1.6177毫秒=====
2024-04-09 16:01:32.370 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","state" AS "state","deptname" AS "deptname","deptcode" AS "deptcode","leader" AS "leader","parentid" AS "parentid","remark" AS "remark" FROM "dept"  WHERE   "id" IN (null)    
===============================

2024-04-09 16:01:32.371 +08:00 [DBG] =========Yi-SQL耗时0.459毫秒=====
2024-04-09 16:01:32.378 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:01:32.381 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 39.9821ms
2024-04-09 16:01:32.381 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:32.386 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetOutputDto'.
2024-04-09 16:01:32.390 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application) in 49.1056ms
2024-04-09 16:01:32.390 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:32.418 +08:00 [DBG] =========Yi-SQL耗时61.2617毫秒=====
2024-04-09 16:01:32.420 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","postcode","postname","remark" FROM "post"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:01:32.420 +08:00 [DBG] =========Yi-SQL耗时0.5122毫秒=====
2024-04-09 16:01:32.426 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Post.PostGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:01:32.428 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application) in 87.5641ms
2024-04-09 16:01:32.429 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.PostService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:59.513 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:01:59.513 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:01:59.519 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:01:59.524 +08:00 [DBG] =========Yi-SQL耗时5.0998毫秒=====
2024-04-09 16:01:59.525 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:01:59.525 +08:00 [DBG] =========Yi-SQL耗时0.8627毫秒=====
2024-04-09 16:01:59.526 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:01:59.526 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 12.9549ms
2024-04-09 16:01:59.526 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:02:01.612 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:02:01.612 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:02:01.622 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:02:01.626 +08:00 [DBG] =========Yi-SQL耗时4.1453毫秒=====
2024-04-09 16:02:01.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:02:01.629 +08:00 [DBG] =========Yi-SQL耗时0.9807毫秒=====
2024-04-09 16:02:01.629 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:02:01.629 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 17.3836ms
2024-04-09 16:02:01.629 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:02:02.253 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:02:02.254 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:02:02.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:02:02.259 +08:00 [DBG] =========Yi-SQL耗时1.7301毫秒=====
2024-04-09 16:02:02.261 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:02:02.262 +08:00 [DBG] =========Yi-SQL耗时0.695毫秒=====
2024-04-09 16:02:02.262 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:02:02.262 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 8.6398ms
2024-04-09 16:02:02.262 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:02:05.246 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:02:05.246 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:02:05.249 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:02:05.250 +08:00 [DBG] =========Yi-SQL耗时1.2509毫秒=====
2024-04-09 16:02:05.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:02:05.253 +08:00 [DBG] =========Yi-SQL耗时0.8906毫秒=====
2024-04-09 16:02:05.254 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:02:05.254 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.8574ms
2024-04-09 16:02:05.254 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:02:07.654 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:02:07.654 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:02:07.657 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:02:07.659 +08:00 [DBG] =========Yi-SQL耗时1.7127毫秒=====
2024-04-09 16:02:07.662 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:02:07.663 +08:00 [DBG] =========Yi-SQL耗时1.0365毫秒=====
2024-04-09 16:02:07.663 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:02:07.663 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 9.3721ms
2024-04-09 16:02:07.663 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:39.108 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:39.108 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:07:39.111 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:07:39.284 +08:00 [DBG] =========Yi-SQL耗时172.9381毫秒=====
2024-04-09 16:07:39.284 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:07:39.286 +08:00 [DBG] =========Yi-SQL耗时1.5624毫秒=====
2024-04-09 16:07:39.290 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:07:39.290 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 181.9929ms
2024-04-09 16:07:39.290 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:40.221 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:40.221 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:07:40.224 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:07:40.225 +08:00 [DBG] =========Yi-SQL耗时1.4247毫秒=====
2024-04-09 16:07:40.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:07:40.229 +08:00 [DBG] =========Yi-SQL耗时0.8943毫秒=====
2024-04-09 16:07:40.229 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:07:40.230 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 8.2274ms
2024-04-09 16:07:40.230 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:41.003 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:41.003 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:07:41.006 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:07:41.008 +08:00 [DBG] =========Yi-SQL耗时1.3445毫秒=====
2024-04-09 16:07:41.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:07:41.011 +08:00 [DBG] =========Yi-SQL耗时0.874毫秒=====
2024-04-09 16:07:41.012 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:07:41.012 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 8.8759ms
2024-04-09 16:07:41.012 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:44.101 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:44.101 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:07:44.104 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:07:44.105 +08:00 [DBG] =========Yi-SQL耗时1.391毫秒=====
2024-04-09 16:07:44.108 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:07:44.109 +08:00 [DBG] =========Yi-SQL耗时1.1691毫秒=====
2024-04-09 16:07:44.110 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:07:44.110 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 9.0796ms
2024-04-09 16:07:44.110 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:46.079 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:46.080 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:07:46.085 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:07:46.086 +08:00 [DBG] =========Yi-SQL耗时1.5795毫秒=====
2024-04-09 16:07:46.089 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:07:46.090 +08:00 [DBG] =========Yi-SQL耗时0.8676毫秒=====
2024-04-09 16:07:46.090 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:07:46.090 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 10.7437ms
2024-04-09 16:07:46.091 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:48.172 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:48.172 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:07:48.175 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:07:48.176 +08:00 [DBG] =========Yi-SQL耗时1.1262毫秒=====
2024-04-09 16:07:48.179 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:07:48.180 +08:00 [DBG] =========Yi-SQL耗时1.2583毫秒=====
2024-04-09 16:07:48.181 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:07:48.181 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 8.6755ms
2024-04-09 16:07:48.181 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:52.692 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:52.692 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:07:52.695 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-05 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:07:52.697 +08:00 [DBG] =========Yi-SQL耗时2.2152毫秒=====
2024-04-09 16:07:52.700 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-05 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:07:52.701 +08:00 [DBG] =========Yi-SQL耗时1.0216毫秒=====
2024-04-09 16:07:52.701 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:07:52.702 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 9.6746ms
2024-04-09 16:07:52.702 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:53.987 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:53.987 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:07:53.990 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-05 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:07:53.991 +08:00 [DBG] =========Yi-SQL耗时1.1669毫秒=====
2024-04-09 16:07:53.994 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-05 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:07:53.995 +08:00 [DBG] =========Yi-SQL耗时0.8633毫秒=====
2024-04-09 16:07:53.995 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:07:53.995 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.6276ms
2024-04-09 16:07:53.995 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:54.154 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:54.154 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:07:54.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-05 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:07:54.157 +08:00 [DBG] =========Yi-SQL耗时1.0431毫秒=====
2024-04-09 16:07:54.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-05 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:07:54.161 +08:00 [DBG] =========Yi-SQL耗时0.8204毫秒=====
2024-04-09 16:07:54.161 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:07:54.162 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.2221ms
2024-04-09 16:07:54.162 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:57.075 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:07:57.075 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:07:57.078 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:07:57.079 +08:00 [DBG] =========Yi-SQL耗时1.1535毫秒=====
2024-04-09 16:07:57.083 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:07:57.084 +08:00 [DBG] =========Yi-SQL耗时0.8518毫秒=====
2024-04-09 16:07:57.085 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:07:57.085 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 9.512ms
2024-04-09 16:07:57.085 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:08:02.259 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:08:02.259 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:08:02.262 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-02 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:08:02.264 +08:00 [DBG] =========Yi-SQL耗时1.7024毫秒=====
2024-04-09 16:08:02.267 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-04-02 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:08:02.268 +08:00 [DBG] =========Yi-SQL耗时1.0387毫秒=====
2024-04-09 16:08:02.268 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:08:02.268 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 8.9674ms
2024-04-09 16:08:02.268 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:21.953 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:21.953 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:21.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:21.957 +08:00 [DBG] =========Yi-SQL耗时2.2122毫秒=====
2024-04-09 16:09:21.959 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:09:21.959 +08:00 [DBG] =========Yi-SQL耗时0.4347毫秒=====
2024-04-09 16:09:21.960 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:21.960 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.4538ms
2024-04-09 16:09:21.960 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:26.411 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:26.412 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:26.414 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:26.417 +08:00 [DBG] =========Yi-SQL耗时1.8251毫秒=====
2024-04-09 16:09:26.424 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:09:26.424 +08:00 [DBG] =========Yi-SQL耗时0.6853毫秒=====
2024-04-09 16:09:26.426 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:26.427 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 14.6704ms
2024-04-09 16:09:26.427 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:27.226 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:27.226 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:27.228 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:27.228 +08:00 [DBG] =========Yi-SQL耗时0.6126毫秒=====
2024-04-09 16:09:27.231 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:09:27.232 +08:00 [DBG] =========Yi-SQL耗时1.5061毫秒=====
2024-04-09 16:09:27.233 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:27.233 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.005ms
2024-04-09 16:09:27.233 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:28.010 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:28.010 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:28.011 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:28.012 +08:00 [DBG] =========Yi-SQL耗时0.8722毫秒=====
2024-04-09 16:09:28.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:09:28.016 +08:00 [DBG] =========Yi-SQL耗时0.8264毫秒=====
2024-04-09 16:09:28.017 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:28.018 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.631ms
2024-04-09 16:09:28.018 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:29.283 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:29.283 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:29.298 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:29.299 +08:00 [DBG] =========Yi-SQL耗时1.1873毫秒=====
2024-04-09 16:09:29.304 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:09:29.305 +08:00 [DBG] =========Yi-SQL耗时1.359毫秒=====
2024-04-09 16:09:29.307 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:29.307 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 24.1ms
2024-04-09 16:09:29.307 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:32.339 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:32.340 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:32.343 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 0 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:32.343 +08:00 [DBG] =========Yi-SQL耗时0.8196毫秒=====
2024-04-09 16:09:32.346 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 0 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:09:32.347 +08:00 [DBG] =========Yi-SQL耗时1.0416毫秒=====
2024-04-09 16:09:32.348 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:32.348 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 8.3509ms
2024-04-09 16:09:32.348 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:34.747 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:34.747 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:34.750 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:34.751 +08:00 [DBG] =========Yi-SQL耗时0.779毫秒=====
2024-04-09 16:09:34.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:09:34.755 +08:00 [DBG] =========Yi-SQL耗时0.6218毫秒=====
2024-04-09 16:09:34.756 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:34.757 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 9.08ms
2024-04-09 16:09:34.757 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:40.635 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:40.636 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:40.637 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:40.638 +08:00 [DBG] =========Yi-SQL耗时0.7762毫秒=====
2024-04-09 16:09:40.641 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:09:40.642 +08:00 [DBG] =========Yi-SQL耗时1.1643毫秒=====
2024-04-09 16:09:40.643 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:40.643 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.2532ms
2024-04-09 16:09:40.643 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:41.491 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:41.491 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:41.493 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:41.494 +08:00 [DBG] =========Yi-SQL耗时0.7037毫秒=====
2024-04-09 16:09:41.495 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:09:41.496 +08:00 [DBG] =========Yi-SQL耗时0.828毫秒=====
2024-04-09 16:09:41.497 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:41.497 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 6.2096ms
2024-04-09 16:09:41.497 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:41.651 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:41.651 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:41.653 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:41.653 +08:00 [DBG] =========Yi-SQL耗时0.6445毫秒=====
2024-04-09 16:09:41.655 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:09:41.656 +08:00 [DBG] =========Yi-SQL耗时0.8806毫秒=====
2024-04-09 16:09:41.658 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:41.658 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 6.5603ms
2024-04-09 16:09:41.658 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:45.125 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:45.125 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:45.125 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:45.128 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:09:45.131 +08:00 [DBG] =========Yi-SQL耗时3.5177毫秒=====
2024-04-09 16:09:45.132 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:45.133 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:45.133 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 7.9475ms
2024-04-09 16:09:45.133 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:45.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 16:09:45.155 +08:00 [DBG] =========Yi-SQL耗时15.9556毫秒=====
2024-04-09 16:09:45.184 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:45.203 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 71.1989ms
2024-04-09 16:09:45.203 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:50.427 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:50.428 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:50.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE  ("menuname" like concat('%',N'879','%'))   AND ( "state" = 1 )  AND ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 16:09:50.467 +08:00 [DBG] =========Yi-SQL耗时3.1507毫秒=====
2024-04-09 16:09:50.468 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:50.468 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 40.8156ms
2024-04-09 16:09:50.468 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:51.412 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:09:51.412 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 16:09:51.413 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 16:09:51.415 +08:00 [DBG] =========Yi-SQL耗时1.2123毫秒=====
2024-04-09 16:09:51.429 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:09:51.433 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 20.9223ms
2024-04-09 16:09:51.433 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:28.731 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:28.732 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:28.734 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:28.735 +08:00 [DBG] =========Yi-SQL耗时0.8517毫秒=====
2024-04-09 16:10:28.738 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:28.739 +08:00 [DBG] =========Yi-SQL耗时0.5991毫秒=====
2024-04-09 16:10:28.740 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:28.740 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 8.2045ms
2024-04-09 16:10:28.740 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:37.796 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:37.797 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:37.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:37.801 +08:00 [DBG] =========Yi-SQL耗时1.0353毫秒=====
2024-04-09 16:10:37.803 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:37.804 +08:00 [DBG] =========Yi-SQL耗时0.5113毫秒=====
2024-04-09 16:10:37.805 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:37.805 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 8.2047ms
2024-04-09 16:10:37.805 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:38.587 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:38.587 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:38.589 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:38.590 +08:00 [DBG] =========Yi-SQL耗时0.6608毫秒=====
2024-04-09 16:10:38.591 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:38.592 +08:00 [DBG] =========Yi-SQL耗时0.6952毫秒=====
2024-04-09 16:10:38.593 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:38.594 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 6.3694ms
2024-04-09 16:10:38.594 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:38.778 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:38.778 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:38.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:38.781 +08:00 [DBG] =========Yi-SQL耗时0.6481毫秒=====
2024-04-09 16:10:38.782 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:38.784 +08:00 [DBG] =========Yi-SQL耗时1.3853毫秒=====
2024-04-09 16:10:38.787 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:38.787 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 9.1138ms
2024-04-09 16:10:38.787 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:38.971 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:38.972 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:38.973 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:38.974 +08:00 [DBG] =========Yi-SQL耗时0.7082毫秒=====
2024-04-09 16:10:38.976 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:38.977 +08:00 [DBG] =========Yi-SQL耗时1.0458毫秒=====
2024-04-09 16:10:38.978 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:38.978 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 6.7632ms
2024-04-09 16:10:38.978 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:39.155 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:39.155 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:39.157 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:39.158 +08:00 [DBG] =========Yi-SQL耗时0.723毫秒=====
2024-04-09 16:10:39.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:39.161 +08:00 [DBG] =========Yi-SQL耗时0.9126毫秒=====
2024-04-09 16:10:39.162 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:39.163 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.1574ms
2024-04-09 16:10:39.163 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:39.483 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:39.483 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:39.484 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:39.485 +08:00 [DBG] =========Yi-SQL耗时0.6157毫秒=====
2024-04-09 16:10:39.487 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:39.488 +08:00 [DBG] =========Yi-SQL耗时0.6654毫秒=====
2024-04-09 16:10:39.489 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:39.489 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 6.1121ms
2024-04-09 16:10:39.489 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:39.874 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:39.874 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:39.876 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:39.877 +08:00 [DBG] =========Yi-SQL耗时0.764毫秒=====
2024-04-09 16:10:39.879 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:39.880 +08:00 [DBG] =========Yi-SQL耗时0.9275毫秒=====
2024-04-09 16:10:39.881 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:39.881 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 6.957ms
2024-04-09 16:10:39.881 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:44.268 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:44.268 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:44.270 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "state" = 0 )  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:44.270 +08:00 [DBG] =========Yi-SQL耗时0.7734毫秒=====
2024-04-09 16:10:44.273 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "state" = 0 )  AND ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:44.274 +08:00 [DBG] =========Yi-SQL耗时1.1702毫秒=====
2024-04-09 16:10:44.275 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:44.275 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 6.8701ms
2024-04-09 16:10:44.275 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:49.526 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:49.526 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:49.528 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:49.529 +08:00 [DBG] =========Yi-SQL耗时0.7153毫秒=====
2024-04-09 16:10:49.531 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:49.532 +08:00 [DBG] =========Yi-SQL耗时1.0866毫秒=====
2024-04-09 16:10:49.533 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:49.533 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.0601ms
2024-04-09 16:10:49.533 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:50.875 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:50.876 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:50.877 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:50.878 +08:00 [DBG] =========Yi-SQL耗时0.8285毫秒=====
2024-04-09 16:10:50.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:50.881 +08:00 [DBG] =========Yi-SQL耗时0.791毫秒=====
2024-04-09 16:10:50.882 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:50.882 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 6.8588ms
2024-04-09 16:10:50.883 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:51.595 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:10:51.595 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:10:51.596 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:10:51.597 +08:00 [DBG] =========Yi-SQL耗时0.8734毫秒=====
2024-04-09 16:10:51.601 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:10:51.601 +08:00 [DBG] =========Yi-SQL耗时0.5823毫秒=====
2024-04-09 16:10:51.602 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:10:51.603 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.5795ms
2024-04-09 16:10:51.603 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:11:09.957 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:11:09.957 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:11:09.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:11:09.959 +08:00 [DBG] =========Yi-SQL耗时0.7245毫秒=====
2024-04-09 16:11:09.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:11:09.962 +08:00 [DBG] =========Yi-SQL耗时1.1668毫秒=====
2024-04-09 16:11:09.964 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:11:09.964 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 7.2349ms
2024-04-09 16:11:09.964 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:12:55.031 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:12:55.031 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:12:55.037 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:12:55.098 +08:00 [DBG] =========Yi-SQL耗时61.2559毫秒=====
2024-04-09 16:12:55.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:12:55.103 +08:00 [DBG] =========Yi-SQL耗时0.8817毫秒=====
2024-04-09 16:12:55.104 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:12:55.104 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 72.4576ms
2024-04-09 16:12:55.104 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:07.166 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:07.166 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:07.170 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:07.171 +08:00 [DBG] =========Yi-SQL耗时1.465毫秒=====
2024-04-09 16:13:07.174 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-04-01 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-05-01 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:07.175 +08:00 [DBG] =========Yi-SQL耗时0.8601毫秒=====
2024-04-09 16:13:07.175 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:07.175 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 9.375ms
2024-04-09 16:13:07.175 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:13.254 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:13.254 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:13.257 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:13.258 +08:00 [DBG] =========Yi-SQL耗时1.2467毫秒=====
2024-04-09 16:13:13.260 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:13.261 +08:00 [DBG] =========Yi-SQL耗时0.7798毫秒=====
2024-04-09 16:13:13.261 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:13.262 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.5325ms
2024-04-09 16:13:13.262 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:20.158 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:20.158 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:20.160 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:20.162 +08:00 [DBG] =========Yi-SQL耗时1.1603毫秒=====
2024-04-09 16:13:20.164 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:20.165 +08:00 [DBG] =========Yi-SQL耗时0.8762毫秒=====
2024-04-09 16:13:20.165 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:20.165 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.1794ms
2024-04-09 16:13:20.165 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:23.683 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:23.683 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:23.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:23.688 +08:00 [DBG] =========Yi-SQL耗时1.2686毫秒=====
2024-04-09 16:13:23.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:23.693 +08:00 [DBG] =========Yi-SQL耗时1.0165毫秒=====
2024-04-09 16:13:23.693 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:23.693 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 9.9586ms
2024-04-09 16:13:23.693 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:25.133 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:25.133 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:25.135 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:25.137 +08:00 [DBG] =========Yi-SQL耗时1.3353毫秒=====
2024-04-09 16:13:25.139 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:25.140 +08:00 [DBG] =========Yi-SQL耗时0.7616毫秒=====
2024-04-09 16:13:25.140 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:25.141 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.2954ms
2024-04-09 16:13:25.141 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:29.334 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:29.334 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:29.336 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:29.338 +08:00 [DBG] =========Yi-SQL耗时1.3278毫秒=====
2024-04-09 16:13:29.341 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:29.342 +08:00 [DBG] =========Yi-SQL耗时1.1452毫秒=====
2024-04-09 16:13:29.342 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:29.342 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.7801ms
2024-04-09 16:13:29.342 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:33.394 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:33.394 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:33.396 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:33.398 +08:00 [DBG] =========Yi-SQL耗时1.2799毫秒=====
2024-04-09 16:13:33.400 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:33.401 +08:00 [DBG] =========Yi-SQL耗时1.1291毫秒=====
2024-04-09 16:13:33.401 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:33.402 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.9494ms
2024-04-09 16:13:33.402 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:34.213 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:34.213 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:34.216 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:34.217 +08:00 [DBG] =========Yi-SQL耗时1.8684毫秒=====
2024-04-09 16:13:34.220 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:34.221 +08:00 [DBG] =========Yi-SQL耗时0.8737毫秒=====
2024-04-09 16:13:34.221 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:34.222 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 8.5799ms
2024-04-09 16:13:34.222 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:38.149 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:38.149 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:38.152 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-27 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:38.153 +08:00 [DBG] =========Yi-SQL耗时1.1273毫秒=====
2024-04-09 16:13:38.156 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-27 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:38.157 +08:00 [DBG] =========Yi-SQL耗时1.0711毫秒=====
2024-04-09 16:13:38.158 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:38.158 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 8.355ms
2024-04-09 16:13:38.158 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:43.206 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:43.206 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:43.210 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-28 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:43.212 +08:00 [DBG] =========Yi-SQL耗时1.7788毫秒=====
2024-04-09 16:13:43.215 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-28 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:43.216 +08:00 [DBG] =========Yi-SQL耗时0.8172毫秒=====
2024-04-09 16:13:43.216 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:43.216 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 9.9665ms
2024-04-09 16:13:43.216 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:47.959 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:47.959 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:47.961 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:47.962 +08:00 [DBG] =========Yi-SQL耗时0.9565毫秒=====
2024-04-09 16:13:47.964 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:47.965 +08:00 [DBG] =========Yi-SQL耗时0.7766毫秒=====
2024-04-09 16:13:47.965 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:47.965 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 6.5834ms
2024-04-09 16:13:47.965 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:51.686 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:13:51.686 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:13:51.688 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:13:51.689 +08:00 [DBG] =========Yi-SQL耗时1.1806毫秒=====
2024-04-09 16:13:51.692 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:13:51.693 +08:00 [DBG] =========Yi-SQL耗时0.8886毫秒=====
2024-04-09 16:13:51.693 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:13:51.693 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.0008ms
2024-04-09 16:13:51.693 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:14:08.741 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:14:08.742 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:14:08.744 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:14:08.746 +08:00 [DBG] =========Yi-SQL耗时1.2633毫秒=====
2024-04-09 16:14:08.748 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:14:08.749 +08:00 [DBG] =========Yi-SQL耗时0.7536毫秒=====
2024-04-09 16:14:08.749 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:14:08.749 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.4135ms
2024-04-09 16:14:08.749 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:14:14.333 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:14:14.333 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:14:14.336 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:14:14.337 +08:00 [DBG] =========Yi-SQL耗时1.3754毫秒=====
2024-04-09 16:14:14.340 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:14:14.340 +08:00 [DBG] =========Yi-SQL耗时0.8016毫秒=====
2024-04-09 16:14:14.341 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:14:14.341 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.5263ms
2024-04-09 16:14:14.341 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:14:20.141 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:14:20.142 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:14:20.144 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-30 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-31 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:14:20.145 +08:00 [DBG] =========Yi-SQL耗时1.4036毫秒=====
2024-04-09 16:14:20.148 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-30 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-31 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:14:20.149 +08:00 [DBG] =========Yi-SQL耗时0.8298毫秒=====
2024-04-09 16:14:20.149 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:14:20.149 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.6108ms
2024-04-09 16:14:20.149 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:21:04.016 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:21:04.019 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:21:04.052 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 16:21:04.135 +08:00 [DBG] =========Yi-SQL耗时83.2501毫秒=====
2024-04-09 16:21:04.136 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 16:21:04.139 +08:00 [DBG] =========Yi-SQL耗时2.985毫秒=====
2024-04-09 16:21:04.151 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:21:04.156 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 136.205ms
2024-04-09 16:21:04.156 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:40:29.652 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-09 16:40:29.652 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:40:29.652 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:40:29.652 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:40:29.658 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 16:40:29.672 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:40:29.677 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:40:29.677 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:40:29.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:40:29.692 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:40:29.711 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 39.2202ms
2024-04-09 16:40:29.711 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-09 16:40:29.721 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-09 16:40:29.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:40:29.780 +08:00 [DBG] =========Yi-SQL耗时94.1903毫秒=====
2024-04-09 16:40:29.782 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:40:29.782 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 124.156ms
2024-04-09 16:40:29.782 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:40:29.910 +08:00 [DBG] =========Yi-SQL耗时181.4945毫秒=====
2024-04-09 16:40:29.910 +08:00 [DBG] =========Yi-SQL耗时188.4993毫秒=====
2024-04-09 16:40:29.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 16:40:29.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-09 16:40:29.915 +08:00 [DBG] =========Yi-SQL耗时1.685毫秒=====
2024-04-09 16:40:29.915 +08:00 [DBG] =========Yi-SQL耗时1.7234毫秒=====
2024-04-09 16:40:29.926 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:40:29.927 +08:00 [DBG] =========Yi-SQL耗时0.9487毫秒=====
2024-04-09 16:40:29.937 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:40:29.943 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 266.4399ms
2024-04-09 16:40:29.943 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:40:29.949 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:40:29.951 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 274.394ms
2024-04-09 16:40:29.951 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:40:37.384 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:40:37.388 +08:00 [INF] Route matched with {action = "GetList", controller = "Template", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TemplateService (Yi.Framework.CodeGen.Application).
2024-04-09 16:40:37.399 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitemplate"  
===============================

2024-04-09 16:40:37.400 +08:00 [DBG] =========Yi-SQL耗时1.1734毫秒=====
2024-04-09 16:40:37.402 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","templatestr","buildpath","name","remarks" FROM "yitemplate"     LIMIT 10 offset 0
===============================

2024-04-09 16:40:37.403 +08:00 [DBG] =========Yi-SQL耗时0.815毫秒=====
2024-04-09 16:40:37.414 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:40:37.416 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application) in 28.3468ms
2024-04-09 16:40:37.416 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:06.110 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:06.110 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:06.111 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:06.111 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:06.111 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:06.111 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:06.112 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:06.112 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.8066ms
2024-04-09 16:41:06.112 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:06.112 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-09 16:41:06.119 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:06.120 +08:00 [DBG] =========Yi-SQL耗时1.5758毫秒=====
2024-04-09 16:41:06.120 +08:00 [DBG] =========Yi-SQL耗时5.9466毫秒=====
2024-04-09 16:41:06.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 16:41:06.122 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-09 16:41:06.123 +08:00 [DBG] =========Yi-SQL耗时1.4057毫秒=====
2024-04-09 16:41:06.124 +08:00 [DBG] =========Yi-SQL耗时1.7015毫秒=====
2024-04-09 16:41:06.129 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:06.132 +08:00 [DBG] =========Yi-SQL耗时2.3302毫秒=====
2024-04-09 16:41:06.135 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:06.136 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 25.3904ms
2024-04-09 16:41:06.136 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:06.137 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:06.137 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 25.9484ms
2024-04-09 16:41:06.137 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:06.852 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:06.852 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:06.855 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:06.856 +08:00 [DBG] =========Yi-SQL耗时1.0427毫秒=====
2024-04-09 16:41:06.858 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 16:41:06.858 +08:00 [DBG] =========Yi-SQL耗时0.8203毫秒=====
2024-04-09 16:41:06.859 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:06.860 +08:00 [DBG] =========Yi-SQL耗时0.7544毫秒=====
2024-04-09 16:41:06.863 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:06.863 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 10.417ms
2024-04-09 16:41:06.863 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:07.824 +08:00 [INF] CORS policy execution successful.
2024-04-09 16:41:07.825 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:07.827 +08:00 [INF] Route matched with {action = "PostCodeBuildWeb", controller = "CodeGen", area = ""}. Executing controller action with signature System.Threading.Tasks.Task PostCodeBuildWebAsync() on controller Yi.Framework.CodeGen.Application.Services.CodeGenService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:07.870 +08:00 [DBG] 
==========Yi-SQL执行:==========
TRUNCATE TABLE "yitable"
===============================

2024-04-09 16:41:07.879 +08:00 [DBG] =========Yi-SQL耗时9.2646毫秒=====
2024-04-09 16:41:07.880 +08:00 [DBG] 
==========Yi-SQL执行:==========
TRUNCATE TABLE "yifield"
===============================

2024-04-09 16:41:07.885 +08:00 [DBG] =========Yi-SQL耗时5.8242毫秒=====
2024-04-09 16:41:07.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-09 16:41:07.960 +08:00 [DBG] =========Yi-SQL耗时2.1047毫秒=====
2024-04-09 16:41:07.995 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "yitable"  ("id","name","description","concurrencystamp") VALUES 
 (  '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'YiTenant' , NULL , '2bc096c206f1448c87c8d7059db6d267' ),
 (  '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'OperationLog' , NULL , 'ea47b8a854684a6b838337190827f461' ),
 (  '42eb28c9-6606-4309-8f60-ccc64b405840' , 'Config' , NULL , '033cb2f4971f47e1a98d3c6771ab2d8a' ),
 (  'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'Dept' , NULL , 'f9a8768ece6649e5808d7e3dfef1eb3b' ),
 (  'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'Dictionary' , NULL , 'a34a4327bfb54b95a4a9521f4001c15d' ),
 (  'b8d384ca-a781-4673-b016-ee5b288ab316' , 'DictionaryType' , NULL , '86b8197e7d3b43c48cac75179fe7054c' ),
 (  '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'File' , NULL , '66901c2f94f7489d9fdd6d257858970c' ),
 (  'a90d9bad-299d-4b83-bae7-8e9e04ccc55d' , 'LoginLog' , NULL , '38248a4952144218a8d68ac0757a525f' ),
 (  '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'Menu' , NULL , 'a82b4ab4194a4fc1a9b66f502909a49b' ),
 (  '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'Notice' , NULL , '47d82ce33c754ae4becc856ffa2e4c61' ),
 (  '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'Post' , NULL , 'a9df2b23e53040aba78df19706d65779' ),
 (  'e8834c4a-d784-48b6-8e96-23f51616a710' , 'RoleDept' , NULL , '087df62367984b5ca03c98c5c110f53a' ),
 (  '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'Role' , NULL , '47524df8a7bc4314bbfbbff544eacd59' ),
 (  '5a3959fd-6029-4a26-86b3-723dd100cfbc' , 'RoleMenu' , NULL , 'd6082e8aef844db0b0dbae15771f18b1' ),
 (  'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'User' , NULL , '01cd41a4911e4e7099b06020937b664c' ),
 (  '02b47a20-b2c0-4bf4-a019-b814f114664a' , 'UserPost' , NULL , 'b8afdd7a60c14757bb0bc473c8bf42de' ),
 (  'bdd48853-efd9-4d34-82c6-e63c24e60de0' , 'UserRole' , NULL , 'b8fc410ee27b47ea891347ef9091f339' ),
 (  '7dbbb141-9b8f-4127-a4d0-263cb10f06c5' , 'Auth' , NULL , 'ef6e552a65804b86ba82946dcebd0b3b' ),
 (  'f7c096eb-0cca-4fc9-b54c-77b1ecb6dda4' , 'AccessLog' , NULL , 'f7d3f09444014cc192bbb34863260879' ),
 (  'a7f3f6e4-ae66-4b19-95a3-da97641aef86' , 'BbsUserExtraInfo' , NULL , 'e9ac5e9be0ac4e0c80bf3623042ee908' ),
 (  '99464aa7-3523-4d01-8e8d-0bc67b009742' , 'Setting' , NULL , '644f8a229093484b910ae7822995a15b' ),
 (  '6ab2d060-a9dc-40f8-8306-4e6921804d66' , 'Level' , NULL , '410d5cf036ce4531be0e6c5b70a07bda' ),
 (  'ca54b1e1-8983-4123-adaa-16b1893d82bf' , 'SignIn' , NULL , '77167d356d104987b163ee9e8c14239d' ),
 (  'ed03a933-f90e-470f-b712-fc79976784d9' , 'Agree' , NULL , 'df5dc04dbde544ab82496da89026a9db' ),
 (  '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'Article' , NULL , 'a45af40eff0e4f13a53071d81d2b26a9' ),
 (  '7efdd57a-a036-4ecd-865a-349aa96a95d9' , 'Banner' , NULL , 'db505b457aeb4e0dabf0199a4e0d5c9a' ),
 (  '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'Comment' , NULL , '1db698cb9f2f415f92e36b9bafea8d63' ),
 (  '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'Discuss' , NULL , '361a2fd83fad47159e242bfb10124f1b' ),
 (  'f928c150-b7a1-403a-ae62-9acf18ed1e67' , 'DiscussMyType' , NULL , '569df60d4d994bef98d469f2a519a790' ),
 (  'e31580f3-d3c6-47c4-9415-6383dfa50738' , 'DiscussTop' , NULL , '56b5e3aa54e743b095eafe0d94a99745' ),
 (  '4acd7aba-b9e3-4d17-b161-e9f21cd8585d' , 'MyType' , NULL , '9351530246394435b61d6969f4e8dfef' ),
 (  '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'Plate' , NULL , '4a40920881dd49829181c81e12fde54a' ),
 (  '39733147-7443-4bb3-ae0e-445dd9891566' , 'BankCard' , NULL , '582f0274a269419599ef0d946926aaef' ),
 (  '72dea8de-b9ee-469d-baf2-7e923e9250af' , 'InterestRecords' , NULL , 'ecaa191c5e3c4d41b1725f4b257b3b25' ),
 (  '7aecb118-af7b-4612-a2f8-fa25977401fb' , 'YiAuditLogAction' , NULL , 'b6df4443bee84f88b1989907f72ab3cb' ),
 (  '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'YiAuditLog' , NULL , '3c1eeff1196044d39b731bf8412cd8b3' ),
 (  'c2125ebe-10fb-40af-be2f-77502c9abe3c' , 'YiEntityChange' , NULL , '53f32602946c4be888fdc8e26f8b1cf2' ),
 (  '5eb23136-6e78-435c-8f2f-ffd3d7588523' , 'YiEntityPropertyChange' , NULL , '1b7ca09ba28c40479ec0eb1f85ab372c' ),
 (  'dee13938-14f1-4a9b-820e-536d57fe8808' , 'Question' , NULL , 'b34cfd622bcd45ae865de870af423919' ),
 (  'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'YiField' , NULL , '672fe911007f41d6a03fbd5a590f9e89' ),
 (  'dc3b064c-e3e7-42d8-bf6d-fefd9562fc75' , 'YiTable' , NULL , '29094878549f486c9a870dbf1e31fe8f' ),
 (  'cb5ae14b-4198-48cc-8d28-fd3e3ca75d94' , 'YiTemplate' , NULL , 'ba4c466f1dcf4371a68504593f31cd9a' )
;

===============================

2024-04-09 16:41:07.997 +08:00 [DBG] =========Yi-SQL耗时2.3613毫秒=====
2024-04-09 16:41:08.007 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-09 16:41:08.009 +08:00 [DBG] =========Yi-SQL耗时4.5566毫秒=====
2024-04-09 16:41:08.014 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-09 16:41:08.014 +08:00 [DBG] =========Yi-SQL耗时3.8337毫秒=====
2024-04-09 16:41:08.015 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"  WHERE ( (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   )  OR (   "id" = N'00000000-0000-0000-0000-000000000000'   ) )  
===============================

2024-04-09 16:41:08.015 +08:00 [DBG] =========Yi-SQL耗时0.2659毫秒=====
2024-04-09 16:41:08.059 +08:00 [DBG] 
==========Yi-SQL执行:==========
INSERT INTO "yifield"  ("id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic") VALUES 
 (  '89d7f32b-11e6-40a3-9afe-02635b3d6dde' , 'Id' , NULL , '0' , '0' , '6' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'True' , 'True' , 'False' , 'False' ),
 (  'f583ec19-37b0-491d-bd33-f0917f973145' , 'Name' , NULL , '0' , '0' , '0' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'True' , 'False' , 'False' , 'False' ),
 (  '06930541-bf8b-42b7-8c0a-183e3ce265e9' , 'EntityVersion' , NULL , '0' , '0' , '1' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'True' , 'False' , 'False' , 'False' ),
 (  '6c3fb734-1224-4fbe-9e60-887b8b85c421' , 'TenantConnectionString' , NULL , '0' , '0' , '0' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'True' , 'False' , 'False' , 'False' ),
 (  'e493be1a-8435-438a-9d0d-60db9ae45eb1' , 'DbType' , NULL , '0' , '0' , '0' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'True' , 'False' , 'False' , 'False' ),
 (  '4973e2b7-d16c-4bba-ad15-84b5298b64ec' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'True' , 'False' , 'False' , 'False' ),
 (  '262aa51d-c442-4b6b-a633-70cf832d9aca' , 'IsDeleted' , NULL , '0' , '0' , '3' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'True' , 'False' , 'False' , 'False' ),
 (  'd7a65f03-3675-45c8-a930-c5f69d201941' , 'DeleterId' , NULL , '0' , '0' , '6' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'False' , 'False' , 'False' , 'False' ),
 (  'a841e9ea-0005-49e9-81d6-23b4306962c3' , 'DeletionTime' , NULL , '0' , '0' , '5' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'False' , 'False' , 'False' , 'False' ),
 (  'ecf688e6-9237-4fcd-97e6-1a88e41f635b' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'False' , 'False' , 'False' , 'False' ),
 (  'c8c25575-35f7-4a75-a186-14f52b247e8f' , 'LastModifierId' , NULL , '0' , '0' , '6' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'False' , 'False' , 'False' , 'False' ),
 (  '8a5773fb-f32f-49b7-89e4-313acef38154' , 'CreationTime' , NULL , '0' , '0' , '5' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'True' , 'False' , 'False' , 'False' ),
 (  '1973b25f-6c24-4a3b-8333-ad05605e1eb0' , 'CreatorId' , NULL , '0' , '0' , '6' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'False' , 'False' , 'False' , 'False' ),
 (  'aa02d015-72a7-43aa-ad3c-ad08579551f2' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '5a34c51c-460c-41b5-bc0c-fe9ab8285093' , 'True' , 'False' , 'False' , 'False' ),
 (  '74897f23-9c3e-4b73-8722-9129442a672e' , 'Id' , NULL , '0' , '0' , '6' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'True' , 'False' , 'False' ),
 (  '353a3f10-36aa-4ee7-b962-75f7113e965a' , 'Title' , NULL , '0' , '0' , '0' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'False' , 'False' , 'False' ),
 (  'da497647-d380-4d2f-8902-49c047b1e41f' , 'OperType' , NULL , '0' , '0' , '0' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'False' , 'False' , 'False' ),
 (  '9d9edb20-8eb9-4238-ade5-c712fe2499f4' , 'RequestMethod' , NULL , '0' , '0' , '0' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'False' , 'False' , 'False' ),
 (  '2f02e355-9757-4fde-a8fb-dc96f954fe5d' , 'OperUser' , NULL , '0' , '0' , '0' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'False' , 'False' , 'False' ),
 (  'e95eb92d-a78b-4698-a1da-48a1708474a8' , 'OperIp' , NULL , '0' , '0' , '0' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'False' , 'False' , 'False' ),
 (  '574732d4-79d5-4623-aaa4-1580e825dfb4' , 'OperLocation' , NULL , '0' , '0' , '0' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'False' , 'False' , 'False' ),
 (  '1811d78c-aa88-4af8-85ab-17e203456bf3' , 'Method' , NULL , '0' , '0' , '0' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'False' , 'False' , 'False' ),
 (  '4db297e3-102b-4390-a30b-683218539a09' , 'RequestParam' , NULL , '0' , '0' , '0' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'False' , 'False' , 'False' ),
 (  '9e1c5b65-e13e-4d31-8aa1-a134884666ac' , 'RequestResult' , NULL , '0' , '9999' , '0' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'False' , 'False' , 'False' ),
 (  'aabfc9df-8234-4e2d-b2d4-e2895384d1e0' , 'CreationTime' , NULL , '0' , '0' , '5' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'True' , 'False' , 'False' , 'False' ),
 (  '84b09b5a-c067-48ce-aa6f-ee271b39b97f' , 'CreatorId' , NULL , '0' , '0' , '6' , '8e47d602-45b1-4fc7-897d-6b0c983ee5bd' , 'False' , 'False' , 'False' , 'False' ),
 (  '3f266d66-bb3d-425b-88b0-f1bcb144a61a' , 'Id' , NULL , '0' , '0' , '6' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'True' , 'True' , 'False' , 'False' ),
 (  '0f289d46-e9fd-42d4-8e43-3be6ecb7ee12' , 'ConfigName' , NULL , '0' , '0' , '0' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'True' , 'False' , 'False' , 'False' ),
 (  '7709fe48-5a28-4d9d-8bce-04ea55edbe55' , 'ConfigKey' , NULL , '0' , '0' , '0' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'True' , 'False' , 'False' , 'False' ),
 (  '66b703f9-2927-466e-a36a-fa4acc06a730' , 'ConfigValue' , NULL , '0' , '0' , '0' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'True' , 'False' , 'False' , 'False' ),
 (  '918c9470-8e92-4e28-9a44-8494d36414e1' , 'ConfigType' , NULL , '0' , '0' , '0' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'True' , 'False' , 'False' , 'False' ),
 (  '9d0c6efe-982a-4332-980a-81c44f96a3bd' , 'OrderNum' , NULL , '0' , '0' , '1' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'True' , 'False' , 'False' , 'False' ),
 (  '0fed8f8f-5fca-452b-8eb2-fc020b6a6bc0' , 'Remark' , NULL , '0' , '0' , '0' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'True' , 'False' , 'False' , 'False' ),
 (  'f76391c5-3ca0-4ca0-a27e-2ecb8fc743a8' , 'IsDeleted' , NULL , '0' , '0' , '3' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'True' , 'False' , 'False' , 'False' ),
 (  'c22695b6-8d4c-4c05-81c8-9b9c730b3c09' , 'CreationTime' , NULL , '0' , '0' , '5' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'True' , 'False' , 'False' , 'False' ),
 (  '37f8571b-696d-4c25-b4ff-3b1ecbeae4de' , 'CreatorId' , NULL , '0' , '0' , '6' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'False' , 'False' , 'False' , 'False' ),
 (  'fe0f7435-f705-41ed-9a4d-c76514eac762' , 'LastModifierId' , NULL , '0' , '0' , '6' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'False' , 'False' , 'False' , 'False' ),
 (  '7d69d71b-a02c-42e1-8e97-2353eeeabdcf' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '42eb28c9-6606-4309-8f60-ccc64b405840' , 'False' , 'False' , 'False' , 'False' ),
 (  '1a4c13f3-fa51-488e-943a-ba40d100bbb3' , 'Id' , NULL , '0' , '0' , '6' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'True' , 'True' , 'False' , 'False' ),
 (  '2207c4aa-8da3-46de-bb87-5f2f8df076cd' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'True' , 'False' , 'False' , 'False' ),
 (  '1a9c32c8-8679-4556-885a-6e9670e174f7' , 'CreationTime' , NULL , '0' , '0' , '5' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'True' , 'False' , 'False' , 'False' ),
 (  'fd0df7e8-06a0-47ee-8e51-f51e9f329063' , 'CreatorId' , NULL , '0' , '0' , '6' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'False' , 'False' , 'False' , 'False' ),
 (  '26e1ca65-7d7a-4972-b5b6-6e8f9ece9836' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'False' , 'False' , 'False' , 'False' ),
 (  '23541aac-bdb4-44b3-ad61-5db50e544135' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'False' , 'False' , 'False' , 'False' ),
 (  '48ff2192-da73-4d71-9599-c41c34b64751' , 'OrderNum' , NULL , '0' , '0' , '1' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'True' , 'False' , 'False' , 'False' ),
 (  'a4104599-fff3-4cba-a75e-ab5b69f1e826' , 'State' , NULL , '0' , '0' , '3' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'True' , 'False' , 'False' , 'False' ),
 (  '673849cb-6d67-4ccb-8694-8d314854c55d' , 'DeptName' , NULL , '0' , '0' , '0' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'True' , 'False' , 'False' , 'False' ),
 (  'd044e199-6082-4c39-b0e4-bb5aa028df92' , 'DeptCode' , NULL , '0' , '0' , '0' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'True' , 'False' , 'False' , 'False' ),
 (  'ea6f3bfb-5226-4218-b6ac-4957f3c575d5' , 'Leader' , NULL , '0' , '0' , '0' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'True' , 'False' , 'False' , 'False' ),
 (  'a8da90a1-9173-4e9b-a26f-6494952d88fa' , 'ParentId' , NULL , '0' , '0' , '6' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'True' , 'False' , 'False' , 'False' ),
 (  '4e2991db-a416-44c4-b72b-e1459b87f4d7' , 'Remark' , NULL , '0' , '0' , '0' , 'ebf5b76f-7cae-452b-b528-eddb8adcc047' , 'True' , 'False' , 'False' , 'False' ),
 (  '7a6f30aa-bc66-4906-810f-da99bc25ac85' , 'Id' , NULL , '0' , '0' , '6' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'True' , 'False' , 'False' ),
 (  'aae57099-6df4-497e-9bb4-696320e0f274' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  '463c633e-c30f-4986-bbda-f8caf63582eb' , 'OrderNum' , NULL , '0' , '0' , '1' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  'f3ef9d9a-8a2b-4f13-810d-a8f45068b770' , 'State' , NULL , '0' , '0' , '3' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  '95e7c0e4-0a99-42e9-9450-e63410fbf1bc' , 'Remark' , NULL , '0' , '0' , '0' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  '5df9be43-bf5a-4908-8514-bbf43a9dee08' , 'ListClass' , NULL , '0' , '0' , '0' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  '28c96b58-6266-43cb-8f68-c1f4c767d0e1' , 'CssClass' , NULL , '0' , '0' , '0' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  '119abc6d-306f-43af-a753-7b36095e73e3' , 'DictType' , NULL , '0' , '0' , '0' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  'eedc1e85-bced-4806-a118-cdba18763bf7' , 'DictLabel' , NULL , '0' , '0' , '0' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  '0e8e3c66-efa0-444f-ad4d-a359127b671e' , 'DictValue' , NULL , '0' , '0' , '0' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  '3d30a15d-39c0-4074-8c72-49a7c158cc29' , 'IsDefault' , NULL , '0' , '0' , '3' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  '8555ee0f-06d7-4b0c-85ee-a730fe69ff23' , 'CreationTime' , NULL , '0' , '0' , '5' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'True' , 'False' , 'False' , 'False' ),
 (  'a8e5e478-e7df-440f-af2b-3c11e80c4b89' , 'CreatorId' , NULL , '0' , '0' , '6' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'False' , 'False' , 'False' , 'False' ),
 (  '32d6d6f4-da72-4c93-a954-1fe404342446' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'False' , 'False' , 'False' , 'False' ),
 (  'b27ecf7f-a222-4f81-b2ce-0b228a1b69a3' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'bc9712ab-dc6f-4dda-bfcf-914b6d9de94c' , 'False' , 'False' , 'False' , 'False' ),
 (  '4103fbc0-1f4d-4fd7-aad4-4e2a163d0026' , 'Id' , NULL , '0' , '0' , '6' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'True' , 'True' , 'False' , 'False' ),
 (  'e080aa82-c5e5-49d7-baf2-fc7f7274fc40' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'True' , 'False' , 'False' , 'False' ),
 (  '82310ded-f50b-4fb5-abea-4c93f11ec8a9' , 'OrderNum' , NULL , '0' , '0' , '1' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'True' , 'False' , 'False' , 'False' ),
 (  '926a68bb-9c2c-4347-ac9f-12dd84d27ba0' , 'State' , NULL , '0' , '0' , '3' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'False' , 'False' , 'False' , 'False' ),
 (  '7f36eb06-9482-414e-b54e-f216c40ab805' , 'DictName' , NULL , '0' , '0' , '0' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'True' , 'False' , 'False' , 'False' ),
 (  '6e140298-6875-48e5-884e-59b67a3c1de1' , 'DictType' , NULL , '0' , '0' , '0' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'True' , 'False' , 'False' , 'False' ),
 (  '44cf0b40-44b1-41a8-8fd0-342fa57ea001' , 'Remark' , NULL , '0' , '0' , '0' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'True' , 'False' , 'False' , 'False' ),
 (  '177df2ac-c89e-49c3-9372-37899946846c' , 'CreationTime' , NULL , '0' , '0' , '5' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'True' , 'False' , 'False' , 'False' ),
 (  'e71bf289-a416-414a-9045-92a0f7d75695' , 'CreatorId' , NULL , '0' , '0' , '6' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'False' , 'False' , 'False' , 'False' ),
 (  'a1e3bf99-46f7-4caa-85f4-969ddf8f1595' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'False' , 'False' , 'False' , 'False' ),
 (  '8e5fecd0-9141-414f-9f11-c4b7f160a991' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'False' , 'False' , 'False' , 'False' ),
 (  'a3b61c8e-9f1a-467a-8b0a-8938a3abe60e' , 'ExtraProperties' , NULL , '0' , '0' , '0' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'True' , 'False' , 'False' , 'False' ),
 (  '0cd4847a-4875-4f41-86e6-4b1d71b10f60' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , 'b8d384ca-a781-4673-b016-ee5b288ab316' , 'True' , 'False' , 'False' , 'False' ),
 (  'f15771af-5899-4669-974c-8ddb012820d8' , 'Id' , NULL , '0' , '0' , '6' , '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'True' , 'True' , 'False' , 'False' ),
 (  '455b7c13-cd2f-4c43-a1c9-57a07f0d2e4f' , 'FileSize' , NULL , '0' , '0' , '4' , '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'True' , 'False' , 'False' , 'False' ),
 (  'b3f13c65-f71d-4af8-aa80-a39c4de82f6c' , 'FileName' , NULL , '0' , '0' , '0' , '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'True' , 'False' , 'False' , 'False' ),
 (  '6a84cebd-b26a-4014-a8b8-907c57d61cb5' , 'FilePath' , NULL , '0' , '0' , '0' , '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'True' , 'False' , 'False' , 'False' ),
 (  'ec4c9687-643c-4bfa-9e29-ac4fcb0027cf' , 'CreationTime' , NULL , '0' , '0' , '5' , '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'True' , 'False' , 'False' , 'False' ),
 (  '91806cea-e067-46b1-9a44-88187d5cca26' , 'CreatorId' , NULL , '0' , '0' , '6' , '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'False' , 'False' , 'False' , 'False' ),
 (  '3acb4c85-60a4-4953-9d50-b33f9da82980' , 'LastModifierId' , NULL , '0' , '0' , '6' , '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'False' , 'False' , 'False' , 'False' ),
 (  '1ba68695-53c1-4fe1-804a-53dc441d2688' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'False' , 'False' , 'False' , 'False' ),
 (  '41058025-0314-45e2-beb6-f3be4a01c817' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'True' , 'False' , 'False' , 'False' ),
 (  'bcd0729d-9a3a-4aa9-93e8-ea97f6ee8906' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '31288b1a-20ad-488f-b929-1ec6f2beac48' , 'True' , 'False' , 'False' , 'False' ),
 (  '01ea6328-1c1a-4b7f-a207-efe9017c8f84' , 'Id' , NULL , '0' , '0' , '6' , 'a90d9bad-299d-4b83-bae7-8e9e04ccc55d' , 'True' , 'True' , 'False' , 'False' ),
 (  'd5f8b40c-3b44-4f4d-bc9b-9972cd4b1b76' , 'CreationTime' , NULL , '0' , '0' , '5' , 'a90d9bad-299d-4b83-bae7-8e9e04ccc55d' , 'True' , 'False' , 'False' , 'False' ),
 (  '60c07231-099a-4fdf-871f-6db5f8a06dc0' , 'LoginUser' , NULL , '0' , '0' , '0' , 'a90d9bad-299d-4b83-bae7-8e9e04ccc55d' , 'True' , 'False' , 'False' , 'False' ),
 (  '2b08730f-39f6-44e0-bf9d-f3a307626491' , 'LoginLocation' , NULL , '0' , '0' , '0' , 'a90d9bad-299d-4b83-bae7-8e9e04ccc55d' , 'True' , 'False' , 'False' , 'False' ),
 (  '1d135585-5a0a-4ff5-b811-37ef1361342b' , 'LoginIp' , NULL , '0' , '0' , '0' , 'a90d9bad-299d-4b83-bae7-8e9e04ccc55d' , 'True' , 'False' , 'False' , 'False' ),
 (  'be1397f8-f695-49d1-96f2-1b8dd0d1e237' , 'Browser' , NULL , '0' , '0' , '0' , 'a90d9bad-299d-4b83-bae7-8e9e04ccc55d' , 'True' , 'False' , 'False' , 'False' ),
 (  'c079d1ea-3ba5-42ed-8905-786eb8ee8634' , 'Os' , NULL , '0' , '0' , '0' , 'a90d9bad-299d-4b83-bae7-8e9e04ccc55d' , 'True' , 'False' , 'False' , 'False' ),
 (  '7f45ddeb-8dfa-4a3a-ad63-13229530a4c6' , 'LogMsg' , NULL , '0' , '0' , '0' , 'a90d9bad-299d-4b83-bae7-8e9e04ccc55d' , 'True' , 'False' , 'False' , 'False' ),
 (  '2a837024-a3da-4eda-9d54-cd2f394055db' , 'CreatorId' , NULL , '0' , '0' , '6' , 'a90d9bad-299d-4b83-bae7-8e9e04ccc55d' , 'False' , 'False' , 'False' , 'False' ),
 (  '4cd0c7e3-d8ab-43e3-a78d-6a0da4f1dddd' , 'Id' , NULL , '0' , '0' , '6' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'True' , 'False' , 'False' ),
 (  '2784f793-f70d-4959-9fd6-17966fa95681' , 'IsDeleted' , NULL , '0' , '0' , '3' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '5c9d46ac-0a29-478e-99a3-d04e6bf741cf' , 'CreationTime' , NULL , '0' , '0' , '5' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '82888fbd-9bbd-4501-b3f7-c0f502624a0c' , 'CreatorId' , NULL , '0' , '0' , '6' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'False' , 'False' , 'False' , 'False' ),
 (  '4092a2e2-0ff0-4178-8177-9ce14026a1b3' , 'LastModifierId' , NULL , '0' , '0' , '6' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'False' , 'False' , 'False' , 'False' ),
 (  'fe177c8b-b8b9-4aee-b5bb-196049da24bc' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'False' , 'False' , 'False' , 'False' ),
 (  '20a3f8fa-a445-4a4d-a8ae-d7ad019a7c1a' , 'OrderNum' , NULL , '0' , '0' , '1' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '929035a3-9b32-471a-8f54-7cfe486d6b72' , 'State' , NULL , '0' , '0' , '3' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '500771b7-cea7-408c-9c03-1114fc9d6ec7' , 'MenuName' , NULL , '0' , '0' , '0' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '87a8b3de-b159-47b1-ace5-45e1e02818e8' , 'MenuType' , NULL , '0' , '0' , '0' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  'a5b64fe0-86eb-43f7-9b32-723b2d36c538' , 'PermissionCode' , NULL , '0' , '0' , '0' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '0ad2ff11-bb36-4f66-a2d4-d3c661f6aa2c' , 'ParentId' , NULL , '0' , '0' , '6' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  'e1b729af-63aa-4774-bfbf-0f43aa53e91c' , 'MenuIcon' , NULL , '0' , '0' , '0' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  'f29918e5-0542-4e54-812c-2d7bf1f914f8' , 'Router' , NULL , '0' , '0' , '0' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '8c2c2df9-1188-40de-9b93-3be810a6ea97' , 'IsLink' , NULL , '0' , '0' , '3' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '32df386c-cbcb-4363-b1ca-5c431f0704ff' , 'IsCache' , NULL , '0' , '0' , '3' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  'd19ae7e0-bece-4296-b842-0138c1ef700f' , 'IsShow' , NULL , '0' , '0' , '3' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '9c9d72e7-a390-435c-a349-7963ef80aef0' , 'Remark' , NULL , '0' , '0' , '0' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  'db258699-2341-4596-9004-00008dfa44d2' , 'Component' , NULL , '0' , '0' , '0' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '26466191-a67c-4040-908a-59d0567e40d6' , 'Query' , NULL , '0' , '0' , '0' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '60dd1600-01b7-4126-95c2-85d73637733e' , 'Children' , NULL , '0' , '0' , '0' , '86560cbf-91a1-4fc4-892e-80bab89d5372' , 'True' , 'False' , 'False' , 'False' ),
 (  '4d151948-e916-4f17-a8a0-c542ce76fd90' , 'Id' , NULL , '0' , '0' , '6' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'True' , 'True' , 'False' , 'False' ),
 (  '18c13890-a7b9-4645-a2e2-7287182a9437' , 'Title' , NULL , '0' , '0' , '0' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'True' , 'False' , 'False' , 'False' ),
 (  '2a7a003f-3378-43bd-a2b3-5b364839a99f' , 'Type' , NULL , '0' , '0' , '0' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'True' , 'False' , 'False' , 'False' ),
 (  '0fe0299f-25a5-4dd0-84d5-cc832780ce5d' , 'Content' , NULL , '0' , '0' , '0' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'True' , 'False' , 'False' , 'False' ),
 (  '065d9f47-b376-4d10-82a9-24df250b091e' , 'IsDeleted' , NULL , '0' , '0' , '3' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'True' , 'False' , 'False' , 'False' ),
 (  '93c406fa-fdd2-40f9-9bd6-95bbcd26c6b4' , 'CreationTime' , NULL , '0' , '0' , '5' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'True' , 'False' , 'False' , 'False' ),
 (  'c4ccb044-f69d-4e80-b461-b97e1ce90e74' , 'CreatorId' , NULL , '0' , '0' , '6' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'False' , 'False' , 'False' , 'False' ),
 (  '6295a02c-e812-402a-bebd-9111f4a1a210' , 'LastModifierId' , NULL , '0' , '0' , '6' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'False' , 'False' , 'False' , 'False' ),
 (  'eab17186-3bde-4864-b289-31e7a9e108a8' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'False' , 'False' , 'False' , 'False' ),
 (  '692b8de0-c7af-415e-b93f-473b8ff5966b' , 'OrderNum' , NULL , '0' , '0' , '1' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'True' , 'False' , 'False' , 'False' ),
 (  '2332fcfd-c977-4adb-a2c0-31c5f6420369' , 'State' , NULL , '0' , '0' , '3' , '8ff54476-8eef-4daa-9190-d08ad2ae9216' , 'True' , 'False' , 'False' , 'False' ),
 (  '4cd7afac-57ad-48d9-b76d-d7ca164854d5' , 'Id' , NULL , '0' , '0' , '6' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'True' , 'True' , 'False' , 'False' ),
 (  'b0d184eb-5cc1-4536-bb11-056917c5fc68' , 'IsDeleted' , NULL , '0' , '0' , '3' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'True' , 'False' , 'False' , 'False' ),
 (  'de4a2985-aea4-4bd2-bc16-c15e8e078fb3' , 'CreationTime' , NULL , '0' , '0' , '5' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'True' , 'False' , 'False' , 'False' ),
 (  '7658ede4-6791-42de-8d75-1438a8833c71' , 'CreatorId' , NULL , '0' , '0' , '6' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'False' , 'False' , 'False' , 'False' ),
 (  '39b1d8ca-d2f9-47a4-9b57-b6c1690efc63' , 'LastModifierId' , NULL , '0' , '0' , '6' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'False' , 'False' , 'False' , 'False' ),
 (  'd405c2c2-3336-4a1b-b35f-1c9c8a746ff1' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'False' , 'False' , 'False' , 'False' ),
 (  '336ccecf-24bd-4b55-977e-b14f991b9748' , 'OrderNum' , NULL , '0' , '0' , '1' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'True' , 'False' , 'False' , 'False' ),
 (  'fddcc2fc-5972-4c34-ac69-0d0217c9d183' , 'State' , NULL , '0' , '0' , '3' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'True' , 'False' , 'False' , 'False' ),
 (  '6c399548-fe19-4486-a62d-03b311c6e1bf' , 'PostCode' , NULL , '0' , '0' , '0' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'True' , 'False' , 'False' , 'False' ),
 (  'a47f175b-e32a-4d9b-97aa-05b462ec194e' , 'PostName' , NULL , '0' , '0' , '0' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'True' , 'False' , 'False' , 'False' ),
 (  '1da847db-f309-470a-beda-8386baa381a7' , 'Remark' , NULL , '0' , '0' , '0' , '694c3609-f757-4e94-bd94-a4660b6d4b1d' , 'True' , 'False' , 'False' , 'False' ),
 (  '21dd4b81-0d85-4192-8543-fc978a715476' , 'Id' , NULL , '0' , '0' , '6' , 'e8834c4a-d784-48b6-8e96-23f51616a710' , 'True' , 'True' , 'False' , 'False' ),
 (  '2eb1d53d-4cd6-409d-9444-50caf7a386c8' , 'RoleId' , NULL , '0' , '0' , '6' , 'e8834c4a-d784-48b6-8e96-23f51616a710' , 'True' , 'False' , 'False' , 'False' ),
 (  '2b762629-476a-405c-a659-6b669b318bcf' , 'DeptId' , NULL , '0' , '0' , '6' , 'e8834c4a-d784-48b6-8e96-23f51616a710' , 'True' , 'False' , 'False' , 'False' ),
 (  '70ee2a8c-f37b-434c-a8d6-ea51c233dd5c' , 'Id' , NULL , '0' , '0' , '6' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'True' , 'False' , 'False' ),
 (  '94a4b41b-fc6b-4c7a-a1ed-f66d9e937831' , 'IsDeleted' , NULL , '0' , '0' , '3' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'False' , 'False' , 'False' ),
 (  '980ae2b3-0256-4f8e-a5f3-0dc400b2fe52' , 'CreationTime' , NULL , '0' , '0' , '5' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'False' , 'False' , 'False' ),
 (  '1d139482-c221-404f-8238-3497d3648de9' , 'CreatorId' , NULL , '0' , '0' , '6' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'False' , 'False' , 'False' , 'False' ),
 (  'c4571f6d-d0b6-4698-97f2-dbad9f18424b' , 'LastModifierId' , NULL , '0' , '0' , '6' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'False' , 'False' , 'False' , 'False' ),
 (  '7942f99b-c177-4a33-a68b-e9ed4e0cb323' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'False' , 'False' , 'False' , 'False' ),
 (  '7d836683-2bf5-44f4-975d-e2574023d8a5' , 'OrderNum' , NULL , '0' , '0' , '1' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'False' , 'False' , 'False' ),
 (  'ee219a3e-cf0e-418b-b002-bd62b798101f' , 'RoleName' , NULL , '0' , '0' , '0' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'False' , 'False' , 'False' ),
 (  'f619fa3d-2df5-4098-9222-23ef240d0638' , 'RoleCode' , NULL , '0' , '0' , '0' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'False' , 'False' , 'False' ),
 (  '2a7132d5-8b9f-46bd-913b-a5de2f9c52c3' , 'Remark' , NULL , '0' , '0' , '0' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'False' , 'False' , 'False' ),
 (  'e26b7a98-2bd9-441d-a755-7ee6aa4390ad' , 'DataScope' , NULL , '0' , '0' , '0' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'False' , 'False' , 'False' ),
 (  '93a7aa4f-88b3-47f0-ae9a-f2156cb1b591' , 'State' , NULL , '0' , '0' , '3' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'False' , 'False' , 'False' ),
 (  '64f4ff71-7abf-41d1-a1ef-06e3f5426630' , 'Menus' , NULL , '0' , '0' , '0' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'False' , 'False' , 'False' ),
 (  'c2288105-8653-4e72-a932-8bd80b8706cb' , 'Depts' , NULL , '0' , '0' , '0' , '3acf955e-a424-48b6-a7da-573007ffe9d4' , 'True' , 'False' , 'False' , 'False' ),
 (  '02e02a78-ceac-443c-b512-4100bb9be89c' , 'Id' , NULL , '0' , '0' , '6' , '5a3959fd-6029-4a26-86b3-723dd100cfbc' , 'True' , 'True' , 'False' , 'False' ),
 (  '3c116061-6bb8-43a8-be52-39c90b26eb6e' , 'RoleId' , NULL , '0' , '0' , '6' , '5a3959fd-6029-4a26-86b3-723dd100cfbc' , 'True' , 'False' , 'False' , 'False' ),
 (  'ded0745a-b5b0-4d37-9489-29fbeeeb7e57' , 'MenuId' , NULL , '0' , '0' , '6' , '5a3959fd-6029-4a26-86b3-723dd100cfbc' , 'True' , 'False' , 'False' , 'False' ),
 (  '4930ee36-3551-4272-a505-ba95ddf41c70' , 'Id' , NULL , '0' , '0' , '6' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'True' , 'False' , 'False' ),
 (  'a05c7106-369f-4401-adf0-4d70f0157c70' , 'IsDeleted' , NULL , '0' , '0' , '3' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '79361c56-3791-4e18-8469-2013eed2a4a6' , 'Name' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  'dc22c934-ce63-4baa-8e8a-5237d2004914' , 'Age' , NULL , '0' , '0' , '1' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'False' , 'False' , 'False' , 'False' ),
 (  'b581d810-ace5-4a2e-b00c-346f318a4b83' , 'UserName' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '5ad39730-1db8-4386-999e-5d7cc0d29308' , 'Password' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '47d985c0-d3ae-4db9-ba2d-9db24545b83e' , 'Salt' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '4a143522-e780-4cce-8a9e-7140eba6aee8' , 'Icon' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '3422ea6c-1948-40ca-90f5-a7b4d68293f4' , 'Nick' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '3cb0c628-0423-4bd5-b25f-f4e783982691' , 'Email' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '08e68963-9303-41c1-9ba0-50355db48d49' , 'Ip' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '8baf1bd6-db69-4700-9bba-9212621fd320' , 'Address' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '3c04d6f8-bfcd-4d81-8e54-a98a284f0d0f' , 'Phone' , NULL , '0' , '0' , '2' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'False' , 'False' , 'False' , 'False' ),
 (  '0987a063-6668-4a78-9d56-909dbda35e99' , 'Introduction' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  'cab37ae1-2169-4ddc-8de7-bbff2fec5355' , 'Remark' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  'd069c8b9-af4b-4af2-b3de-3d3101aad3bf' , 'Sex' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '58d6876d-2c54-4f97-9c1f-6ca1ca55a907' , 'DeptId' , NULL , '0' , '0' , '6' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'False' , 'False' , 'False' , 'False' ),
 (  '082dcb86-94ef-4f23-86ff-610858f87ffe' , 'CreationTime' , NULL , '0' , '0' , '5' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '3f74de2b-1db8-4cef-8abf-e767405cc18a' , 'CreatorId' , NULL , '0' , '0' , '6' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'False' , 'False' , 'False' , 'False' ),
 (  '36d2fc43-a163-410b-99c5-cbea9473c1fb' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'False' , 'False' , 'False' , 'False' ),
 (  '8f7d4070-2239-4f95-8313-6476352f9387' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'False' , 'False' , 'False' , 'False' ),
 (  '5440d1f0-8bea-4bde-b78b-ebda4572e64c' , 'OrderNum' , NULL , '0' , '0' , '1' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '2ebb3487-092a-4e1f-8713-92d3cd9b753d' , 'State' , NULL , '0' , '0' , '3' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  'd2b209b3-4405-4000-8003-5394058bea4a' , 'Roles' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '3958c0bf-bf8f-47c2-8922-643aa9ffe039' , 'Posts' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '5a29524b-ee6a-4aff-8318-4fe086322c6e' , 'Dept' , NULL , '0' , '0' , '0' , 'ed1ea258-16c5-4338-95cd-a3b7840005e0' , 'True' , 'False' , 'False' , 'False' ),
 (  '81a7bfe0-2904-4837-8a9f-2aff6c5c3baa' , 'Id' , NULL , '0' , '0' , '6' , '02b47a20-b2c0-4bf4-a019-b814f114664a' , 'True' , 'True' , 'False' , 'False' ),
 (  '6591335f-a5ef-4665-a093-56ee276baa9a' , 'UserId' , NULL , '0' , '0' , '6' , '02b47a20-b2c0-4bf4-a019-b814f114664a' , 'True' , 'False' , 'False' , 'False' ),
 (  '15f52eb8-0ae3-40f0-baf5-e5bcfbab83c9' , 'PostId' , NULL , '0' , '0' , '6' , '02b47a20-b2c0-4bf4-a019-b814f114664a' , 'True' , 'False' , 'False' , 'False' ),
 (  '4edfe570-625c-42ab-b279-c2b4734a514b' , 'Id' , NULL , '0' , '0' , '6' , 'bdd48853-efd9-4d34-82c6-e63c24e60de0' , 'True' , 'True' , 'False' , 'False' ),
 (  'cd2a8d92-0279-4499-b841-b3d8268ba204' , 'RoleId' , NULL , '0' , '0' , '6' , 'bdd48853-efd9-4d34-82c6-e63c24e60de0' , 'True' , 'False' , 'False' , 'False' ),
 (  'aac23da7-2858-4912-aa82-7abc4af87022' , 'UserId' , NULL , '0' , '0' , '6' , 'bdd48853-efd9-4d34-82c6-e63c24e60de0' , 'True' , 'False' , 'False' , 'False' ),
 (  '00ef88cb-a0cb-4ab7-bef7-be8a89994519' , 'Id' , NULL , '0' , '0' , '6' , '7dbbb141-9b8f-4127-a4d0-263cb10f06c5' , 'True' , 'True' , 'False' , 'False' ),
 (  'd95ba490-b888-4752-9d21-80cf650c8c9e' , 'UserId' , NULL , '0' , '0' , '6' , '7dbbb141-9b8f-4127-a4d0-263cb10f06c5' , 'True' , 'False' , 'False' , 'False' ),
 (  'f3b8f6c9-594a-4650-94b8-59d7d167222c' , 'OpenId' , NULL , '0' , '0' , '0' , '7dbbb141-9b8f-4127-a4d0-263cb10f06c5' , 'True' , 'False' , 'False' , 'False' ),
 (  '795428c7-2a24-413a-b42f-62c0bfdd274a' , 'Name' , NULL , '0' , '0' , '0' , '7dbbb141-9b8f-4127-a4d0-263cb10f06c5' , 'True' , 'False' , 'False' , 'False' ),
 (  '696e3e2e-85ec-4041-8848-3f076c575d23' , 'AuthType' , NULL , '0' , '0' , '0' , '7dbbb141-9b8f-4127-a4d0-263cb10f06c5' , 'True' , 'False' , 'False' , 'False' ),
 (  '7f6d847f-9f95-4a53-87f6-2b8395cac016' , 'IsDeleted' , NULL , '0' , '0' , '3' , '7dbbb141-9b8f-4127-a4d0-263cb10f06c5' , 'True' , 'False' , 'False' , 'False' ),
 (  '4dfb2acb-cbb7-4cb0-9a3b-3be233e6336e' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '7dbbb141-9b8f-4127-a4d0-263cb10f06c5' , 'True' , 'False' , 'False' , 'False' )
;
INSERT INTO "yifield"  ("id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic") VALUES 
 (  '94d38f7a-aa9f-403b-85a5-d713a9cef6fc' , 'CreationTime' , NULL , '0' , '0' , '5' , '7dbbb141-9b8f-4127-a4d0-263cb10f06c5' , 'True' , 'False' , 'False' , 'False' ),
 (  '5c7c9c9a-08df-4b25-aaca-57947faa978d' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '7dbbb141-9b8f-4127-a4d0-263cb10f06c5' , 'True' , 'False' , 'False' , 'False' ),
 (  'd600bc14-5839-460d-837e-2ac23dc6497d' , 'Id' , NULL , '0' , '0' , '6' , 'f7c096eb-0cca-4fc9-b54c-77b1ecb6dda4' , 'True' , 'True' , 'False' , 'False' ),
 (  '1e092b47-a5ae-448d-8f04-4982dd24caf2' , 'Number' , NULL , '0' , '0' , '2' , 'f7c096eb-0cca-4fc9-b54c-77b1ecb6dda4' , 'True' , 'False' , 'False' , 'False' ),
 (  '0c4a6eb5-0865-42b0-a9b5-f2a43ea44d27' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'f7c096eb-0cca-4fc9-b54c-77b1ecb6dda4' , 'False' , 'False' , 'False' , 'False' ),
 (  'be85d0c9-03c7-4545-95d2-0d3b29c4c08c' , 'CreationTime' , NULL , '0' , '0' , '5' , 'f7c096eb-0cca-4fc9-b54c-77b1ecb6dda4' , 'True' , 'False' , 'False' , 'False' ),
 (  'bae7ead1-c846-4724-aef3-d6e5151d393b' , 'Id' , NULL , '0' , '0' , '6' , 'a7f3f6e4-ae66-4b19-95a3-da97641aef86' , 'True' , 'True' , 'False' , 'False' ),
 (  'efd29c97-acd4-4640-9682-ae8659078982' , 'UserId' , NULL , '0' , '0' , '6' , 'a7f3f6e4-ae66-4b19-95a3-da97641aef86' , 'True' , 'False' , 'False' , 'False' ),
 (  '96ded61e-37dd-49c1-a67b-eb2fa9970f89' , 'UserLimit' , NULL , '0' , '0' , '0' , 'a7f3f6e4-ae66-4b19-95a3-da97641aef86' , 'True' , 'False' , 'False' , 'False' ),
 (  'a92b025b-b641-4e92-95af-8699fcc3f5aa' , 'Level' , NULL , '0' , '0' , '1' , 'a7f3f6e4-ae66-4b19-95a3-da97641aef86' , 'True' , 'False' , 'False' , 'False' ),
 (  '1469f2d9-bd8c-4f04-acf2-faf1428a230a' , 'Money' , NULL , '0' , '0' , '4' , 'a7f3f6e4-ae66-4b19-95a3-da97641aef86' , 'True' , 'False' , 'False' , 'False' ),
 (  '9b0b08a2-6659-421c-9875-3ff583125520' , 'Experience' , NULL , '0' , '0' , '2' , 'a7f3f6e4-ae66-4b19-95a3-da97641aef86' , 'True' , 'False' , 'False' , 'False' ),
 (  'e815c2f8-3c17-4e15-8901-d433ea3461cb' , 'DiscussNumber' , NULL , '0' , '0' , '1' , 'a7f3f6e4-ae66-4b19-95a3-da97641aef86' , 'True' , 'False' , 'False' , 'False' ),
 (  '41926bf4-f501-4686-95af-e2a5571680a2' , 'CommentNumber' , NULL , '0' , '0' , '1' , 'a7f3f6e4-ae66-4b19-95a3-da97641aef86' , 'True' , 'False' , 'False' , 'False' ),
 (  'e26109e0-bf9e-4e8f-8c78-eda87a26315a' , 'AgreeNumber' , NULL , '0' , '0' , '1' , 'a7f3f6e4-ae66-4b19-95a3-da97641aef86' , 'True' , 'False' , 'False' , 'False' ),
 (  '4beac7e0-bf31-4e47-b943-aa56fbe7aa15' , 'Id' , NULL , '0' , '0' , '6' , '99464aa7-3523-4d01-8e8d-0bc67b009742' , 'True' , 'True' , 'False' , 'False' ),
 (  '868be9e8-b30b-4ba5-a48b-2fb51b010bea' , 'CommentPage' , NULL , '0' , '0' , '1' , '99464aa7-3523-4d01-8e8d-0bc67b009742' , 'True' , 'False' , 'False' , 'False' ),
 (  '07016e1d-c136-4ff6-9fca-69b3066779ef' , 'DiscussPage' , NULL , '0' , '0' , '1' , '99464aa7-3523-4d01-8e8d-0bc67b009742' , 'True' , 'False' , 'False' , 'False' ),
 (  '92bf4ff8-e008-465d-8a6b-631691f36be4' , 'CommentExperience' , NULL , '0' , '0' , '1' , '99464aa7-3523-4d01-8e8d-0bc67b009742' , 'True' , 'False' , 'False' , 'False' ),
 (  'd513db5c-85d1-4adb-b673-23f21c8cca8e' , 'DiscussExperience' , NULL , '0' , '0' , '1' , '99464aa7-3523-4d01-8e8d-0bc67b009742' , 'True' , 'False' , 'False' , 'False' ),
 (  '79f0a547-4ede-44cf-967b-2065c36d010d' , 'Title' , NULL , '0' , '0' , '0' , '99464aa7-3523-4d01-8e8d-0bc67b009742' , 'True' , 'False' , 'False' , 'False' ),
 (  '50bfa0de-50b9-4aad-b4cf-74c00eb9e09c' , 'Id' , NULL , '0' , '0' , '6' , '6ab2d060-a9dc-40f8-8306-4e6921804d66' , 'True' , 'True' , 'False' , 'False' ),
 (  '1161731b-03d6-47c6-a651-1aef9395c2b6' , 'CurrentLevel' , NULL , '0' , '0' , '1' , '6ab2d060-a9dc-40f8-8306-4e6921804d66' , 'True' , 'False' , 'False' , 'False' ),
 (  'ab13f9c5-1b0a-43be-9331-ceb64ac2efbf' , 'MinExperience' , NULL , '0' , '0' , '4' , '6ab2d060-a9dc-40f8-8306-4e6921804d66' , 'True' , 'False' , 'False' , 'False' ),
 (  '7f18b8ce-1e94-45b3-9563-0c8eb48f0936' , 'Name' , NULL , '0' , '0' , '0' , '6ab2d060-a9dc-40f8-8306-4e6921804d66' , 'True' , 'False' , 'False' , 'False' ),
 (  '39b75fa3-8d1b-4059-8749-2d3014a85aa1' , 'Nick' , NULL , '0' , '0' , '0' , '6ab2d060-a9dc-40f8-8306-4e6921804d66' , 'True' , 'False' , 'False' , 'False' ),
 (  '280d54ac-280d-41e3-b0b8-102283057660' , 'Logo' , NULL , '0' , '0' , '0' , '6ab2d060-a9dc-40f8-8306-4e6921804d66' , 'True' , 'False' , 'False' , 'False' ),
 (  'a83a949c-93a9-4e45-ad70-d9eb47030ccf' , 'Id' , NULL , '0' , '0' , '6' , 'ca54b1e1-8983-4123-adaa-16b1893d82bf' , 'True' , 'True' , 'False' , 'False' ),
 (  '26015587-82d9-4b7d-abfb-79ad183114fd' , 'CreationTime' , NULL , '0' , '0' , '5' , 'ca54b1e1-8983-4123-adaa-16b1893d82bf' , 'True' , 'False' , 'False' , 'False' ),
 (  '96530db0-ec83-4a83-87be-ace12dd12502' , 'CreatorId' , NULL , '0' , '0' , '6' , 'ca54b1e1-8983-4123-adaa-16b1893d82bf' , 'False' , 'False' , 'False' , 'False' ),
 (  'a28d530c-2c3f-4298-b850-d2e3c7307a17' , 'ContinuousNumber' , NULL , '0' , '0' , '1' , 'ca54b1e1-8983-4123-adaa-16b1893d82bf' , 'True' , 'False' , 'False' , 'False' ),
 (  '62721cc4-cd98-4eff-a7d7-4afcce712879' , 'Id' , NULL , '0' , '0' , '6' , 'ed03a933-f90e-470f-b712-fc79976784d9' , 'True' , 'True' , 'False' , 'False' ),
 (  'cebf55bc-f04b-418f-9844-228a5f8924c2' , 'CreationTime' , NULL , '0' , '0' , '5' , 'ed03a933-f90e-470f-b712-fc79976784d9' , 'True' , 'False' , 'False' , 'False' ),
 (  '8bb7095d-577c-4008-ab46-60c0e57df667' , 'DiscussId' , NULL , '0' , '0' , '6' , 'ed03a933-f90e-470f-b712-fc79976784d9' , 'True' , 'False' , 'False' , 'False' ),
 (  '0f8a5ef6-0b8c-4fcc-9cdb-d7b02a2cd11a' , 'CreatorId' , NULL , '0' , '0' , '6' , 'ed03a933-f90e-470f-b712-fc79976784d9' , 'False' , 'False' , 'False' , 'False' ),
 (  '3b3186ea-b3ef-4918-891f-ed798bc55ac5' , 'Id' , NULL , '0' , '0' , '6' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'True' , 'True' , 'False' , 'False' ),
 (  '3bf1ddc5-dbbb-465b-b529-13584f0e4560' , 'IsDeleted' , NULL , '0' , '0' , '3' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'True' , 'False' , 'False' , 'False' ),
 (  'b4510ee0-c932-4247-8e2c-7d0be496c762' , 'Content' , NULL , '0' , '0' , '0' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'True' , 'False' , 'False' , 'False' ),
 (  '522dfe1d-edcb-4689-81ce-b4acd235581f' , 'Name' , NULL , '0' , '0' , '0' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'True' , 'False' , 'False' , 'False' ),
 (  '430e1a20-722e-41cb-a07d-59dafb618916' , 'DiscussId' , NULL , '0' , '0' , '6' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'True' , 'False' , 'False' , 'False' ),
 (  '36f98de2-ce1d-4024-8d19-c0218866cc6a' , 'ParentId' , NULL , '0' , '0' , '6' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'True' , 'False' , 'False' , 'False' ),
 (  '76f2ffad-b10a-459a-aa90-482637f7d626' , 'Children' , NULL , '0' , '0' , '0' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'True' , 'False' , 'False' , 'False' ),
 (  'f52e7cda-0a37-47ca-a86c-96b0f4f732a3' , 'CreationTime' , NULL , '0' , '0' , '5' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'True' , 'False' , 'False' , 'False' ),
 (  'ccb83265-bc37-4d51-8583-763888164258' , 'CreatorId' , NULL , '0' , '0' , '6' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'False' , 'False' , 'False' , 'False' ),
 (  'c6c46d85-2027-4c45-8b6c-8e31d3246eac' , 'LastModifierId' , NULL , '0' , '0' , '6' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'False' , 'False' , 'False' , 'False' ),
 (  'b6ef1839-1902-4fb6-9836-549d6cbfa6c3' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'False' , 'False' , 'False' , 'False' ),
 (  '3386cf4b-553f-4201-8288-1cc1b46b5d5c' , 'OrderNum' , NULL , '0' , '0' , '1' , '5dec5fcc-9d21-422c-9f75-41e6c338489d' , 'True' , 'False' , 'False' , 'False' ),
 (  'd8fa0acd-9df4-4984-b4ea-82d29a571312' , 'Id' , NULL , '0' , '0' , '6' , '7efdd57a-a036-4ecd-865a-349aa96a95d9' , 'True' , 'True' , 'False' , 'False' ),
 (  '5d0ade48-ab8c-4c33-a124-1b9fb47669d5' , 'Name' , NULL , '0' , '0' , '0' , '7efdd57a-a036-4ecd-865a-349aa96a95d9' , 'True' , 'False' , 'False' , 'False' ),
 (  'af6ca13a-bdd2-4aed-82d3-8555a87c5d31' , 'Logo' , NULL , '0' , '0' , '0' , '7efdd57a-a036-4ecd-865a-349aa96a95d9' , 'True' , 'False' , 'False' , 'False' ),
 (  '59a7a468-c2f5-4b92-bed8-6b1753a8b26e' , 'Color' , NULL , '0' , '0' , '0' , '7efdd57a-a036-4ecd-865a-349aa96a95d9' , 'True' , 'False' , 'False' , 'False' ),
 (  '1a2f0ffe-5673-484d-b776-134c0ea0f569' , 'IsDeleted' , NULL , '0' , '0' , '3' , '7efdd57a-a036-4ecd-865a-349aa96a95d9' , 'True' , 'False' , 'False' , 'False' ),
 (  '4496eaba-d252-416b-a9c2-97baf9dc10dd' , 'CreationTime' , NULL , '0' , '0' , '5' , '7efdd57a-a036-4ecd-865a-349aa96a95d9' , 'True' , 'False' , 'False' , 'False' ),
 (  '9e9c4953-80da-416f-898c-422d7f4c2633' , 'CreatorId' , NULL , '0' , '0' , '6' , '7efdd57a-a036-4ecd-865a-349aa96a95d9' , 'False' , 'False' , 'False' , 'False' ),
 (  '967a9bac-b067-41c3-9277-f99892073bfb' , 'LastModifierId' , NULL , '0' , '0' , '6' , '7efdd57a-a036-4ecd-865a-349aa96a95d9' , 'False' , 'False' , 'False' , 'False' ),
 (  '0880ac45-dfcc-4eae-997e-222534e4317b' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '7efdd57a-a036-4ecd-865a-349aa96a95d9' , 'False' , 'False' , 'False' , 'False' ),
 (  '2de1df18-09a5-4b2c-bed2-42cec5ea0235' , 'Id' , NULL , '0' , '0' , '6' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'True' , 'True' , 'False' , 'False' ),
 (  '4b8bc3d3-d2ca-491c-b755-fbd992c68b99' , 'IsDeleted' , NULL , '0' , '0' , '3' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'True' , 'False' , 'False' , 'False' ),
 (  'dcc504c4-54f0-4431-992f-5a758cbf2e10' , 'Content' , NULL , '0' , '500' , '0' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'True' , 'False' , 'False' , 'False' ),
 (  '2e223016-d794-45e7-a6e9-ec1198c8511f' , 'DiscussId' , NULL , '0' , '0' , '6' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'True' , 'False' , 'False' , 'False' ),
 (  'bf05132e-dfef-4d03-bd71-cde34295b10d' , 'ParentId' , NULL , '0' , '0' , '6' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'True' , 'False' , 'False' , 'False' ),
 (  '3854b2fb-12df-41b1-b800-9e86983e2fe0' , 'CreationTime' , NULL , '0' , '0' , '5' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'True' , 'False' , 'False' , 'False' ),
 (  '71bb3d60-60e8-4611-baf2-fee97caa15a0' , 'RootId' , NULL , '0' , '0' , '6' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'True' , 'False' , 'False' , 'False' ),
 (  '5c03269c-a0bf-4447-9b43-7f32b2cae98b' , 'Children' , NULL , '0' , '0' , '0' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'True' , 'False' , 'False' , 'False' ),
 (  '15156036-f4f2-4564-b855-1556ddb0e77f' , 'CreateUser' , NULL , '0' , '0' , '0' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'True' , 'False' , 'False' , 'False' ),
 (  '803fd343-1cac-4027-a862-e9451b6aa48a' , 'CommentedUser' , NULL , '0' , '0' , '0' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'True' , 'False' , 'False' , 'False' ),
 (  'f61d05dc-3f73-42a8-add4-bd2140de3aab' , 'CreatorId' , NULL , '0' , '0' , '6' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'False' , 'False' , 'False' , 'False' ),
 (  '7cdcc8a6-d0d4-4d52-9ddb-31c7f26e52b9' , 'LastModifierId' , NULL , '0' , '0' , '6' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'False' , 'False' , 'False' , 'False' ),
 (  '9339ef0d-b767-4ee0-b183-0c2d3426f315' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '1e383f7a-4fd3-4f61-8a80-3ce51f6a35ee' , 'False' , 'False' , 'False' , 'False' ),
 (  '36770df0-f28e-427c-b865-15eca7ea96d6' , 'Id' , NULL , '0' , '0' , '6' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'True' , 'False' , 'False' ),
 (  '8687a216-7591-460e-bd59-1f5226178286' , 'Title' , NULL , '0' , '0' , '0' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '6f79236d-885a-48ca-94bf-1753cf6560fe' , 'Types' , NULL , '0' , '0' , '0' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '284f6d13-303c-4d4b-8bc1-ddf6388677b5' , 'Introduction' , NULL , '0' , '0' , '0' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '56675513-3d5a-4a2e-9b21-88d06e148a7e' , 'AgreeNum' , NULL , '0' , '0' , '1' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  'dd5c8487-9a35-408c-acfb-b73f79a73f8a' , 'SeeNum' , NULL , '0' , '0' , '1' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '6f5387c2-7c27-4438-9426-5814902cd840' , 'Cover' , NULL , '0' , '0' , '0' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  'a383f624-82b3-4f11-a08f-7766f4f8f426' , 'Content' , NULL , '0' , '0' , '0' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '3287365f-2f8e-4637-a333-eb181c5b1534' , 'Color' , NULL , '0' , '0' , '0' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '433274bb-cf93-4113-ace2-530cc9a86b39' , 'IsDeleted' , NULL , '0' , '0' , '3' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  'd258a577-c811-4d61-bdeb-063f4e4ae36c' , 'IsTop' , NULL , '0' , '0' , '3' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '37c727ad-1bf5-4c37-b105-923e6697f3ad' , 'OrderNum' , NULL , '0' , '0' , '1' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  'b08615f1-e396-4520-8c16-e4c8b5505084' , 'PermissionType' , NULL , '0' , '0' , '0' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '50ba0e2f-ec4a-49fe-9ce0-1772bc43c1c1' , 'PlateId' , NULL , '0' , '0' , '6' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '2d69566e-3c94-422d-bbe9-a9121ffaa4e4' , 'CreationTime' , NULL , '0' , '0' , '5' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '53745e0b-2f78-48a2-81bb-be391743fd71' , 'CreatorId' , NULL , '0' , '0' , '6' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'False' , 'False' , 'False' , 'False' ),
 (  '24559ca1-4913-4da1-a177-bbd25c77c8df' , 'LastModifierId' , NULL , '0' , '0' , '6' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'False' , 'False' , 'False' , 'False' ),
 (  '01afdc9c-b424-45f9-a1eb-c01696b1e8e8' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'False' , 'False' , 'False' , 'False' ),
 (  '1f369089-096f-431b-bc7c-56d8043db4b6' , 'PermissionUserIds' , NULL , '0' , '0' , '0' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '7efaf9e4-1c5f-4582-9993-70b6eb917667' , 'IsDisableCreateComment' , NULL , '0' , '0' , '3' , '47d5d934-9a91-411e-8c8a-e968cb966b8e' , 'True' , 'False' , 'False' , 'False' ),
 (  '95b26f48-a68d-4d4b-b7ac-80efe086b278' , 'Id' , NULL , '0' , '0' , '6' , 'f928c150-b7a1-403a-ae62-9acf18ed1e67' , 'True' , 'True' , 'False' , 'False' ),
 (  'cc7314b0-fd0c-4290-82fb-03f50426e0fd' , 'DiscussId' , NULL , '0' , '0' , '6' , 'f928c150-b7a1-403a-ae62-9acf18ed1e67' , 'True' , 'False' , 'False' , 'False' ),
 (  'cc03cad8-ad0e-4fa5-bb7d-1724db5ea2a1' , 'MyTypeId' , NULL , '0' , '0' , '6' , 'f928c150-b7a1-403a-ae62-9acf18ed1e67' , 'True' , 'False' , 'False' , 'False' ),
 (  'a98662ba-f872-41d2-a42a-11a6b5fbb227' , 'Id' , NULL , '0' , '0' , '6' , 'e31580f3-d3c6-47c4-9415-6383dfa50738' , 'True' , 'True' , 'False' , 'False' ),
 (  'ba9705ea-9273-423b-993b-c5dae0d77acc' , 'OrderNum' , NULL , '0' , '0' , '1' , 'e31580f3-d3c6-47c4-9415-6383dfa50738' , 'True' , 'False' , 'False' , 'False' ),
 (  '03b02dac-6e1a-43cd-ab5e-7ddb3f5a84a8' , 'DiscussId' , NULL , '0' , '0' , '6' , 'e31580f3-d3c6-47c4-9415-6383dfa50738' , 'True' , 'False' , 'False' , 'False' ),
 (  '484d01fc-176a-47ca-8bbf-bf453523c09d' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'e31580f3-d3c6-47c4-9415-6383dfa50738' , 'False' , 'False' , 'False' , 'False' ),
 (  'c9446d63-7c45-438f-ab02-f69a575f554d' , 'Id' , NULL , '0' , '0' , '6' , '4acd7aba-b9e3-4d17-b161-e9f21cd8585d' , 'True' , 'True' , 'False' , 'False' ),
 (  'ccef7c2b-f5b4-400e-b2d7-6738f8285b25' , 'IsDeleted' , NULL , '0' , '0' , '3' , '4acd7aba-b9e3-4d17-b161-e9f21cd8585d' , 'True' , 'False' , 'False' , 'False' ),
 (  '5a268a7e-d8dd-436d-88e2-0fd931aa3a01' , 'Name' , NULL , '0' , '0' , '0' , '4acd7aba-b9e3-4d17-b161-e9f21cd8585d' , 'True' , 'False' , 'False' , 'False' ),
 (  'ca31b100-7c3b-4c07-ab2a-20ca88489bc0' , 'Color' , NULL , '0' , '0' , '0' , '4acd7aba-b9e3-4d17-b161-e9f21cd8585d' , 'True' , 'False' , 'False' , 'False' ),
 (  '0b0067af-7f46-4b1f-9fa2-e0bc40fc515c' , 'BackgroundColor' , NULL , '0' , '0' , '0' , '4acd7aba-b9e3-4d17-b161-e9f21cd8585d' , 'True' , 'False' , 'False' , 'False' ),
 (  '78e2a68c-4b3e-4b9d-9ebc-e855d057fa26' , 'UserId' , NULL , '0' , '0' , '6' , '4acd7aba-b9e3-4d17-b161-e9f21cd8585d' , 'True' , 'False' , 'False' , 'False' ),
 (  '20119956-5b7d-49f3-8156-ed85e99aca28' , 'Id' , NULL , '0' , '0' , '6' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'True' , 'True' , 'False' , 'False' ),
 (  '7cef59ef-7269-435e-b744-8a218dd559d5' , 'Code' , NULL , '0' , '0' , '0' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'True' , 'False' , 'False' , 'False' ),
 (  '83aa697e-1f36-4a59-ac7c-9b11b8f63768' , 'Name' , NULL , '0' , '0' , '0' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'True' , 'False' , 'False' , 'False' ),
 (  '2cf95dba-17b5-4e68-b356-d49aa56228ce' , 'Logo' , NULL , '0' , '0' , '0' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'True' , 'False' , 'False' , 'False' ),
 (  '5c755f40-f46c-4dd7-8e24-8c13b6b27d7a' , 'Introduction' , NULL , '0' , '0' , '0' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'True' , 'False' , 'False' , 'False' ),
 (  '852be113-b497-4d79-b310-93e0fe4e1905' , 'IsDeleted' , NULL , '0' , '0' , '3' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'True' , 'False' , 'False' , 'False' ),
 (  '6b160c30-0ba5-43c7-90ca-7c6881c39b14' , 'CreationTime' , NULL , '0' , '0' , '5' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'True' , 'False' , 'False' , 'False' ),
 (  'f00b5b7a-921f-43c0-9b95-1366f46218dc' , 'CreatorId' , NULL , '0' , '0' , '6' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'False' , 'False' , 'False' , 'False' ),
 (  '09bda9af-3c26-49c4-a1cc-9b682df9f324' , 'LastModifierId' , NULL , '0' , '0' , '6' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'False' , 'False' , 'False' , 'False' ),
 (  'e66b5d7f-5c40-4db4-9525-73b0a9485777' , 'LastModificationTime' , NULL , '0' , '0' , '5' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'False' , 'False' , 'False' , 'False' ),
 (  'd8844d72-efcb-4e44-bf8d-dbcd36105728' , 'OrderNum' , NULL , '0' , '0' , '1' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'True' , 'False' , 'False' , 'False' ),
 (  'ef84daa5-956c-46dd-a303-eae6facf5267' , 'IsDisableCreateDiscuss' , NULL , '0' , '0' , '3' , '259b3308-48c6-42a6-8241-ddc3eceb5385' , 'True' , 'False' , 'False' , 'False' ),
 (  '94a16b3c-0c39-4fdd-bc95-ee47cc30c542' , 'Id' , NULL , '0' , '0' , '6' , '39733147-7443-4bb3-ae0e-445dd9891566' , 'True' , 'True' , 'False' , 'False' ),
 (  '26386eff-0447-4671-aa8d-83d054b9251d' , 'CreationTime' , NULL , '0' , '0' , '5' , '39733147-7443-4bb3-ae0e-445dd9891566' , 'True' , 'False' , 'False' , 'False' ),
 (  '0e7b5ba5-d729-4da2-b70f-48ccac0225f0' , 'LastDepositTime' , NULL , '0' , '0' , '5' , '39733147-7443-4bb3-ae0e-445dd9891566' , 'False' , 'False' , 'False' , 'False' ),
 (  'bc6ee749-e2ce-4faf-b7c4-8d29e4e74d4f' , 'LastDrawTime' , NULL , '0' , '0' , '5' , '39733147-7443-4bb3-ae0e-445dd9891566' , 'False' , 'False' , 'False' , 'False' ),
 (  '9bb48110-1096-4c2a-86d9-407c7dc7ec9c' , 'UserId' , NULL , '0' , '0' , '6' , '39733147-7443-4bb3-ae0e-445dd9891566' , 'True' , 'False' , 'False' , 'False' ),
 (  '8626890b-da81-44fc-8f30-38a0f2af347e' , 'StorageMoney' , NULL , '0' , '0' , '4' , '39733147-7443-4bb3-ae0e-445dd9891566' , 'True' , 'False' , 'False' , 'False' ),
 (  '90df7b55-501c-4143-acfd-25d2e2e8b619' , 'MaxStorageMoney' , NULL , '0' , '0' , '4' , '39733147-7443-4bb3-ae0e-445dd9891566' , 'True' , 'False' , 'False' , 'False' ),
 (  'ca566032-4f83-4217-a683-ff0174dce7cf' , 'FulltermTime' , NULL , '0' , '0' , '5' , '39733147-7443-4bb3-ae0e-445dd9891566' , 'False' , 'False' , 'False' , 'False' ),
 (  '032a97a4-e714-4cc7-8abd-8940c9e711bd' , 'BankCardState' , NULL , '0' , '0' , '0' , '39733147-7443-4bb3-ae0e-445dd9891566' , 'True' , 'False' , 'False' , 'False' ),
 (  '5bbf3dfa-5c59-4825-9023-6e3aac108965' , 'Id' , NULL , '0' , '0' , '6' , '72dea8de-b9ee-469d-baf2-7e923e9250af' , 'True' , 'True' , 'False' , 'False' ),
 (  'a1599161-76b8-442d-8b79-12c981ec2e18' , 'CreationTime' , NULL , '0' , '0' , '5' , '72dea8de-b9ee-469d-baf2-7e923e9250af' , 'True' , 'False' , 'False' , 'False' ),
 (  'e2f11713-3934-4a0f-9fbb-0d1eea6115f2' , 'ComparisonValue' , NULL , '0' , '0' , '4' , '72dea8de-b9ee-469d-baf2-7e923e9250af' , 'True' , 'False' , 'False' , 'False' ),
 (  '6202b028-9ba2-4bb1-9e97-51af6a0191a2' , 'Value' , NULL , '0' , '0' , '4' , '72dea8de-b9ee-469d-baf2-7e923e9250af' , 'True' , 'False' , 'False' , 'False' ),
 (  '314d70f3-7314-470a-8260-05c0050fdf4b' , 'IsFluctuate' , NULL , '0' , '0' , '3' , '72dea8de-b9ee-469d-baf2-7e923e9250af' , 'True' , 'False' , 'False' , 'False' ),
 (  '2e9ca236-fb57-4478-94f3-f37f3a559d46' , 'TenantId' , NULL , '0' , '0' , '6' , '7aecb118-af7b-4612-a2f8-fa25977401fb' , 'False' , 'False' , 'False' , 'False' ),
 (  '9487eb9f-07a7-439c-bd43-9689a28a5e27' , 'AuditLogId' , NULL , '0' , '0' , '6' , '7aecb118-af7b-4612-a2f8-fa25977401fb' , 'True' , 'False' , 'False' , 'False' ),
 (  'e2711fb2-59e3-447f-b21b-d93a7198edba' , 'ServiceName' , NULL , '0' , '0' , '0' , '7aecb118-af7b-4612-a2f8-fa25977401fb' , 'True' , 'False' , 'False' , 'False' ),
 (  '2bc863ff-5e29-4385-879f-e303022a5e40' , 'MethodName' , NULL , '0' , '0' , '0' , '7aecb118-af7b-4612-a2f8-fa25977401fb' , 'True' , 'False' , 'False' , 'False' ),
 (  'df51499b-1905-44ee-b23f-8ed1a2f616ae' , 'Parameters' , NULL , '0' , '0' , '0' , '7aecb118-af7b-4612-a2f8-fa25977401fb' , 'True' , 'False' , 'False' , 'False' ),
 (  '41a11e4e-9d56-40a9-99b1-c0c94b4f95ba' , 'ExecutionTime' , NULL , '0' , '0' , '5' , '7aecb118-af7b-4612-a2f8-fa25977401fb' , 'False' , 'False' , 'False' , 'False' ),
 (  'bbe5de87-d05e-4495-afa1-3906306011e2' , 'ExecutionDuration' , NULL , '0' , '0' , '1' , '7aecb118-af7b-4612-a2f8-fa25977401fb' , 'False' , 'False' , 'False' , 'False' ),
 (  'a6148558-d5fe-4e99-ae7a-a5ae0c8dfdd8' , 'Id' , NULL , '0' , '0' , '6' , '7aecb118-af7b-4612-a2f8-fa25977401fb' , 'True' , 'True' , 'False' , 'False' ),
 (  'ad6d96f6-fa00-487a-877f-453cff2fe81b' , 'Id' , NULL , '0' , '0' , '6' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'True' , 'False' , 'False' ),
 (  '491d6ff7-9cb2-443f-85f3-694a5499664c' , 'ApplicationName' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  '699d2a4b-92bf-4dcf-8948-07f5f9988960' , 'UserId' , NULL , '0' , '0' , '6' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'False' , 'False' , 'False' , 'False' ),
 (  'dc719b3b-8c13-443a-8cf6-7f2858ab368a' , 'UserName' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  '42cce39f-f0e8-4c78-be5b-07ede857469d' , 'TenantName' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  'c260330d-c712-4b54-ac99-79c45c81744b' , 'ImpersonatorUserId' , NULL , '0' , '0' , '6' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'False' , 'False' , 'False' , 'False' ),
 (  '595ecdb9-fb4a-477f-98f7-df7f2351616d' , 'ImpersonatorUserName' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  'e1787752-2975-4c8c-af7b-94a020eff383' , 'ImpersonatorTenantId' , NULL , '0' , '0' , '6' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'False' , 'False' , 'False' , 'False' ),
 (  '911faddf-2f4b-4818-8aba-d435a90dceec' , 'ImpersonatorTenantName' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  '4508e2c1-725d-441a-8ce4-448f66531768' , 'ExecutionTime' , NULL , '0' , '0' , '5' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'False' , 'False' , 'False' , 'False' ),
 (  '37c2b26d-529b-4ed4-93b9-2c64d14c0eac' , 'ExecutionDuration' , NULL , '0' , '0' , '1' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'False' , 'False' , 'False' , 'False' ),
 (  'c61686c7-6522-4e9a-b733-92011ca20fbb' , 'ClientIpAddress' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  '39e7b1fb-27cd-4dc8-ad12-4bd211c2979a' , 'ClientName' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  'ecfa74db-a1e6-473a-bf0d-fab459caad8c' , 'ClientId' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  '751d4d94-e006-4d4e-b21e-b4d75a4483a8' , 'CorrelationId' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  '9e5f1dfd-f028-4d13-ad0c-2905956497bb' , 'BrowserInfo' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  '038f3be2-4c08-4843-8ca2-aa3d66595fbf' , 'HttpMethod' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  'f6de9d95-c5cc-40ba-8989-a4b1843bfdc9' , 'Url' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  '1f922565-8c96-4e7d-b2fa-e01efc6dedac' , 'Exceptions' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  '1869bf06-9532-4f69-8783-5a80430aa6e2' , 'Comments' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  'd4a63c2f-2de8-4fd3-97c6-aaa7fdf17e0c' , 'HttpStatusCode' , NULL , '0' , '0' , '1' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'False' , 'False' , 'False' , 'False' ),
 (  '73748fd9-453d-45b4-883c-8a9d27628c82' , 'TenantId' , NULL , '0' , '0' , '6' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'False' , 'False' , 'False' , 'False' ),
 (  '60238970-5817-49a4-8573-005d9bfe1f3c' , 'EntityChanges' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  'e4a897c8-299d-4cf9-95d4-39d947981178' , 'Actions' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  'b6c83e13-2f35-4548-8d6e-d18cce0634bf' , 'ExtraProperties' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  '0efe1c88-7d29-4cfd-b5da-9bdbdf923b16' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , '8430f8b6-ee86-436c-aa2d-246d09416cb0' , 'True' , 'False' , 'False' , 'False' ),
 (  'a8f3514c-c702-4a29-8651-fbe6900cd0c5' , 'Id' , NULL , '0' , '0' , '6' , 'c2125ebe-10fb-40af-be2f-77502c9abe3c' , 'True' , 'True' , 'False' , 'False' ),
 (  '6854d124-d4aa-4641-86d8-d68579022f68' , 'AuditLogId' , NULL , '0' , '0' , '6' , 'c2125ebe-10fb-40af-be2f-77502c9abe3c' , 'True' , 'False' , 'False' , 'False' ),
 (  '2d0ecbf1-7044-431d-a605-7262557474b5' , 'TenantId' , NULL , '0' , '0' , '6' , 'c2125ebe-10fb-40af-be2f-77502c9abe3c' , 'False' , 'False' , 'False' , 'False' ),
 (  '5d599737-2557-490e-b786-ea1ca6952416' , 'ChangeTime' , NULL , '0' , '0' , '5' , 'c2125ebe-10fb-40af-be2f-77502c9abe3c' , 'False' , 'False' , 'False' , 'False' ),
 (  '78ff61e0-24bd-44f4-9e3e-204b058f6bdd' , 'ChangeType' , NULL , '0' , '0' , '0' , 'c2125ebe-10fb-40af-be2f-77502c9abe3c' , 'False' , 'False' , 'False' , 'False' ),
 (  'e2c99237-4d90-4e78-8f0c-28ddfe41b1d3' , 'EntityTenantId' , NULL , '0' , '0' , '6' , 'c2125ebe-10fb-40af-be2f-77502c9abe3c' , 'False' , 'False' , 'False' , 'False' ),
 (  'bcbf9527-a2fb-4f0a-ba8d-436e7cc6dbf4' , 'EntityId' , NULL , '0' , '0' , '0' , 'c2125ebe-10fb-40af-be2f-77502c9abe3c' , 'True' , 'False' , 'False' , 'False' ),
 (  'a8486d19-389a-4bc7-bcec-4ce7654e3696' , 'EntityTypeFullName' , NULL , '0' , '0' , '0' , 'c2125ebe-10fb-40af-be2f-77502c9abe3c' , 'True' , 'False' , 'False' , 'False' ),
 (  '47c10ade-d3d5-489e-b9e2-d992339920b2' , 'PropertyChanges' , NULL , '0' , '0' , '0' , 'c2125ebe-10fb-40af-be2f-77502c9abe3c' , 'True' , 'False' , 'False' , 'False' ),
 (  '8027d3b2-dfa6-4ef7-abb9-ab125412562b' , 'Id' , NULL , '0' , '0' , '6' , '5eb23136-6e78-435c-8f2f-ffd3d7588523' , 'True' , 'True' , 'False' , 'False' ),
 (  '8a3942de-93a8-4616-a09b-e82511d98d01' , 'TenantId' , NULL , '0' , '0' , '6' , '5eb23136-6e78-435c-8f2f-ffd3d7588523' , 'False' , 'False' , 'False' , 'False' ),
 (  '8c966170-7777-4988-b424-f5c630b4bafa' , 'EntityChangeId' , NULL , '0' , '0' , '6' , '5eb23136-6e78-435c-8f2f-ffd3d7588523' , 'False' , 'False' , 'False' , 'False' ),
 (  '66d8e5bc-cf5c-4307-b454-2fe309912a4c' , 'NewValue' , NULL , '0' , '0' , '0' , '5eb23136-6e78-435c-8f2f-ffd3d7588523' , 'True' , 'False' , 'False' , 'False' ),
 (  'c54edcf9-351d-41cf-90fc-61de3fb28a38' , 'OriginalValue' , NULL , '0' , '0' , '0' , '5eb23136-6e78-435c-8f2f-ffd3d7588523' , 'True' , 'False' , 'False' , 'False' ),
 (  'e93ec73f-5f7c-43df-8d1f-c99dd42b6e04' , 'PropertyName' , NULL , '0' , '0' , '0' , '5eb23136-6e78-435c-8f2f-ffd3d7588523' , 'True' , 'False' , 'False' , 'False' ),
 (  '8f82b427-a7f5-403e-8ac1-576de58cb9ad' , 'PropertyTypeFullName' , NULL , '0' , '0' , '0' , '5eb23136-6e78-435c-8f2f-ffd3d7588523' , 'True' , 'False' , 'False' , 'False' ),
 (  '3226b90b-f74b-4b7a-85cd-75ac571a4d70' , 'Id' , NULL , '0' , '0' , '6' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'True' , 'False' , 'False' ),
 (  '891a8007-56db-4960-b65d-54576bedcdb7' , 'project' , NULL , '0' , '0' , '0' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  '5ac5059a-7748-42b3-ab00-2bfa80e6c615' , 'status' , NULL , '0' , '0' , '0' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  '25f45886-6d5c-43b9-9f85-cf087e89d37d' , 'category' , NULL , '0' , '0' , '0' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  'db353b02-27cc-4dae-8f81-6baa530ed1a9' , 'impact' , NULL , '0' , '0' , '0' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  'f0680075-4f38-4525-a192-b956dd347bb9' , 'priority' , NULL , '0' , '0' , '0' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  '8e066326-5930-474f-978d-66e56def51fb' , 'title' , NULL , '0' , '0' , '0' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  '19e09959-97b2-4571-ab5d-1a5c0da1ca58' , 'description' , NULL , '0' , '0' , '0' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  '1f33866d-cddb-4d34-9069-57ed8aa0d9f2' , 'solve_user' , NULL , '0' , '0' , '0' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  'aa44c38a-2462-4620-820c-5ce8290d6099' , 'CreationTime' , NULL , '0' , '0' , '5' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  '004b8d9e-3784-4b82-8d60-34d6e55dbcee' , 'ExtraProperties' , NULL , '0' , '0' , '0' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  '4eaa83c9-7e55-48be-949f-fe72930605d5' , 'LastModificationTime' , NULL , '0' , '0' , '5' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'False' , 'False' , 'False' , 'False' ),
 (  '540426ec-08d7-47a6-877c-75ca0816b913' , 'LastModifierId' , NULL , '0' , '0' , '6' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'False' , 'False' , 'False' , 'False' ),
 (  '5850c867-7066-43b8-a3c1-bda903437fb2' , 'CreatorId' , NULL , '0' , '0' , '6' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'False' , 'False' , 'False' , 'False' ),
 (  'd5230d32-e2c4-4871-8161-979eba5debab' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , 'dee13938-14f1-4a9b-820e-536d57fe8808' , 'True' , 'False' , 'False' , 'False' ),
 (  'bc075bbc-4c1a-43b7-b799-99807017ef07' , 'Id' , NULL , '0' , '0' , '6' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'True' , 'False' , 'False' ),
 (  '6476b49e-4d21-48b1-a743-187b6bf7b239' , 'Name' , NULL , '0' , '0' , '0' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'False' , 'False' , 'False' ),
 (  '9d3dad0d-f3fd-494b-8e95-ae11655150a1' , 'Description' , NULL , '0' , '0' , '0' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'False' , 'False' , 'False' ),
 (  '85e9631a-d61b-492e-97df-21ac5c6aeb43' , 'OrderNum' , NULL , '0' , '0' , '1' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'False' , 'False' , 'False' ),
 (  '1c8a2f2c-9fba-44cc-aaf3-3e0d404654b0' , 'Length' , NULL , '0' , '0' , '1' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'False' , 'False' , 'False' ),
 (  '3ea704a2-e0d6-4e7d-b5a2-aecc2c74becb' , 'FieldType' , NULL , '0' , '0' , '0' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'False' , 'False' , 'False' ),
 (  '977534f7-09ab-4dd5-be73-d4123e6a5aea' , 'TableId' , NULL , '0' , '0' , '6' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'False' , 'False' , 'False' )
;
INSERT INTO "yifield"  ("id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic") VALUES 
 (  'b1ca4802-e702-4c1b-8b1e-eed1606173a3' , 'IsRequired' , NULL , '0' , '0' , '3' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'False' , 'False' , 'False' ),
 (  'cd440a04-9a48-4ecd-8d8f-2983fb519b2b' , 'IsKey' , NULL , '0' , '0' , '3' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'False' , 'False' , 'False' ),
 (  'f4ee7cf3-5431-425f-b7c1-b957a573fec4' , 'IsAutoAdd' , NULL , '0' , '0' , '3' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'False' , 'False' , 'False' ),
 (  'a7bd9c88-6b82-4541-bc9d-9411caa049ef' , 'IsPublic' , NULL , '0' , '0' , '3' , 'f8058a26-e67c-4ac0-a7b4-6832cd0d2586' , 'True' , 'False' , 'False' , 'False' ),
 (  '9c292907-c996-490e-ba61-de2b2e4d0305' , 'Id' , NULL , '0' , '0' , '6' , 'dc3b064c-e3e7-42d8-bf6d-fefd9562fc75' , 'True' , 'True' , 'False' , 'False' ),
 (  '05025922-c1b2-45f6-8cb4-c9df2d5f8c1e' , 'Name' , NULL , '0' , '0' , '0' , 'dc3b064c-e3e7-42d8-bf6d-fefd9562fc75' , 'True' , 'False' , 'False' , 'False' ),
 (  '20938880-aaa3-46e1-a947-7d9b1431b6bd' , 'Description' , NULL , '0' , '0' , '0' , 'dc3b064c-e3e7-42d8-bf6d-fefd9562fc75' , 'True' , 'False' , 'False' , 'False' ),
 (  '83f1f091-e2fc-4b03-b138-c860864d26e5' , 'Fields' , NULL , '0' , '0' , '0' , 'dc3b064c-e3e7-42d8-bf6d-fefd9562fc75' , 'True' , 'False' , 'False' , 'False' ),
 (  '6958994d-5683-4454-bf60-92b9ad21a33c' , 'ExtraProperties' , NULL , '0' , '0' , '0' , 'dc3b064c-e3e7-42d8-bf6d-fefd9562fc75' , 'True' , 'False' , 'False' , 'False' ),
 (  'd98755d9-0004-4024-a3b0-e42f8619ecf0' , 'ConcurrencyStamp' , NULL , '0' , '0' , '0' , 'dc3b064c-e3e7-42d8-bf6d-fefd9562fc75' , 'True' , 'False' , 'False' , 'False' ),
 (  '59e1f599-0353-40a3-a107-60d4ff1f7ca8' , 'Id' , NULL , '0' , '0' , '6' , 'cb5ae14b-4198-48cc-8d28-fd3e3ca75d94' , 'True' , 'True' , 'False' , 'False' ),
 (  'a9cb9021-c23b-40b2-9550-ed7760643fc1' , 'TemplateStr' , NULL , '0' , '0' , '0' , 'cb5ae14b-4198-48cc-8d28-fd3e3ca75d94' , 'True' , 'False' , 'False' , 'False' ),
 (  '7e112e38-aac1-4715-ab64-81a90f79058d' , 'BuildPath' , NULL , '0' , '0' , '0' , 'cb5ae14b-4198-48cc-8d28-fd3e3ca75d94' , 'True' , 'False' , 'False' , 'False' ),
 (  'bfe19c94-8c3c-4bee-8ce4-556f111b5ad4' , 'Name' , NULL , '0' , '0' , '0' , 'cb5ae14b-4198-48cc-8d28-fd3e3ca75d94' , 'True' , 'False' , 'False' , 'False' ),
 (  '08b0a0f1-408f-4a05-8432-c7541d7accf5' , 'Remarks' , NULL , '0' , '0' , '0' , 'cb5ae14b-4198-48cc-8d28-fd3e3ca75d94' , 'True' , 'False' , 'False' , 'False' )
;

===============================

2024-04-09 16:41:08.070 +08:00 [DBG] =========Yi-SQL耗时10.6033毫秒=====
2024-04-09 16:41:08.073 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application) in 246.0186ms
2024-04-09 16:41:08.073 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.CodeGenService.PostCodeBuildWebAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:08.100 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:08.100 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:08.101 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:08.102 +08:00 [DBG] =========Yi-SQL耗时1.2966毫秒=====
2024-04-09 16:41:08.104 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 16:41:08.105 +08:00 [DBG] =========Yi-SQL耗时0.7696毫秒=====
2024-04-09 16:41:08.105 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:08.111 +08:00 [DBG] =========Yi-SQL耗时5.2681毫秒=====
2024-04-09 16:41:08.112 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:08.112 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 12.1982ms
2024-04-09 16:41:08.112 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:10.669 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:10.669 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:10.670 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:10.671 +08:00 [DBG] =========Yi-SQL耗时0.7613毫秒=====
2024-04-09 16:41:10.673 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 10
===============================

2024-04-09 16:41:10.674 +08:00 [DBG] =========Yi-SQL耗时1.2284毫秒=====
2024-04-09 16:41:10.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:10.676 +08:00 [DBG] =========Yi-SQL耗时0.8216毫秒=====
2024-04-09 16:41:10.679 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:10.708 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 38.8958ms
2024-04-09 16:41:10.708 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:12.727 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:12.727 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:12.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:12.728 +08:00 [DBG] =========Yi-SQL耗时0.6003毫秒=====
2024-04-09 16:41:12.730 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 20
===============================

2024-04-09 16:41:12.732 +08:00 [DBG] =========Yi-SQL耗时1.112毫秒=====
2024-04-09 16:41:12.732 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:12.732 +08:00 [DBG] =========Yi-SQL耗时0.449毫秒=====
2024-04-09 16:41:12.734 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:12.734 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.9817ms
2024-04-09 16:41:12.734 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:14.950 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:14.950 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:14.951 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:14.951 +08:00 [DBG] =========Yi-SQL耗时0.5833毫秒=====
2024-04-09 16:41:14.955 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 30
===============================

2024-04-09 16:41:14.956 +08:00 [DBG] =========Yi-SQL耗时1.1451毫秒=====
2024-04-09 16:41:14.957 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:14.958 +08:00 [DBG] =========Yi-SQL耗时0.7246毫秒=====
2024-04-09 16:41:14.968 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:14.968 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 18.1038ms
2024-04-09 16:41:14.968 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:18.188 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:18.190 +08:00 [INF] Route matched with {action = "Get", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto] GetAsync(System.Guid) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:18.256 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"  WHERE "id" = N'dee13938-14f1-4a9b-820e-536d57fe8808'   
===============================

2024-04-09 16:41:18.257 +08:00 [DBG] =========Yi-SQL耗时1.0204毫秒=====
2024-04-09 16:41:18.265 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto'.
2024-04-09 16:41:18.265 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetAsync (Yi.Framework.CodeGen.Application) in 75.4286ms
2024-04-09 16:41:18.265 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:20.909 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:20.909 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:20.910 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:20.911 +08:00 [DBG] =========Yi-SQL耗时0.6106毫秒=====
2024-04-09 16:41:20.914 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 40
===============================

2024-04-09 16:41:20.915 +08:00 [DBG] =========Yi-SQL耗时1.1611毫秒=====
2024-04-09 16:41:20.916 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:20.916 +08:00 [DBG] =========Yi-SQL耗时0.6313毫秒=====
2024-04-09 16:41:20.917 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:20.917 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 8.2102ms
2024-04-09 16:41:20.917 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:22.574 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:22.574 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:22.576 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:22.577 +08:00 [DBG] =========Yi-SQL耗时0.8747毫秒=====
2024-04-09 16:41:22.580 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 30
===============================

2024-04-09 16:41:22.580 +08:00 [DBG] =========Yi-SQL耗时0.5597毫秒=====
2024-04-09 16:41:22.581 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:22.581 +08:00 [DBG] =========Yi-SQL耗时0.4558毫秒=====
2024-04-09 16:41:22.582 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:22.583 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 8.5182ms
2024-04-09 16:41:22.583 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:53.037 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:53.037 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:53.037 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:53.037 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:53.037 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:53.037 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:53.038 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:53.038 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.5758ms
2024-04-09 16:41:53.038 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:53.038 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-09 16:41:53.040 +08:00 [DBG] =========Yi-SQL耗时1.6681毫秒=====
2024-04-09 16:41:53.041 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:53.042 +08:00 [DBG] =========Yi-SQL耗时1.0183毫秒=====
2024-04-09 16:41:53.042 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-09 16:41:53.048 +08:00 [DBG] =========Yi-SQL耗时5.3131毫秒=====
2024-04-09 16:41:53.048 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 16:41:53.049 +08:00 [DBG] =========Yi-SQL耗时0.9727毫秒=====
2024-04-09 16:41:53.050 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:41:53.051 +08:00 [DBG] =========Yi-SQL耗时0.9724毫秒=====
2024-04-09 16:41:53.052 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:53.053 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 15.5826ms
2024-04-09 16:41:53.053 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:53.054 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:53.055 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 17.4524ms
2024-04-09 16:41:53.055 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:57.502 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:57.502 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:57.503 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-09 16:41:57.504 +08:00 [DBG] =========Yi-SQL耗时0.6439毫秒=====
2024-04-09 16:41:57.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 410
===============================

2024-04-09 16:41:57.507 +08:00 [DBG] =========Yi-SQL耗时0.8777毫秒=====
2024-04-09 16:41:57.508 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:57.508 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 5.6753ms
2024-04-09 16:41:57.508 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:59.528 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:41:59.528 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:41:59.530 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-09 16:41:59.531 +08:00 [DBG] =========Yi-SQL耗时1.5048毫秒=====
2024-04-09 16:41:59.533 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 400
===============================

2024-04-09 16:41:59.534 +08:00 [DBG] =========Yi-SQL耗时0.5706毫秒=====
2024-04-09 16:41:59.535 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:41:59.535 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.9494ms
2024-04-09 16:41:59.535 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:05.631 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:05.631 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:05.634 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("name" like concat('%',N'project','%'))  
===============================

2024-04-09 16:42:05.637 +08:00 [DBG] =========Yi-SQL耗时2.2019毫秒=====
2024-04-09 16:42:05.638 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("name" like concat('%',N'project','%'))    LIMIT 10 offset 0
===============================

2024-04-09 16:42:05.640 +08:00 [DBG] =========Yi-SQL耗时1.4212毫秒=====
2024-04-09 16:42:05.641 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:05.641 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 9.3593ms
2024-04-09 16:42:05.641 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:05.745 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 16:42:05.752 +08:00 [INF] Executed endpoint '/hub/main'
2024-04-09 16:42:06.351 +08:00 [INF] CORS policy execution successful.
2024-04-09 16:42:06.356 +08:00 [INF] Executing endpoint '/hub/main/negotiate'
2024-04-09 16:42:06.361 +08:00 [INF] Executed endpoint '/hub/main/negotiate'
2024-04-09 16:42:06.369 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 16:42:06.370 +08:00 [INF] Route matched with {action = "Get", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto] Get() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 16:42:06.402 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.Rbac.Domain.Shared.Dtos.UserRoleMenuDto'.
2024-04-09 16:42:06.403 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application) in 32.921ms
2024-04-09 16:42:06.403 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.Get (Yi.Framework.Rbac.Application)'
2024-04-09 16:42:06.500 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 16:42:06.500 +08:00 [INF] Route matched with {action = "GetVue3Router", controller = "Account", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto]] GetVue3Router() on controller Yi.Framework.Rbac.Application.Services.AccountService (Yi.Framework.Rbac.Application).
2024-04-09 16:42:06.501 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE "id" = N'e94b7363-80d1-10a3-eb2c-3a119a976151'    AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:42:06.504 +08:00 [DBG] =========Yi-SQL耗时2.3256毫秒=====
2024-04-09 16:42:06.505 +08:00 [INF] CORS policy execution successful.
2024-04-09 16:42:06.506 +08:00 [INF] Executing endpoint '/hub/main'
2024-04-09 16:42:06.506 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "userid" as aid,"roleid" as bid FROM "userrole"  WHERE   "userid" = 'e94b7363-80d1-10a3-eb2c-3a119a976151'    
===============================

2024-04-09 16:42:06.507 +08:00 [DBG] =========Yi-SQL耗时1.2551毫秒=====
2024-04-09 16:42:06.509 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","isdeleted" AS "isdeleted","creationtime" AS "creationtime","creatorid" AS "creatorid","lastmodifierid" AS "lastmodifierid","lastmodificationtime" AS "lastmodificationtime","ordernum" AS "ordernum","rolename" AS "rolename","rolecode" AS "rolecode","remark" AS "remark","datascope" AS "datascope","state" AS "state" FROM "role"  WHERE  ( "isdeleted" = 0 )   AND   "id" IN (null)     AND  ( "isdeleted" = 0 )  
===============================

2024-04-09 16:42:06.511 +08:00 [DBG] =========Yi-SQL耗时2.0345毫秒=====
2024-04-09 16:42:06.512 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:42:06.514 +08:00 [DBG] =========Yi-SQL耗时1.4361毫秒=====
2024-04-09 16:42:06.515 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Domain.Shared.Dtos.Vue3RouterDto, Yi.Framework.Rbac.Domain.Shared, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:06.516 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application) in 15.8671ms
2024-04-09 16:42:06.516 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.AccountService.GetVue3Router (Yi.Framework.Rbac.Application)'
2024-04-09 16:42:06.573 +08:00 [INF] 2024/4/9 16:42:06：cc,tlhJzH5XswZ031ZsdxKZBw连接服务端success，当前已连接0个
2024-04-09 16:42:06.758 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:42:06.759 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:06.759 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:06.759 +08:00 [INF] Route matched with {action = "GetFieldTypeEnum", controller = "Field", area = ""}. Executing controller action with signature System.Object GetFieldTypeEnum() on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:06.759 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 16:42:06.759 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:06.759 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[<>f__AnonymousType0`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Yi.Framework.CodeGen.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:06.760 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application) in 0.7951ms
2024-04-09 16:42:06.760 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetFieldTypeEnum (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:06.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-09 16:42:06.761 +08:00 [DBG] =========Yi-SQL耗时1.1457毫秒=====
2024-04-09 16:42:06.762 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:06.763 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:06.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_yes_no' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:42:06.764 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-09 16:42:06.765 +08:00 [DBG] =========Yi-SQL耗时1.1769毫秒=====
2024-04-09 16:42:06.765 +08:00 [DBG] =========Yi-SQL耗时2.112毫秒=====
2024-04-09 16:42:06.767 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:42:06.768 +08:00 [DBG] =========Yi-SQL耗时1.444毫秒=====
2024-04-09 16:42:06.770 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 16:42:06.771 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:06.771 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 12.4247ms
2024-04-09 16:42:06.771 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:42:06.772 +08:00 [DBG] =========Yi-SQL耗时1.3579毫秒=====
2024-04-09 16:42:06.773 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:06.774 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:42:06.774 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 14.7698ms
2024-04-09 16:42:06.774 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:06.775 +08:00 [DBG] =========Yi-SQL耗时1.2578毫秒=====
2024-04-09 16:42:06.778 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:06.779 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 15.9801ms
2024-04-09 16:42:06.779 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:10.070 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:10.070 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:10.071 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  
===============================

2024-04-09 16:42:10.072 +08:00 [DBG] =========Yi-SQL耗时0.8246毫秒=====
2024-04-09 16:42:10.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"     LIMIT 10 offset 0
===============================

2024-04-09 16:42:10.076 +08:00 [DBG] =========Yi-SQL耗时1.2184毫秒=====
2024-04-09 16:42:10.078 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:10.078 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.8473ms
2024-04-09 16:42:10.078 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:14.269 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:14.270 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:14.271 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("name" like concat('%',N'project','%'))  
===============================

2024-04-09 16:42:14.272 +08:00 [DBG] =========Yi-SQL耗时1.1028毫秒=====
2024-04-09 16:42:14.276 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("name" like concat('%',N'project','%'))    LIMIT 10 offset 0
===============================

2024-04-09 16:42:14.277 +08:00 [DBG] =========Yi-SQL耗时0.9816毫秒=====
2024-04-09 16:42:14.278 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:14.278 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 8.6584ms
2024-04-09 16:42:14.278 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:20.320 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:20.320 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:20.327 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')   AND  ("name" like concat('%',N'project','%'))  
===============================

2024-04-09 16:42:20.328 +08:00 [DBG] =========Yi-SQL耗时0.9998毫秒=====
2024-04-09 16:42:20.331 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')   AND  ("name" like concat('%',N'project','%'))    LIMIT 10 offset 0
===============================

2024-04-09 16:42:20.331 +08:00 [DBG] =========Yi-SQL耗时0.5979毫秒=====
2024-04-09 16:42:20.332 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:20.332 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 11.9172ms
2024-04-09 16:42:20.332 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:23.670 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:23.670 +08:00 [INF] Route matched with {action = "GetList", controller = "Field", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldGetListInput) on controller Yi.Framework.CodeGen.Application.Services.FieldService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:23.672 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yifield"  WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')  
===============================

2024-04-09 16:42:23.673 +08:00 [DBG] =========Yi-SQL耗时0.8478毫秒=====
2024-04-09 16:42:23.675 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","ordernum","length","fieldtype","tableid","isrequired","iskey","isautoadd","ispublic" FROM "yifield"   WHERE  ("tableid" = N'5a34c51c-460c-41b5-bc0c-fe9ab8285093')    LIMIT 10 offset 0
===============================

2024-04-09 16:42:23.676 +08:00 [DBG] =========Yi-SQL耗时1.4434毫秒=====
2024-04-09 16:42:23.678 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Field.FieldDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:23.678 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application) in 7.7712ms
2024-04-09 16:42:23.678 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.FieldService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:37.546 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:37.546 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:42:37.546 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 16:42:37.546 +08:00 [INF] Route matched with {action = "GetList", controller = "Template", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TemplateService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:37.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_normal_disable' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:42:37.547 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitemplate"  
===============================

2024-04-09 16:42:37.548 +08:00 [DBG] =========Yi-SQL耗时0.7274毫秒=====
2024-04-09 16:42:37.549 +08:00 [DBG] =========Yi-SQL耗时1.0328毫秒=====
2024-04-09 16:42:37.550 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","templatestr","buildpath","name","remarks" FROM "yitemplate"     LIMIT 10 offset 0
===============================

2024-04-09 16:42:37.551 +08:00 [DBG] =========Yi-SQL耗时0.7097毫秒=====
2024-04-09 16:42:37.551 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:37.552 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 6.1468ms
2024-04-09 16:42:37.552 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:42:37.554 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:37.554 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application) in 8.4797ms
2024-04-09 16:42:37.554 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:40.175 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:40.176 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:40.177 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:42:40.178 +08:00 [DBG] =========Yi-SQL耗时0.915毫秒=====
2024-04-09 16:42:40.180 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 0
===============================

2024-04-09 16:42:40.181 +08:00 [DBG] =========Yi-SQL耗时0.7753毫秒=====
2024-04-09 16:42:40.181 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:42:40.182 +08:00 [DBG] =========Yi-SQL耗时0.7181毫秒=====
2024-04-09 16:42:40.185 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:40.185 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 9.0867ms
2024-04-09 16:42:40.185 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:57.900 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:42:57.900 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:42:57.903 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:42:57.905 +08:00 [DBG] =========Yi-SQL耗时1.8268毫秒=====
2024-04-09 16:42:57.908 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 30
===============================

2024-04-09 16:42:57.909 +08:00 [DBG] =========Yi-SQL耗时0.7992毫秒=====
2024-04-09 16:42:57.909 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:42:57.910 +08:00 [DBG] =========Yi-SQL耗时0.6971毫秒=====
2024-04-09 16:42:57.913 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:42:57.913 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 12.9349ms
2024-04-09 16:42:57.913 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:00.346 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:00.347 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:43:00.349 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:00.351 +08:00 [DBG] =========Yi-SQL耗时1.447毫秒=====
2024-04-09 16:43:00.353 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 20
===============================

2024-04-09 16:43:00.354 +08:00 [DBG] =========Yi-SQL耗时0.7151毫秒=====
2024-04-09 16:43:00.354 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:00.356 +08:00 [DBG] =========Yi-SQL耗时1.1023毫秒=====
2024-04-09 16:43:00.358 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:43:00.358 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 11.6958ms
2024-04-09 16:43:00.358 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:02.791 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:02.793 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:43:02.795 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:02.796 +08:00 [DBG] =========Yi-SQL耗时0.957毫秒=====
2024-04-09 16:43:02.798 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 10
===============================

2024-04-09 16:43:02.799 +08:00 [DBG] =========Yi-SQL耗时0.7738毫秒=====
2024-04-09 16:43:02.800 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:02.800 +08:00 [DBG] =========Yi-SQL耗时0.5245毫秒=====
2024-04-09 16:43:02.801 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:43:02.802 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 9.0619ms
2024-04-09 16:43:02.802 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:04.690 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:04.690 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:43:04.691 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:04.692 +08:00 [DBG] =========Yi-SQL耗时1.1577毫秒=====
2024-04-09 16:43:04.707 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 30
===============================

2024-04-09 16:43:04.708 +08:00 [DBG] =========Yi-SQL耗时0.814毫秒=====
2024-04-09 16:43:04.709 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:04.710 +08:00 [DBG] =========Yi-SQL耗时1.3847毫秒=====
2024-04-09 16:43:04.714 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:43:04.714 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 24.1835ms
2024-04-09 16:43:04.714 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:07.247 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:07.247 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:43:07.248 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:07.249 +08:00 [DBG] =========Yi-SQL耗时0.7443毫秒=====
2024-04-09 16:43:07.251 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 40
===============================

2024-04-09 16:43:07.252 +08:00 [DBG] =========Yi-SQL耗时0.7935毫秒=====
2024-04-09 16:43:07.253 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:07.253 +08:00 [DBG] =========Yi-SQL耗时0.4754毫秒=====
2024-04-09 16:43:07.254 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:43:07.254 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.8436ms
2024-04-09 16:43:07.254 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:09.000 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:09.000 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:43:09.001 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:09.002 +08:00 [DBG] =========Yi-SQL耗时0.6861毫秒=====
2024-04-09 16:43:09.003 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 20
===============================

2024-04-09 16:43:09.004 +08:00 [DBG] =========Yi-SQL耗时0.8687毫秒=====
2024-04-09 16:43:09.005 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:09.006 +08:00 [DBG] =========Yi-SQL耗时0.4702毫秒=====
2024-04-09 16:43:09.007 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:43:09.007 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 6.7162ms
2024-04-09 16:43:09.007 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:10.896 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:10.896 +08:00 [INF] Route matched with {action = "GetList", controller = "Table", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TableService (Yi.Framework.CodeGen.Application).
2024-04-09 16:43:10.899 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:10.900 +08:00 [DBG] =========Yi-SQL耗时1.3579毫秒=====
2024-04-09 16:43:10.902 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"   WHERE ( 1 = 1 )    LIMIT 10 offset 30
===============================

2024-04-09 16:43:10.904 +08:00 [DBG] =========Yi-SQL耗时1.2817毫秒=====
2024-04-09 16:43:10.904 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitable"  WHERE ( 1 = 1 )  
===============================

2024-04-09 16:43:10.905 +08:00 [DBG] =========Yi-SQL耗时0.5159毫秒=====
2024-04-09 16:43:10.906 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Table.TableDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:43:10.906 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application) in 9.751ms
2024-04-09 16:43:10.906 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TableService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:15.016 +08:00 [INF] CORS policy execution successful.
2024-04-09 16:43:15.017 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.CodeGenService.PostWebBuildCodeAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:15.022 +08:00 [INF] Route matched with {action = "PostWebBuildCode", controller = "CodeGen", area = ""}. Executing controller action with signature System.Threading.Tasks.Task PostWebBuildCodeAsync(System.Collections.Generic.List`1[System.Guid]) on controller Yi.Framework.CodeGen.Application.Services.CodeGenService (Yi.Framework.CodeGen.Application).
2024-04-09 16:43:15.076 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","description","concurrencystamp" FROM "yitable"  WHERE  ("id" IN ('dee13938-14f1-4a9b-820e-536d57fe8808'))  
===============================

2024-04-09 16:43:15.077 +08:00 [DBG] =========Yi-SQL耗时0.8461毫秒=====
2024-04-09 16:43:15.088 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id" AS "id","name" AS "name","description" AS "description","ordernum" AS "ordernum","length" AS "length","fieldtype" AS "fieldtype","tableid" AS "tableid","isrequired" AS "isrequired","iskey" AS "iskey","isautoadd" AS "isautoadd","ispublic" AS "ispublic" FROM "yifield"  WHERE   "tableid" = 'dee13938-14f1-4a9b-820e-536d57fe8808'    
===============================

2024-04-09 16:43:15.088 +08:00 [DBG] =========Yi-SQL耗时0.6595毫秒=====
2024-04-09 16:43:15.093 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","templatestr","buildpath","name","remarks" FROM "yitemplate"  
===============================

2024-04-09 16:43:15.094 +08:00 [DBG] =========Yi-SQL耗时0.7859毫秒=====
2024-04-09 16:43:15.112 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.CodeGenService.PostWebBuildCodeAsync (Yi.Framework.CodeGen.Application) in 90.2604ms
2024-04-09 16:43:15.112 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.CodeGenService.PostWebBuildCodeAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:30.875 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:30.875 +08:00 [INF] Route matched with {action = "GetList", controller = "Template", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto]] GetListAsync(Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateGetListInput) on controller Yi.Framework.CodeGen.Application.Services.TemplateService (Yi.Framework.CodeGen.Application).
2024-04-09 16:43:30.884 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitemplate"  
===============================

2024-04-09 16:43:30.885 +08:00 [DBG] =========Yi-SQL耗时0.772毫秒=====
2024-04-09 16:43:30.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","templatestr","buildpath","name","remarks" FROM "yitemplate"     LIMIT 10 offset 0
===============================

2024-04-09 16:43:30.888 +08:00 [DBG] =========Yi-SQL耗时0.8117毫秒=====
2024-04-09 16:43:30.891 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto, Yi.Framework.CodeGen.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:43:30.891 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application) in 15.8298ms
2024-04-09 16:43:30.891 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetListAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:34.190 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:34.192 +08:00 [INF] Route matched with {action = "Get", controller = "Template", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto] GetAsync(System.Guid) on controller Yi.Framework.CodeGen.Application.Services.TemplateService (Yi.Framework.CodeGen.Application).
2024-04-09 16:43:34.199 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","templatestr","buildpath","name","remarks" FROM "yitemplate"  WHERE "id" = N'7c83e923-9346-88bf-1f8c-3a11a050aef7'   
===============================

2024-04-09 16:43:34.200 +08:00 [DBG] =========Yi-SQL耗时0.7141毫秒=====
2024-04-09 16:43:34.204 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto'.
2024-04-09 16:43:34.204 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TemplateService.GetAsync (Yi.Framework.CodeGen.Application) in 11.5307ms
2024-04-09 16:43:34.204 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:53.710 +08:00 [INF] Executing endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:43:53.710 +08:00 [INF] Route matched with {action = "Get", controller = "Template", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto] GetAsync(System.Guid) on controller Yi.Framework.CodeGen.Application.Services.TemplateService (Yi.Framework.CodeGen.Application).
2024-04-09 16:43:53.712 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","templatestr","buildpath","name","remarks" FROM "yitemplate"  WHERE "id" = N'c0d5ea70-8d5f-396c-7be1-3a11a050aefd'   
===============================

2024-04-09 16:43:53.713 +08:00 [DBG] =========Yi-SQL耗时1.0715毫秒=====
2024-04-09 16:43:53.727 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Framework.CodeGen.Application.Contracts.Dtos.Template.TemplateDto'.
2024-04-09 16:43:53.728 +08:00 [INF] Executed action Yi.Framework.CodeGen.Application.Services.TemplateService.GetAsync (Yi.Framework.CodeGen.Application) in 17.3613ms
2024-04-09 16:43:53.728 +08:00 [INF] Executed endpoint 'Yi.Framework.CodeGen.Application.Services.TemplateService.GetAsync (Yi.Framework.CodeGen.Application)'
2024-04-09 16:48:47.021 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:48:47.022 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:48:47.024 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 16:48:47.086 +08:00 [DBG] =========Yi-SQL耗时61.6212毫秒=====
2024-04-09 16:48:47.092 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 16:48:47.092 +08:00 [DBG] =========Yi-SQL耗时0.5764毫秒=====
2024-04-09 16:48:47.093 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:48:47.094 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 71.8919ms
2024-04-09 16:48:47.094 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:50:03.739 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 16:50:03.741 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 16:50:03.754 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:50:03.756 +08:00 [DBG] =========Yi-SQL耗时1.9398毫秒=====
2024-04-09 16:50:03.758 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:50:03.758 +08:00 [DBG] =========Yi-SQL耗时0.4316毫秒=====
2024-04-09 16:50:03.759 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:50:03.759 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 17.8021ms
2024-04-09 16:50:03.759 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 16:50:04.829 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:50:04.829 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:50:04.830 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 16:50:04.849 +08:00 [DBG] =========Yi-SQL耗时0.6637毫秒=====
2024-04-09 16:50:04.850 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 16:50:04.851 +08:00 [DBG] =========Yi-SQL耗时1.5932毫秒=====
2024-04-09 16:50:04.852 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:50:04.853 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 24.1384ms
2024-04-09 16:50:04.853 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:51:38.193 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:51:38.194 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:51:38.196 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 16:51:38.198 +08:00 [DBG] =========Yi-SQL耗时1.515毫秒=====
2024-04-09 16:51:38.201 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 16:51:38.225 +08:00 [DBG] =========Yi-SQL耗时23.479毫秒=====
2024-04-09 16:51:38.230 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:51:38.230 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 36.6451ms
2024-04-09 16:51:38.230 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:51:56.723 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:51:56.723 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:51:56.724 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 16:51:56.725 +08:00 [DBG] =========Yi-SQL耗时0.865毫秒=====
2024-04-09 16:51:56.728 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 16:51:56.729 +08:00 [DBG] =========Yi-SQL耗时0.9155毫秒=====
2024-04-09 16:51:56.730 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:51:56.731 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 7.8397ms
2024-04-09 16:51:56.731 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:52:52.694 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 16:52:52.704 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:52:52.735 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"  WHERE "id" = N'899a62f0-18f0-ce50-41ec-3a11ce979d96'   
===============================

2024-04-09 16:52:52.737 +08:00 [DBG] =========Yi-SQL耗时2.4151毫秒=====
2024-04-09 16:52:52.749 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.QuestionDto'.
2024-04-09 16:52:52.750 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application) in 46.2292ms
2024-04-09 16:52:52.750 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 16:52:55.875 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 16:52:55.875 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:52:55.878 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"  WHERE "id" = N'899a62f0-18f0-ce50-41ec-3a11ce979d96'   
===============================

2024-04-09 16:52:55.878 +08:00 [DBG] =========Yi-SQL耗时0.6347毫秒=====
2024-04-09 16:52:55.887 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.QuestionDto'.
2024-04-09 16:52:55.887 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application) in 11.9015ms
2024-04-09 16:52:55.887 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 16:52:58.866 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 16:52:58.866 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:52:58.868 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"  WHERE "id" = N'899a62f0-18f0-ce50-41ec-3a11ce979d96'   
===============================

2024-04-09 16:52:58.869 +08:00 [DBG] =========Yi-SQL耗时0.7449毫秒=====
2024-04-09 16:52:58.873 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.QuestionDto'.
2024-04-09 16:52:58.873 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application) in 6.9978ms
2024-04-09 16:52:58.873 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 16:54:17.626 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:54:17.626 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:54:17.628 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 16:54:17.685 +08:00 [DBG] =========Yi-SQL耗时56.6478毫秒=====
2024-04-09 16:54:17.686 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 16:54:17.687 +08:00 [DBG] =========Yi-SQL耗时0.7318毫秒=====
2024-04-09 16:54:17.687 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:54:17.687 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 61.3628ms
2024-04-09 16:54:17.687 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:54:24.886 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:54:24.886 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:54:24.887 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 16:54:24.888 +08:00 [DBG] =========Yi-SQL耗时0.7577毫秒=====
2024-04-09 16:54:24.895 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 16:54:24.896 +08:00 [DBG] =========Yi-SQL耗时0.6684毫秒=====
2024-04-09 16:54:24.897 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:54:24.897 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 11.0278ms
2024-04-09 16:54:24.897 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:54:28.758 +08:00 [INF] Executing endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 16:54:28.758 +08:00 [INF] Route matched with {action = "GetList", controller = "Tenant", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto]] GetListAsync(Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListInput) on controller Yi.Framework.TenantManagement.Application.TenantService (Yi.Framework.TenantManagement.Application).
2024-04-09 16:54:28.760 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "yitenant"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:54:28.761 +08:00 [DBG] =========Yi-SQL耗时1.3112毫秒=====
2024-04-09 16:54:28.763 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","name","entityversion","tenantconnectionstring","dbtype","isdeleted","deleterid","deletiontime","lastmodificationtime","lastmodifierid","creationtime","creatorid","concurrencystamp" FROM "yitenant"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:54:28.764 +08:00 [DBG] =========Yi-SQL耗时0.5421毫秒=====
2024-04-09 16:54:28.764 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.TenantManagement.Application.Contracts.Dtos.TenantGetListOutputDto, Yi.Framework.TenantManagement.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:54:28.764 +08:00 [INF] Executed action Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application) in 5.9175ms
2024-04-09 16:54:28.764 +08:00 [INF] Executed endpoint 'Yi.Framework.TenantManagement.Application.TenantService.GetListAsync (Yi.Framework.TenantManagement.Application)'
2024-04-09 16:54:30.058 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:54:30.060 +08:00 [INF] Route matched with {action = "GetList", controller = "Role", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.RoleService (Yi.Framework.Rbac.Application).
2024-04-09 16:54:30.069 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "role"  WHERE ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:54:30.070 +08:00 [DBG] =========Yi-SQL耗时1.4383毫秒=====
2024-04-09 16:54:30.072 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","rolename","rolecode","remark","datascope","state" FROM "role"   WHERE ( "isdeleted" = 0 )   LIMIT 10 offset 0
===============================

2024-04-09 16:54:30.072 +08:00 [DBG] =========Yi-SQL耗时0.498毫秒=====
2024-04-09 16:54:30.074 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Role.RoleGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:54:30.074 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application) in 14.4221ms
2024-04-09 16:54:30.074 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.RoleService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:54:32.279 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:54:32.279 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:54:32.305 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 16:54:32.305 +08:00 [INF] Route matched with {action = "GetList", controller = "Dept", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.DeptService (Yi.Framework.Rbac.Application).
2024-04-09 16:54:32.306 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:54:32.307 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 16:54:32.311 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_user_sex' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:54:32.314 +08:00 [DBG] =========Yi-SQL耗时2.7842毫秒=====
2024-04-09 16:54:32.315 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"  WHERE ( "isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:54:32.317 +08:00 [DBG] =========Yi-SQL耗时2.4014毫秒=====
2024-04-09 16:54:32.319 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","deptname","deptcode","leader","parentid","remark" FROM "dept"   WHERE ( "isdeleted" = 0 )  ORDER BY "ordernum" ASC LIMIT 10 offset 0
===============================

2024-04-09 16:54:32.321 +08:00 [DBG] =========Yi-SQL耗时1.7587毫秒=====
2024-04-09 16:54:32.358 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:54:32.358 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 53.1336ms
2024-04-09 16:54:32.358 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:54:32.362 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dept.DeptGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:54:32.364 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 16:54:32.365 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application) in 59.3189ms
2024-04-09 16:54:32.365 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.DeptService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:54:32.371 +08:00 [DBG] =========Yi-SQL耗时7.0576毫秒=====
2024-04-09 16:54:32.376 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 16:54:32.379 +08:00 [DBG] =========Yi-SQL耗时3.026毫秒=====
2024-04-09 16:54:32.380 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:54:32.381 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 74.1971ms
2024-04-09 16:54:32.382 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:57:43.386 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:57:43.387 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:57:43.389 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 16:57:43.391 +08:00 [DBG] =========Yi-SQL耗时1.5848毫秒=====
2024-04-09 16:57:43.435 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 16:57:43.436 +08:00 [DBG] =========Yi-SQL耗时0.6059毫秒=====
2024-04-09 16:57:43.438 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:57:43.438 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 51.7598ms
2024-04-09 16:57:43.438 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:57:48.088 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 16:57:48.088 +08:00 [INF] Route matched with {action = "Get", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto] GetAsync(System.Guid) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:57:48.090 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"  WHERE "id" = N'899a62f0-18f0-ce50-41ec-3a11ce979d96'   
===============================

2024-04-09 16:57:48.092 +08:00 [DBG] =========Yi-SQL耗时1.1482毫秒=====
2024-04-09 16:57:48.094 +08:00 [INF] Executing ObjectResult, writing value of type 'Yi.Abp.Application.Contracts.Dtos.QuestionDto'.
2024-04-09 16:57:48.095 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application) in 6.81ms
2024-04-09 16:57:48.095 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetAsync (Yi.Abp.Application)'
2024-04-09 16:58:20.911 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:58:20.911 +08:00 [INF] Route matched with {action = "GetDicType", controller = "Dictionary", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto]] GetDicType(System.String) on controller Yi.Framework.Rbac.Application.Services.DictionaryService (Yi.Framework.Rbac.Application).
2024-04-09 16:58:20.913 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","ordernum","state","remark","listclass","cssclass","dicttype","dictlabel","dictvalue","isdefault","creationtime","creatorid","lastmodifierid","lastmodificationtime" FROM "dictionary"  WHERE (( "dicttype" = N'sys_show_hide' ) AND ( "state" = 1 ))  AND ( "isdeleted" = 0 ) 
===============================

2024-04-09 16:58:20.914 +08:00 [DBG] =========Yi-SQL耗时1.7069毫秒=====
2024-04-09 16:58:20.953 +08:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Dictionary.DictionaryGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:58:20.953 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:58:20.953 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application) in 41.8667ms
2024-04-09 16:58:20.953 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.DictionaryService.GetDicType (Yi.Framework.Rbac.Application)'
2024-04-09 16:58:20.955 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 16:58:20.962 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 16:58:20.964 +08:00 [DBG] =========Yi-SQL耗时2.7421毫秒=====
2024-04-09 16:58:21.000 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:58:21.017 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 62.3645ms
2024-04-09 16:58:21.017 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:58:21.725 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:58:21.725 +08:00 [INF] Route matched with {action = "GetList", controller = "Menu", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.MenuService (Yi.Framework.Rbac.Application).
2024-04-09 16:58:21.726 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","isdeleted","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state","menuname","menutype","permissioncode","parentid","menuicon","router","islink","iscache","isshow","remark","component","query" FROM "menu"  WHERE ( "isdeleted" = 0 )ORDER BY "ordernum" DESC 
===============================

2024-04-09 16:58:21.727 +08:00 [DBG] =========Yi-SQL耗时0.7633毫秒=====
2024-04-09 16:58:21.817 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.Menu.MenuGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:58:21.823 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application) in 98.2253ms
2024-04-09 16:58:21.823 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.MenuService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 16:58:58.097 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:58:58.097 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:58:58.099 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 16:58:58.100 +08:00 [DBG] =========Yi-SQL耗时1.2239毫秒=====
2024-04-09 16:58:58.102 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 16:58:58.104 +08:00 [DBG] =========Yi-SQL耗时1.8833毫秒=====
2024-04-09 16:58:58.106 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:58:58.107 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 9.6545ms
2024-04-09 16:58:58.107 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:59:09.190 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 16:59:09.190 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 16:59:09.192 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 16:59:09.192 +08:00 [DBG] =========Yi-SQL耗时0.7866毫秒=====
2024-04-09 16:59:09.194 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 16:59:09.195 +08:00 [DBG] =========Yi-SQL耗时0.8491毫秒=====
2024-04-09 16:59:09.196 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 16:59:09.196 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 5.8197ms
2024-04-09 16:59:09.196 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 17:00:00.075 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","creationtime","comparisonvalue","value","isfluctuate" FROM "interestrecords"    ORDER BY "creationtime" DESC LIMIT 1 offset 0
===============================

2024-04-09 17:00:00.142 +08:00 [DBG] =========Yi-SQL耗时66.3855毫秒=====
2024-04-09 17:00:00.595 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an unhandled Exception: 
System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
2024-04-09 17:00:00.599 +08:00 [ERR] Job DEFAULT.InterestRecordsJob threw an exception.
Quartz.SchedulerException: Job threw an unhandled exception.
 ---> System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)
   --- End of inner exception stack trace --- [See nested exception: System.AggregateException: One or more errors occurred. (BiyingBank获取数据异常)
 ---> System.Exception: BiyingBank获取数据异常
 ---> Newtonsoft.Json.JsonReaderException: Error reading JObject from JsonReader. Current JsonReader item is not an object: Integer. Path '', line 1, position 3.
   at Newtonsoft.Json.Linq.JObject.Load(JsonReader reader, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json, JsonLoadSettings settings)
   at Newtonsoft.Json.Linq.JObject.Parse(String json)
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 24
   --- End of inner exception stack trace ---
   at Yi.Framework.Bbs.Domain.Managers.BankValue.BiyingBankValueProvider.GetValueAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankValue\BiyingBankValueProvider.cs:line 29
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at Yi.Framework.Bbs.Domain.Managers.BankManager.GetThirdPartyValue() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 68
   at Yi.Framework.Bbs.Domain.Managers.BankManager.CreateInterestRecordsAsync() in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Domain\Managers\BankManager.cs:line 82
   at Yi.Framework.Bbs.Application.Jobs.InterestRecordsJob.Execute(IJobExecutionContext context) in D:\vs_space\Yi\Yi.Abp.Net8\module\bbs\Yi.Framework.Bbs.Application\Jobs\InterestRecordsJob.cs:line 29
   at Quartz.Core.JobRunShell.Run(CancellationToken cancellationToken)]
2024-04-09 17:00:11.462 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 17:00:11.462 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 17:00:11.464 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 17:00:11.465 +08:00 [DBG] =========Yi-SQL耗时1.186毫秒=====
2024-04-09 17:00:11.467 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 17:00:11.468 +08:00 [DBG] =========Yi-SQL耗时0.467毫秒=====
2024-04-09 17:00:11.468 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 17:00:11.468 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 5.9837ms
2024-04-09 17:00:11.468 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 17:00:37.778 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 17:00:37.778 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 17:00:37.780 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 17:00:37.781 +08:00 [DBG] =========Yi-SQL耗时0.7967毫秒=====
2024-04-09 17:00:37.784 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 17:00:37.784 +08:00 [DBG] =========Yi-SQL耗时0.5586毫秒=====
2024-04-09 17:00:37.785 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 17:00:37.785 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 6.6375ms
2024-04-09 17:00:37.785 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 17:00:40.581 +08:00 [INF] Executing endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 17:00:40.581 +08:00 [INF] Route matched with {action = "GetList", controller = "Question", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Abp.Application.Contracts.Dtos.QuestionDto]] GetListAsync(Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto) on controller Yi.Abp.Application.Services.QuestionAppService (Yi.Abp.Application).
2024-04-09 17:00:40.583 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT COUNT(1) FROM "question"  
===============================

2024-04-09 17:00:40.584 +08:00 [DBG] =========Yi-SQL耗时0.6458毫秒=====
2024-04-09 17:00:40.585 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "id","project","status","category","impact","priority","title","description","solve_user","creationtime","lastmodificationtime","lastmodifierid","creatorid","concurrencystamp" FROM "question"     LIMIT 10 offset 0
===============================

2024-04-09 17:00:40.586 +08:00 [DBG] =========Yi-SQL耗时0.9992毫秒=====
2024-04-09 17:00:40.617 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Abp.Application.Contracts.Dtos.QuestionDto, Yi.Abp.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 17:00:40.617 +08:00 [INF] Executed action Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application) in 36.0588ms
2024-04-09 17:00:40.617 +08:00 [INF] Executed endpoint 'Yi.Abp.Application.Services.QuestionAppService.GetListAsync (Yi.Abp.Application)'
2024-04-09 17:05:10.954 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 17:05:10.954 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 17:05:10.958 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 17:05:11.011 +08:00 [DBG] =========Yi-SQL耗时53.7291毫秒=====
2024-04-09 17:05:11.012 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-28 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-29 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 17:05:11.013 +08:00 [DBG] =========Yi-SQL耗时0.8888毫秒=====
2024-04-09 17:05:11.015 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 17:05:11.016 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 61.3888ms
2024-04-09 17:05:11.016 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 17:05:16.536 +08:00 [INF] Executing endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 17:05:16.536 +08:00 [INF] Route matched with {action = "GetList", controller = "User", area = ""}. Executing controller action with signature System.Threading.Tasks.Task`1[Volo.Abp.Application.Dtos.PagedResultDto`1[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto]] GetListAsync(Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListInputVo) on controller Yi.Framework.Rbac.Application.Services.System.UserService (Yi.Framework.Rbac.Application).
2024-04-09 17:05:16.538 +08:00 [DBG] 
==========Yi-SQL执行:==========
 SELECT COUNT(1) FROM (SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )   WHERE ( "user"."isdeleted" = 0 ) ) CountTable 
===============================

2024-04-09 17:05:16.539 +08:00 [DBG] =========Yi-SQL耗时1.426毫秒=====
2024-04-09 17:05:16.542 +08:00 [DBG] 
==========Yi-SQL执行:==========
SELECT "user"."id" AS "id" ,"user"."name" AS "name" ,"user"."age" AS "age" ,"user"."username" AS "username" ,"user"."icon" AS "icon" ,"user"."nick" AS "nick" ,"user"."email" AS "email" ,"user"."ip" AS "ip" ,"user"."address" AS "address" ,"user"."phone" AS "phone" ,"user"."introduction" AS "introduction" ,"user"."remark" AS "remark" ,"user"."sex" AS "sex" ,"user"."deptid" AS "deptid" ,"user"."creationtime" AS "creationtime" ,"user"."creatorid" AS "creatorid" ,"user"."state" AS "state" ,"dept"."deptname" AS "deptname" FROM  (SELECT * FROM  (SELECT "id","isdeleted","name","age","username","password","salt","icon","nick","email","ip","address","phone","introduction","remark","sex","deptid","creationtime","creatorid","lastmodifierid","lastmodificationtime","ordernum","state" FROM "user"  WHERE ( "state" = 1 )  AND (( "creationtime" >= CAST('2024-03-29 00:00:00.000' AS DATETIME) ) AND ( "creationtime" <= CAST('2024-03-30 00:00:00.000' AS DATETIME) ))  AND ( "isdeleted" = 0 ) ) MergeTable ) "user" Left JOIN "dept" "dept" ON ( "user"."deptid" = "dept"."id" ) AND ( "dept"."isdeleted" = 0 )    WHERE ( "user"."isdeleted" = 0 )  ORDER BY "user"."creationtime" DESC LIMIT 10 offset 0
===============================

2024-04-09 17:05:16.543 +08:00 [DBG] =========Yi-SQL耗时1.2815毫秒=====
2024-04-09 17:05:16.543 +08:00 [INF] Executing ObjectResult, writing value of type 'Volo.Abp.Application.Dtos.PagedResultDto`1[[Yi.Framework.Rbac.Application.Contracts.Dtos.User.UserGetListOutputDto, Yi.Framework.Rbac.Application.Contracts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-04-09 17:05:16.543 +08:00 [INF] Executed action Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application) in 7.6478ms
2024-04-09 17:05:16.543 +08:00 [INF] Executed endpoint 'Yi.Framework.Rbac.Application.Services.System.UserService.GetListAsync (Yi.Framework.Rbac.Application)'
2024-04-09 17:10:27.910 +08:00 [INF] 用户cc离开了，当前已连接0个
2024-04-09 17:10:27.911 +08:00 [INF] Executed endpoint '/hub/main'
